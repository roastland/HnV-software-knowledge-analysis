{
  "de.schildbach.wallet": {
    "qualifiedName": "de.schildbach.wallet",
    "classes": {
      "de.schildbach.wallet.Configuration": {
        "qualifiedName": "de.schildbach.wallet.Configuration",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.Configuration.armBackupReminder()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.armBackupReminder()",
            "description": {
              "What": "Arm the backup reminder by setting a boolean flag in the shared preferences.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to set a reminder for backing up their data and ensure data safety.",
              "How-to-use": "Simply call the 'armBackupReminder()' method on an instance of the Configuration class to enable the backup reminder functionality.",
              "How-it-is-done": "The method accesses the shared preferences object, edits it to put a boolean value with the key PREFS_KEY_REMIND_BACKUP set to true, and applies the changes.",
              "Property": {
                "pre-conditions": [
                  "The shared preferences object (prefs) must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The boolean flag for backup reminder is set to true in the shared preferences."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.changeLogVersionCodeCrossed(int,int)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.changeLogVersionCodeCrossed(int,int)",
            "description": {
              "What": "This method updates the change log version in the preferences and checks if the version code has crossed a triggering version code.",
              "Parameters": [
                {
                  "name": "currentVersionCode",
                  "type": "int",
                  "description": "The current version code of the application."
                },
                {
                  "name": "triggeringVersionCode",
                  "type": "int",
                  "description": "The version code that triggers the change in the change log version."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the change log version was below the triggering version code and is now above it, false otherwise."
              },
              "Why": "To keep track of the change log version and determine if it has crossed a specific version code.",
              "How-to-use": "Call this method with the current version code and the triggering version code to update the change log version and check if it has crossed the triggering version code.",
              "How-it-is-done": "The method retrieves the current change log version from preferences, checks if it was below the triggering version code and if it was used before, updates the change log version with the current version code, and returns true if the conditions are met.",
              "Property": {
                "pre-conditions": [
                  "The preferences object must be initialized and accessible."
                ],
                "post-conditions": [
                  "The change log version in preferences is updated with the current version code."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.de.schildbach.wallet.Configuration(android.content.SharedPreferences,android.content.res.Resources)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.de.schildbach.wallet.Configuration(android.content.SharedPreferences,android.content.res.Resources)",
            "description": {
              "What": "Initialize a Configuration object with SharedPreferences and Resources, setting the last version code from SharedPreferences.",
              "Parameters": [
                {
                  "name": "prefs",
                  "type": "android.content.SharedPreferences",
                  "description": "The SharedPreferences object to use for configuration settings."
                },
                {
                  "name": "res",
                  "type": "android.content.res.Resources",
                  "description": "The Resources object to use for accessing app resources."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.Configuration",
                "description": "A Configuration object initialized with the provided SharedPreferences and Resources."
              },
              "Why": "To initialize a Configuration object with necessary settings and resources for the application.",
              "How-to-use": "Create a new Configuration object by passing in a SharedPreferences and Resources object when instantiating the class.",
              "How-it-is-done": "The method assigns the passed SharedPreferences and Resources objects to class variables, and retrieves the last version code from SharedPreferences to set it in the Configuration object.",
              "Property": {
                "pre-conditions": "The prefs and res parameters must not be null.",
                "post-conditions": "The Configuration object is initialized with the provided SharedPreferences and Resources, and the last version code is set from SharedPreferences."
              }
            }
          },
          "de.schildbach.wallet.Configuration.disarmBackupReminder()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.disarmBackupReminder()",
            "description": {
              "What": "Disarms the backup reminder by setting a boolean flag to false and updating the last backup timestamp.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to disable the backup reminder feature and update the last backup timestamp.",
              "How-to-use": "Simply call the disarmBackupReminder() method on an instance of the Configuration class.",
              "How-it-is-done": "The method accesses the shared preferences, sets the remind backup flag to false, updates the last backup timestamp to the current time, and applies the changes.",
              "Property": {
                "pre-conditions": [
                  "The Configuration class instance must be properly initialized."
                ],
                "post-conditions": [
                  "The backup reminder will be disabled and the last backup timestamp will be updated."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.getBestChainHeightEver()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getBestChainHeightEver()",
            "description": {
              "What": "This method returns the best chain height ever stored in the preferences.",
              "Parameters": [],
              "Returns": {
                "type": "int",
                "description": "The best chain height ever stored in the preferences."
              },
              "Why": "To provide access to the best chain height ever stored in the preferences for use in the application.",
              "How-to-use": "Call the getBestChainHeightEver() method on an instance of Configuration to retrieve the best chain height ever stored in the preferences.",
              "How-it-is-done": "The method retrieves the best chain height ever stored in the preferences using the key PREFS_KEY_BEST_CHAIN_HEIGHT_EVER and returns it as an integer.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.Configuration.getBlockExplorer()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getBlockExplorer()",
            "description": {
              "What": "This method returns the block explorer URI stored in the preferences or a default value if not set.",
              "Parameters": [
                {
                  "name": "prefs",
                  "type": "android.content.SharedPreferences",
                  "description": "The SharedPreferences object used to retrieve the block explorer URI."
                },
                {
                  "name": "res",
                  "type": "android.content.res.Resources",
                  "description": "The Resources object used to access string arrays."
                }
              ],
              "Returns": {
                "type": "android.net.Uri",
                "description": "The block explorer URI stored in the preferences or a default value."
              },
              "Why": "To provide a way to retrieve the block explorer URI set by the user or a default value if not set.",
              "How-to-use": "Create an instance of Configuration class, pass the SharedPreferences and Resources objects to the getBlockExplorer() method, and use the returned Uri object for further processing.",
              "How-it-is-done": "The method retrieves the block explorer URI stored in the preferences using the PREFS_KEY_BLOCK_EXPLORER key, or defaults to the first value in the preferences_block_explorer_values array if not set.",
              "Property": {
                "pre-conditions": [
                  "The PREFS_KEY_BLOCK_EXPLORER key should be set in the SharedPreferences object."
                ],
                "post-conditions": [
                  "The method returns a valid block explorer URI."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.getBtcBase()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getBtcBase()",
            "description": {
              "What": "This method returns the base unit of Bitcoin (BTC) based on the configured shift value.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.core.Coin",
                "description": "The base unit of Bitcoin (BTC) based on the configured shift value."
              },
              "Why": "To provide a way to dynamically determine the base unit of Bitcoin based on the configured shift value.",
              "How-to-use": "Simply call the getBtcBase() method on an instance of Configuration class to get the base unit of Bitcoin (BTC) based on the configured shift value.",
              "How-it-is-done": "The method first retrieves the configured shift value using getBtcShift(). It then checks the shift value and returns the corresponding base unit of Bitcoin (BTC) - COIN, MILLICOIN, or MICROCOIN. If the shift value is not 0, 3, or 6, it throws an IllegalStateException.",
              "Property": {
                "pre-conditions": "The Configuration class must be properly instantiated and configured with a valid shift value.",
                "post-conditions": "The method will return the base unit of Bitcoin (BTC) based on the configured shift value."
              }
            }
          },
          "de.schildbach.wallet.Configuration.getBtcPrecision()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getBtcPrecision()",
            "description": {
              "What": "This method retrieves the Bitcoin precision value from the shared preferences or returns the default value if not set.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The Bitcoin precision value retrieved from shared preferences or the default value."
              },
              "Why": "This method is provided to allow customization of the Bitcoin precision value for the application.",
              "How-to-use": "To use this method, simply call getBtcPrecision() on an instance of Configuration to retrieve the Bitcoin precision value.",
              "How-it-is-done": "The method first retrieves the Bitcoin precision value from shared preferences, then converts the first character of the value to an integer and subtracts the ASCII value of '0'. If the value is not set, it returns the default Bitcoin precision value.",
              "Property": {
                "pre-conditions": "The shared preferences must contain a valid Bitcoin precision value.",
                "post-conditions": "The method returns the Bitcoin precision value as an integer."
              }
            }
          },
          "de.schildbach.wallet.Configuration.getBtcShift()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getBtcShift()",
            "description": {
              "What": "This method retrieves the Bitcoin shift value from the shared preferences or returns the default value if not found.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The Bitcoin shift value retrieved from shared preferences or the default value."
              },
              "Why": "This method is provided to allow users to customize the Bitcoin shift value used in the application.",
              "How-to-use": "Simply call getBtcShift() on an instance of Configuration to retrieve the Bitcoin shift value.",
              "How-it-is-done": "The method first retrieves the precision value from shared preferences, then checks if it is of length 3 to determine the shift value based on the third character, otherwise returns the default shift value.",
              "Property": {
                "pre-conditions": [
                  "The shared preferences must contain the Bitcoin precision value."
                ],
                "post-conditions": [
                  "The method returns the Bitcoin shift value either from shared preferences or the default value."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.getCachedExchangeRate()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getCachedExchangeRate()",
            "description": {
              "What": "This method retrieves a cached exchange rate from the shared preferences.",
              "Parameters": [
                {
                  "name": "prefs",
                  "type": "SharedPreferences",
                  "description": "The shared preferences object used to store the cached exchange rate data."
                }
              ],
              "Returns": {
                "type": "ExchangeRate",
                "description": "The cached exchange rate data as an ExchangeRate object, or null if the data is not found in the shared preferences."
              },
              "Why": "To provide a way to retrieve previously cached exchange rate data for use in the application.",
              "How-to-use": "Call getCachedExchangeRate() method with the SharedPreferences object as the parameter to retrieve the cached exchange rate data.",
              "How-it-is-done": "The method checks if the cached exchange rate data exists in the shared preferences, then retrieves the currency, coin value, and fiat value to create an ExchangeRate object.",
              "Property": {
                "pre-conditions": "The shared preferences object must be initialized and contain the necessary keys for cached exchange rate data.",
                "post-conditions": "The method returns the cached exchange rate data if found, or null if not found."
              }
            }
          },
          "de.schildbach.wallet.Configuration.getConnectivityNotificationEnabled()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getConnectivityNotificationEnabled()",
            "description": {
              "What": "This method returns the value of the connectivity notification enabled flag from the preferences.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "The value of the connectivity notification enabled flag."
              },
              "Why": "To provide a way to retrieve the status of the connectivity notification feature.",
              "How-to-use": "Simply call the method getConnectivityNotificationEnabled() on an instance of Configuration to get the current status of the connectivity notification feature.",
              "How-it-is-done": "The method accesses the preferences using the key PREFS_KEY_CONNECTIVITY_NOTIFICATION and returns the boolean value associated with it, defaulting to false if the key is not found.",
              "Property": {
                "pre-conditions": [
                  "The preferences must contain the key PREFS_KEY_CONNECTIVITY_NOTIFICATION."
                ],
                "post-conditions": [
                  "The method returns the value of the connectivity notification enabled flag."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.getDisclaimerEnabled()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getDisclaimerEnabled()",
            "description": {
              "What": "This method returns a boolean value indicating whether the disclaimer is enabled or not.",
              "Parameters": [],
              "Returns": {
                "type": "boolean",
                "description": "True if the disclaimer is enabled, false otherwise."
              },
              "Why": "To provide a way to check if the disclaimer is enabled in the application settings.",
              "How-to-use": "Call this method to get the current status of the disclaimer in the application.",
              "How-it-is-done": "The method retrieves the boolean value stored in the preferences using the key PREFS_KEY_DISCLAIMER.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.Configuration.getExchangeCurrencyCode()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getExchangeCurrencyCode()",
            "description": {
              "What": "This method retrieves the exchange currency code stored in the preferences.",
              "Parameters": [],
              "Returns": {
                "Type": "java.lang.String",
                "Description": "The exchange currency code retrieved from the preferences."
              },
              "Why": "To provide a way to access the exchange currency code set by the user or default value.",
              "How-to-use": "Call the method getExchangeCurrencyCode() on an instance of Configuration to retrieve the exchange currency code.",
              "How-it-is-done": "The method accesses the preferences using the key PREFS_KEY_EXCHANGE_CURRENCY and returns the stored exchange currency code.",
              "Property": {
                "Pre-conditions": "The preferences must contain a valid exchange currency code.",
                "Post-conditions": "The method returns the exchange currency code stored in the preferences, or null if not found."
              }
            }
          },
          "de.schildbach.wallet.Configuration.getFormat()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getFormat()",
            "description": {
              "What": "This method returns a MonetaryFormat object with specific formatting settings based on the configuration values of the class.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.utils.MonetaryFormat",
                "description": "A MonetaryFormat object with formatting settings based on the configuration values."
              },
              "Why": "The method is provided to allow easy access to a pre-configured MonetaryFormat object based on the configuration settings.",
              "How-to-use": "Simply call the getFormat() method on an instance of Configuration class to obtain a MonetaryFormat object with the desired formatting settings.",
              "How-it-is-done": "The method first determines the shift and minimum precision based on configuration values, then calculates the number of decimal repetitions. Finally, it creates a new MonetaryFormat object with the calculated settings and returns it.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method always returns a valid MonetaryFormat object based on the configuration values."
              }
            }
          },
          "de.schildbach.wallet.Configuration.getLastBackupTime()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getLastBackupTime()",
            "description": {
              "What": "This method returns the last backup time stored in the preferences.",
              "Parameters": [],
              "Returns": {
                "type": "long",
                "description": "The last backup time in milliseconds."
              },
              "Why": "To provide access to the last backup time stored in the configuration preferences.",
              "How-to-use": "Call getLastBackupTime() method on an instance of Configuration class to retrieve the last backup time in milliseconds.",
              "How-it-is-done": "The method retrieves the last backup time stored in the preferences using the key PREFS_KEY_LAST_BACKUP and returns it as a long value.",
              "Property": {
                "pre-conditions": [
                  "The preferences must contain a valid last backup time value."
                ],
                "post-conditions": [
                  "The method returns the last backup time in milliseconds."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.getLastExchangeDirection()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getLastExchangeDirection()",
            "description": {
              "What": "This method returns the last exchange direction stored in the preferences.",
              "Parameters": [],
              "Returns": {
                "Type": "boolean",
                "Description": "The last exchange direction, true for buy and false for sell."
              },
              "Why": "To retrieve the last exchange direction chosen by the user.",
              "How-to-use": "Call getLastExchangeDirection() on an instance of Configuration to get the last exchange direction.",
              "How-it-is-done": "The method retrieves the last exchange direction from the preferences using the key PREFS_KEY_LAST_EXCHANGE_DIRECTION and returns it.",
              "Property": {
                "Pre-conditions": "The preferences must contain a valid value for the key PREFS_KEY_LAST_EXCHANGE_DIRECTION.",
                "Post-conditions": "The method returns the last exchange direction stored in the preferences."
              }
            }
          },
          "de.schildbach.wallet.Configuration.getLastUsedAgo()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getLastUsedAgo()",
            "description": {
              "What": "The method calculates the time elapsed since the last usage of the configuration.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "long",
                "description": "The time elapsed (in milliseconds) since the last usage of the configuration."
              },
              "Why": "To provide information on how long ago the configuration was last used.",
              "How-to-use": "Simply call the method getLastUsedAgo() on an instance of Configuration to get the time elapsed since the last usage.",
              "How-it-is-done": "The method retrieves the current time in milliseconds using System.currentTimeMillis() and subtracts it from the stored time of the last usage obtained from the preferences.",
              "Property": {
                "pre-conditions": "The preferences must contain a valid value for the last used time.",
                "post-conditions": "The method returns a non-negative value representing the time elapsed since the last usage."
              }
            }
          },
          "de.schildbach.wallet.Configuration.getMaxPrecisionFormat()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getMaxPrecisionFormat()",
            "description": {
              "What": "This method returns a MonetaryFormat object with the maximum precision based on the configured BTC shift value.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.utils.MonetaryFormat",
                "description": "A MonetaryFormat object with the maximum precision based on the configured BTC shift value."
              },
              "Why": "The method is provided to allow users to get a MonetaryFormat object with the maximum precision based on the configured BTC shift value.",
              "How-to-use": "Simply call getMaxPrecisionFormat() on an instance of Configuration to get the MonetaryFormat object with the maximum precision.",
              "How-it-is-done": "The method first retrieves the BTC shift value from the Configuration object. It then constructs a MonetaryFormat object with specific settings based on the BTC shift value (0, 3, or any other value). The constructed MonetaryFormat object is then returned.",
              "Property": {
                "pre-conditions": "The Configuration object must be properly initialized before calling this method.",
                "post-conditions": "The method always returns a valid MonetaryFormat object."
              }
            }
          },
          "de.schildbach.wallet.Configuration.getOwnName()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getOwnName()",
            "description": {
              "What": "This method retrieves the own name stored in the preferences, trimming any leading or trailing whitespace and returning null if the name is empty.",
              "Parameters": [
                {
                  "name": "prefs",
                  "type": "java.util.prefs.Preferences",
                  "description": "The preferences object used to retrieve the own name."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The own name retrieved from the preferences, or null if the name is empty."
              },
              "Why": "To provide a way to retrieve the own name stored in the preferences with leading and trailing whitespace trimmed.",
              "How-to-use": "Create an instance of Configuration class, obtain the preferences object, and call getOwnName() method to retrieve the own name stored in the preferences.",
              "How-it-is-done": "The method uses the Preferences object to retrieve the own name stored with the key PREFS_KEY_OWN_NAME, trims any leading or trailing whitespace using Guava's Strings.emptyToNull() method, and returns the result.",
              "Property": {
                "pre-conditions": [
                  "The preferences object (prefs) must not be null."
                ],
                "post-conditions": [
                  "The returned own name is either a non-empty string with leading and trailing whitespace trimmed, or null if the name is empty."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.getSendCoinsAutoclose()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getSendCoinsAutoclose()",
            "description": {
              "What": "This method returns a boolean value indicating whether the 'send coins' feature should automatically close after sending coins.",
              "Parameters": [],
              "Returns": {
                "type": "boolean",
                "description": "True if the 'send coins' feature should automatically close, false otherwise."
              },
              "Why": "To provide users with the option to automatically close the 'send coins' feature after completing a transaction.",
              "How-to-use": "Call this method to retrieve the current setting for automatically closing the 'send coins' feature.",
              "How-it-is-done": "The method retrieves the boolean value stored in the preferences using the key 'PREFS_KEY_SEND_COINS_AUTOCLOSE' and returns it.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.Configuration.getTrustedPeerHost()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getTrustedPeerHost()",
            "description": {
              "What": "This method retrieves the trusted peer host from the preferences and returns it after trimming and checking for empty values.",
              "Parameters": [
                {
                  "name": "prefs",
                  "type": "java.util.prefs.Preferences",
                  "description": "The preferences object used to retrieve the trusted peer host."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The trusted peer host retrieved from the preferences, or null if it is empty."
              },
              "Why": "To provide a way to access the trusted peer host configuration stored in the preferences.",
              "How-to-use": "Create an instance of Configuration class, obtain the preferences object, and call getTrustedPeerHost() method to retrieve the trusted peer host.",
              "How-it-is-done": "The method uses the Preferences object to retrieve the trusted peer host value stored with the key PREFS_KEY_TRUSTED_PEER, trims the value, and returns it after checking for empty values.",
              "Property": {
                "pre-conditions": [
                  "The preferences object (prefs) must not be null."
                ],
                "post-conditions": [
                  "The returned value is either the trusted peer host or null if it is empty."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.getTrustedPeerOnly()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.getTrustedPeerOnly()",
            "description": {
              "What": "This method returns the value of the 'trustedPeerOnly' preference from the configuration.",
              "Parameters": [],
              "Returns": {
                "Type": "boolean",
                "Description": "The value of the 'trustedPeerOnly' preference."
              },
              "Why": "To provide a way to retrieve the value of the 'trustedPeerOnly' preference from the configuration.",
              "How-to-use": "Call this method on an instance of Configuration to get the value of the 'trustedPeerOnly' preference.",
              "How-it-is-done": "The method retrieves the boolean value of the 'trustedPeerOnly' preference from the preferences using the key PREFS_KEY_TRUSTED_PEER_ONLY.",
              "Property": {
                "Pre-conditions": "The Configuration instance must be properly initialized with the preferences set.",
                "Post-conditions": "None."
              }
            }
          },
          "de.schildbach.wallet.Configuration.hasBeenUsed()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.hasBeenUsed()",
            "description": {
              "What": "Checks if the configuration has been used before.",
              "Parameters": [],
              "Returns": {
                "type": "boolean",
                "description": "True if the configuration has been used before, false otherwise."
              },
              "Why": "To determine if the configuration has been previously used.",
              "How-to-use": "Call the hasBeenUsed() method on an instance of Configuration to check if it has been used.",
              "How-it-is-done": "The method checks if the preferences contain the key PREFS_KEY_LAST_USED and returns true if it exists, indicating that the configuration has been used before.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "The method returns true if the configuration has been used before, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.maybeIncrementBestChainHeightEver(int)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.maybeIncrementBestChainHeightEver(int)",
            "description": {
              "What": "Updates the best chain height ever if the provided height is greater than the current best chain height ever.",
              "Parameters": [
                {
                  "name": "bestChainHeightEver",
                  "type": "int",
                  "description": "The new best chain height ever to potentially update."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To keep track of the highest blockchain height reached by the wallet.",
              "How-to-use": "Call this method with the new best chain height ever as the parameter to potentially update the stored value.",
              "How-it-is-done": "Compares the provided best chain height ever with the current stored value, and if it is greater, updates the stored value in the preferences.",
              "Property": {
                "pre-conditions": [
                  "The parameter bestChainHeightEver should be a non-negative integer."
                ],
                "post-conditions": [
                  "The stored best chain height ever in the preferences will be updated if the provided height is greater than the current value."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.registerOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.registerOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener)",
            "description": {
              "What": "Registers a listener to be notified of changes to the shared preferences.",
              "Parameters": [
                {
                  "name": "listener",
                  "type": "android.content.SharedPreferences.OnSharedPreferenceChangeListener",
                  "description": "The listener to be registered."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow external classes to listen for changes in the shared preferences and react accordingly.",
              "How-to-use": "Create an instance of OnSharedPreferenceChangeListener and pass it as a parameter to registerOnSharedPreferenceChangeListener method.",
              "How-it-is-done": "The method simply delegates the registration of the listener to the SharedPreferences object associated with the Configuration class.",
              "Property": {
                "pre-conditions": [
                  "The Configuration class must have an initialized SharedPreferences object (prefs)."
                ],
                "post-conditions": [
                  "The listener will be notified of any changes in the shared preferences."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.remindBackup()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.remindBackup()",
            "description": {
              "What": "The method returns a boolean value indicating whether the user should be reminded to backup their wallet.",
              "Parameters": [],
              "Returns": {
                "type": "boolean",
                "description": "True if the user should be reminded to backup their wallet, false otherwise."
              },
              "Why": "To remind users to backup their wallet and prevent potential loss of funds.",
              "How-to-use": "Call the method remindBackup() on an instance of Configuration class to check if the user should be reminded to backup their wallet.",
              "How-it-is-done": "The method retrieves a boolean value from the preferences using the key PREFS_KEY_REMIND_BACKUP, with a default value of true if the key is not found.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.Configuration.remindBalance()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.remindBalance()",
            "description": {
              "What": "The method returns a boolean value indicating whether the user should be reminded of their balance.",
              "Parameters": [],
              "Returns": {
                "type": "boolean",
                "description": "True if the user should be reminded of their balance, false otherwise."
              },
              "Why": "To allow users to customize their experience by choosing whether they want to be reminded of their balance.",
              "How-to-use": "Call the remindBalance() method on an instance of Configuration to check if the user should be reminded of their balance.",
              "How-it-is-done": "The method retrieves a boolean value from the preferences using the key PREFS_KEY_REMIND_BALANCE, with a default value of true if the key is not found.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.Configuration.setCachedExchangeRate(de.schildbach.wallet.data.ExchangeRate)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.setCachedExchangeRate(de.schildbach.wallet.data.ExchangeRate)",
            "description": {
              "What": "This method sets the cached exchange rate in the shared preferences of the configuration object.",
              "Parameters": [
                {
                  "name": "cachedExchangeRate",
                  "type": "de.schildbach.wallet.data.ExchangeRate",
                  "description": "The exchange rate object to be cached."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To store the latest exchange rate data for future reference and quick access.",
              "How-to-use": "Create an instance of de.schildbach.wallet.data.ExchangeRate with the desired exchange rate data, then call setCachedExchangeRate method on a Configuration object passing the ExchangeRate instance as a parameter.",
              "How-it-is-done": "The method obtains a SharedPreferences.Editor instance, then stores the currency code, coin value, and fiat value of the ExchangeRate object in the shared preferences using the editor, and applies the changes.",
              "Property": {
                "pre-conditions": [
                  "The cachedExchangeRate parameter must not be null."
                ],
                "post-conditions": [
                  "The cached exchange rate data is stored in the shared preferences of the configuration object."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.setExchangeCurrencyCode(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.setExchangeCurrencyCode(java.lang.String)",
            "description": {
              "What": "This method sets the exchange currency code in the configuration preferences.",
              "Parameters": [
                {
                  "name": "exchangeCurrencyCode",
                  "type": "java.lang.String",
                  "description": "The currency code to set for the exchange."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow users to set their preferred exchange currency code for the wallet configuration.",
              "How-to-use": "To set the exchange currency code, simply call this method with the desired currency code as the parameter.",
              "How-it-is-done": "The method uses the SharedPreferences editor to put the exchange currency code into the preferences with the key PREFS_KEY_EXCHANGE_CURRENCY and applies the changes.",
              "Property": {
                "pre-conditions": "The exchangeCurrencyCode parameter must not be null.",
                "post-conditions": "The exchange currency code in the configuration preferences is updated to the value provided."
              }
            }
          },
          "de.schildbach.wallet.Configuration.setLastExchangeDirection(boolean)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.setLastExchangeDirection(boolean)",
            "description": {
              "What": "This method sets the last exchange direction in the configuration preferences.",
              "Parameters": [
                {
                  "name": "exchangeDirection",
                  "type": "boolean",
                  "description": "The exchange direction to be set."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To store the last exchange direction chosen by the user for future reference.",
              "How-to-use": "Call this method with a boolean parameter indicating the exchange direction to be set as the last one.",
              "How-it-is-done": "The method accesses the configuration preferences, edits them to put the provided exchange direction, and applies the changes.",
              "Property": {
                "pre-conditions": "The configuration preferences must be accessible and editable.",
                "post-conditions": "The last exchange direction in the configuration preferences is updated to the provided value."
              }
            }
          },
          "de.schildbach.wallet.Configuration.setRemindBalance(boolean)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.setRemindBalance(boolean)",
            "description": {
              "What": "This method sets a boolean value to remind the user about their balance.",
              "Parameters": [
                {
                  "name": "remindBalance",
                  "type": "boolean",
                  "description": "The boolean value to set for reminding the user about their balance."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow users to enable or disable reminders about their balance.",
              "How-to-use": "To set a reminder for the balance, call setRemindBalance(true); to disable the reminder, call setRemindBalance(false);",
              "How-it-is-done": "The method uses the SharedPreferences editor to store the boolean value for reminding the user about their balance in the app's preferences.",
              "Property": {
                "pre-conditions": [
                  "The method should be called after initializing the Configuration class."
                ],
                "post-conditions": [
                  "The boolean value for reminding the user about their balance is stored in the app's preferences."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.touchLastUsed()": {
            "qualifiedName": "de.schildbach.wallet.Configuration.touchLastUsed()",
            "description": {
              "What": "Updates the last used timestamp in the preferences and logs the time elapsed since the last use.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To keep track of the last time the configuration was used and provide logging information for debugging or monitoring purposes.",
              "How-to-use": "Simply call the 'touchLastUsed()' method on an instance of the 'Configuration' class to update the last used timestamp and log the time elapsed since the last use.",
              "How-it-is-done": "The method retrieves the last used timestamp from preferences, gets the current time, updates the timestamp in preferences, calculates the time elapsed since the last use in minutes, and logs this information.",
              "Property": {
                "pre-conditions": [
                  "The 'prefs' object must be initialized and accessible within the 'Configuration' class."
                ],
                "post-conditions": [
                  "The last used timestamp in preferences is updated with the current time.",
                  "A log message is generated with the time elapsed since the last use."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener)",
            "description": {
              "What": "Unregisters a listener for changes to the shared preferences.",
              "Parameters": [
                {
                  "name": "listener",
                  "type": "android.content.SharedPreferences.OnSharedPreferenceChangeListener",
                  "description": "The listener to be unregistered."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow users to stop receiving notifications about changes to the shared preferences.",
              "How-to-use": "Create an instance of OnSharedPreferenceChangeListener, register it using registerOnSharedPreferenceChangeListener(), and then unregister it using unregisterOnSharedPreferenceChangeListener() when no longer needed.",
              "How-it-is-done": "The method simply delegates the call to the unregisterOnSharedPreferenceChangeListener() method of the SharedPreferences object stored in the prefs field.",
              "Property": {
                "pre-conditions": [
                  "The listener must have been previously registered using registerOnSharedPreferenceChangeListener()."
                ],
                "post-conditions": [
                  "The listener will no longer receive notifications about changes to the shared preferences."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.updateLastBluetoothAddress(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.updateLastBluetoothAddress(java.lang.String)",
            "description": {
              "What": "Updates the last Bluetooth address stored in the configuration preferences.",
              "Parameters": [
                {
                  "name": "bluetoothAddress",
                  "type": "java.lang.String",
                  "description": "The Bluetooth address to be stored."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow the application to store and update the last Bluetooth address used for communication.",
              "How-to-use": "Call this method with the Bluetooth address as the parameter to update the stored value in the configuration preferences.",
              "How-it-is-done": "The method checks if the provided Bluetooth address is not null, then it retrieves the preferences editor, puts the Bluetooth address with the corresponding key, and applies the changes.",
              "Property": {
                "pre-conditions": [
                  "The parameter 'bluetoothAddress' should not be null."
                ],
                "post-conditions": [
                  "The last Bluetooth address in the configuration preferences is updated to the provided value."
                ]
              }
            }
          },
          "de.schildbach.wallet.Configuration.updateLastVersionCode(int)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.updateLastVersionCode(int)",
            "description": {
              "What": "Updates the last version code of the app and logs if an upgrade or downgrade is detected.",
              "Parameters": [
                {
                  "name": "currentVersionCode",
                  "type": "int",
                  "description": "The current version code of the app."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To keep track of app version changes and provide logging for upgrades or downgrades.",
              "How-to-use": "Call this method with the current version code of the app to update the last version code and log any detected upgrades or downgrades.",
              "How-it-is-done": "The method updates the last version code in the preferences, compares it with the current version code, and logs the detected change as an info or warning message.",
              "Property": {
                "pre-conditions": "The 'prefs' object must be initialized before calling this method.",
                "post-conditions": "The last version code in preferences is updated to the current version code."
              }
            }
          },
          "de.schildbach.wallet.Configuration.versionCodeCrossed(int,int)": {
            "qualifiedName": "de.schildbach.wallet.Configuration.versionCodeCrossed(int,int)",
            "description": {
              "What": "Checks if the version code has crossed a triggering version code threshold.",
              "Parameters": [
                {
                  "name": "currentVersionCode",
                  "type": "int",
                  "description": "The current version code of the application."
                },
                {
                  "name": "triggeringVersionCode",
                  "type": "int",
                  "description": "The version code threshold to check against."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the version code crossed the triggering version code threshold, false otherwise."
              },
              "Why": "To determine if a specific version code threshold has been crossed for a certain action or update.",
              "How-to-use": "Call the method with the current version code and the triggering version code to check if the threshold has been crossed.",
              "How-it-is-done": "The method calculates if the last version code was below the triggering version code, if it was used before, and if the current version code is now above the triggering version code.",
              "Property": {
                "pre-conditions": [
                  "The last version code should be initialized before calling this method."
                ],
                "post-conditions": [
                  "The method returns true if the version code crossed the triggering version code threshold and false otherwise."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.Constants": {
        "qualifiedName": "de.schildbach.wallet.Constants",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.Constants.bbd80a0a9bd32f8c3c376537752fcb0e": {
            "qualifiedName": "de.schildbach.wallet.Constants.bbd80a0a9bd32f8c3c376537752fcb0e",
            "description": {
              "What": "Initialize an OkHttpClient with specific configurations and a logging interceptor.",
              "Parameters": [
                {
                  "name": "loggingInterceptor",
                  "type": "HttpLoggingInterceptor",
                  "description": "Interceptor for logging HTTP requests and responses."
                }
              ],
              "Returns": {
                "type": "OkHttpClient",
                "description": "An OkHttpClient instance with the specified configurations."
              },
              "Why": "To provide a pre-configured OkHttpClient instance for making HTTP requests with logging capabilities.",
              "How-to-use": "Simply call this method to obtain an OkHttpClient instance with the desired configurations and logging capabilities.",
              "How-it-is-done": "The method creates a logging interceptor for HTTP requests and responses, sets various timeouts and redirect options, and adds the interceptor to the OkHttpClient builder before building the final instance.",
              "Property": {
                "pre-conditions": [
                  "None."
                ],
                "post-conditions": [
                  "An OkHttpClient instance is returned with the specified configurations and logging capabilities."
                ]
              }
            }
          },
          "de.schildbach.wallet.Constants.de.schildbach.wallet.Constants()": {
            "qualifiedName": "de.schildbach.wallet.Constants.de.schildbach.wallet.Constants()",
            "description": {
              "What": "This method is a constructor for the Constants class.",
              "Parameters": [],
              "Returns": {
                "type": "de.schildbach.wallet.Constants",
                "description": "The constructed Constants class."
              },
              "Why": "The method is provided to initialize the Constants class with default values.",
              "How-to-use": "Simply create an instance of the Constants class using the constructor.",
              "How-it-is-done": "The method does not take any parameters and simply initializes the Constants class.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "An instance of the Constants class is created."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.Constants$Files": {
        "qualifiedName": "de.schildbach.wallet.Constants$Files",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.Constants$Files.de.schildbach.wallet.Constants$Files()": {
            "qualifiedName": "de.schildbach.wallet.Constants$Files.de.schildbach.wallet.Constants$Files()",
            "description": {
              "What": "This method is a constructor for the Files class.",
              "Parameters": [],
              "Returns": {
                "type": "Files",
                "description": "The constructed Files class."
              },
              "Why": "To initialize an instance of the Files class.",
              "How-to-use": "Simply create a new instance of the Files class by calling the constructor.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the Files class.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the Files class is created."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.Logging": {
        "qualifiedName": "de.schildbach.wallet.Logging",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.Logging.de.schildbach.wallet.Logging()": {
            "qualifiedName": "de.schildbach.wallet.Logging.de.schildbach.wallet.Logging()",
            "description": {
              "What": "This method is a constructor for the Logging class.",
              "Parameters": [],
              "Returns": "Logging class instance",
              "Why": "To initialize an instance of the Logging class for logging purposes.",
              "How-to-use": "Simply create a new instance of the Logging class using the constructor.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the Logging class.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of the Logging class is created."
              }
            }
          },
          "de.schildbach.wallet.Logging.init(java.io.File)": {
            "qualifiedName": "de.schildbach.wallet.Logging.init(java.io.File)",
            "description": {
              "What": "Initializes logging for the application by setting up log files and logcat output.",
              "Parameters": [
                {
                  "name": "filesDir",
                  "type": "java.io.File",
                  "description": "The directory where log files will be stored."
                }
              ],
              "Returns": "void",
              "Why": "To provide a centralized logging mechanism for the application to track events and errors.",
              "How-to-use": "Call this method with the files directory as the parameter to set up logging for the application.",
              "How-it-is-done": "Creates a log directory within the specified files directory, sets up log file and logcat appenders with specific patterns, and configures rolling policies for log files.",
              "Property": {
                "pre-conditions": "The logFile field in Logging class must be null to initialize logging.",
                "post-conditions": "The logFile field will be set to the created log file, and logging will be configured for the application."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.WalletApplication": {
        "qualifiedName": "de.schildbach.wallet.WalletApplication",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.WalletApplication.applicationPackageFlavor()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.applicationPackageFlavor()",
            "description": {
              "What": "This method extracts the flavor of the application package name by returning the substring after the last underscore character.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The flavor of the application package name, or null if no underscore is found."
              },
              "Why": "This method is provided to easily determine the flavor of the application package name for configuration or customization purposes.",
              "How-to-use": "Simply call this method on an instance of WalletApplication to retrieve the flavor of the application package name.",
              "How-it-is-done": "The method first gets the package name, then finds the index of the last underscore character. If an underscore is found, it returns the substring after the underscore; otherwise, it returns null.",
              "Property": {
                "pre-conditions": "The package name must not be null.",
                "post-conditions": "The returned flavor is either a valid substring after the last underscore in the package name or null."
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.autosaveWalletNow()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.autosaveWalletNow()",
            "description": {
              "What": "Autosaves the wallet immediately.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to manually trigger the saving of the wallet data.",
              "How-to-use": "Simply call autosaveWalletNow() method when you want to save the wallet immediately.",
              "How-it-is-done": "The method creates a stopwatch, acquires the wallet lock, checks if walletFiles is not null, saves the wallet, logs the save operation, and handles any exceptions that may occur during the saving process.",
              "Property": {
                "pre-conditions": [
                  "The walletFiles object must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The wallet data is saved to the specified file location."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.cleanupFiles()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.cleanupFiles()",
            "description": {
              "What": "This method cleans up obsolete files in the application's file directory.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to remove unnecessary files from the application's file directory to free up storage space and maintain cleanliness.",
              "How-to-use": "Simply call the method `cleanupFiles()` on an instance of the `WalletApplication` class to clean up obsolete files in the application's file directory.",
              "How-it-is-done": "The method iterates through the list of files in the application's file directory, checks if the file name matches specific patterns indicating obsolescence, logs a message, and deletes the file if it meets the criteria.",
              "Property": {
                "pre-conditions": [
                  "The method should be called within the context of an instance of the `WalletApplication` class."
                ],
                "post-conditions": [
                  "Obsolete files matching specific patterns are deleted from the application's file directory."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.de.schildbach.wallet.WalletApplication()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.de.schildbach.wallet.WalletApplication()",
            "description": {
              "What": "Initialize a new instance of WalletApplication class.",
              "Parameters": [],
              "Returns": {
                "type": "WalletApplication",
                "description": "A new instance of WalletApplication class."
              },
              "Why": "To provide a default constructor for initializing a WalletApplication object.",
              "How-to-use": "Simply create a new instance of WalletApplication by calling new WalletApplication().",
              "How-it-is-done": "The method initializes a new instance of the WalletApplication class without any parameters.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new instance of WalletApplication class is created."
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.getConfiguration()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.getConfiguration()",
            "description": {
              "What": "This method returns the configuration object for the WalletApplication.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                },
                "Returns"
              ]
            }
          },
          "de.schildbach.wallet.WalletApplication.getWallet()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.getWallet()",
            "description": {
              "What": "This method retrieves the wallet asynchronously and returns it when loaded.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.wallet.Wallet",
                "description": "The wallet object that is retrieved asynchronously."
              },
              "Why": "The method is provided to retrieve the wallet object in an asynchronous manner to prevent blocking the UI thread.",
              "How-to-use": "Simply call getWallet() method to asynchronously retrieve the wallet object.",
              "How-it-is-done": "The method creates a SettableFuture to hold the wallet object, calls getWalletAsync() to load the wallet asynchronously, waits for the future to be completed, and then returns the wallet object.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method returns the wallet object after it has been loaded asynchronously."
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.getWalletAsync(de.schildbach.wallet.WalletApplication$OnWalletLoadedListener)": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.getWalletAsync(de.schildbach.wallet.WalletApplication$OnWalletLoadedListener)",
            "description": {
              "What": "Asynchronously loads a wallet from a file or creates a new wallet if the file does not exist, and notifies a listener when the wallet is loaded.",
              "Parameters": [
                {
                  "name": "listener",
                  "type": "de.schildbach.wallet.WalletApplication.OnWalletLoadedListener",
                  "description": "The listener to be notified when the wallet is loaded."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To load a wallet asynchronously and notify a listener when the wallet is ready, allowing for better responsiveness and separation of concerns.",
              "How-to-use": "Call getWalletAsync method with an instance of OnWalletLoadedListener to receive a callback when the wallet is loaded.",
              "How-it-is-done": "The method uses a background executor to load the wallet from a file if it exists, or creates a new wallet if the file is not found. It initializes the mnemonic code if not already done and notifies the listener when the wallet is loaded.",
              "Property": {
                "pre-conditions": [
                  "The Context must be set before calling this method."
                ],
                "post-conditions": [
                  "The listener will be notified with the loaded wallet instance."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.httpUserAgent()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.httpUserAgent()",
            "description": {
              "What": "This method returns the user agent string for HTTP requests based on the version name of the package.",
              "Parameters": [
                {
                  "name": "versionName",
                  "type": "java.lang.String",
                  "description": "The version name of the package."
                },
                "Returns"
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The user agent string for HTTP requests."
              },
              "Why": "To provide a standardized user agent string for HTTP requests based on the application's version.",
              "How-to-use": "Call the method with the version name of the package as the parameter to get the corresponding user agent string for HTTP requests.",
              "How-it-is-done": "The method internally calls another method in the same class to construct the user agent string using the provided version name.",
              "Property": {
                "pre-conditions": "The version name of the package must be available.",
                "post-conditions": "The method returns a non-null user agent string based on the provided version name."
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.httpUserAgent(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.httpUserAgent(java.lang.String)",
            "description": {
              "What": "This method generates a user agent string for HTTP requests based on the version name provided.",
              "Parameters": [
                {
                  "name": "versionName",
                  "type": "java.lang.String",
                  "description": "The version name to append to the user agent string."
                },
                "Returns"
              ],
              "type": "java.lang.String",
              "description": "The generated user agent string for HTTP requests."
            }
          },
          "de.schildbach.wallet.WalletApplication.initNotificationManager()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.initNotificationManager()",
            "description": {
              "What": "Initialize notification channels for different types of notifications on Android devices.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To set up notification channels for different types of notifications to improve user experience and organization of notifications.",
              "How-to-use": "Call this method within the WalletApplication class to initialize notification channels for different types of notifications on Android devices.",
              "How-it-is-done": "If the Android version is Oreo or higher, the method creates three notification channels with different importance levels and names using the NotificationManager service.",
              "Property": {
                "pre-conditions": [
                  "The method should only be called on devices running Android Oreo (API level 26) or higher."
                ],
                "post-conditions": [
                  "Three notification channels are created with different importance levels for received, ongoing, and important notifications."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.maxConnectedPeers()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.maxConnectedPeers()",
            "description": {
              "What": "This method returns the maximum number of connected peers based on whether the device is a low RAM device or not.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The maximum number of connected peers, either 4 for low RAM devices or 6 for other devices."
              },
              "Why": "The method is provided to limit the number of connected peers based on the device's RAM capacity to optimize performance.",
              "How-to-use": "Simply call the method `maxConnectedPeers()` on an instance of `WalletApplication` to get the maximum number of connected peers allowed.",
              "How-it-is-done": "The method checks if the device is a low RAM device using `activityManager.isLowRamDevice()` and returns 4 if true, or 6 if false.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The returned value will be either 4 or 6, depending on the device's RAM capacity."
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.onCreate()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.onCreate()",
            "description": {
              "What": "Initialize the WalletApplication by setting up various configurations and resources.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up necessary configurations, resources, and handlers for the WalletApplication to function properly.",
              "How-to-use": "Simply call the onCreate() method of the WalletApplication class to initialize the application.",
              "How-it-is-done": "The method initializes a secure random generator, sets up logging, strict mode policies, uncaught exception handler, updates configuration based on package info, handles Bluetooth settings, performs file cleanup, and initializes the notification manager.",
              "Property": {
                "pre-conditions": [
                  "The application context must be available."
                ],
                "post-conditions": [
                  "The WalletApplication is properly initialized with necessary configurations and resources."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.packageInfo()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.packageInfo()",
            "description": {
              "What": "This method retrieves the PackageInfo of the application.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "android.content.pm.PackageInfo",
                "description": "The PackageInfo object containing information about the application."
              },
              "Why": "To provide access to the PackageInfo of the application for various purposes such as version checking or displaying application information.",
              "How-to-use": "Simply call the packageInfo() method on an instance of WalletApplication to retrieve the PackageInfo object.",
              "How-it-is-done": "The method first checks if the packageInfo object is null, then attempts to retrieve the PackageInfo using the PackageManager. If the packageInfo is null, it catches any NameNotFoundException and throws a RuntimeException.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method will always return a non-null PackageInfo object."
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.processDirectTransaction(org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.processDirectTransaction(org.bitcoinj.core.Transaction)",
            "description": {
              "What": "Process a direct transaction by receiving it into the wallet and broadcasting it to the blockchain network.",
              "Parameters": [
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction to be processed."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle incoming transactions and update the wallet accordingly.",
              "How-to-use": "Call this method with a valid org.bitcoinj.core.Transaction object to process the transaction.",
              "How-it-is-done": "The method first checks if the transaction is relevant to the wallet, then receives the transaction as pending in the wallet and broadcasts it to the blockchain network using BlockchainService.",
              "Property": {
                "pre-conditions": [
                  "The wallet instance must be initialized and accessible."
                ],
                "post-conditions": [
                  "The transaction is received as pending in the wallet and broadcasted to the blockchain network."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.replaceWallet(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.replaceWallet(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Replace the current wallet with a new wallet, performing necessary cleanup and updating related components.",
              "Parameters": [
                {
                  "name": "newWallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The new wallet to replace the current wallet."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow users to switch to a new wallet instance while ensuring proper cleanup and synchronization with related components.",
              "How-to-use": "Call this method with the new wallet instance that needs to replace the current wallet in the application.",
              "How-it-is-done": "The method first cleans up the new wallet, resets the blockchain service, shuts down the old wallet, saves the new wallet to a file, updates configuration, performs auto-backup, and broadcasts a wallet reference change intent.",
              "Property": {
                "pre-conditions": [
                  "The newWallet parameter must not be null."
                ],
                "post-conditions": [
                  "The current wallet in the application is replaced with the new wallet.",
                  "Blockchain service is reset.",
                  "Wallet reference change intent is broadcasted."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.scryptIterationsTarget()": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.scryptIterationsTarget()",
            "description": {
              "What": "This method returns the target number of iterations for the scrypt key derivation function based on whether the device is a low RAM device or not.",
              "Parameters": [
                {
                  "name": "activityManager",
                  "type": "ActivityManager",
                  "description": "An instance of the ActivityManager class."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The target number of iterations for the scrypt key derivation function."
              },
              "Why": "To dynamically adjust the scrypt iterations based on the device's RAM capacity for optimal performance.",
              "How-to-use": "Create an instance of the ActivityManager class and pass it as a parameter to the scryptIterationsTarget() method to get the target number of iterations for scrypt.",
              "How-it-is-done": "The method checks if the device is a low RAM device using the ActivityManager instance and returns the corresponding target number of iterations defined in the Constants class.",
              "Property": {
                "pre-conditions": [
                  "An instance of the ActivityManager class must be provided as a parameter."
                ],
                "post-conditions": [
                  "The method returns the target number of iterations for the scrypt key derivation function based on the device's RAM capacity."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletApplication.versionLine(android.content.pm.PackageInfo)": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication.versionLine(android.content.pm.PackageInfo)",
            "description": {
              "What": "This method generates a string representing the version of the application package, including the version name and whether it is debuggable.",
              "Parameters": [
                {
                  "name": "packageInfo",
                  "type": "android.content.pm.PackageInfo",
                  "description": "The PackageInfo object containing information about the application package."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "A string representing the version of the application package, including version name and debuggable status."
              },
              "Why": "To provide a concise way to display the version information of the application package, including debuggable status.",
              "How-to-use": "Call this method with a PackageInfo object as the parameter to get a formatted string representing the version of the application package.",
              "How-it-is-done": "The method splits the package name by '.' and reverses the list to get the last element, then appends the version name and debuggable status if applicable.",
              "Property": {
                "pre-conditions": [
                  "The packageInfo parameter must not be null."
                ],
                "post-conditions": [
                  "The returned string will contain the version name and debuggable status of the application package."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.WalletApplication$OnWalletLoadedListener": {
        "qualifiedName": "de.schildbach.wallet.WalletApplication$OnWalletLoadedListener",
        "kind": "interface",
        "methods": {
          "de.schildbach.wallet.WalletApplication$OnWalletLoadedListener.onWalletLoaded(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.WalletApplication$OnWalletLoadedListener.onWalletLoaded(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method is called when a wallet is loaded in the application.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that has been loaded."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return anything."
            }
          }
        }
      },
      "de.schildbach.wallet.WalletBalanceWidgetProvider": {
        "qualifiedName": "de.schildbach.wallet.WalletBalanceWidgetProvider",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.WalletBalanceWidgetProvider.de.schildbach.wallet.WalletBalanceWidgetProvider()": {
            "qualifiedName": "de.schildbach.wallet.WalletBalanceWidgetProvider.de.schildbach.wallet.WalletBalanceWidgetProvider()",
            "description": {
              "What": "Initialize a new instance of WalletBalanceWidgetProvider.",
              "Parameters": [],
              "Returns": "WalletBalanceWidgetProvider",
              "Why": "To provide a constructor for creating instances of WalletBalanceWidgetProvider.",
              "How-to-use": "Simply call the constructor to create a new instance of WalletBalanceWidgetProvider.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of WalletBalanceWidgetProvider.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "A new instance of WalletBalanceWidgetProvider is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletBalanceWidgetProvider.getAppWidgetOptions(android.appwidget.AppWidgetManager,int)": {
            "qualifiedName": "de.schildbach.wallet.WalletBalanceWidgetProvider.getAppWidgetOptions(android.appwidget.AppWidgetManager,int)",
            "description": {
              "What": "This method retrieves the options for a specific app widget from the AppWidgetManager.",
              "Parameters": [
                {
                  "name": "appWidgetManager",
                  "type": "android.appwidget.AppWidgetManager",
                  "description": "The AppWidgetManager instance to use for retrieving the widget options."
                },
                {
                  "name": "appWidgetId",
                  "type": "int",
                  "description": "The ID of the app widget for which to retrieve the options."
                }
              ],
              "Returns": {
                "type": "android.os.Bundle",
                "description": "The options for the specified app widget, or null if an exception occurs."
              },
              "Why": "This method is provided to allow developers to access the options set for a specific app widget.",
              "How-to-use": "To use this method, pass an instance of AppWidgetManager and the ID of the app widget for which you want to retrieve options.",
              "How-it-is-done": "The method uses reflection to invoke the getAppWidgetOptions method on the AppWidgetManager class, passing the appWidgetId as an argument. It then returns the retrieved options as a Bundle.",
              "Property": {
                "pre-conditions": [
                  "The appWidgetManager parameter must not be null.",
                  "The appWidgetId must be a valid ID for an existing app widget."
                ],
                "post-conditions": [
                  "The method returns the options for the specified app widget, or null if an exception occurs."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletBalanceWidgetProvider.onAppWidgetOptionsChanged(android.content.Context,android.appwidget.AppWidgetManager,int,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.WalletBalanceWidgetProvider.onAppWidgetOptionsChanged(android.content.Context,android.appwidget.AppWidgetManager,int,android.os.Bundle)",
            "description": {
              "What": "This method is called when the options of an app widget are changed, updating the widget with the new options, balance, and exchange rate.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                },
                {
                  "name": "appWidgetManager",
                  "type": "android.appwidget.AppWidgetManager",
                  "description": "The AppWidgetManager instance."
                },
                {
                  "name": "appWidgetId",
                  "type": "int",
                  "description": "The ID of the app widget."
                },
                {
                  "name": "newOptions",
                  "type": "android.os.Bundle",
                  "description": "The new options for the app widget."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle changes in app widget options and update the widget accordingly.",
              "How-to-use": "Override this method in a custom AppWidgetProvider class and implement the necessary logic to update the widget based on the new options, balance, and exchange rate.",
              "How-it-is-done": "When the options change, the method logs the new minimum width, retrieves the balance and exchange rate from the application, updates the widget using the new options, balance, and exchange rate, and finishes asynchronously.",
              "Property": {
                "pre-conditions": [
                  "The context, appWidgetManager, appWidgetId, and newOptions must not be null."
                ],
                "post-conditions": [
                  "The widget is updated with the new options, balance, and exchange rate."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletBalanceWidgetProvider.onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])": {
            "qualifiedName": "de.schildbach.wallet.WalletBalanceWidgetProvider.onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])",
            "description": {
              "What": "This method updates the widgets displaying the wallet balance and exchange rate for a Bitcoin wallet application.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                },
                {
                  "name": "appWidgetManager",
                  "type": "android.appwidget.AppWidgetManager",
                  "description": "The manager for the app widgets."
                },
                {
                  "name": "appWidgetIds",
                  "type": "int[]",
                  "description": "An array of widget IDs to be updated."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To asynchronously update the widgets with the latest wallet balance and exchange rate without blocking the main UI thread.",
              "How-to-use": "Call this method passing the context, appWidgetManager, and appWidgetIds to update the widgets with the latest balance and exchange rate.",
              "How-it-is-done": "The method uses an AsyncTask to perform the update operation in the background, fetching the balance and exchange rate from the application, and then calling the updateWidgets method to update the widgets with the new data.",
              "Property": {
                "pre-conditions": [
                  "The application context must be valid and not null.",
                  "The appWidgetManager must be initialized and not null.",
                  "The appWidgetIds array must contain valid widget IDs."
                ],
                "post-conditions": [
                  "The widgets specified by appWidgetIds will be updated with the latest balance and exchange rate information."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletBalanceWidgetProvider.updateWidget(android.content.Context,android.appwidget.AppWidgetManager,int,android.os.Bundle,org.bitcoinj.core.Coin,de.schildbach.wallet.data.ExchangeRate)": {
            "qualifiedName": "de.schildbach.wallet.WalletBalanceWidgetProvider.updateWidget(android.content.Context,android.appwidget.AppWidgetManager,int,android.os.Bundle,org.bitcoinj.core.Coin,de.schildbach.wallet.data.ExchangeRate)",
            "description": {
              "What": "Updates a widget displaying the balance of a Bitcoin wallet with optional exchange rate information.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                },
                {
                  "name": "appWidgetManager",
                  "type": "android.appwidget.AppWidgetManager",
                  "description": "Manages the set of AppWidget views for the application."
                },
                {
                  "name": "appWidgetId",
                  "type": "int",
                  "description": "The AppWidget id to be updated."
                },
                {
                  "name": "appWidgetOptions",
                  "type": "android.os.Bundle",
                  "description": "Options for the AppWidget."
                },
                {
                  "name": "balance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The balance of the Bitcoin wallet."
                },
                {
                  "name": "exchangeRate",
                  "type": "de.schildbach.wallet.data.ExchangeRate",
                  "description": "The exchange rate information for converting balance to local currency."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to update a widget displaying Bitcoin wallet balance and exchange rate information.",
              "How-to-use": "Call this method with the required parameters to update the widget with the provided balance and exchange rate information.",
              "How-it-is-done": "The method retrieves the application context, formats the balance and local balance strings, sets the appropriate currency symbol, updates the widget views, and sets click actions for different buttons.",
              "Property": {
                "pre-conditions": [
                  "The context, appWidgetManager, appWidgetId, and balance parameters must not be null."
                ],
                "post-conditions": [
                  "The widget for the specified appWidgetId is updated with the balance and exchange rate information."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletBalanceWidgetProvider.updateWidgets(android.content.Context,android.appwidget.AppWidgetManager,int[],org.bitcoinj.core.Coin,de.schildbach.wallet.data.ExchangeRate)": {
            "qualifiedName": "de.schildbach.wallet.WalletBalanceWidgetProvider.updateWidgets(android.content.Context,android.appwidget.AppWidgetManager,int[],org.bitcoinj.core.Coin,de.schildbach.wallet.data.ExchangeRate)",
            "description": {
              "What": "Updates the widgets with the given balance and exchange rate.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                },
                {
                  "name": "appWidgetManager",
                  "type": "android.appwidget.AppWidgetManager",
                  "description": "The AppWidgetManager instance."
                },
                {
                  "name": "appWidgetIds",
                  "type": "int[]",
                  "description": "An array of widget ids to update."
                },
                {
                  "name": "balance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The balance to display on the widgets."
                },
                {
                  "name": "exchangeRate",
                  "type": "de.schildbach.wallet.data.ExchangeRate",
                  "description": "The exchange rate to use for conversion."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the widgets with the latest balance and exchange rate information.",
              "How-to-use": "Call this method with the context, AppWidgetManager, array of widget ids, balance, and exchange rate to update the widgets.",
              "How-it-is-done": "Iterates over the array of widget ids, retrieves the widget options, and then calls the updateWidget method to update each widget with the provided balance and exchange rate.",
              "Property": {
                "pre-conditions": [
                  "The context and AppWidgetManager must not be null.",
                  "The appWidgetIds array must not be empty.",
                  "The balance and exchangeRate parameters must not be null."
                ],
                "post-conditions": [
                  "All widgets specified by the appWidgetIds array will be updated with the new balance and exchange rate."
                ]
              }
            }
          },
          "de.schildbach.wallet.WalletBalanceWidgetProvider.updateWidgets(android.content.Context,org.bitcoinj.core.Coin,de.schildbach.wallet.data.ExchangeRate)": {
            "qualifiedName": "de.schildbach.wallet.WalletBalanceWidgetProvider.updateWidgets(android.content.Context,org.bitcoinj.core.Coin,de.schildbach.wallet.data.ExchangeRate)",
            "description": {
              "What": "Update the widgets displaying the wallet balance and exchange rate.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                },
                {
                  "name": "balance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The wallet balance to be displayed."
                },
                {
                  "name": "exchangeRate",
                  "type": "de.schildbach.wallet.data.ExchangeRate",
                  "description": "The exchange rate to be displayed alongside the balance."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the widgets on the user interface with the latest wallet balance and exchange rate information.",
              "How-to-use": "Call this method with the context, wallet balance, and exchange rate parameters to update the widgets on the UI.",
              "How-it-is-done": "The method retrieves the AppWidgetManager and ComponentName, then gets the appWidgetIds. It then calls the updateWidgets method passing the context, appWidgetManager, appWidgetIds, balance, and exchangeRate.",
              "Property": {
                "pre-conditions": "The context, balance, and exchangeRate parameters must not be null.",
                "post-conditions": "The widgets displaying the wallet balance and exchange rate are updated with the latest information."
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.data": {
    "qualifiedName": "de.schildbach.wallet.data",
    "classes": {
      "de.schildbach.wallet.data.AbstractWalletLiveData": {
        "qualifiedName": "de.schildbach.wallet.data.AbstractWalletLiveData",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.data.AbstractWalletLiveData.de.schildbach.wallet.data.AbstractWalletLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.data.AbstractWalletLiveData.de.schildbach.wallet.data.AbstractWalletLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initializes an instance of AbstractWalletLiveData with the provided WalletApplication.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance to be used."
                }
              ],
              "Returns": {
                "type": "AbstractWalletLiveData",
                "description": "An instance of AbstractWalletLiveData initialized with the provided WalletApplication."
              },
              "Why": "To set up the necessary components for LiveData functionality within the context of a WalletApplication.",
              "How-to-use": "Create a new instance of AbstractWalletLiveData by passing a WalletApplication instance as the parameter.",
              "How-it-is-done": "The method initializes the AbstractWalletLiveData by assigning the provided WalletApplication to the 'application' field and obtaining a LocalBroadcastManager instance from the application.",
              "Property": {
                "pre-conditions": [
                  "The 'application' parameter must not be null."
                ],
                "post-conditions": [
                  "The AbstractWalletLiveData instance is initialized with the provided WalletApplication.",
                  "The broadcastManager field is set to a LocalBroadcastManager instance obtained from the application."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.AbstractWalletLiveData.de.schildbach.wallet.data.AbstractWalletLiveData(de.schildbach.wallet.WalletApplication,long)": {
            "qualifiedName": "de.schildbach.wallet.data.AbstractWalletLiveData.de.schildbach.wallet.data.AbstractWalletLiveData(de.schildbach.wallet.WalletApplication,long)",
            "description": {
              "What": "Initialize an instance of AbstractWalletLiveData with a specified throttle time and application context.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The application context to be used."
                },
                {
                  "name": "throttleMs",
                  "type": "long",
                  "description": "The throttle time in milliseconds."
                }
              ],
              "Returns": {
                "type": "AbstractWalletLiveData",
                "description": "An instance of AbstractWalletLiveData initialized with the provided parameters."
              },
              "Why": "To create a LiveData object that can observe changes in the wallet data with a specified throttle time.",
              "How-to-use": "Create an instance of WalletApplication and pass it along with the throttle time in milliseconds to the constructor of AbstractWalletLiveData.",
              "How-it-is-done": "The constructor initializes the AbstractWalletLiveData with the provided application context and throttle time, and also initializes a LocalBroadcastManager for handling local broadcasts.",
              "Property": {
                "pre-conditions": [
                  "The application context must not be null.",
                  "The throttle time must be a non-negative value."
                ],
                "post-conditions": [
                  "An instance of AbstractWalletLiveData is successfully initialized."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.AbstractWalletLiveData.getWallet()": {
            "qualifiedName": "de.schildbach.wallet.data.AbstractWalletLiveData.getWallet()",
            "description": {
              "What": "This method returns the wallet associated with the AbstractWalletLiveData instance.",
              "Parameters": [],
              "Returns": {
                "type": "org.bitcoinj.wallet.Wallet",
                "description": "The wallet associated with the AbstractWalletLiveData instance."
              },
              "Why": "To provide access to the wallet object stored within the AbstractWalletLiveData class.",
              "How-to-use": "Simply call this method on an instance of AbstractWalletLiveData to retrieve the associated wallet object.",
              "How-it-is-done": "The method simply returns the 'wallet' instance variable that is stored within the AbstractWalletLiveData class.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "The method will always return the wallet object associated with the AbstractWalletLiveData instance."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.AbstractWalletLiveData.loadWallet()": {
            "qualifiedName": "de.schildbach.wallet.data.AbstractWalletLiveData.loadWallet()",
            "description": {
              "What": "This method loads the wallet asynchronously from the application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application instance that provides access to the wallet."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow loading the wallet data in a separate thread to prevent blocking the main thread.",
              "How-to-use": "Create an instance of the class that extends AbstractWalletLiveData, pass the application instance to the loadWallet() method, and implement the onWalletLoadedListener to handle the loaded wallet data.",
              "How-it-is-done": "The method calls the getWalletAsync() method of the application instance, passing the onWalletLoadedListener as a callback to handle the loaded wallet data asynchronously.",
              "Property": {
                "pre-conditions": [
                  "The application instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The wallet data will be loaded asynchronously and can be accessed through the onWalletLoadedListener callback."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.AbstractWalletLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.data.AbstractWalletLiveData.onActive()",
            "description": {
              "What": "Registers a broadcast receiver for wallet reference changes and loads the wallet data.",
              "Parameters": [
                {
                  "name": "walletReferenceChangeReceiver",
                  "type": "BroadcastReceiver",
                  "description": "The broadcast receiver for wallet reference changes."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle wallet reference changes and update the wallet data accordingly.",
              "How-to-use": "Extend the AbstractWalletLiveData class and implement the onActive method with the necessary logic to register the receiver and load the wallet data.",
              "How-it-is-done": "The method registers a broadcast receiver for the ACTION_WALLET_REFERENCE_CHANGED intent and calls the loadWallet method to load the wallet data.",
              "Property": {
                "pre-conditions": [
                  "The walletReferenceChangeReceiver parameter must not be null."
                ],
                "post-conditions": [
                  "The broadcast receiver is registered for wallet reference changes.",
                  "The wallet data is loaded."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.AbstractWalletLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.data.AbstractWalletLiveData.onInactive()",
            "description": {
              "What": "This method is called when the LiveData object is no longer active, and it performs necessary clean-up tasks related to the wallet data.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "Wallet",
                  "description": "The wallet object associated with the LiveData."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to handle the deactivation of the LiveData object and perform clean-up tasks specific to the wallet data.",
              "How-to-use": "Extend the AbstractWalletLiveData class and implement the onWalletInactive() method to handle wallet-specific clean-up tasks. Ensure that the wallet object is set before calling this method.",
              "How-it-is-done": "If the wallet object is not null, the onWalletInactive() method is called to perform wallet-specific clean-up tasks. Then, the broadcast receiver for wallet reference changes is unregistered.",
              "Property": {
                "pre-conditions": [
                  "The wallet object should be set before calling this method."
                ],
                "post-conditions": [
                  "The wallet-specific clean-up tasks are performed if the wallet object is not null.",
                  "The broadcast receiver for wallet reference changes is unregistered."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.AbstractWalletLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.data.AbstractWalletLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method is called when a wallet becomes active.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that has become active."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a hook for subclasses to perform actions when a wallet becomes active.",
              "How-to-use": "Subclasses should override this method to define custom behavior when a wallet becomes active, such as updating UI elements or starting background tasks.",
              "How-it-is-done": "When a wallet becomes active, this method is called with the active wallet as a parameter. Subclasses can then implement custom logic based on the active wallet.",
              "Property": {
                "pre-conditions": "The wallet parameter should not be null.",
                "post-conditions": "No specific post-conditions for this method."
              }
            }
          },
          "de.schildbach.wallet.data.AbstractWalletLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.data.AbstractWalletLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method is called when the wallet becomes inactive.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that became inactive."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow subclasses to perform specific actions when the wallet becomes inactive.",
              "How-to-use": "Subclasses can override this method to implement custom behavior when the wallet becomes inactive, such as saving data or updating UI.",
              "How-it-is-done": "The method is empty by default and needs to be overridden by subclasses to add specific functionality when the wallet becomes inactive.",
              "Property": {
                "pre-conditions": "The wallet must be active before becoming inactive.",
                "post-conditions": "Any actions specified in the method implementation are executed when the wallet becomes inactive."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.AddressBookDao": {
        "qualifiedName": "de.schildbach.wallet.data.AddressBookDao",
        "kind": "interface",
        "methods": {
          "de.schildbach.wallet.data.AddressBookDao.delete(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.AddressBookDao.delete(java.lang.String)",
            "description": {
              "What": "Deletes an entry from the address book with the specified address.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The address of the entry to be deleted."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to delete specific entries from the address book.",
              "How-to-use": "Call the method with the address of the entry to be deleted as the parameter.",
              "How-it-is-done": "The method uses a Room query to delete the entry from the 'address_book' table where the address matches the specified address parameter.",
              "Property": {
                "pre-conditions": [
                  "The address book entry with the specified address must exist."
                ],
                "post-conditions": [
                  "The entry with the specified address is removed from the address book."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.AddressBookDao.get(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.AddressBookDao.get(java.lang.String)",
            "description": {
              "What": "Retrieve a list of address book entries that match the given constraint.",
              "Parameters": [
                {
                  "name": "constraint",
                  "type": "java.lang.String",
                  "description": "The constraint to match against address or label."
                }
              ],
              "Returns": {
                "type": "java.util.List<de.schildbach.wallet.data.AddressBookEntry>",
                "description": "A list of address book entries that match the constraint."
              },
              "Why": "To provide a method for retrieving address book entries based on a search constraint.",
              "How-to-use": "Call the method with a constraint string to search for matching address book entries.",
              "How-it-is-done": "The method executes a SQL query using Room's @Query annotation to retrieve address book entries that match the given constraint by searching for the constraint in the address or label fields and ordering the results by label in a case-insensitive manner.",
              "Property": {
                "pre-conditions": [
                  "The Room database containing the address book entries must be initialized and accessible."
                ],
                "post-conditions": [
                  "A list of address book entries that match the constraint is returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.AddressBookDao.getAll()": {
            "qualifiedName": "de.schildbach.wallet.data.AddressBookDao.getAll()",
            "description": {
              "What": "Retrieve all address book entries from the database ordered by label in localized collation.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "android.arch.lifecycle.LiveData<java.util.List<de.schildbach.wallet.data.AddressBookEntry>>",
                "description": "A LiveData object containing a list of AddressBookEntry objects."
              },
              "Why": "To provide a way to retrieve all address book entries in a specific order for display or processing purposes.",
              "How-to-use": "Obtain an instance of AddressBookDao and call the getAll() method to receive a LiveData object that will automatically update when the database changes.",
              "How-it-is-done": "The method executes a Room query to select all entries from the address_book table, ordering them by the label column in localized collation. The result is returned as a LiveData object.",
              "Property": {
                "pre-conditions": "The database must be properly initialized and connected.",
                "post-conditions": "The returned LiveData object will reflect the current state of the address book entries in the database."
              }
            }
          },
          "de.schildbach.wallet.data.AddressBookDao.getAllExcept(java.util.Set)": {
            "qualifiedName": "de.schildbach.wallet.data.AddressBookDao.getAllExcept(java.util.Set)",
            "description": {
              "What": "Retrieve all address book entries except those specified in the given set of addresses.",
              "Parameters": [
                {
                  "name": "except",
                  "type": "java.util.Set<java.lang.String>",
                  "description": "Set of addresses to exclude from the result."
                }
              ],
              "Returns": {
                "type": "android.arch.lifecycle.LiveData<java.util.List<de.schildbach.wallet.data.AddressBookEntry>>",
                "description": "LiveData containing a list of AddressBookEntry objects."
              },
              "Why": "To provide a method for retrieving all address book entries except for a specified set of addresses.",
              "How-to-use": "Call getAllExcept method with a Set of addresses to exclude, and observe the LiveData result to get the list of address book entries.",
              "How-it-is-done": "The method executes a Room query to select all address book entries where the address is not in the provided set, ordered by label in localized collation.",
              "Property": {
                "pre-conditions": "The provided Set of addresses must not be null.",
                "post-conditions": "The returned LiveData object will contain a list of AddressBookEntry objects excluding the addresses specified in the input set."
              }
            }
          },
          "de.schildbach.wallet.data.AddressBookDao.insertOrUpdate(de.schildbach.wallet.data.AddressBookEntry)": {
            "qualifiedName": "de.schildbach.wallet.data.AddressBookDao.insertOrUpdate(de.schildbach.wallet.data.AddressBookEntry)",
            "description": {
              "What": "Inserts or updates an AddressBookEntry object in the database.",
              "Parameters": [
                {
                  "name": "addressBookEntry",
                  "type": "de.schildbach.wallet.data.AddressBookEntry",
                  "description": "The AddressBookEntry object to be inserted or updated."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow for easy insertion or updating of AddressBookEntry objects in the database.",
              "How-to-use": "Simply call this method with the AddressBookEntry object that you want to insert or update in the database.",
              "How-it-is-done": "The method uses the @Insert annotation with the OnConflictStrategy.REPLACE option to either insert a new AddressBookEntry or update an existing one based on its primary key.",
              "Property": {
                "pre-conditions": "The AddressBookEntry object must not be null.",
                "post-conditions": "The AddressBookEntry object will be inserted into the database if it does not already exist, or updated if it does."
              }
            }
          },
          "de.schildbach.wallet.data.AddressBookDao.resolveLabel(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.AddressBookDao.resolveLabel(java.lang.String)",
            "description": {
              "What": "This method resolves the label associated with a given address in the address book database.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The address for which the label needs to be resolved."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The label associated with the provided address."
              },
              "Why": "To retrieve the label associated with a specific address stored in the address book.",
              "How-to-use": "Call the method 'resolveLabel' with the address as a parameter to get the label associated with that address from the address book database.",
              "How-it-is-done": "The method executes a query on the 'address_book' table in the database to select the label corresponding to the provided address.",
              "Property": {
                "pre-conditions": [
                  "The address book database must be properly initialized and accessible."
                ],
                "post-conditions": [
                  "The method returns the label associated with the provided address, if it exists in the address book database."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.AddressBookEntry": {
        "qualifiedName": "de.schildbach.wallet.data.AddressBookEntry",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.AddressBookEntry.asMap(java.util.List)": {
            "qualifiedName": "de.schildbach.wallet.data.AddressBookEntry.asMap(java.util.List)",
            "description": {
              "What": "Converts a list of AddressBookEntry objects into a map with the address as the key and the entry as the value.",
              "Parameters": [
                {
                  "name": "entries",
                  "type": "java.util.List<de.schildbach.wallet.data.AddressBookEntry>",
                  "description": "The list of AddressBookEntry objects to be converted into a map."
                }
              ],
              "Returns": {
                "type": "java.util.Map<java.lang.String, de.schildbach.wallet.data.AddressBookEntry>",
                "description": "A map with the address as the key and the AddressBookEntry object as the value."
              },
              "Why": "To provide a convenient way to access AddressBookEntry objects by their address.",
              "How-to-use": "Call the method with a list of AddressBookEntry objects as the parameter, and it will return a map with the address as the key and the entry as the value.",
              "How-it-is-done": "The method first checks if the input list is not null, then creates a new HashMap. It iterates over the list of entries, putting each entry's address as the key and the entry itself as the value in the map.",
              "Property": {
                "pre-conditions": [
                  "The 'entries' parameter should not be null."
                ],
                "post-conditions": [
                  "The returned map will have unique addresses as keys, and each address will map to a single AddressBookEntry object."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.AddressBookEntry.de.schildbach.wallet.data.AddressBookEntry(java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.AddressBookEntry.de.schildbach.wallet.data.AddressBookEntry(java.lang.String,java.lang.String)",
            "description": {
              "What": "This method initializes an AddressBookEntry object with the provided address and label.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The address to be associated with the entry."
                },
                {
                  "name": "label",
                  "type": "java.lang.String",
                  "description": "The label or name to be associated with the address."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.AddressBookEntry",
                "description": "A new AddressBookEntry object with the provided address and label."
              },
              "Why": "To create an instance of AddressBookEntry with the necessary information for address book management.",
              "How-to-use": "Create a new AddressBookEntry object by passing the address and label as parameters to the constructor.",
              "How-it-is-done": "The constructor sets the 'address' and 'label' fields of the AddressBookEntry object to the values provided as parameters.",
              "Property": {
                "pre-conditions": "The 'address' and 'label' parameters must not be null.",
                "post-conditions": "A new AddressBookEntry object is created with the specified address and label."
              }
            }
          },
          "de.schildbach.wallet.data.AddressBookEntry.getAddress()": {
            "qualifiedName": "de.schildbach.wallet.data.AddressBookEntry.getAddress()",
            "description": {
              "What": "This method returns the address stored in the AddressBookEntry object.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The address stored in the AddressBookEntry object."
              },
              "Why": "To provide a way to retrieve the address information stored in an AddressBookEntry object.",
              "How-to-use": "Create an instance of AddressBookEntry, set the address using setAddress() method, and then retrieve the address using getAddress() method.",
              "How-it-is-done": "The method simply returns the value of the 'address' field stored in the AddressBookEntry object.",
              "Property": {
                "pre-conditions": "The AddressBookEntry object must have a valid address stored in it.",
                "post-conditions": "The method will return the address stored in the AddressBookEntry object."
              }
            }
          },
          "de.schildbach.wallet.data.AddressBookEntry.getLabel()": {
            "qualifiedName": "de.schildbach.wallet.data.AddressBookEntry.getLabel()",
            "description": {
              "What": "This method returns the label associated with the address book entry.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The label associated with the address book entry."
              },
              "Why": "To provide a way to retrieve the label information stored in the address book entry.",
              "How-to-use": "Simply call the getLabel() method on an instance of AddressBookEntry to retrieve the label string.",
              "How-it-is-done": "The method simply returns the value of the 'label' field of the AddressBookEntry instance.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method will always return the label string associated with the address book entry."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.AppDatabase": {
        "qualifiedName": "de.schildbach.wallet.data.AppDatabase",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.data.AppDatabase.addressBookDao()": {
            "qualifiedName": "de.schildbach.wallet.data.AppDatabase.addressBookDao()",
            "description": {
              "What": "This method returns an instance of AddressBookDao for accessing the address book data in the database.",
              "Parameters": [],
              "Returns": {
                "Type": "de.schildbach.wallet.data.AddressBookDao",
                "Description": "An instance of AddressBookDao for accessing the address book data."
              },
              "Why": "To provide a way to interact with the address book data stored in the database.",
              "How-to-use": "Call this method on an instance of AppDatabase to obtain an AddressBookDao object, which can then be used to perform operations on the address book data.",
              "How-it-is-done": "The method internally creates and returns an instance of AddressBookDao, which is used to interact with the address book data stored in the database.",
              "Property": {
                "Pre-conditions": "The AppDatabase instance must be properly initialized and connected to a database.",
                "Post-conditions": "The returned AddressBookDao object can be used to perform operations on the address book data."
              }
            }
          },
          "de.schildbach.wallet.data.AppDatabase.de.schildbach.wallet.data.AppDatabase()": {
            "qualifiedName": "de.schildbach.wallet.data.AppDatabase.de.schildbach.wallet.data.AppDatabase()",
            "description": {
              "method": {
                "What": "Initialize an instance of the AppDatabase class.",
                "Parameters": [],
                "Returns": "AppDatabase instance",
                "Why": "To provide a way to create an instance of the AppDatabase class.",
                "How-to-use": "Simply call the constructor to create a new instance of the AppDatabase class.",
                "How-it-is-done": "The constructor initializes a new instance of the AppDatabase class.",
                "Property": {
                  "pre-conditions": [],
                  "post-conditions": [
                    "A new instance of the AppDatabase class is created."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.data.AppDatabase.getDatabase(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.data.AppDatabase.getDatabase(android.content.Context)",
            "description": {
              "What": "This method returns an instance of the AppDatabase class using Room database builder pattern.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to create the database instance."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.AppDatabase",
                "description": "The instance of the AppDatabase class."
              },
              "Why": "To provide a singleton instance of the database for the application to access and manage data.",
              "How-to-use": "Call this method passing the application context to get an instance of the database for data operations.",
              "How-it-is-done": "The method checks if the database instance is null, then synchronizes the creation of the instance using Room database builder pattern with migrations and main thread queries allowed.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "The method returns a non-null instance of the AppDatabase class."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.BlockchainStateLiveData": {
        "qualifiedName": "de.schildbach.wallet.data.BlockchainStateLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.BlockchainStateLiveData.de.schildbach.wallet.data.BlockchainStateLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.data.BlockchainStateLiveData.de.schildbach.wallet.data.BlockchainStateLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a LiveData object to observe changes in blockchain state for a wallet application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The wallet application instance to be used for blockchain state updates."
                }
              ],
              "Returns": {
                "type": "BlockchainStateLiveData",
                "description": "A LiveData object for observing changes in blockchain state."
              },
              "Why": "To provide a reactive way to monitor blockchain state changes within the wallet application.",
              "How-to-use": "Create an instance of BlockchainStateLiveData by passing a WalletApplication instance, then observe changes in blockchain state using LiveData observers.",
              "How-it-is-done": "The method initializes the LiveData object with the provided WalletApplication instance and sets up a LocalBroadcastManager for broadcasting blockchain state changes.",
              "Property": {
                "pre-conditions": [
                  "The WalletApplication instance must not be null."
                ],
                "post-conditions": [
                  "A LiveData object for observing blockchain state changes is successfully initialized."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.BlockchainStateLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.data.BlockchainStateLiveData.onActive()",
            "description": {
              "What": "Registers a receiver for blockchain state updates and binds to the BlockchainService.",
              "Parameters": [
                {
                  "name": "receiver",
                  "type": "android.content.BroadcastReceiver",
                  "description": "Receiver for blockchain state updates."
                },
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "Application context."
                }
              ],
              "Returns": "void",
              "Why": "To listen for blockchain state updates and interact with the BlockchainService.",
              "How-to-use": "Create an instance of BlockchainStateLiveData with the receiver and application parameters, then observe the LiveData for blockchain state changes.",
              "How-it-is-done": "The method registers the receiver to listen for blockchain state updates and binds to the BlockchainService using the application context.",
              "Property": {
                "pre-conditions": "The receiver and application parameters must not be null.",
                "post-conditions": "The receiver is registered to receive blockchain state updates, and the service is bound for interaction."
              }
            }
          },
          "de.schildbach.wallet.data.BlockchainStateLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.data.BlockchainStateLiveData.onInactive()",
            "description": {
              "What": "Unbinds a service and unregisters a broadcast receiver when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "ServiceConnection",
                  "description": "The service connection to unbind."
                },
                {
                  "name": "receiver",
                  "type": "BroadcastReceiver",
                  "description": "The broadcast receiver to unregister."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and prevent memory leaks when the LiveData is no longer active.",
              "How-to-use": "Extend the BlockchainStateLiveData class and override the onInactive method to unbind a service and unregister a broadcast receiver.",
              "How-it-is-done": "The method calls the unbindService method on the application with the provided service connection and unregisters the broadcast receiver using the broadcast manager.",
              "Property": {
                "pre-conditions": [
                  "The service connection and broadcast receiver must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The service is unbound and the broadcast receiver is unregistered."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.BlockchainStateLiveData.onServiceConnected(android.content.ComponentName,android.os.IBinder)": {
            "qualifiedName": "de.schildbach.wallet.data.BlockchainStateLiveData.onServiceConnected(android.content.ComponentName,android.os.IBinder)",
            "description": {
              "What": "Sets the value of the BlockchainStateLiveData to the current blockchain state obtained from the BlockchainService.",
              "Parameters": [
                {
                  "name": "name",
                  "type": "android.content.ComponentName",
                  "description": "The name of the connected service."
                },
                {
                  "name": "service",
                  "type": "android.os.IBinder",
                  "description": "The IBinder interface for interacting with the service."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the live data with the current blockchain state when the service is connected.",
              "How-to-use": "Extend BlockchainStateLiveData and override onServiceConnected method to handle the service connection and update the live data with the blockchain state.",
              "How-it-is-done": "The method casts the IBinder service to a BlockchainService instance, retrieves the current blockchain state from the service, and sets it as the new value of the BlockchainStateLiveData.",
              "Property": {
                "pre-conditions": [
                  "The service connection must be established."
                ],
                "post-conditions": [
                  "The value of the BlockchainStateLiveData is updated with the current blockchain state."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.BlockchainStateLiveData.onServiceDisconnected(android.content.ComponentName)": {
            "qualifiedName": "de.schildbach.wallet.data.BlockchainStateLiveData.onServiceDisconnected(android.content.ComponentName)",
            "description": {
              "What": "This method is called when the service is disconnected.",
              "Parameters": [
                {
                  "name": "name",
                  "type": "android.content.ComponentName",
                  "description": "The name of the component that is being disconnected."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to handle the disconnection of a service.",
              "How-to-use": "Override this method in a class that extends BlockchainStateLiveData to implement custom behavior when the service is disconnected.",
              "How-it-is-done": "When the service is disconnected, this method is called with the ComponentName of the disconnected service, allowing for any necessary clean-up or handling to be performed.",
              "Property": {
                "pre-conditions": "The service must be disconnected for this method to be called.",
                "post-conditions": "Any necessary clean-up or handling of the disconnection can be performed within this method."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.ConfigFormatLiveData": {
        "qualifiedName": "de.schildbach.wallet.data.ConfigFormatLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.ConfigFormatLiveData.de.schildbach.wallet.data.ConfigFormatLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.data.ConfigFormatLiveData.de.schildbach.wallet.data.ConfigFormatLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a ConfigFormatLiveData object with the configuration from the WalletApplication.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance to retrieve the configuration from."
                }
              ],
              "Returns": {
                "type": "ConfigFormatLiveData",
                "description": "A new instance of ConfigFormatLiveData initialized with the configuration from the WalletApplication."
              },
              "Why": "To provide a way to access the configuration data within the application.",
              "How-to-use": "Create a new instance of WalletApplication, pass it as a parameter to the constructor of ConfigFormatLiveData, and use the returned object to access the configuration data.",
              "How-it-is-done": "The constructor takes a WalletApplication instance as a parameter and retrieves the configuration from it using the getConfiguration() method, storing it in the 'config' field of the ConfigFormatLiveData object.",
              "Property": {
                "pre-conditions": [
                  "The WalletApplication instance passed as a parameter must not be null."
                ],
                "post-conditions": [
                  "The 'config' field of the ConfigFormatLiveData object will be initialized with the configuration data from the WalletApplication."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ConfigFormatLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.data.ConfigFormatLiveData.onActive()",
            "description": {
              "What": "Registers a listener for shared preference changes and sets the initial value of the format from the config.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "de.schildbach.wallet.data.ConfigFormatLiveData",
                  "description": "The instance of the ConfigFormatLiveData class."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the LiveData value whenever the shared preferences change and provide the initial value when the LiveData becomes active.",
              "How-to-use": "Create an instance of ConfigFormatLiveData and observe its value changes to get notified when the format configuration changes.",
              "How-it-is-done": "The method registers a listener for shared preference changes using the config object and sets the initial value of the format by calling config.getFormat() and passing it to the setValue() method.",
              "Property": {
                "pre-conditions": [
                  "The config object must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The listener for shared preference changes is registered.",
                  "The initial value of the format is set for the LiveData."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ConfigFormatLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.data.ConfigFormatLiveData.onInactive()",
            "description": {
              "What": "This method unregisters a shared preference change listener when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "ConfigFormatLiveData",
                  "description": "The instance of the ConfigFormatLiveData class."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure proper resource management and prevent memory leaks by unregistering the listener when it is no longer needed.",
              "How-to-use": "Create an instance of ConfigFormatLiveData and call onInactive() when the LiveData is no longer active, typically in the onInactive() method of a LifecycleObserver.",
              "How-it-is-done": "The method calls the unregisterOnSharedPreferenceChangeListener() method on the config object, passing 'this' as the listener to be unregistered.",
              "Property": {
                "pre-conditions": [
                  "The ConfigFormatLiveData instance must be initialized with a valid config object."
                ],
                "post-conditions": [
                  "The shared preference change listener is unregistered when the LiveData becomes inactive."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ConfigFormatLiveData.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.ConfigFormatLiveData.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)",
            "description": {
              "What": "Updates the value of the LiveData when a specific shared preference is changed.",
              "Parameters": [
                {
                  "name": "sharedPreferences",
                  "type": "android.content.SharedPreferences",
                  "description": "The SharedPreferences object where the change occurred."
                },
                {
                  "name": "key",
                  "type": "java.lang.String",
                  "description": "The key of the preference that was changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the LiveData value based on changes in a specific shared preference key.",
              "How-to-use": "Create an instance of ConfigFormatLiveData and register it as a SharedPreferenceChangeListener to receive updates when the specified preference key changes.",
              "How-it-is-done": "When the specified preference key (PREFS_KEY_BTC_PRECISION) is changed, the method updates the value of the LiveData using the format from the config object.",
              "Property": {
                "pre-conditions": "The ConfigFormatLiveData instance must be properly initialized with a valid config object.",
                "post-conditions": "The value of the LiveData will be updated whenever the specified preference key is changed."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.ConfigOwnNameLiveData": {
        "qualifiedName": "de.schildbach.wallet.data.ConfigOwnNameLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.ConfigOwnNameLiveData.de.schildbach.wallet.data.ConfigOwnNameLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.data.ConfigOwnNameLiveData.de.schildbach.wallet.data.ConfigOwnNameLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a LiveData object with the configuration data of the WalletApplication.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance to retrieve the configuration from."
                }
              ],
              "Returns": {
                "type": "ConfigOwnNameLiveData",
                "description": "A LiveData object initialized with the configuration data."
              },
              "Why": "To provide a LiveData object that can be observed for changes in the configuration data of the WalletApplication.",
              "How-to-use": "Create an instance of ConfigOwnNameLiveData by passing a WalletApplication instance as a parameter, then observe the LiveData object for changes in the configuration data.",
              "How-it-is-done": "The method initializes the ConfigOwnNameLiveData object by retrieving the configuration data from the WalletApplication instance passed as a parameter.",
              "Property": {
                "pre-conditions": [
                  "The WalletApplication instance passed as a parameter must not be null."
                ],
                "post-conditions": [
                  "The ConfigOwnNameLiveData object is initialized with the configuration data of the WalletApplication."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ConfigOwnNameLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.data.ConfigOwnNameLiveData.onActive()",
            "description": {
              "What": "Registers a shared preference change listener and sets the initial value of the own name configuration.",
              "Parameters": [
                {
                  "name": "config",
                  "type": "Config",
                  "description": "The configuration object to listen for changes and retrieve the initial own name value."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the LiveData value whenever the own name configuration changes and provide the initial value upon activation.",
              "How-to-use": "Create an instance of ConfigOwnNameLiveData with a Config object, observe the LiveData object, and handle changes to the own name configuration.",
              "How-it-is-done": "The method registers a shared preference change listener on the provided Config object to listen for changes. It then sets the initial value of the own name configuration by calling getValue() on the Config object.",
              "Property": {
                "pre-conditions": [
                  "The Config object must not be null."
                ],
                "post-conditions": [
                  "The shared preference change listener is registered on the Config object.",
                  "The initial value of the own name configuration is set on the LiveData object."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ConfigOwnNameLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.data.ConfigOwnNameLiveData.onInactive()",
            "description": {
              "What": "Unregisters a shared preference change listener when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "ConfigOwnNameLiveData",
                  "description": "The instance of the ConfigOwnNameLiveData class."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure proper clean-up and prevent memory leaks by unregistering the listener when it is no longer needed.",
              "How-to-use": "Create an instance of ConfigOwnNameLiveData and call the onInactive() method when the LiveData is no longer active.",
              "How-it-is-done": "The method calls the unregisterOnSharedPreferenceChangeListener() method on the config object, passing 'this' as the listener to be unregistered.",
              "Property": {
                "pre-conditions": [
                  "The ConfigOwnNameLiveData instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The shared preference change listener is unregistered when the LiveData becomes inactive."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ConfigOwnNameLiveData.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.ConfigOwnNameLiveData.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)",
            "description": {
              "What": "Updates the value of the LiveData when the shared preference for own name changes.",
              "Parameters": [
                {
                  "name": "sharedPreferences",
                  "type": "android.content.SharedPreferences",
                  "description": "The SharedPreferences object where the change occurred."
                },
                {
                  "name": "key",
                  "type": "java.lang.String",
                  "description": "The key of the preference that changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the LiveData value whenever the own name preference changes.",
              "How-to-use": "Create an instance of ConfigOwnNameLiveData and observe its value to get updates when the own name preference changes.",
              "How-it-is-done": "When the shared preference for own name changes, the method checks if the key matches the own name preference key and updates the LiveData value with the new own name from the configuration.",
              "Property": {
                "pre-conditions": "The ConfigOwnNameLiveData instance must be properly initialized with the correct configuration object.",
                "post-conditions": "The LiveData value will be updated with the new own name whenever the own name preference changes."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.DynamicFeeLiveData": {
        "qualifiedName": "de.schildbach.wallet.data.DynamicFeeLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.DynamicFeeLiveData.de.schildbach.wallet.data.DynamicFeeLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.data.DynamicFeeLiveData.de.schildbach.wallet.data.DynamicFeeLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a LiveData object to observe dynamic fee updates for a wallet application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The wallet application instance to use for initialization."
                }
              ],
              "Returns": {
                "type": "DynamicFeeLiveData",
                "description": "A LiveData object for observing dynamic fee updates."
              },
              "Why": "To provide a mechanism for dynamically updating fee information in the wallet application.",
              "How-to-use": "Create an instance of DynamicFeeLiveData by passing a WalletApplication instance as a parameter, then observe the LiveData object for dynamic fee updates.",
              "How-it-is-done": "The method initializes the dynamicFeesUrl, userAgent, assets, dynamicFeesFile, and tempFile properties based on the package information and application directories.",
              "Property": {
                "pre-conditions": "The application parameter must not be null.",
                "post-conditions": "The DynamicFeeLiveData object is initialized with the necessary properties for observing dynamic fee updates."
              }
            }
          },
          "de.schildbach.wallet.data.DynamicFeeLiveData.fetchDynamicFees(okhttp3.HttpUrl,java.io.File,java.io.File,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.DynamicFeeLiveData.fetchDynamicFees(okhttp3.HttpUrl,java.io.File,java.io.File,java.lang.String)",
            "description": {
              "What": "Fetches dynamic fees from a given URL and saves them to a target file if modified.",
              "Parameters": [
                {
                  "name": "url",
                  "type": "okhttp3.HttpUrl",
                  "description": "The URL from which to fetch dynamic fees."
                },
                {
                  "name": "tempFile",
                  "type": "java.io.File",
                  "description": "Temporary file to store fetched dynamic fees before moving to target file."
                },
                {
                  "name": "targetFile",
                  "type": "java.io.File",
                  "description": "File where the fetched dynamic fees will be saved."
                },
                {
                  "name": "userAgent",
                  "type": "java.lang.String",
                  "description": "User agent string to be used in the HTTP request header."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To fetch and update dynamic fee data for use in the application.",
              "How-to-use": "Call this method with the appropriate parameters to fetch dynamic fees from the specified URL and save them to the target file.",
              "How-it-is-done": "The method creates an HTTP request with the provided URL and user agent, checks for modifications using 'If-Modified-Since' header, fetches the data, saves it to a temporary file, and then renames it to the target file if successful.",
              "Property": {
                "pre-conditions": [
                  "The URL, temporary file, target file, and user agent must be provided."
                ],
                "post-conditions": [
                  "Dynamic fees are fetched and saved to the target file if modified successfully."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.DynamicFeeLiveData.loadInBackground()": {
            "qualifiedName": "de.schildbach.wallet.data.DynamicFeeLiveData.loadInBackground()",
            "description": {
              "What": "This method loads dynamic and static fees for different fee categories and adjusts them based on certain conditions.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "java.util.Map<de.schildbach.wallet.ui.send.FeeCategory, org.bitcoinj.core.Coin>",
                "description": "A map containing fee categories as keys and corresponding coin values as dynamic fees."
              },
              "Why": "The method is provided to dynamically adjust fees based on certain conditions and ensure accurate fee calculation.",
              "How-to-use": "Simply call the method 'loadInBackground()' to load and adjust dynamic fees for different fee categories.",
              "How-it-is-done": "The method first loads static fees, fetches dynamic fees, and adjusts them based on upper and lower bounds for each fee category. It then returns the updated dynamic fees map.",
              "Property": {
                "pre-conditions": "The method requires the existence of a static fees file and a dynamic fees URL.",
                "post-conditions": "The method returns a map of dynamic fees adjusted based on certain conditions for each fee category."
              }
            }
          },
          "de.schildbach.wallet.data.DynamicFeeLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.data.DynamicFeeLiveData.onActive()",
            "description": {
              "What": "Asynchronously loads dynamic fees for different fee categories and posts the result to observers.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To fetch dynamic fee data in the background and update observers with the latest fee information without blocking the main thread.",
              "How-to-use": "Simply call the onActive() method of an instance of DynamicFeeLiveData to trigger the asynchronous loading of dynamic fees.",
              "How-it-is-done": "The onActive() method uses AsyncTask to execute a Runnable that loads dynamic fees in the background using loadInBackground() method, then posts the result to observers using postValue().",
              "Property": {
                "pre-conditions": [
                  "The DynamicFeeLiveData instance must be active to trigger the loading of dynamic fees."
                ],
                "post-conditions": [
                  "Observers will be updated with the latest dynamic fee information after the method execution."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.DynamicFeeLiveData.parseFees(java.io.InputStream)": {
            "qualifiedName": "de.schildbach.wallet.data.DynamicFeeLiveData.parseFees(java.io.InputStream)",
            "description": {
              "What": "Parse a list of dynamic fees for different fee categories from an input stream.",
              "Parameters": [
                {
                  "name": "is",
                  "type": "java.io.InputStream",
                  "description": "The input stream containing the dynamic fee data to be parsed."
                }
              ],
              "Returns": {
                "type": "java.util.Map<de.schildbach.wallet.ui.send.FeeCategory, org.bitcoinj.core.Coin>",
                "description": "A map containing fee categories as keys and corresponding fee rates as values."
              },
              "Why": "To dynamically retrieve fee rates for different categories based on the provided input stream.",
              "How-to-use": "Create an InputStream object with the fee data, then call parseFees method with this InputStream as the parameter to get a map of fee categories and rates.",
              "How-it-is-done": "The method reads each line from the input stream, splits it by '=', parses the fee category and rate, and adds them to the map. If any parsing error occurs, it logs a warning. Finally, it closes the input stream and returns the map.",
              "Property": {
                "pre-conditions": "The input stream 'is' should not be null.",
                "post-conditions": "The returned map will contain fee categories as keys and corresponding fee rates as values."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.ExchangeRate": {
        "qualifiedName": "de.schildbach.wallet.data.ExchangeRate",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.ExchangeRate.de.schildbach.wallet.data.ExchangeRate(org.bitcoinj.utils.ExchangeRate,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRate.de.schildbach.wallet.data.ExchangeRate(org.bitcoinj.utils.ExchangeRate,java.lang.String)",
            "description": {
              "What": "This method initializes an ExchangeRate object with a given ExchangeRate and source.",
              "Parameters": [
                {
                  "name": "rate",
                  "type": "org.bitcoinj.utils.ExchangeRate",
                  "description": "The ExchangeRate object to be used for initialization."
                },
                {
                  "name": "source",
                  "type": "java.lang.String",
                  "description": "The source of the exchange rate data."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.ExchangeRate",
                "description": "An ExchangeRate object initialized with the provided rate and source."
              },
              "Why": "To allow the creation of ExchangeRate objects with specific exchange rate data and its source.",
              "How-to-use": "Create a new ExchangeRate object by passing an ExchangeRate object and a source string to the constructor.",
              "How-it-is-done": "The method first checks that the currency code of the fiat currency in the provided ExchangeRate is not null, then initializes the rate and source properties of the ExchangeRate object with the provided values.",
              "Property": {
                "pre-conditions": "The rate parameter must not be null.",
                "post-conditions": "The ExchangeRate object is initialized with the provided rate and source."
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRate.getCurrencyCode()": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRate.getCurrencyCode()",
            "description": {
              "What": "This method returns the currency code associated with the exchange rate.",
              "Parameters": [],
              "Returns": {
                "Type": "java.lang.String",
                "Description": "The currency code of the exchange rate."
              },
              "Why": "To provide access to the currency code of the exchange rate for further processing or display.",
              "How-to-use": "Call the getCurrencyCode() method on an instance of ExchangeRate class to retrieve the currency code.",
              "How-it-is-done": "The method accesses the currency code from the fiat field of the rate object and returns it as a string.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRate.toString()": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRate.toString()",
            "description": {
              "What": "This method returns a string representation of the ExchangeRate object, including the fiat rate.",
              "Parameters": [],
              "Returns": {
                "Type": "String",
                "Description": "A string representation of the ExchangeRate object with the fiat rate."
              },
              "Why": "To provide a human-readable representation of the ExchangeRate object for debugging or logging purposes.",
              "How-to-use": "Simply call the toString() method on an ExchangeRate object to get a string representation including the fiat rate.",
              "How-it-is-done": "The method first gets the simple name of the class, then appends the fiat rate enclosed in square brackets to create the string representation.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "The returned string will contain the class name and the fiat rate enclosed in square brackets."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.ExchangeRatesProvider": {
        "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.ExchangeRatesProvider.bestExchangeRate(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.bestExchangeRate(java.lang.String)",
            "description": {
              "What": "This method returns the best exchange rate for a given currency code, defaulting to the default currency code if not found.",
              "Parameters": [
                {
                  "name": "currencyCode",
                  "type": "java.lang.String",
                  "description": "The currency code for which the best exchange rate is needed."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.ExchangeRate",
                "description": "The best exchange rate for the provided currency code or the default exchange currency rate if not found."
              },
              "Why": "To provide a way to get the best exchange rate for a given currency code, with fallback to default currency if needed.",
              "How-to-use": "Call the method with the desired currency code as the parameter to get the best exchange rate available.",
              "How-it-is-done": "The method first checks if there is an exchange rate available for the provided currency code, then for the default currency code, and finally falls back to the default exchange currency if neither is found.",
              "Property": {
                "pre-conditions": "The exchangeRates map must be initialized and contain exchange rates for the desired currency codes.",
                "post-conditions": "The method will always return an ExchangeRate object, either for the provided currency code, default currency code, or the default exchange currency."
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.contentUri(java.lang.String,boolean)": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.contentUri(java.lang.String,boolean)",
            "description": {
              "What": "This method generates a content URI for accessing exchange rates data, with an option to specify offline mode.",
              "Parameters": [
                {
                  "name": "packageName",
                  "type": "java.lang.String",
                  "description": "The package name of the calling application."
                },
                {
                  "name": "offline",
                  "type": "boolean",
                  "description": "A flag indicating whether the offline mode is enabled."
                }
              ],
              "Returns": {
                "type": "android.net.Uri",
                "description": "A content URI for accessing exchange rates data."
              },
              "Why": "To provide a way for applications to access exchange rates data with the option to specify offline mode.",
              "How-to-use": "Call the method with the package name of the calling application and a boolean flag indicating offline mode to get the content URI for exchange rates data.",
              "How-it-is-done": "The method parses a base content URI and appends a query parameter for offline mode if specified, then returns the built URI.",
              "Property": {
                "pre-conditions": [
                  "The packageName parameter must not be null."
                ],
                "post-conditions": [
                  "The returned URI may include a query parameter for offline mode if the offline flag is set to true."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.de.schildbach.wallet.data.ExchangeRatesProvider()": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.de.schildbach.wallet.data.ExchangeRatesProvider()",
            "description": {
              "What": "Initialize an instance of ExchangeRatesProvider class.",
              "Parameters": [],
              "Returns": {
                "type": "ExchangeRatesProvider",
                "description": "An instance of ExchangeRatesProvider class."
              },
              "Why": "To provide a way to create an object of ExchangeRatesProvider class.",
              "How-to-use": "Simply create a new instance of ExchangeRatesProvider by calling the constructor.",
              "How-it-is-done": "The method initializes a new instance of the ExchangeRatesProvider class without any parameters.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "An instance of ExchangeRatesProvider class is created."
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.defaultCurrencyCode()": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.defaultCurrencyCode()",
            "description": {
              "What": "This method returns the default currency code based on the default locale of the system.",
              "Parameters": [],
              "Returns": {
                "Type": "java.lang.String",
                "Description": "The default currency code based on the default locale."
              },
              "Why": "To provide a convenient way to retrieve the default currency code based on the system's locale.",
              "How-to-use": "Call the defaultCurrencyCode() method to get the default currency code of the system.",
              "How-it-is-done": "The method uses the default locale of the system to get the default currency instance and then retrieves the currency code.",
              "Property": {
                "Pre-conditions": "None.",
                "Post-conditions": "The method will return the default currency code or null if an IllegalArgumentException occurs."
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.delete(android.net.Uri,java.lang.String,java.lang.String[])": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.delete(android.net.Uri,java.lang.String,java.lang.String[])",
            "description": {
              "What": "This method throws an UnsupportedOperationException, indicating that the delete operation is not supported by the ExchangeRatesProvider.",
              "Parameters": [
                {
                  "name": "uri",
                  "type": "android.net.Uri",
                  "description": "The URI of the data to be deleted."
                },
                {
                  "name": "selection",
                  "type": "java.lang.String",
                  "description": "A filter to apply to rows before deleting."
                },
                {
                  "name": "selectionArgs",
                  "type": "java.lang.String[]",
                  "description": "Arguments to replace placeholders in the selection filter."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "This method does not return a value."
              },
              "Why": "This method is provided to indicate that the delete operation is not supported by the ExchangeRatesProvider.",
              "How-to-use": "Simply call this method with the appropriate parameters when attempting to delete data from the ExchangeRatesProvider.",
              "How-it-is-done": "The method simply throws an UnsupportedOperationException when called, indicating that the delete operation is not supported.",
              "Property": {
                "pre-conditions": [
                  "The ExchangeRatesProvider must be instantiated before calling this method."
                ],
                "post-conditions": [
                  "No data will be deleted from the ExchangeRatesProvider."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.getExchangeRate(android.database.Cursor)": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.getExchangeRate(android.database.Cursor)",
            "description": {
              "What": "This method retrieves an ExchangeRate object from a Cursor containing exchange rate data.",
              "Parameters": [
                {
                  "name": "cursor",
                  "type": "android.database.Cursor",
                  "description": "The Cursor containing exchange rate data."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.ExchangeRate",
                "description": "An ExchangeRate object created from the data in the Cursor."
              },
              "Why": "To provide a way to extract ExchangeRate objects from a Cursor for use in the application.",
              "How-to-use": "Call this method with a Cursor containing exchange rate data to get an ExchangeRate object.",
              "How-it-is-done": "The method reads the currency code, rate in Coin and Fiat, and source from the Cursor, then creates a new ExchangeRate object with these values.",
              "Property": {
                "pre-conditions": "The Cursor must contain valid exchange rate data with the required columns.",
                "post-conditions": "A valid ExchangeRate object is returned based on the data in the Cursor."
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.getType(android.net.Uri)": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.getType(android.net.Uri)",
            "description": {
              "What": "This method throws an UnsupportedOperationException when called.",
              "Parameters": [
                {
                  "name": "uri",
                  "type": "android.net.Uri",
                  "description": "The URI parameter passed to the method."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "This method does not return a value as it throws an exception."
              },
              "Why": "The method is provided to indicate that the operation is not supported.",
              "How-to-use": "Simply call the getType method with a Uri parameter to trigger the UnsupportedOperationException.",
              "How-it-is-done": "The method simply throws an UnsupportedOperationException when called, indicating that the operation is not supported.",
              "Property": {
                "pre-conditions": [
                  "The method must be overridden in a subclass."
                ],
                "post-conditions": [
                  "An UnsupportedOperationException is thrown when the method is called."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.insert(android.net.Uri,android.content.ContentValues)": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.insert(android.net.Uri,android.content.ContentValues)",
            "description": {
              "What": "This method throws an UnsupportedOperationException when attempting to insert data into the ExchangeRatesProvider.",
              "Parameters": [
                {
                  "name": "uri",
                  "type": "android.net.Uri",
                  "description": "The URI of the data to be inserted."
                },
                {
                  "name": "values",
                  "type": "android.content.ContentValues",
                  "description": "The values to be inserted into the data."
                }
              ],
              "Returns": {
                "type": "android.net.Uri",
                "description": "None, as the method throws an exception."
              },
              "Why": "To indicate that the insertion operation is not supported by the ExchangeRatesProvider.",
              "How-to-use": "Simply call the insert method with the URI and ContentValues as parameters, which will always result in an UnsupportedOperationException being thrown.",
              "How-it-is-done": "The method simply throws a new UnsupportedOperationException without performing any actual insertion operation.",
              "Property": {
                "pre-conditions": "None.",
                "post-conditions": "The method will always throw an UnsupportedOperationException."
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.onCreate()": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.onCreate()",
            "description": {
              "What": "Initialize the ExchangeRatesProvider class by setting up necessary configurations and cached exchange rates.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "Returns true if the initialization is successful, false otherwise."
              },
              "Why": "To set up the ExchangeRatesProvider class with necessary configurations and cached exchange rates for further use.",
              "How-to-use": "Simply call the onCreate() method on an instance of ExchangeRatesProvider to initialize it with configurations and cached exchange rates.",
              "How-it-is-done": "The method first checks if exchange rates are enabled, then initializes necessary variables and configurations using the application context. It also retrieves cached exchange rates if available and logs the execution time.",
              "Property": {
                "pre-conditions": [
                  "The Constants.ENABLE_EXCHANGE_RATES flag must be set to true for the method to proceed."
                ],
                "post-conditions": [
                  "The ExchangeRatesProvider instance is initialized with necessary configurations and cached exchange rates."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.parseFiatInexact(java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.parseFiatInexact(java.lang.String,java.lang.String)",
            "description": {
              "What": "Parse a string representation of a fiat value into a Fiat object with inexact precision.",
              "Parameters": [
                {
                  "name": "currencyCode",
                  "type": "java.lang.String",
                  "description": "The currency code of the fiat value."
                },
                {
                  "name": "str",
                  "type": "java.lang.String",
                  "description": "The string representation of the fiat value."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.utils.Fiat",
                "description": "A Fiat object representing the parsed fiat value."
              },
              "Why": "To convert a string representation of a fiat value into a Fiat object for further processing or calculations.",
              "How-to-use": "Call the method with the currency code and string representation of the fiat value to obtain a Fiat object with inexact precision.",
              "How-it-is-done": "The method converts the string representation into a BigDecimal, moves the decimal point to the smallest unit exponent, and then converts it to a long value to create a Fiat object.",
              "Property": {
                "pre-conditions": [
                  "The currency code must be a valid ISO currency code.",
                  "The string representation must be a valid numerical value."
                ],
                "post-conditions": [
                  "A valid Fiat object with inexact precision is returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
            "description": {
              "What": "This method queries exchange rates data based on the provided URI, projection, selection, selection arguments, and sort order.",
              "Parameters": [
                {
                  "name": "uri",
                  "type": "android.net.Uri",
                  "description": "The URI used to query the exchange rates data."
                },
                {
                  "name": "projection",
                  "type": "java.lang.String[]",
                  "description": "The list of columns to retrieve from the exchange rates data."
                },
                {
                  "name": "selection",
                  "type": "java.lang.String",
                  "description": "The selection criteria for filtering the exchange rates data."
                },
                {
                  "name": "selectionArgs",
                  "type": "java.lang.String[]",
                  "description": "The arguments for the selection criteria."
                },
                {
                  "name": "sortOrder",
                  "type": "java.lang.String",
                  "description": "The order in which the results should be sorted."
                }
              ],
              "Returns": {
                "type": "android.database.Cursor",
                "description": "A cursor containing the queried exchange rates data."
              },
              "Why": "To provide a way to query and retrieve exchange rates data for use in the application.",
              "How-to-use": "Call this method with the appropriate parameters to query exchange rates data and retrieve the results as a cursor.",
              "How-it-is-done": "The method first checks if the exchange rates data needs to be updated, then performs the query based on the selection criteria provided, and returns a cursor with the results.",
              "Property": {
                "pre-conditions": [
                  "The exchange rates data must be available in the 'exchangeRates' field."
                ],
                "post-conditions": [
                  "A cursor with the queried exchange rates data is returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.requestExchangeRates()": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.requestExchangeRates()",
            "description": {
              "What": "This method requests exchange rates from a specific URL and parses the response to create a map of exchange rates for different fiat currencies.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "java.util.Map<java.lang.String, de.schildbach.wallet.data.ExchangeRate>",
                "description": "A map containing exchange rates for different fiat currencies."
              },
              "Why": "To fetch and provide up-to-date exchange rates for various fiat currencies in relation to Bitcoin.",
              "How-to-use": "Simply call the method `requestExchangeRates()` on an instance of the `ExchangeRatesProvider` class to retrieve the latest exchange rates.",
              "How-it-is-done": "The method uses an HTTP client to make a request to a specific URL, parses the JSON response, extracts exchange rates for fiat currencies, and creates an `ExchangeRate` object for each valid rate found.",
              "Property": {
                "pre-conditions": "The HTTP client and URL for fetching exchange rates must be properly configured.",
                "post-conditions": "The method returns a map of exchange rates or null if there was an issue during the request or parsing."
              }
            }
          },
          "de.schildbach.wallet.data.ExchangeRatesProvider.update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])": {
            "qualifiedName": "de.schildbach.wallet.data.ExchangeRatesProvider.update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])",
            "description": {
              "What": "This method throws an UnsupportedOperationException, indicating that the update operation is not supported by the ExchangeRatesProvider.",
              "Parameters": [
                {
                  "name": "uri",
                  "type": "android.net.Uri",
                  "description": "The URI of the content to update."
                },
                {
                  "name": "values",
                  "type": "android.content.ContentValues",
                  "description": "The new values to apply."
                },
                {
                  "name": "selection",
                  "type": "java.lang.String",
                  "description": "A filter to apply to rows before updating."
                },
                {
                  "name": "selectionArgs",
                  "type": "java.lang.String[]",
                  "description": "Arguments for the selection filter."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "Always throws an UnsupportedOperationException."
              },
              "Why": "To indicate that the update operation is not supported by the ExchangeRatesProvider.",
              "How-to-use": "You should not call this method for updating exchange rates as it will always throw an exception.",
              "How-it-is-done": "The method simply throws an UnsupportedOperationException without performing any actual update operation.",
              "Property": {
                "pre-conditions": [
                  "The ExchangeRatesProvider must be instantiated and used within a content provider context."
                ],
                "post-conditions": [
                  "The method will always throw an UnsupportedOperationException."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.PaymentIntent": {
        "qualifiedName": "de.schildbach.wallet.data.PaymentIntent",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.PaymentIntent.base64UrlDecode(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.base64UrlDecode(java.lang.String)",
            "description": {
              "What": "Decode a base64url encoded string into a byte array.",
              "Parameters": [
                {
                  "name": "encoded",
                  "type": "java.lang.String",
                  "description": "The base64url encoded string to decode."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "The decoded byte array, or null if decoding fails."
              },
              "Why": "To provide a method for decoding base64url encoded strings.",
              "How-to-use": "Call the method with a base64url encoded string as the parameter, and it will return the decoded byte array or null if decoding fails.",
              "How-it-is-done": "The method attempts to decode the base64url encoded string using a predefined decoder. If decoding fails, it logs an error message and returns null.",
              "Property": {
                "pre-conditions": [
                  "The input string must be a valid base64url encoded string."
                ],
                "post-conditions": [
                  "The method returns the decoded byte array if decoding is successful, or null if decoding fails."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.blank()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.blank()",
            "description": {
              "What": "Creates a new instance of PaymentIntent with all fields set to null.",
              "Parameters": [
                {
                  "name": "param1",
                  "type": "null",
                  "description": "Description of param1."
                },
                {
                  "name": "param2",
                  "type": "null",
                  "description": "Description of param2."
                },
                {
                  "name": "param3",
                  "type": "null",
                  "description": "Description of param3."
                },
                {
                  "name": "param4",
                  "type": "null",
                  "description": "Description of param4."
                },
                {
                  "name": "param5",
                  "type": "null",
                  "description": "Description of param5."
                },
                {
                  "name": "param6",
                  "type": "null",
                  "description": "Description of param6."
                },
                {
                  "name": "param7",
                  "type": "null",
                  "description": "Description of param7."
                },
                {
                  "name": "param8",
                  "type": "null",
                  "description": "Description of param8."
                },
                {
                  "name": "param9",
                  "type": "null",
                  "description": "Description of param9."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.PaymentIntent",
                "description": "A new instance of PaymentIntent with all fields set to null."
              },
              "Why": "To provide a convenient way to create a blank PaymentIntent object.",
              "How-to-use": "Simply call PaymentIntent.blank() to get a new instance of PaymentIntent with all fields set to null.",
              "How-it-is-done": "The method creates a new instance of PaymentIntent by calling its constructor with all parameters set to null.",
              "Property": {
                "pre-conditions": "None.",
                "post-conditions": "The returned PaymentIntent object has all fields set to null."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.buildSimplePayTo(org.bitcoinj.core.Coin,org.bitcoinj.core.Address)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.buildSimplePayTo(org.bitcoinj.core.Coin,org.bitcoinj.core.Address)",
            "description": {
              "method": "Builds a simple payment intent with a specified amount and address.",
              "parameters": [
                {
                  "name": "amount",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The amount of Bitcoin to be sent in the payment."
                },
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The recipient's Bitcoin address for the payment."
                }
              ],
              "returns": {
                "type": "de.schildbach.wallet.data.PaymentIntent.Output[]",
                "description": "An array containing a single output with the specified amount and address."
              },
              "why": "To provide a convenient way to create a simple payment intent object for sending Bitcoin to a specific address.",
              "how-to-use": "Call the method with the desired amount and recipient address to get a PaymentIntent.Output array for the payment.",
              "how-it-is-done": "The method creates a new PaymentIntent.Output array with a single output object initialized with the provided amount and the output script generated from the recipient address.",
              "property": {
                "pre-conditions": "The 'amount' parameter must not be null. The 'address' parameter must not be null.",
                "post-conditions": "The method returns an array with a single output object containing the specified amount and address."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.de.schildbach.wallet.data.PaymentIntent(android.os.Parcel)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.de.schildbach.wallet.data.PaymentIntent(android.os.Parcel)",
            "description": {
              "What": "Deserialize a PaymentIntent object from a Parcel.",
              "Parameters": [
                {
                  "name": "in",
                  "type": "android.os.Parcel",
                  "description": "The Parcel object containing the serialized PaymentIntent data."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything as it is a constructor."
              },
              "Why": "To reconstruct a PaymentIntent object from a Parcel object for data transfer or persistence purposes.",
              "How-to-use": "Create a new PaymentIntent object by passing a Parcel object to the constructor.",
              "How-it-is-done": "The method reads the serialized data from the Parcel object to reconstruct the PaymentIntent object, including its standard, payeeName, payeeVerifiedBy, outputs, memo, paymentUrl, payeeData, paymentRequestUrl, and paymentRequestHash attributes.",
              "Property": {
                "pre-conditions": "The Parcel object 'in' must contain valid serialized data of a PaymentIntent object.",
                "post-conditions": "A new PaymentIntent object is created with the data deserialized from the Parcel object 'in'."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.de.schildbach.wallet.data.PaymentIntent(de.schildbach.wallet.data.PaymentIntent$Standard,java.lang.String,java.lang.String,de.schildbach.wallet.data.PaymentIntent$Output[],java.lang.String,java.lang.String,byte[],java.lang.String,byte[])": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.de.schildbach.wallet.data.PaymentIntent(de.schildbach.wallet.data.PaymentIntent$Standard,java.lang.String,java.lang.String,de.schildbach.wallet.data.PaymentIntent$Output[],java.lang.String,java.lang.String,byte[],java.lang.String,byte[])",
            "description": {
              "What": "Constructs a PaymentIntent object with various parameters.",
              "Parameters": [
                {
                  "name": "standard",
                  "type": "de.schildbach.wallet.data.PaymentIntent.Standard",
                  "description": "The standard of the payment intent."
                },
                {
                  "name": "payeeName",
                  "type": "java.lang.String",
                  "description": "The name of the payee."
                },
                {
                  "name": "payeeVerifiedBy",
                  "type": "java.lang.String",
                  "description": "The verification information of the payee."
                },
                {
                  "name": "outputs",
                  "type": "de.schildbach.wallet.data.PaymentIntent.Output[]",
                  "description": "An array of payment outputs."
                },
                {
                  "name": "memo",
                  "type": "java.lang.String",
                  "description": "Additional memo or note for the payment."
                },
                {
                  "name": "paymentUrl",
                  "type": "java.lang.String",
                  "description": "The payment URL."
                },
                {
                  "name": "payeeData",
                  "type": "byte[]",
                  "description": "Data related to the payee."
                },
                {
                  "name": "paymentRequestUrl",
                  "type": "java.lang.String",
                  "description": "The payment request URL."
                },
                {
                  "name": "paymentRequestHash",
                  "type": "byte[]",
                  "description": "The hash of the payment request."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.PaymentIntent",
                "description": "A new PaymentIntent object constructed with the provided parameters."
              },
              "Why": "To create a PaymentIntent object with necessary information for a payment transaction.",
              "How-to-use": "Create a new instance of PaymentIntent by passing the required parameters to the constructor.",
              "How-it-is-done": "The constructor initializes the PaymentIntent object with the provided parameters, assigning them to corresponding fields.",
              "Property": {
                "pre-conditions": "None specified.",
                "post-conditions": [
                  "A new PaymentIntent object is created with the provided information."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.de.schildbach.wallet.data.PaymentIntent(org.bitcoinj.core.Address,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.de.schildbach.wallet.data.PaymentIntent(org.bitcoinj.core.Address,java.lang.String)",
            "description": {
              "What": "Constructs a PaymentIntent object with a specified Bitcoin address and optional label.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to be used in the payment intent."
                },
                {
                  "name": "addressLabel",
                  "type": "java.lang.String",
                  "description": "An optional label for the Bitcoin address."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.PaymentIntent",
                "description": "A new PaymentIntent object initialized with the provided address and label."
              },
              "Why": "To create a PaymentIntent object with a specific Bitcoin address and label for payment processing.",
              "How-to-use": "Instantiate a new PaymentIntent object by providing a Bitcoin address and an optional label as parameters.",
              "How-it-is-done": "The method initializes a PaymentIntent object with null values for other fields, sets the payment destination to the provided address, and assigns the optional label to the address. Other fields are set to null.",
              "Property": {
                "pre-conditions": "The address parameter must not be null.",
                "post-conditions": "A new PaymentIntent object is created with the specified address and label, while other fields are set to null."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.describeContents()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.describeContents()",
            "description": {
              "What": "This method returns an integer value representing the content of the PaymentIntent object.",
              "Parameters": [],
              "Returns": {
                "type": "int",
                "description": "Returns 0 to indicate that the content of the PaymentIntent object is empty."
              },
              "Why": "This method is provided as part of the Parcelable interface implementation for the PaymentIntent class.",
              "How-to-use": "Simply call the describeContents() method on a PaymentIntent object to get the integer value representing its content.",
              "How-it-is-done": "The method simply returns 0 as the PaymentIntent object does not have any special content to describe.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method always returns 0."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.equalsAddress(de.schildbach.wallet.data.PaymentIntent)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.equalsAddress(de.schildbach.wallet.data.PaymentIntent)",
            "description": {
              "What": "Checks if the address of the PaymentIntent object is equal to the address of another PaymentIntent object.",
              "Parameters": [
                {
                  "name": "other",
                  "type": "de.schildbach.wallet.data.PaymentIntent",
                  "description": "The other PaymentIntent object to compare addresses with."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the addresses are equal, false otherwise."
              },
              "Why": "To compare the address of a PaymentIntent object with another PaymentIntent object for equality.",
              "How-to-use": "Create two PaymentIntent objects, call equalsAddress() on one object passing the other object as a parameter, and check the returned boolean value for address equality.",
              "How-it-is-done": "Checks if both objects have an address, if not returns false. Then compares the addresses of both objects, returning false if they are not equal, otherwise true.",
              "Property": {
                "pre-conditions": "Both PaymentIntent objects must not be null.",
                "post-conditions": "The method does not modify the state of the objects being compared."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.equalsAmount(de.schildbach.wallet.data.PaymentIntent)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.equalsAmount(de.schildbach.wallet.data.PaymentIntent)",
            "description": {
              "What": "This method checks if the amount of the PaymentIntent object is equal to the amount of another PaymentIntent object.",
              "Parameters": [
                {
                  "name": "other",
                  "type": "de.schildbach.wallet.data.PaymentIntent",
                  "description": "The other PaymentIntent object to compare the amount with."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the amount of the PaymentIntent object is equal to the amount of the other PaymentIntent object, false otherwise."
              },
              "Why": "To provide a way to compare the amount of PaymentIntent objects for equality.",
              "How-to-use": "Create two PaymentIntent objects, call equalsAmount() on one object passing the other object as a parameter, and check the returned boolean value for equality comparison.",
              "How-it-is-done": "The method first checks if both PaymentIntent objects have an amount. Then, it compares the amounts of the two objects. If both objects have an amount and the amounts are equal, it returns true; otherwise, it returns false.",
              "Property": {
                "pre-conditions": "Both PaymentIntent objects must not be null.",
                "post-conditions": "The method does not modify the state of the objects being compared."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.from(java.lang.String,java.lang.String,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.from(java.lang.String,java.lang.String,org.bitcoinj.core.Coin)",
            "description": {
              "What": "Creates a PaymentIntent object with a specified address, address label, and amount.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The Bitcoin address to send the payment to."
                },
                {
                  "name": "addressLabel",
                  "type": "java.lang.String",
                  "description": "An optional label for the address."
                },
                {
                  "name": "amount",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The amount of Bitcoin to send in the payment."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.PaymentIntent",
                "description": "A new PaymentIntent object initialized with the provided address, address label, and amount."
              },
              "Why": "To create a PaymentIntent object for sending a payment with specified details.",
              "How-to-use": "Call the 'from' method with the address, address label, and amount parameters to create a PaymentIntent object for a payment transaction.",
              "How-it-is-done": "The method creates a new PaymentIntent object using the provided address, address label, and amount, along with other default values for additional parameters.",
              "Property": {
                "pre-conditions": "The address parameter must be a valid Bitcoin address. The amount parameter must be a valid Coin object.",
                "post-conditions": "A new PaymentIntent object is returned with the specified address, address label, and amount."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.fromAddress(java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.fromAddress(java.lang.String,java.lang.String)",
            "description": {
              "What": "Creates a PaymentIntent object from a given Bitcoin address and optional label.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The Bitcoin address in base58 format."
                },
                {
                  "name": "addressLabel",
                  "type": "java.lang.String",
                  "description": "Optional label associated with the address."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.PaymentIntent",
                "description": "A new PaymentIntent object initialized with the provided address and label."
              },
              "Why": "To allow easy creation of PaymentIntent objects from Bitcoin addresses with optional labels.",
              "How-to-use": "Call the static method fromAddress with a Bitcoin address and an optional label to create a PaymentIntent object.",
              "How-it-is-done": "The method creates a new Address object from the provided base58 address using the NETWORK_PARAMETERS constant, then initializes a new PaymentIntent object with the Address and optional label.",
              "Property": {
                "pre-conditions": "The address parameter must be a valid base58 Bitcoin address.",
                "post-conditions": "A new PaymentIntent object is returned with the provided address and label."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.fromAddress(org.bitcoinj.core.Address,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.fromAddress(org.bitcoinj.core.Address,java.lang.String)",
            "description": {
              "What": "Creates a PaymentIntent object from a Bitcoin address and an optional address label.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to create the PaymentIntent from."
                },
                {
                  "name": "addressLabel",
                  "type": "java.lang.String",
                  "description": "An optional label for the address."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.PaymentIntent",
                "description": "A new PaymentIntent object created from the provided address and label."
              },
              "Why": "To allow easy creation of PaymentIntent objects from Bitcoin addresses with optional labels.",
              "How-to-use": "Call the static method fromAddress() on the PaymentIntent class, providing a Bitcoin address and an optional label to create a new PaymentIntent object.",
              "How-it-is-done": "The method simply creates a new PaymentIntent object using the provided address and label by calling the constructor of PaymentIntent.",
              "Property": {
                "pre-conditions": [
                  "The address parameter must not be null."
                ],
                "post-conditions": [
                  "A new PaymentIntent object is returned with the provided address and label."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.fromBitcoinUri(org.bitcoinj.uri.BitcoinURI)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.fromBitcoinUri(org.bitcoinj.uri.BitcoinURI)",
            "description": {
              "What": "This method constructs a PaymentIntent object from a BitcoinURI object.",
              "Parameters": [
                {
                  "name": "bitcoinUri",
                  "type": "org.bitcoinj.uri.BitcoinURI",
                  "description": "The BitcoinURI object from which to construct the PaymentIntent."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.PaymentIntent",
                "description": "A PaymentIntent object constructed from the provided BitcoinURI."
              },
              "Why": "To facilitate the creation of PaymentIntent objects from BitcoinURI objects for payment processing purposes.",
              "How-to-use": "Call the method with a BitcoinURI object as the parameter to create a PaymentIntent object for processing payments.",
              "How-it-is-done": "The method extracts the address, amount, label, Bluetooth MAC, payment request URL, and payment request hash from the BitcoinURI object to construct the PaymentIntent object.",
              "Property": {
                "pre-conditions": "The bitcoinUri parameter must not be null.",
                "post-conditions": "A valid PaymentIntent object is returned based on the information extracted from the BitcoinURI."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.getAddress()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.getAddress()",
            "description": {
              "What": "This method retrieves the Bitcoin address associated with the payment intent.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.core.Address",
                "description": "The Bitcoin address associated with the payment intent."
              },
              "Why": "To provide a way to easily retrieve the Bitcoin address from a payment intent object.",
              "How-to-use": "Simply call the getAddress() method on a PaymentIntent object to get the Bitcoin address associated with it.",
              "How-it-is-done": "The method first checks if the payment intent has an address, then retrieves the script from the first output, and finally gets the Bitcoin address from the script using the network parameters.",
              "Property": {
                "pre-conditions": "The payment intent object must have an address set.",
                "post-conditions": "The method returns the Bitcoin address associated with the payment intent."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.getAmount()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.getAmount()",
            "description": {
              "What": "Calculates the total amount of all outputs in the PaymentIntent object.",
              "Parameters": [
                {
                  "name": "outputs",
                  "type": "List<Output>",
                  "description": "List of Output objects representing the payment outputs."
                }
              ],
              "Returns": {
                "type": "Coin",
                "description": "The total amount of all outputs in the PaymentIntent object, or null if the amount is zero."
              },
              "Why": "To provide a method to calculate the total amount of a payment intent, which can be useful for various payment-related operations.",
              "How-to-use": "Create a PaymentIntent object with desired outputs, call getAmount() method to get the total amount of all outputs.",
              "How-it-is-done": "Iterates through the list of outputs in the PaymentIntent object, adds up the amounts of all non-zero outputs, and returns the total amount.",
              "Property": {
                "pre-conditions": [
                  "The PaymentIntent object must have at least one output."
                ],
                "post-conditions": [
                  "The method returns null if the total amount is zero."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.hasAddress()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.hasAddress()",
            "description": {
              "What": "Checks if the PaymentIntent has a valid address in its outputs.",
              "Parameters": [
                {
                  "name": "outputs",
                  "type": "Array of Output",
                  "description": "An array of Output objects representing the payment outputs."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the PaymentIntent has a valid address in its outputs, false otherwise."
              },
              "Why": "To determine if the PaymentIntent contains a valid address for payment.",
              "How-to-use": "Call this method with the outputs array of the PaymentIntent to check if it has a valid address for payment.",
              "How-it-is-done": "The method first checks if the outputs array is not null and has exactly one element. It then retrieves the script from the first output and checks if it is a valid address script type.",
              "Property": {
                "pre-conditions": [
                  "The outputs array must not be null."
                ],
                "post-conditions": [
                  "Returns true if the PaymentIntent has a valid address in its outputs.",
                  "Returns false if the PaymentIntent does not have a valid address in its outputs."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.hasAmount()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.hasAmount()",
            "description": {
              "What": "Checks if any of the outputs in the PaymentIntent have an amount specified.",
              "Parameters": [
                {
                  "name": "outputs",
                  "type": "List<Output>",
                  "description": "List of outputs in the PaymentIntent."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if any of the outputs have an amount specified, false otherwise."
              },
              "Why": "To determine if the PaymentIntent includes any outputs with specified amounts.",
              "How-to-use": "Call hasAmount() on a PaymentIntent object to check if any of its outputs have amounts specified.",
              "How-it-is-done": "Iterates through the list of outputs in the PaymentIntent and checks if any of them have an amount specified by calling the hasAmount() method on each Output object.",
              "Property": {
                "pre-conditions": [
                  "The PaymentIntent object must be properly initialized with a list of outputs."
                ],
                "post-conditions": [
                  "The method returns true if at least one output has an amount specified, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.hasOutputs()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.hasOutputs()",
            "description": {
              "What": "Checks if the payment intent has outputs.",
              "Parameters": [],
              "Returns": {
                "Type": "boolean",
                "Description": "True if the payment intent has outputs, false otherwise."
              },
              "Why": "To determine if the payment intent includes any outputs for a transaction.",
              "How-to-use": "Call this method on a PaymentIntent object to check if it has any outputs before proceeding with transaction processing.",
              "How-it-is-done": "The method checks if the 'outputs' array in the PaymentIntent object is not null and has a length greater than 0.",
              "Property": {
                "Pre-conditions": [
                  "The 'outputs' array in the PaymentIntent object should be properly initialized."
                ],
                "Post-conditions": [
                  "The method returns true if there are outputs in the PaymentIntent, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.hasPayee()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.hasPayee()",
            "description": {
              "What": "The method checks if the payment intent has a payee name set.",
              "Parameters": [
                {
                  "name": "payeeName",
                  "type": "String",
                  "description": "The name of the payee."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the payment intent has a payee name set, false otherwise."
              },
              "Why": "To determine if the payment intent includes a payee, which can be useful for various payment processing logic.",
              "How-to-use": "Call this method on a PaymentIntent object to check if it has a payee name set before processing the payment.",
              "How-it-is-done": "The method simply checks if the payeeName attribute of the PaymentIntent object is not null and returns true if it is not null, indicating the presence of a payee name.",
              "Property": {
                "pre-conditions": [
                  "The PaymentIntent object must be properly initialized."
                ],
                "post-conditions": [
                  "The method returns true if the payee name is set, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.hasPaymentRequestUrl()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.hasPaymentRequestUrl()",
            "description": {
              "What": "This method checks if the paymentRequestUrl property is not null.",
              "Parameters": [],
              "Returns": {
                "Type": "boolean",
                "Description": "True if the paymentRequestUrl property is not null, false otherwise."
              },
              "Why": "To determine if a PaymentIntent object has a payment request URL associated with it.",
              "How-to-use": "Call this method on a PaymentIntent object to check if it has a payment request URL set.",
              "How-it-is-done": "The method simply checks if the paymentRequestUrl property is not null and returns the result.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "The method returns true if the paymentRequestUrl property is not null, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.hasPaymentUrl()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.hasPaymentUrl()",
            "description": {
              "What": "This method checks if the paymentUrl variable is not null.",
              "Parameters": [],
              "Returns": {
                "Type": "boolean",
                "Description": "True if paymentUrl is not null, false otherwise."
              },
              "Why": "To determine if a payment URL is set for the PaymentIntent object.",
              "How-to-use": "Call this method on a PaymentIntent object to check if a payment URL is present before attempting to use it.",
              "How-it-is-done": "The method simply returns true if the paymentUrl variable is not null, indicating that a payment URL is set.",
              "Property": {
                "Pre-conditions": [
                  "The PaymentIntent object must be properly initialized."
                ],
                "Post-conditions": [
                  "The method returns true if a payment URL is set, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.isBluetoothPaymentRequestUrl()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.isBluetoothPaymentRequestUrl()",
            "description": {
              "What": "This method checks if the payment request URL is a Bluetooth URL.",
              "Parameters": [
                {
                  "name": "paymentRequestUrl",
                  "type": "String",
                  "description": "The payment request URL to be checked."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the payment request URL is a Bluetooth URL, false otherwise."
              },
              "Why": "To determine if a given payment request URL is a Bluetooth URL, which may require different handling.",
              "How-to-use": "Call the method with a payment request URL as the parameter to check if it is a Bluetooth URL.",
              "How-it-is-done": "The method delegates the check to a utility method in the Bluetooth class, passing the payment request URL as an argument.",
              "Property": {
                "pre-conditions": "The paymentRequestUrl parameter must not be null.",
                "post-conditions": "The method returns true if the payment request URL is a Bluetooth URL, false otherwise."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.isBluetoothPaymentUrl()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.isBluetoothPaymentUrl()",
            "description": {
              "What": "This method checks if the payment URL is a Bluetooth URL.",
              "Parameters": [
                {
                  "name": "paymentUrl",
                  "type": "String",
                  "description": "The payment URL to be checked."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the payment URL is a Bluetooth URL, false otherwise."
              },
              "Why": "To determine if a given payment URL is intended for Bluetooth communication.",
              "How-to-use": "Call the method `isBluetoothPaymentUrl()` with a payment URL as the parameter to check if it is a Bluetooth URL.",
              "How-it-is-done": "The method delegates the check to a utility method in the `Bluetooth` class, passing the payment URL as an argument.",
              "Property": {
                "pre-conditions": [
                  "The paymentUrl parameter must not be null."
                ],
                "post-conditions": [
                  "The method returns true if the payment URL is a Bluetooth URL, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.isExtendedBy(de.schildbach.wallet.data.PaymentIntent)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.isExtendedBy(de.schildbach.wallet.data.PaymentIntent)",
            "description": {
              "What": "Checks if the current PaymentIntent is extended by another PaymentIntent based on BIP21 and BIP70 standards, amount, and address.",
              "Parameters": [
                {
                  "name": "other",
                  "type": "de.schildbach.wallet.data.PaymentIntent",
                  "description": "The PaymentIntent to compare with."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the current PaymentIntent is extended by the other PaymentIntent, false otherwise."
              },
              "Why": "To determine if two PaymentIntents are related based on specific criteria for interoperability and compatibility.",
              "How-to-use": "Create two PaymentIntent objects, call this method on one object passing the other object as a parameter to check if they are related.",
              "How-it-is-done": "First, it checks if the current PaymentIntent is based on BIP21 and the other on BIP70 with matching payment request hashes. Then, it compares the amount and address of both PaymentIntents.",
              "Property": {
                "pre-conditions": "Both PaymentIntents must be initialized with valid data.",
                "post-conditions": "The method returns true if the current PaymentIntent is extended by the other PaymentIntent based on the specified criteria."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.isHttpPaymentRequestUrl()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.isHttpPaymentRequestUrl()",
            "description": {
              "What": "Checks if the payment request URL starts with 'http:' or 'https:'.",
              "Parameters": [
                {
                  "name": "paymentRequestUrl",
                  "type": "String",
                  "description": "The payment request URL to be checked."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the payment request URL starts with 'http:' or 'https:', false otherwise."
              },
              "Why": "To determine if a given payment request URL is using a secure protocol for communication.",
              "How-to-use": "Call the method with a payment request URL as the parameter to check if it starts with 'http:' or 'https:'.",
              "How-it-is-done": "The method checks if the paymentRequestUrl is not null and if it starts with 'http:' or 'https:' using a utility method from GenericUtils class.",
              "Property": {
                "pre-conditions": [
                  "The paymentRequestUrl should not be null."
                ],
                "post-conditions": [
                  "The method returns true if the payment request URL starts with 'http:' or 'https:', false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.isHttpPaymentUrl()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.isHttpPaymentUrl()",
            "description": {
              "What": "Checks if the payment URL starts with 'http:' or 'https:'.",
              "Parameters": [
                {
                  "name": "paymentUrl",
                  "type": "String",
                  "description": "The payment URL to be checked."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the payment URL starts with 'http:' or 'https:', false otherwise."
              },
              "Why": "To determine if a given payment URL is an HTTP or HTTPS URL.",
              "How-to-use": "Create an instance of PaymentIntent and call isHttpPaymentUrl() with the payment URL as the parameter to check if it is an HTTP or HTTPS URL.",
              "How-it-is-done": "The method checks if the paymentUrl is not null and if it starts with 'http:' or 'https:' using a utility method startsWithIgnoreCase() from GenericUtils class.",
              "Property": {
                "pre-conditions": [
                  "The paymentUrl should not be null."
                ],
                "post-conditions": [
                  "Returns true if the payment URL starts with 'http:' or 'https:', false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.isSupportedPaymentRequestUrl()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.isSupportedPaymentRequestUrl()",
            "description": {
              "What": "This method checks if the payment request URL is supported by either HTTP or Bluetooth.",
              "Parameters": [
                {
                  "name": "",
                  "type": "",
                  "description": ""
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the payment request URL is supported, false otherwise."
              },
              "Why": "To determine if a given payment request URL is compatible with the supported protocols for processing payments.",
              "How-to-use": "Call this method on an instance of PaymentIntent to check if a payment request URL is supported for processing payments.",
              "How-it-is-done": "The method simply checks if the payment request URL is either an HTTP URL or a Bluetooth URL, returning true if either condition is met.",
              "Property": {
                "pre-conditions": [
                  "The PaymentIntent instance must have a valid payment request URL set."
                ],
                "post-conditions": [
                  "The method returns true if the payment request URL is supported by either HTTP or Bluetooth, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.isSupportedPaymentUrl()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.isSupportedPaymentUrl()",
            "description": {
              "What": "This method checks if the payment URL is supported by the application by verifying if it is either an HTTP or Bluetooth payment URL.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "Returns true if the payment URL is supported (HTTP or Bluetooth), false otherwise."
              },
              "Why": "To determine if a given payment URL can be processed by the application based on its protocol.",
              "How-to-use": "Simply call the method isSupportedPaymentUrl() on an instance of PaymentIntent to check if a payment URL is supported.",
              "How-it-is-done": "The method checks if the payment URL is an HTTP payment URL or a Bluetooth payment URL by calling the isHttpPaymentUrl() and isBluetoothPaymentUrl() methods respectively, and returns true if either condition is met.",
              "Property": {
                "pre-conditions": [
                  "An instance of PaymentIntent must be created before calling this method."
                ],
                "post-conditions": [
                  "The method will return true if the payment URL is supported (HTTP or Bluetooth), false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.mayEditAddress()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.mayEditAddress()",
            "description": {
              "What": "This method checks if the payment intent allows editing the address.",
              "Parameters": [],
              "Returns": {
                "Type": "boolean",
                "Description": "True if the payment intent allows editing the address, false otherwise."
              },
              "Why": "To determine if the address can be edited based on the standard value.",
              "How-to-use": "Call mayEditAddress() on a PaymentIntent object to check if the address can be edited.",
              "How-it-is-done": "The method simply checks if the 'standard' field of the PaymentIntent object is null, returning true if it is null and false otherwise.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.mayEditAmount()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.mayEditAmount()",
            "description": {
              "What": "This method checks if the amount of the payment intent can be edited based on the standard and the presence of an amount.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "Returns true if the amount of the payment intent can be edited, false otherwise."
              },
              "Why": "The method is provided to determine whether the amount of a payment intent can be modified based on certain conditions.",
              "How-to-use": "Simply call the mayEditAmount() method on an instance of PaymentIntent class to check if the amount can be edited.",
              "How-it-is-done": "The method checks if the standard is BIP70 and if the payment intent has an amount. If both conditions are met, it returns false indicating that the amount cannot be edited.",
              "Property": {
                "pre-conditions": [
                  "The PaymentIntent instance must be properly initialized."
                ],
                "post-conditions": [
                  "The method returns true if the amount can be edited, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.mergeWithEditedValues(org.bitcoinj.core.Coin,org.bitcoinj.core.Address)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.mergeWithEditedValues(org.bitcoinj.core.Coin,org.bitcoinj.core.Address)",
            "description": {
              "What": "Merge the edited amount and address with existing payment intent values to create a new payment intent.",
              "Parameters": [
                {
                  "name": "editedAmount",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The edited amount to be merged with the payment intent."
                },
                {
                  "name": "editedAddress",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The edited address to be merged with the payment intent."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.PaymentIntent",
                "description": "A new PaymentIntent object with merged edited values."
              },
              "Why": "To update the payment intent with edited amount and address while maintaining existing values.",
              "How-to-use": "Call mergeWithEditedValues method with the edited amount and address to get a new PaymentIntent object with updated values.",
              "How-it-is-done": "If there are existing outputs, the edited amount is merged with the first output script; otherwise, a new simple pay-to output is created with the edited amount and address. Finally, a new PaymentIntent object is created with the updated values.",
              "Property": {
                "pre-conditions": "editedAmount must not be null when there are existing outputs or no outputs at all. editedAddress must not be null when there are no existing outputs.",
                "post-conditions": "A new PaymentIntent object is returned with the edited amount and address merged with existing values."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.toSendRequest()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.toSendRequest()",
            "description": {
              "What": "This method creates a SendRequest object based on the outputs specified in the PaymentIntent object.",
              "Parameters": [
                {
                  "name": "outputs",
                  "type": "List<Output>",
                  "description": "A list of Output objects containing the amount and script for each output in the transaction."
                }
              ],
              "Returns": {
                "type": "SendRequest",
                "description": "A SendRequest object representing the transaction to be sent."
              },
              "Why": "To encapsulate the logic of creating a SendRequest object from the PaymentIntent outputs.",
              "How-to-use": "Create a PaymentIntent object, populate the outputs list with Output objects, and call the toSendRequest() method to get a SendRequest object for the transaction.",
              "How-it-is-done": "The method creates a new Bitcoin transaction, adds outputs based on the Output objects in the PaymentIntent, and returns a SendRequest object for the transaction.",
              "Property": {
                "pre-conditions": "The PaymentIntent object must be properly initialized with a list of Output objects.",
                "post-conditions": "A valid SendRequest object is returned based on the PaymentIntent outputs."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.toString()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.toString()",
            "description": {
              "What": "This method returns a string representation of the PaymentIntent object, including its fields and values.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "String",
                "description": "A string representation of the PaymentIntent object."
              },
              "Why": "To provide a human-readable representation of the PaymentIntent object for debugging or logging purposes.",
              "How-to-use": "Simply call the toString() method on a PaymentIntent object to get a string representation of its contents.",
              "How-it-is-done": "The method constructs a StringBuilder and appends the class name, standard, payee information, outputs, payment URL, payee data, payment request URL, and payment request hash to build the final string representation.",
              "Property": {
                "pre-conditions": [
                  "The PaymentIntent object must be properly initialized with necessary data before calling this method."
                ],
                "post-conditions": [
                  "The method returns a non-null string representation of the PaymentIntent object."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent.writeToParcel(android.os.Parcel,int)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent.writeToParcel(android.os.Parcel,int)",
            "description": {
              "What": "Writes the content of the PaymentIntent object to a Parcel for serialization.",
              "Parameters": [
                {
                  "name": "dest",
                  "type": "android.os.Parcel",
                  "description": "The Parcel to write the data to."
                },
                {
                  "name": "flags",
                  "type": "int",
                  "description": "Additional flags about how the object should be written."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow the PaymentIntent object to be serialized and passed between components in Android applications.",
              "How-to-use": "Create a PaymentIntent object, call writeToParcel() with a Parcel and flags as parameters to write the data, then use the Parcel to transfer the object.",
              "How-it-is-done": "The method writes the standard, payeeName, payeeVerifiedBy, outputs, memo, paymentUrl, payeeData, paymentRequestUrl, and paymentRequestHash fields of the PaymentIntent object to the Parcel.",
              "Property": {
                "pre-conditions": "The PaymentIntent object must be properly initialized with all necessary data before calling this method.",
                "post-conditions": "The data of the PaymentIntent object is written to the Parcel for serialization."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.PaymentIntent$Output": {
        "qualifiedName": "de.schildbach.wallet.data.PaymentIntent$Output",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.PaymentIntent$Output.de.schildbach.wallet.data.PaymentIntent$Output(android.os.Parcel)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent$Output.de.schildbach.wallet.data.PaymentIntent$Output(android.os.Parcel)",
            "description": {
              "What": "Constructs a PaymentIntent$Output object by reading data from a Parcel.",
              "Parameters": [
                {
                  "name": "in",
                  "type": "android.os.Parcel",
                  "description": "The Parcel containing the data to construct the Output object."
                }
              ],
              "Returns": {
                "type": "Output",
                "description": "A new PaymentIntent$Output object constructed from the Parcel data."
              },
              "Why": "To provide a way to construct Output objects from Parcel data for serialization and deserialization purposes.",
              "How-to-use": "Create a new Parcel object with the required data, then call this method with the Parcel object as the parameter to construct a new Output object.",
              "How-it-is-done": "The method reads a Coin object and a byte array from the Parcel, then constructs a new Script object using the byte array.",
              "Property": {
                "pre-conditions": [
                  "The Parcel 'in' must contain the required data for constructing the Output object."
                ],
                "post-conditions": [
                  "A new Output object is successfully constructed from the Parcel data."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent$Output.de.schildbach.wallet.data.PaymentIntent$Output(org.bitcoinj.core.Coin,org.bitcoinj.script.Script)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent$Output.de.schildbach.wallet.data.PaymentIntent$Output(org.bitcoinj.core.Coin,org.bitcoinj.script.Script)",
            "description": {
              "What": "Initialize a PaymentIntent$Output object with a specified amount and script.",
              "Parameters": [
                {
                  "name": "amount",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The amount of Bitcoin to be sent in the output."
                },
                {
                  "name": "script",
                  "type": "org.bitcoinj.script.Script",
                  "description": "The script defining the conditions required to spend the output."
                }
              ],
              "Returns": {
                "type": "Output",
                "description": "A new PaymentIntent$Output object initialized with the provided amount and script."
              },
              "Why": "To allow the creation of PaymentIntent$Output objects with specific amount and script configurations.",
              "How-to-use": "Create a new PaymentIntent$Output object by passing a Coin amount and a Script object to the constructor.",
              "How-it-is-done": "The constructor initializes the amount and script properties of the PaymentIntent$Output object with the provided parameters.",
              "Property": {
                "pre-conditions": "The amount parameter must not be null.",
                "post-conditions": "A new PaymentIntent$Output object is created with the specified amount and script."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent$Output.describeContents()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent$Output.describeContents()",
            "description": {
              "What": "This method returns an integer value representing the content of the object for use with Parcelable interface.",
              "Parameters": [],
              "Returns": {
                "type": "int",
                "description": "An integer value representing the content of the object."
              },
              "Why": "This method is provided to implement the Parcelable interface for serialization and deserialization of objects.",
              "How-to-use": "To use this method, simply call it on an instance of the Output class to get the integer value representing its content.",
              "How-it-is-done": "The method simply returns a hardcoded integer value of 0, as the content description is not needed for serialization purposes.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "The method always returns 0."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent$Output.hasAmount()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent$Output.hasAmount()",
            "description": {
              "What": "Checks if the amount of the payment intent output is not null and has a non-zero value.",
              "Parameters": [
                {
                  "name": "amount",
                  "type": "BigDecimal",
                  "description": "The amount of the payment intent output."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the amount is not null and has a non-zero value, false otherwise."
              },
              "Why": "To ensure that the payment intent output has a valid amount specified.",
              "How-to-use": "Call this method on a PaymentIntent$Output object to check if it has a valid amount before processing the payment.",
              "How-it-is-done": "The method checks if the 'amount' attribute of the PaymentIntent$Output object is not null and has a non-zero value using the 'signum()' method of the BigDecimal class.",
              "Property": {
                "pre-conditions": [
                  "The 'amount' attribute of the PaymentIntent$Output object should not be null."
                ],
                "post-conditions": [
                  "The method returns true if the 'amount' attribute is not null and has a non-zero value, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent$Output.toString()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent$Output.toString()",
            "description": {
              "What": "This method generates a string representation of the PaymentIntent$Output object.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                },
                "Returns"
              ],
              "Returns": {
                "type": "String",
                "description": "A string representation of the PaymentIntent$Output object."
              },
              "Why": "To provide a human-readable representation of the PaymentIntent$Output object for debugging or logging purposes.",
              "How-to-use": "Call the toString() method on a PaymentIntent$Output object to get a string representation of the object.",
              "How-it-is-done": "The method constructs a StringBuilder, appends the class name and relevant information about the output (amount and script details), and returns the generated string.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "The method returns a non-null string representation of the PaymentIntent$Output object."
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent$Output.valueOf(org.bitcoinj.protocols.payments.PaymentProtocol$Output)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent$Output.valueOf(org.bitcoinj.protocols.payments.PaymentProtocol$Output)",
            "description": {
              "What": "This method converts a PaymentProtocol Output object into a PaymentIntent Output object.",
              "Parameters": [
                {
                  "name": "output",
                  "type": "org.bitcoinj.protocols.payments.PaymentProtocol.Output",
                  "description": "The PaymentProtocol Output object to be converted."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.PaymentIntent.Output",
                "description": "A PaymentIntent Output object created from the PaymentProtocol Output."
              },
              "Why": "To provide a way to convert PaymentProtocol outputs to PaymentIntent outputs for further processing.",
              "How-to-use": "Call this method with a PaymentProtocol Output object as the parameter to get a corresponding PaymentIntent Output object.",
              "How-it-is-done": "The method tries to create a BitcoinJ Script object from the script data of the PaymentProtocol Output, then creates a new PaymentIntent Output object with the amount and script.",
              "Property": {
                "pre-conditions": [
                  "The input PaymentProtocol Output object must not be null."
                ],
                "post-conditions": [
                  "A valid PaymentIntent Output object is returned if the conversion is successful.",
                  "An exception is thrown if the script data of the PaymentProtocol Output is unparseable."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.PaymentIntent$Output.writeToParcel(android.os.Parcel,int)": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent$Output.writeToParcel(android.os.Parcel,int)",
            "description": {
              "What": "This method writes the amount and script program of a PaymentIntent's output to a Parcel.",
              "Parameters": [
                {
                  "name": "dest",
                  "type": "android.os.Parcel",
                  "description": "The destination Parcel to write the data to."
                },
                {
                  "name": "flags",
                  "type": "int",
                  "description": "Additional flags about how the object should be written."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow the PaymentIntent's output data to be serialized and transferred between components.",
              "How-to-use": "Create an instance of PaymentIntent's Output, call writeToParcel() on it with a Parcel and flags as parameters, and the amount and script program will be written to the Parcel.",
              "How-it-is-done": "The method first writes the amount as a serializable object to the Parcel, then retrieves the script program as a byte array and writes its length followed by the program itself to the Parcel.",
              "Property": {
                "pre-conditions": [
                  "The amount and script program of the PaymentIntent's output must be set before calling this method."
                ],
                "post-conditions": [
                  "The amount and script program data will be written to the Parcel for serialization."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.PaymentIntent$Standard": {
        "qualifiedName": "de.schildbach.wallet.data.PaymentIntent$Standard",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.data.PaymentIntent$Standard.de.schildbach.wallet.data.PaymentIntent$Standard()": {
            "qualifiedName": "de.schildbach.wallet.data.PaymentIntent$Standard.de.schildbach.wallet.data.PaymentIntent$Standard()",
            "description": {
              "method": {
                "What": "Creates a new instance of the Standard enum.",
                "Parameters": [],
                "Returns": {
                  "type": "Standard",
                  "description": "A new instance of the Standard enum."
                },
                "Why": "To provide a way to instantiate objects of the Standard enum.",
                "How-to-use": "Simply call Standard() to create a new instance of the Standard enum.",
                "How-it-is-done": "The method does not take any parameters and simply creates a new instance of the Standard enum.",
                "Property": {
                  "pre-conditions": [],
                  "post-conditions": [
                    "A new instance of the Standard enum is created."
                  ]
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.SelectedExchangeRateLiveData": {
        "qualifiedName": "de.schildbach.wallet.data.SelectedExchangeRateLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.SelectedExchangeRateLiveData.de.schildbach.wallet.data.SelectedExchangeRateLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.data.SelectedExchangeRateLiveData.de.schildbach.wallet.data.SelectedExchangeRateLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "This method initializes a LiveData object that observes changes in the selected exchange rate for a given currency.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance used to access configuration and content provider."
                }
              ],
              "Returns": {
                "type": "SelectedExchangeRateLiveData",
                "description": "A LiveData object that tracks the selected exchange rate for a specific currency."
              },
              "Why": "To provide a reactive way to monitor changes in the selected exchange rate for a given currency within the application.",
              "How-to-use": "Create an instance of SelectedExchangeRateLiveData by passing a WalletApplication instance, then observe changes in the selected exchange rate using LiveData's observe() method.",
              "How-it-is-done": "The method initializes a CursorLoader to query the ExchangeRatesProvider content provider for exchange rate data based on the currency code. When the query result is delivered, it extracts the exchange rate and sets it as the value of the LiveData object.",
              "Property": {
                "pre-conditions": [
                  "The WalletApplication instance provided must not be null."
                ],
                "post-conditions": [
                  "The SelectedExchangeRateLiveData object is initialized with the selected exchange rate data for a specific currency."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.SelectedExchangeRateLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.data.SelectedExchangeRateLiveData.onActive()",
            "description": {
              "What": "Starts loading data, registers a listener for shared preference changes, and triggers a currency change event.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To initialize necessary components and update data when the activity becomes active.",
              "How-to-use": "Call this method when the activity associated with the SelectedExchangeRateLiveData becomes active to start loading data and handle currency changes.",
              "How-it-is-done": "The method calls startLoading() on a loader object, registers a listener for shared preference changes, and triggers the onCurrencyChange() method to handle currency changes.",
              "Property": {
                "pre-conditions": [
                  "The loader object must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The loader starts loading data.",
                  "A listener for shared preference changes is registered.",
                  "The onCurrencyChange() method is triggered."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.SelectedExchangeRateLiveData.onCurrencyChange()": {
            "qualifiedName": "de.schildbach.wallet.data.SelectedExchangeRateLiveData.onCurrencyChange()",
            "description": {
              "What": "This method updates the selection arguments of a loader with the exchange currency code from the configuration and forces a reload.",
              "Parameters": [
                {
                  "name": "exchangeCurrency",
                  "type": "String",
                  "description": "The exchange currency code from the configuration."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically update the exchange currency code in the loader and trigger a reload when the currency is changed.",
              "How-to-use": "Call this method whenever the exchange currency code is updated in the configuration to ensure the loader is updated accordingly.",
              "How-it-is-done": "The method retrieves the exchange currency code from the configuration, sets it as the selection argument for the loader, and then forces a reload of the loader.",
              "Property": {
                "pre-conditions": [
                  "The 'config' object must be initialized and provide the exchange currency code."
                ],
                "post-conditions": [
                  "The loader will be updated with the new exchange currency code and reloaded."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.SelectedExchangeRateLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.data.SelectedExchangeRateLiveData.onInactive()",
            "description": {
              "What": "Unregisters a shared preference change listener and stops loading data when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "Listener",
                  "description": "The shared preference change listener to unregister."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and stop unnecessary data loading when the LiveData is not active.",
              "How-to-use": "Extend the SelectedExchangeRateLiveData class and override the onInactive method to perform cleanup tasks when the LiveData is inactive.",
              "How-it-is-done": "The method first unregisters the shared preference change listener using the config object and then stops loading data using the loader object.",
              "Property": {
                "pre-conditions": "The LiveData must be in an inactive state.",
                "post-conditions": "The shared preference change listener is unregistered and data loading is stopped."
              }
            }
          },
          "de.schildbach.wallet.data.SelectedExchangeRateLiveData.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.SelectedExchangeRateLiveData.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)",
            "description": {
              "What": "This method is triggered when a shared preference is changed, specifically for the exchange currency preference, and calls the onCurrencyChange method.",
              "Parameters": [
                {
                  "name": "sharedPreferences",
                  "type": "android.content.SharedPreferences",
                  "description": "The shared preferences object that was changed."
                },
                {
                  "name": "key",
                  "type": "java.lang.String",
                  "description": "The key of the preference that was changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle changes in the exchange currency preference and update the LiveData accordingly.",
              "How-to-use": "Create an instance of SelectedExchangeRateLiveData and register it as a shared preference change listener to react to changes in the exchange currency preference.",
              "How-it-is-done": "When the specified key matches the exchange currency preference key, the onCurrencyChange method is called to update the LiveData with the new exchange rate.",
              "Property": {
                "pre-conditions": "The shared preference key must be for the exchange currency preference.",
                "post-conditions": "The LiveData reflecting the selected exchange rate is updated based on the new exchange currency preference."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.SingleLiveEvent": {
        "qualifiedName": "de.schildbach.wallet.data.SingleLiveEvent",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.SingleLiveEvent.call()": {
            "qualifiedName": "de.schildbach.wallet.data.SingleLiveEvent.call()",
            "description": {
              "What": "Sets the value of the SingleLiveEvent to null.",
              "Parameters": [],
              "Returns": {
                "Type": "void",
                "Description": "This method does not return anything."
              },
              "Why": "To trigger observers of the SingleLiveEvent with a null value.",
              "How-to-use": "Simply call the 'call()' method on an instance of SingleLiveEvent to notify observers with a null value.",
              "How-it-is-done": "The method internally calls the 'setValue(null)' method to set the value of the SingleLiveEvent to null.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "The value of the SingleLiveEvent is set to null."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.SingleLiveEvent.de.schildbach.wallet.data.SingleLiveEvent()": {
            "qualifiedName": "de.schildbach.wallet.data.SingleLiveEvent.de.schildbach.wallet.data.SingleLiveEvent()",
            "description": {
              "What": "Creates a new instance of SingleLiveEvent.",
              "Parameters": [],
              "Returns": {
                "type": "SingleLiveEvent",
                "description": "A new instance of SingleLiveEvent."
              },
              "Why": "To provide a way to observe a single event with LiveData.",
              "How-to-use": "Simply call the constructor to create a new instance of SingleLiveEvent.",
              "How-it-is-done": "The method initializes a new instance of SingleLiveEvent without any parameters.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of SingleLiveEvent is created and ready to be observed."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.SingleLiveEvent.observe(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Observer)": {
            "qualifiedName": "de.schildbach.wallet.data.SingleLiveEvent.observe(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Observer)",
            "description": {
              "What": "This method allows an observer to be registered to listen for changes in the SingleLiveEvent data, ensuring that only one observer is notified of changes.",
              "Parameters": [
                {
                  "name": "owner",
                  "type": "android.arch.lifecycle.LifecycleOwner",
                  "description": "The LifecycleOwner that will control the observer's lifecycle."
                },
                {
                  "name": "observer",
                  "type": "android.arch.lifecycle.Observer<T>",
                  "description": "The observer that will be notified of changes in the SingleLiveEvent data."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To ensure that only one observer is notified of changes in the SingleLiveEvent data, preventing multiple observers from receiving the same update.",
              "How-to-use": "Call this method with a LifecycleOwner and an Observer to register the observer for changes in the SingleLiveEvent data.",
              "How-it-is-done": "The method first checks if there are active observers, logs a warning if multiple observers are registered, and then sets up a new observer that will only notify the provided observer if there are pending changes in the SingleLiveEvent data.",
              "Property": {
                "pre-conditions": [
                  "The SingleLiveEvent instance must not be null."
                ],
                "post-conditions": [
                  "Only one observer will be notified of changes in the SingleLiveEvent data."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.SingleLiveEvent.postCall()": {
            "qualifiedName": "de.schildbach.wallet.data.SingleLiveEvent.postCall()",
            "description": {
              "method": "This method posts a null value to the observers of the SingleLiveEvent.",
              "parameters": [
                {
                  "name": "",
                  "type": "null",
                  "description": "No parameters are required."
                }
              ],
              "returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "why": "This method is provided to trigger the observers of the SingleLiveEvent.",
              "how-to-use": "Simply call postCall() on an instance of SingleLiveEvent to notify its observers with a null value.",
              "how-it-is-done": "The method calls the postValue() method of SingleLiveEvent with a null parameter, triggering the observers with the null value.",
              "property": {
                "pre-conditions": [
                  "An instance of SingleLiveEvent must be created before calling this method."
                ],
                "post-conditions": [
                  "Observers of the SingleLiveEvent will be notified with a null value."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.SingleLiveEvent.setValue(java.lang.Object)": {
            "qualifiedName": "de.schildbach.wallet.data.SingleLiveEvent.setValue(java.lang.Object)",
            "description": {
              "method": {
                "What": "Sets the given value and marks it as pending.",
                "Parameters": [
                  {
                    "name": "t",
                    "type": "T",
                    "description": "The value to be set."
                  },
                  {
                    "Returns": "void",
                    "description": "This method does not return anything."
                  },
                  "Why"
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.ThrottelingLiveData": {
        "qualifiedName": "de.schildbach.wallet.data.ThrottelingLiveData",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.data.ThrottelingLiveData.de.schildbach.wallet.data.ThrottelingLiveData()": {
            "qualifiedName": "de.schildbach.wallet.data.ThrottelingLiveData.de.schildbach.wallet.data.ThrottelingLiveData()",
            "description": {
              "What": "Initialize ThrottelingLiveData with default throttle milliseconds.",
              "Parameters": [
                {
                  "name": "DEFAULT_THROTTLE_MS",
                  "type": "int",
                  "description": "Default throttle milliseconds value."
                }
              ],
              "Returns": {
                "type": "ThrottelingLiveData",
                "description": "A new instance of ThrottelingLiveData initialized with the default throttle milliseconds."
              },
              "Why": "To provide a convenient way to initialize ThrottelingLiveData with a default throttle value.",
              "How-to-use": "Simply create a new instance of ThrottelingLiveData to use the default throttle milliseconds.",
              "How-it-is-done": "The constructor calls another constructor of ThrottelingLiveData class with the default throttle milliseconds value as a parameter.",
              "Property": {
                "pre-conditions": [
                  "The DEFAULT_THROTTLE_MS value should be a valid integer representing milliseconds."
                ],
                "post-conditions": [
                  "A new instance of ThrottelingLiveData is created with the default throttle milliseconds value."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ThrottelingLiveData.de.schildbach.wallet.data.ThrottelingLiveData(long)": {
            "qualifiedName": "de.schildbach.wallet.data.ThrottelingLiveData.de.schildbach.wallet.data.ThrottelingLiveData(long)",
            "description": {
              "method": "Initialize ThrottelingLiveData with a specified throttle time in milliseconds.",
              "parameters": [
                {
                  "name": "throttleMs",
                  "type": "long",
                  "description": "The throttle time in milliseconds to limit the rate of updates."
                }
              ],
              "returns": {
                "type": "ThrottelingLiveData",
                "description": "A new instance of ThrottelingLiveData initialized with the specified throttle time."
              },
              "why": "To control the rate of updates and prevent excessive updates in LiveData objects.",
              "how-to-use": "Create a new ThrottelingLiveData object by passing the desired throttle time in milliseconds as a parameter to the constructor.",
              "how-it-is-done": "The constructor initializes the ThrottelingLiveData object with the provided throttle time, setting the internal throttleMs variable to the specified value.",
              "property": {
                "pre-conditions": [
                  "The throttleMs parameter must be a non-negative long value."
                ],
                "post-conditions": [
                  "The ThrottelingLiveData object is successfully initialized with the specified throttle time."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.ThrottelingLiveData.load()": {
            "qualifiedName": "de.schildbach.wallet.data.ThrottelingLiveData.load()",
            "description": {
              "What": "This method is used to load data in the ThrottelingLiveData class.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow subclasses to implement their own data loading logic.",
              "How-to-use": "Subclasses of ThrottelingLiveData can override this method to load data from a data source.",
              "How-it-is-done": "The implementation of this method will vary depending on the specific data loading requirements of the subclass.",
              "Property": {
                "pre-conditions": "This method should be overridden by subclasses to implement data loading logic.",
                "post-conditions": "After calling this method, the subclass should have loaded the required data."
              }
            }
          },
          "de.schildbach.wallet.data.ThrottelingLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.data.ThrottelingLiveData.onInactive()",
            "description": {
              "What": "Removes all pending messages and callbacks from the handler when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that no pending messages or callbacks are left in the handler when the LiveData is not active, preventing unnecessary processing.",
              "How-to-use": "Extend the ThrottelingLiveData class and override the onInactive() method to add custom behavior when the LiveData becomes inactive.",
              "How-it-is-done": "The method calls the super.onInactive() to perform any necessary cleanup in the superclass, then removes all pending messages and callbacks from the handler by calling handler.removeCallbacksAndMessages(null).",
              "Property": {
                "pre-conditions": "The LiveData must be active before calling this method.",
                "post-conditions": "All pending messages and callbacks are removed from the handler when the LiveData becomes inactive."
              }
            }
          },
          "de.schildbach.wallet.data.ThrottelingLiveData.triggerLoad()": {
            "qualifiedName": "de.schildbach.wallet.data.ThrottelingLiveData.triggerLoad()",
            "description": {
              "What": "Triggers a load operation with throttling to prevent frequent calls.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To control the frequency of load operations and prevent excessive calls to the load method.",
              "How-to-use": "Call this method when you want to trigger a load operation with throttling in place to prevent frequent calls.",
              "How-it-is-done": "The method removes any pending callbacks, creates a new runnable that updates the last message timestamp and calls the load method, calculates the time since the last message, and either posts a delayed runnable or directly runs the runnable based on the throttle time.",
              "Property": {
                "pre-conditions": [
                  "The 'handler' field must be initialized with a valid Handler instance.",
                  "The 'load' method must be implemented in the subclass."
                ],
                "post-conditions": [
                  "The load operation is triggered with throttling applied to control the frequency of calls."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.TimeLiveData": {
        "qualifiedName": "de.schildbach.wallet.data.TimeLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.TimeLiveData.de.schildbach.wallet.data.TimeLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.data.TimeLiveData.de.schildbach.wallet.data.TimeLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initializes a TimeLiveData object with a WalletApplication instance.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance to be used."
                }
              ],
              "Returns": {
                "type": "TimeLiveData",
                "description": "A new TimeLiveData object initialized with the provided WalletApplication instance."
              },
              "Why": "To provide a way to observe changes in time-related data within the WalletApplication.",
              "How-to-use": "Create a new TimeLiveData object by passing a WalletApplication instance as a parameter, then observe changes in time-related data using LiveData observers.",
              "How-it-is-done": "The constructor simply assigns the provided WalletApplication instance to the 'application' field of the TimeLiveData object.",
              "Property": {
                "pre-conditions": [
                  "The 'application' parameter must not be null."
                ],
                "post-conditions": [
                  "The TimeLiveData object is initialized with the provided WalletApplication instance."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.TimeLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.data.TimeLiveData.onActive()",
            "description": {
              "What": "Registers a broadcast receiver for time ticks and sets the current date as the value of the LiveData.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the LiveData with the current date whenever the LiveData becomes active.",
              "How-to-use": "Simply call this method when the LiveData needs to be updated with the current date, typically when the LiveData becomes active.",
              "How-it-is-done": "The method registers a broadcast receiver for time ticks using ACTION_TIME_TICK intent and sets the current date as the value of the LiveData.",
              "Property": {
                "pre-conditions": [
                  "The application context must be available."
                ],
                "post-conditions": [
                  "The LiveData is updated with the current date."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.TimeLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.data.TimeLiveData.onInactive()",
            "description": {
              "What": "Unregisters a broadcast receiver when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "tickReceiver",
                  "type": "BroadcastReceiver",
                  "description": "The broadcast receiver to unregister."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and prevent memory leaks by unregistering the broadcast receiver when it is no longer needed.",
              "How-to-use": "Create an instance of TimeLiveData and override the onInactive method to unregister the desired broadcast receiver.",
              "How-it-is-done": "When the LiveData becomes inactive, the onInactive method is called, which then unregisters the specified broadcast receiver using the application's unregisterReceiver method.",
              "Property": {
                "pre-conditions": [
                  "The application context must be set before calling this method."
                ],
                "post-conditions": [
                  "The specified broadcast receiver is successfully unregistered."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.WalletBalanceLiveData": {
        "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.WalletBalanceLiveData.addWalletListener(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData.addWalletListener(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method adds event listeners to a Bitcoin wallet for various events like coins received, coins sent, reorganization, and change.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The Bitcoin wallet to add event listeners to."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow external classes to listen for specific events related to the Bitcoin wallet and react accordingly.",
              "How-to-use": "Call this method with an instance of a Bitcoin wallet to start listening for events related to coins received, coins sent, reorganization, and change.",
              "How-it-is-done": "The method uses the provided wallet instance to add event listeners for coins received, coins sent, reorganization, and change events. It specifies that the event listeners should run on the same thread.",
              "Property": {
                "pre-conditions": "The 'wallet' parameter must not be null.",
                "post-conditions": "Event listeners for coins received, coins sent, reorganization, and change are successfully added to the wallet."
              }
            }
          },
          "de.schildbach.wallet.data.WalletBalanceLiveData.de.schildbach.wallet.data.WalletBalanceLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData.de.schildbach.wallet.data.WalletBalanceLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a new instance of WalletBalanceLiveData with the specified WalletApplication and BalanceType.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance to use for the WalletBalanceLiveData."
                }
              ],
              "Returns": {
                "type": "WalletBalanceLiveData",
                "description": "A new instance of WalletBalanceLiveData initialized with the provided WalletApplication and BalanceType."
              },
              "Why": "To provide a convenient way to create a LiveData object for observing wallet balance changes.",
              "How-to-use": "Create a new instance of WalletBalanceLiveData by passing a WalletApplication instance as the parameter.",
              "How-it-is-done": "The constructor initializes the WalletBalanceLiveData instance with the provided WalletApplication and a default BalanceType of ESTIMATED.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "A new instance of WalletBalanceLiveData is successfully created."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.WalletBalanceLiveData.de.schildbach.wallet.data.WalletBalanceLiveData(de.schildbach.wallet.WalletApplication,org.bitcoinj.wallet.Wallet.BalanceType)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData.de.schildbach.wallet.data.WalletBalanceLiveData(de.schildbach.wallet.WalletApplication,org.bitcoinj.wallet.Wallet.BalanceType)",
            "description": {
              "What": "This method initializes a LiveData object to observe changes in the wallet balance.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance."
                },
                {
                  "name": "balanceType",
                  "type": "org.bitcoinj.wallet.Wallet.BalanceType",
                  "description": "The type of balance to observe changes for."
                }
              ],
              "Returns": {
                "type": "WalletBalanceLiveData",
                "description": "A LiveData object for observing wallet balance changes."
              },
              "Why": "To provide a reactive way to monitor changes in the wallet balance and update UI accordingly.",
              "How-to-use": "Create an instance of WalletBalanceLiveData by passing a WalletApplication instance and a BalanceType, then observe changes in the wallet balance using LiveData's observe() method.",
              "How-it-is-done": "The method assigns the provided application and balanceType to class variables, and retrieves the configuration from the application.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null.",
                  "The balanceType parameter must not be null."
                ],
                "post-conditions": [
                  "A WalletBalanceLiveData object is created with the provided application and balanceType."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.WalletBalanceLiveData.load()": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData.load()",
            "description": {
              "What": "Asynchronously loads the balance of a wallet and updates the LiveData with the balance value.",
              "Parameters": [
                {
                  "name": "balanceType",
                  "type": "int",
                  "description": "The type of balance to retrieve."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the LiveData with the latest balance value in an asynchronous manner.",
              "How-to-use": "Create an instance of WalletBalanceLiveData, set the wallet, and call the load() method with the desired balance type to update the LiveData.",
              "How-it-is-done": "The method retrieves the wallet instance, executes a Runnable task asynchronously, sets the context, and updates the LiveData with the balance value.",
              "Property": {
                "pre-conditions": [
                  "The wallet instance must be set before calling this method."
                ],
                "post-conditions": [
                  "The LiveData will be updated with the balance value after the asynchronous task is completed."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.WalletBalanceLiveData.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)",
            "description": {
              "What": "Reloads the wallet balance when the BTC precision preference is changed.",
              "Parameters": [
                {
                  "name": "sharedPreferences",
                  "type": "android.content.SharedPreferences",
                  "description": "The SharedPreferences object containing the preferences."
                },
                {
                  "name": "key",
                  "type": "java.lang.String",
                  "description": "The key of the preference that was changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the wallet balance based on changes in the BTC precision preference.",
              "How-to-use": "Register an instance of WalletBalanceLiveData as a SharedPreferences.OnSharedPreferenceChangeListener and handle the onSharedPreferenceChanged callback to react to changes in the BTC precision preference.",
              "How-it-is-done": "The method checks if the key of the changed preference is related to BTC precision, and if so, it calls the load method to reload the wallet balance.",
              "Property": {
                "pre-conditions": [
                  "The WalletBalanceLiveData instance must be registered as a listener for SharedPreferences changes."
                ],
                "post-conditions": [
                  "The wallet balance is reloaded if the BTC precision preference is changed."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.WalletBalanceLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Adds a wallet listener, registers a shared preference change listener, and loads data when the wallet becomes active.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that becomes active."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To perform necessary actions when the wallet becomes active, such as updating data and listening for changes.",
              "How-to-use": "Call this method when a wallet becomes active to set up listeners and load data for the wallet.",
              "How-it-is-done": "The method adds a wallet listener to the provided wallet, registers a shared preference change listener on the configuration, and then calls the load method to load data.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "A wallet listener is added to the provided wallet.",
                  "A shared preference change listener is registered on the configuration.",
                  "Data is loaded for the wallet."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.WalletBalanceLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Unregisters a shared preference change listener and removes a wallet listener when the wallet becomes inactive.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that has become inactive."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and listeners associated with the wallet when it is no longer active.",
              "How-to-use": "Call this method when the wallet becomes inactive to unregister shared preference change listener and remove wallet listener.",
              "How-it-is-done": "The method first unregisters the shared preference change listener by calling 'config.unregisterOnSharedPreferenceChangeListener(this)' and then removes the wallet listener by calling 'removeWalletListener(wallet)'.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "The shared preference change listener is unregistered.",
                  "The wallet listener is removed."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.WalletBalanceLiveData.removeWalletListener(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData.removeWalletListener(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method removes a listener from the specified Bitcoin wallet for various events such as changes, reorganizations, coins sent, and coins received.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The Bitcoin wallet from which the listener needs to be removed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow users to manage and customize the event listeners attached to a Bitcoin wallet.",
              "How-to-use": "Call this method with the Bitcoin wallet object as the parameter to remove the specified listener from the wallet.",
              "How-it-is-done": "The method calls the remove methods on the wallet object for the change event listener, reorganize event listener, coins sent event listener, and coins received event listener, effectively detaching the listener from the wallet.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must not be null."
                ],
                "post-conditions": [
                  "The specified listener is successfully removed from the wallet for all relevant events."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener": {
        "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener.de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener()": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener.de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener()",
            "description": {
              "What": "Initialize a new instance of WalletListener.",
              "Parameters": [],
              "Returns": "WalletListener instance.",
              "Why": "To provide a constructor for initializing a WalletListener instance.",
              "How-to-use": "Simply create a new instance of WalletListener by calling the constructor.",
              "How-it-is-done": "The method creates a new instance of WalletListener without any parameters.",
              "Property": {
                "Pre-conditions": "None.",
                "Post-conditions": "A new WalletListener instance is created."
              }
            }
          },
          "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener.onCoinsReceived(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener.onCoinsReceived(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)",
            "description": {
              "method": {
                "What": "Triggers a load operation when coins are received in the wallet.",
                "Parameters": [
                  {
                    "name": "wallet",
                    "type": "org.bitcoinj.wallet.Wallet",
                    "description": "The wallet receiving the coins."
                  },
                  {
                    "name": "tx",
                    "type": "org.bitcoinj.core.Transaction",
                    "description": "The transaction containing the received coins."
                  },
                  {
                    "name": "prevBalance",
                    "type": "org.bitcoinj.core.Coin",
                    "description": "The previous balance of the wallet before receiving the coins."
                  },
                  {
                    "name": "newBalance",
                    "type": "org.bitcoinj.core.Coin",
                    "description": "The new balance of the wallet after receiving the coins."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To update the balance of the wallet and trigger a load operation when new coins are received.",
                "How-to-use": "Create an instance of WalletBalanceLiveData$WalletListener and register it as a listener to a Bitcoin wallet. When coins are received, the onCoinsReceived method will be called automatically.",
                "How-it-is-done": "The method simply triggers a load operation when coins are received by calling the triggerLoad() method.",
                "Property": {
                  "pre-conditions": "The wallet, transaction, previous balance, and new balance parameters must not be null.",
                  "post-conditions": "After the method is executed, a load operation is triggered to update the wallet balance."
                }
              }
            }
          },
          "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener.onCoinsSent(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener.onCoinsSent(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)",
            "description": {
              "method": {
                "What": "Triggers a load operation when coins are sent from the wallet.",
                "Parameters": [
                  {
                    "name": "wallet",
                    "type": "org.bitcoinj.wallet.Wallet",
                    "description": "The wallet from which coins are sent."
                  },
                  {
                    "name": "tx",
                    "type": "org.bitcoinj.core.Transaction",
                    "description": "The transaction that sent the coins."
                  },
                  {
                    "name": "prevBalance",
                    "type": "org.bitcoinj.core.Coin",
                    "description": "The previous balance of the wallet before the coins were sent."
                  },
                  {
                    "name": "newBalance",
                    "type": "org.bitcoinj.core.Coin",
                    "description": "The new balance of the wallet after the coins were sent."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To handle the event of coins being sent from the wallet and trigger a load operation.",
                "How-to-use": "Create an instance of WalletBalanceLiveData$WalletListener and register it as a listener to a Wallet object to handle coins being sent events.",
                "How-it-is-done": "When coins are sent from the wallet, the method triggerLoad() is called to initiate a load operation.",
                "Property": {
                  "pre-conditions": "The wallet, transaction, previous balance, and new balance parameters must not be null.",
                  "post-conditions": "A load operation is triggered to update the wallet balance after coins are sent."
                }
              }
            }
          },
          "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener.onReorganize(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener.onReorganize(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Triggers a load operation when the wallet undergoes a reorganization.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that has undergone a reorganization."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle reorganizations in the wallet and update the balance accordingly.",
              "How-to-use": "Create an instance of WalletBalanceLiveData$WalletListener and override the onReorganize method to define the behavior when a reorganization occurs in the wallet.",
              "How-it-is-done": "When the onReorganize method is called, it triggers a load operation by invoking the triggerLoad method.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "A load operation is triggered to update the balance after a reorganization."
                ]
              }
            }
          },
          "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener.onWalletChanged(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletBalanceLiveData$WalletListener.onWalletChanged(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Triggers a load operation when the wallet is changed.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet object that has been changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the event of a wallet being changed and trigger a load operation accordingly.",
              "How-to-use": "Create an instance of WalletBalanceLiveData$WalletListener and override the onWalletChanged method to define the behavior when the wallet changes. Register this listener with the wallet object to receive notifications.",
              "How-it-is-done": "When the onWalletChanged method is called with a new wallet object, it simply calls the triggerLoad method to initiate a load operation.",
              "Property": {
                "pre-conditions": [
                  "The wallet object passed to the method must not be null."
                ],
                "post-conditions": [
                  "A load operation is triggered after the method is called."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.data.WalletLiveData": {
        "qualifiedName": "de.schildbach.wallet.data.WalletLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.data.WalletLiveData.de.schildbach.wallet.data.WalletLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletLiveData.de.schildbach.wallet.data.WalletLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "method": {
                "What": "Initializes a new instance of WalletLiveData with the provided WalletApplication.",
                "Parameters": [
                  {
                    "name": "application",
                    "type": "de.schildbach.wallet.WalletApplication",
                    "description": "The WalletApplication instance to use."
                  },
                  "Returns"
                ],
                "Returns": {
                  "type": "WalletLiveData",
                  "description": "A new instance of WalletLiveData."
                },
                "Why": "To create a LiveData object specifically tailored for the WalletApplication.",
                "How-to-use": "Create a new instance of WalletLiveData by passing a WalletApplication instance as the parameter.",
                "How-it-is-done": "The method calls the super constructor of LiveData with the provided WalletApplication and 0 as the initial value.",
                "Property": {
                  "pre-conditions": "The application parameter must not be null.",
                  "post-conditions": "A new WalletLiveData instance is created with the provided WalletApplication."
                }
              }
            }
          },
          "de.schildbach.wallet.data.WalletLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.data.WalletLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Posts the active wallet to the observers of the LiveData.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The active wallet to be posted to the observers."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the observers with the active wallet whenever it changes.",
              "How-to-use": "Create an instance of WalletLiveData, observe it using observe() method, and whenever the active wallet changes, the observers will be notified automatically.",
              "How-it-is-done": "The method overrides the onWalletActive() method from the superclass and simply calls postValue() method with the wallet parameter to notify the observers.",
              "Property": {
                "pre-conditions": "The wallet parameter must not be null.",
                "post-conditions": "The observers of the LiveData will be notified with the active wallet."
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.integration.android": {
    "qualifiedName": "de.schildbach.wallet.integration.android",
    "classes": {
      "de.schildbach.wallet.integration.android.BitcoinIntegration": {
        "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.integration.android.BitcoinIntegration.de.schildbach.wallet.integration.android.BitcoinIntegration()": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.de.schildbach.wallet.integration.android.BitcoinIntegration()",
            "description": {
              "What": "Initialize a BitcoinIntegration object.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this constructor."
                }
              ],
              "Returns": {
                "type": "BitcoinIntegration",
                "description": "A new instance of BitcoinIntegration class."
              },
              "Why": "To provide a way to create an instance of BitcoinIntegration for integration purposes.",
              "How-to-use": "Simply call the constructor BitcoinIntegration() to create a new instance of BitcoinIntegration.",
              "How-it-is-done": "The constructor initializes a new instance of the BitcoinIntegration class without any parameters.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new instance of BitcoinIntegration is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.makeBitcoinUriIntent(java.lang.String,java.lang.Long)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.makeBitcoinUriIntent(java.lang.String,java.lang.Long)",
            "description": {
              "What": "This method creates an Intent for viewing a Bitcoin URI with a specified address and amount.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "String",
                  "description": "The Bitcoin address to include in the URI."
                },
                {
                  "name": "amount",
                  "type": "Long",
                  "description": "The amount of Bitcoin to include in the URI."
                }
              ],
              "Returns": {
                "type": "Intent",
                "description": "An Intent for viewing a Bitcoin URI with the specified address and amount."
              },
              "Why": "To provide a convenient way to create Intents for handling Bitcoin URIs in Android applications.",
              "How-to-use": "Call this method with a Bitcoin address and amount to get an Intent that can be used to view the corresponding Bitcoin URI.",
              "How-it-is-done": "The method constructs a Bitcoin URI string based on the provided address and amount, then creates an Intent with the ACTION_VIEW action and the URI as the data.",
              "Property": {
                "pre-conditions": [
                  "The address parameter can be null, but the amount parameter must be a valid Long value."
                ],
                "post-conditions": [
                  "The returned Intent is ready to be used for viewing a Bitcoin URI with the specified address and amount."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.makePaymentRequestIntent(byte[])": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.makePaymentRequestIntent(byte[])",
            "description": {
              "What": "Creates an intent for viewing a Bitcoin payment request.",
              "Parameters": [
                {
                  "name": "paymentRequest",
                  "type": "byte[]",
                  "description": "The Bitcoin payment request in byte array format."
                }
              ],
              "Returns": {
                "type": "android.content.Intent",
                "description": "An intent for viewing the Bitcoin payment request."
              },
              "Why": "To provide a method for generating intents to view Bitcoin payment requests.",
              "How-to-use": "Call this method with the byte array of the Bitcoin payment request to get an intent that can be used to view the payment request.",
              "How-it-is-done": "The method creates a new intent with the action set to ACTION_VIEW and the type set to MIMETYPE_PAYMENTREQUEST. It then adds the payment request byte array as an extra with the key INTENT_EXTRA_PAYMENTREQUEST.",
              "Property": {
                "pre-conditions": "The paymentRequest parameter must not be null.",
                "post-conditions": "The returned intent will have the necessary data to view the Bitcoin payment request."
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.paymentFromResult(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.paymentFromResult(android.content.Intent)",
            "description": {
              "What": "This method retrieves a byte array representing a payment from the result of an Android Intent.",
              "Parameters": [
                {
                  "name": "result",
                  "type": "android.content.Intent",
                  "description": "The Android Intent containing the payment data."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "A byte array representing the payment data."
              },
              "Why": "To extract payment data from an Intent for further processing within the BitcoinIntegration class.",
              "How-to-use": "Call this method with the Intent result as the parameter to retrieve the payment data as a byte array.",
              "How-it-is-done": "The method simply retrieves the byte array stored as an extra in the Intent using the key INTENT_EXTRA_PAYMENT.",
              "Property": {
                "pre-conditions": [
                  "The Intent passed as a parameter must contain the payment data as a byte array with the key INTENT_EXTRA_PAYMENT."
                ],
                "post-conditions": [
                  "The method returns the byte array representing the payment data from the Intent."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.paymentRequestFromIntent(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.paymentRequestFromIntent(android.content.Intent)",
            "description": {
              "What": "This method retrieves a payment request byte array from an Android Intent.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The Intent containing the payment request byte array."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "The payment request byte array extracted from the Intent."
              },
              "Why": "To allow easy extraction of payment request data from an Intent in Bitcoin integration scenarios.",
              "How-to-use": "Call this method with the Intent that contains the payment request byte array to retrieve the payment request data.",
              "How-it-is-done": "The method simply retrieves the byte array stored in the Intent using the key INTENT_EXTRA_PAYMENTREQUEST and returns it.",
              "Property": {
                "pre-conditions": [
                  "The Intent passed to the method must contain a byte array with the key INTENT_EXTRA_PAYMENTREQUEST."
                ],
                "post-conditions": [
                  "The method returns the payment request byte array from the Intent."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.paymentToResult(android.content.Intent,byte[])": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.paymentToResult(android.content.Intent,byte[])",
            "description": {
              "What": "This method adds a byte array representing a payment to an Android Intent object.",
              "Parameters": [
                {
                  "name": "result",
                  "type": "android.content.Intent",
                  "description": "The Intent object to which the payment byte array will be added."
                },
                {
                  "name": "payment",
                  "type": "byte[]",
                  "description": "The byte array representing the payment to be added to the Intent."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow passing payment information between components in an Android application.",
              "How-to-use": "Call this method with an Intent object and a byte array representing the payment to add the payment information to the Intent.",
              "How-it-is-done": "The method takes an Intent object and a byte array as parameters, then adds the byte array to the Intent using a specific key defined in the BitcoinIntegration class.",
              "Property": {
                "pre-conditions": [
                  "The 'result' parameter must not be null.",
                  "The 'payment' parameter must not be null."
                ],
                "post-conditions": [
                  "The Intent object 'result' will contain the payment byte array under the key specified in the BitcoinIntegration class."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.redirectToDownload(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.redirectToDownload(android.content.Context)",
            "description": {
              "What": "Redirects the user to download a Bitcoin application if none is found on the device.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the current application."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To prompt users to download a Bitcoin application if one is not found on their device.",
              "How-to-use": "Call this method with the current application's context as the parameter to redirect users to download a Bitcoin application if none is found.",
              "How-it-is-done": "The method creates a Toast message to inform the user, creates Intents to open the Google Play Store or a web browser to download a Bitcoin application, checks if the device has the necessary activities to handle these Intents, and starts the appropriate activity.",
              "Property": {
                "pre-conditions": [
                  "The 'context' parameter must not be null."
                ],
                "post-conditions": [
                  "The user is redirected to download a Bitcoin application if none is found on the device."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.request(android.content.Context,byte[])": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.request(android.content.Context,byte[])",
            "description": {
              "What": "This method is used to request a payment using a Bitcoin integration in an Android application.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the Android application."
                },
                {
                  "name": "paymentRequest",
                  "type": "byte[]",
                  "description": "The payment request in byte array format."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way for Android applications to request Bitcoin payments using the Bitcoin integration.",
              "How-to-use": "Simply call this method with the context of the application and the payment request in byte array format to initiate a payment request.",
              "How-it-is-done": "The method creates an intent using the payment request byte array, then starts the Bitcoin integration with the created intent.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null.",
                  "The paymentRequest parameter must not be null."
                ],
                "post-conditions": [
                  "A payment request using the Bitcoin integration is initiated."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.request(android.content.Context,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.request(android.content.Context,java.lang.String)",
            "description": {
              "What": "This method generates a Bitcoin URI intent and starts an activity with the given address.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the intent will be started."
                },
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The Bitcoin address to be included in the URI."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to generate a Bitcoin URI intent and start an activity with the given address.",
              "How-to-use": "Simply call this method with the context and Bitcoin address as parameters to generate the intent and start the activity.",
              "How-it-is-done": "The method creates a Bitcoin URI intent using the provided address and then starts an activity with that intent using the context.",
              "Property": {
                "pre-conditions": [
                  "The context must not be null.",
                  "The address must be a valid Bitcoin address."
                ],
                "post-conditions": [
                  "An activity will be started with the Bitcoin URI intent containing the given address."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.request(android.content.Context,java.lang.String,long)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.request(android.content.Context,java.lang.String,long)",
            "description": {
              "What": "This method generates a Bitcoin URI intent and starts an activity with the given address and amount.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                },
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The Bitcoin address to send funds to."
                },
                {
                  "name": "amount",
                  "type": "long",
                  "description": "The amount of Bitcoin to send in satoshis."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to request Bitcoin payments within an Android application.",
              "How-to-use": "Call this method with the context of the application, the recipient's Bitcoin address, and the amount to request payment.",
              "How-it-is-done": "The method creates a Bitcoin URI intent using the provided address and amount, then starts an activity with this intent using the context.",
              "Property": {
                "pre-conditions": [
                  "The context must not be null.",
                  "The address must be a valid Bitcoin address.",
                  "The amount must be a non-negative long value."
                ],
                "post-conditions": [
                  "An activity is started with the Bitcoin URI intent containing the address and amount."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.requestForResult(android.app.Activity,int,byte[])": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.requestForResult(android.app.Activity,int,byte[])",
            "description": {
              "What": "This method requests for a result from an activity using a payment request byte array.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity from which the result is requested."
                },
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code to identify the result."
                },
                {
                  "name": "paymentRequest",
                  "type": "byte[]",
                  "description": "The payment request byte array used for the request."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To facilitate requesting for a result using a payment request byte array in Android integration.",
              "How-to-use": "Call this method with the activity, request code, and payment request byte array to initiate the request for a result.",
              "How-it-is-done": "The method creates an intent using the payment request byte array, then starts the activity for result with the provided request code and intent.",
              "Property": {
                "pre-conditions": [
                  "The activity must not be null.",
                  "The paymentRequest byte array must not be null."
                ],
                "post-conditions": [
                  "The activity will receive the result based on the request code provided."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.requestForResult(android.app.Activity,int,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.requestForResult(android.app.Activity,int,java.lang.String)",
            "description": {
              "What": "Requests a result from the Bitcoin wallet integration for a given address.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The current activity where the result will be returned."
                },
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code to identify the result."
                },
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The Bitcoin address for which the result is requested."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To initiate a request for a result related to a Bitcoin address from the wallet integration.",
              "How-to-use": "Call this method with the current activity, a request code, and the Bitcoin address to receive a result related to the address.",
              "How-it-is-done": "The method creates an intent using the Bitcoin address, then starts the activity for result with the created intent.",
              "Property": {
                "pre-conditions": [
                  "The activity parameter must not be null.",
                  "The requestCode must be a valid integer.",
                  "The address parameter must not be null or empty."
                ],
                "post-conditions": [
                  "The activity will receive a result related to the Bitcoin address."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.requestForResult(android.app.Activity,int,java.lang.String,long)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.requestForResult(android.app.Activity,int,java.lang.String,long)",
            "description": {
              "What": "Requests for a result from the Bitcoin wallet integration with a specified address and amount.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity context to start the integration."
                },
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code to identify the result."
                },
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The Bitcoin address to send funds to."
                },
                {
                  "name": "amount",
                  "type": "long",
                  "description": "The amount of Bitcoin to send."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To facilitate requesting for a result from the Bitcoin wallet integration with a specified address and amount.",
              "How-to-use": "Call this method with the activity context, request code, Bitcoin address, and amount to initiate the integration and request for a result.",
              "How-it-is-done": "The method creates a Bitcoin URI intent with the specified address and amount, then starts the integration for result with the provided activity and intent.",
              "Property": {
                "pre-conditions": [
                  "The activity context must not be null.",
                  "The request code must be a valid integer.",
                  "The Bitcoin address must be a valid string.",
                  "The amount must be a valid long value."
                ],
                "post-conditions": [
                  "The integration for result is initiated successfully."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.start(android.content.Context,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.start(android.content.Context,android.content.Intent)",
            "description": {
              "What": "Starts an activity with the given intent or redirects to download if no activity is resolved.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the activity should be started."
                },
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent to start the activity with."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the starting of activities based on the provided intent and to redirect to download if the activity is not resolved.",
              "How-to-use": "Call this method with a valid context and intent to start an activity, or handle the redirection to download if the activity is not resolved.",
              "How-it-is-done": "The method first checks if the intent can be resolved to an activity using the package manager. If resolved, it starts the activity with the given intent. If not resolved, it redirects to download by calling another method.",
              "Property": {
                "pre-conditions": [
                  "The context and intent parameters must not be null."
                ],
                "post-conditions": [
                  "If an activity is resolved for the intent, it will be started in the provided context.",
                  "If no activity is resolved for the intent, the method will redirect to download."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.startForResult(android.app.Activity,int,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.startForResult(android.app.Activity,int,android.content.Intent)",
            "description": {
              "What": "Starts an activity for result if the intent can be resolved, otherwise redirects to download page.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity context from which to start the activity."
                },
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code to identify the result when the activity finishes."
                },
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent to start the activity with."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the case where the intent cannot be resolved by redirecting the user to download the required app.",
              "How-to-use": "Call this method with the activity context, request code, and intent to start the activity for result.",
              "How-it-is-done": "The method first checks if the intent can be resolved by the package manager of the activity. If it can be resolved, it starts the activity for result with the given request code. If not, it redirects the user to download the required app.",
              "Property": {
                "pre-conditions": [
                  "The activity context must not be null.",
                  "The request code must be a valid integer.",
                  "The intent must not be null."
                ],
                "post-conditions": [
                  "The activity may start for result if the intent can be resolved.",
                  "The user may be redirected to download the required app if the intent cannot be resolved."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.transactionHashFromResult(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.transactionHashFromResult(android.content.Intent)",
            "description": {
              "What": "This method retrieves the transaction hash from the result of an Android Intent.",
              "Parameters": [
                {
                  "name": "result",
                  "type": "android.content.Intent",
                  "description": "The Intent object containing the transaction hash as an extra."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The transaction hash extracted from the Intent."
              },
              "Why": "To provide a convenient way to extract transaction hash information from an Intent object.",
              "How-to-use": "Call this method with the Intent object received as a result from an activity, and it will return the transaction hash as a String.",
              "How-it-is-done": "The method retrieves the transaction hash from the Intent object by extracting the String extra with the key INTENT_EXTRA_TRANSACTION_HASH.",
              "Property": {
                "pre-conditions": [
                  "The Intent object must contain the transaction hash as an extra with the key INTENT_EXTRA_TRANSACTION_HASH."
                ],
                "post-conditions": [
                  "The method returns the transaction hash as a String."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.android.BitcoinIntegration.transactionHashToResult(android.content.Intent,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.integration.android.BitcoinIntegration.transactionHashToResult(android.content.Intent,java.lang.String)",
            "description": {
              "What": "This method adds a transaction hash to an Android Intent object.",
              "Parameters": [
                {
                  "name": "result",
                  "type": "android.content.Intent",
                  "description": "The Intent object to which the transaction hash will be added."
                },
                {
                  "name": "txHash",
                  "type": "java.lang.String",
                  "description": "The transaction hash that will be added to the Intent object."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to pass transaction hash information between components in an Android application.",
              "How-to-use": "Call this method with an Intent object and a transaction hash string to add the hash to the Intent.",
              "How-it-is-done": "The method takes an Intent object and a transaction hash string as parameters, then adds the hash to the Intent using the putExtra method.",
              "Property": {
                "pre-conditions": [
                  "The 'result' parameter must not be null.",
                  "The 'txHash' parameter must not be null."
                ],
                "post-conditions": [
                  "The Intent object 'result' will have the transaction hash added to it."
                ]
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.integration.sample": {
    "qualifiedName": "de.schildbach.wallet.integration.sample",
    "classes": {
      "de.schildbach.wallet.integration.sample.SampleActivity": {
        "qualifiedName": "de.schildbach.wallet.integration.sample.SampleActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.integration.sample.SampleActivity.de.schildbach.wallet.integration.sample.SampleActivity()": {
            "qualifiedName": "de.schildbach.wallet.integration.sample.SampleActivity.de.schildbach.wallet.integration.sample.SampleActivity()",
            "description": {
              "What": "This method is a constructor for the SampleActivity class.",
              "Parameters": [],
              "Returns": "SampleActivity",
              "Why": "To initialize an instance of the SampleActivity class.",
              "How-to-use": "To create a new instance of SampleActivity, simply call the constructor like 'SampleActivity sampleActivity = new SampleActivity();'.",
              "How-it-is-done": "The constructor initializes a new instance of the SampleActivity class with default values for its properties.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of SampleActivity is created and ready for use."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.sample.SampleActivity.donationAddresses()": {
            "qualifiedName": "de.schildbach.wallet.integration.sample.SampleActivity.donationAddresses()",
            "description": {
              "What": "This method returns an array of donation addresses based on whether the app is running on the mainnet or testnet.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "java.lang.String[]",
                "description": "An array of donation addresses based on the network type (mainnet or testnet)."
              },
              "Why": "The method is provided to allow the app to retrieve the appropriate donation addresses based on the network type for users to donate funds.",
              "How-to-use": "To use this method, simply call donationAddresses() in the SampleActivity class and it will return the array of donation addresses based on the network type selected by the user.",
              "How-it-is-done": "The method first checks whether the app is running on the mainnet or testnet by checking the state of a radio button. It then returns the corresponding array of donation addresses stored in the SampleActivity class.",
              "Property": {
                "pre-conditions": "The radio button with ID sample_network_mainnet must be present in the layout of the activity.",
                "post-conditions": "The method will return an array of donation addresses based on the network type selected by the user."
              }
            }
          },
          "de.schildbach.wallet.integration.sample.SampleActivity.handleDonate()": {
            "qualifiedName": "de.schildbach.wallet.integration.sample.SampleActivity.handleDonate()",
            "description": {
              "What": "This method handles the donation process by requesting a donation address for Bitcoin integration.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to facilitate the donation process by integrating Bitcoin payments.",
              "How-to-use": "To use this method, simply call handleDonate() in the desired part of the code to initiate the donation process.",
              "How-it-is-done": "The method retrieves a list of donation addresses, then requests a donation address for Bitcoin integration using the BitcoinIntegration class.",
              "Property": {
                "pre-conditions": [
                  "The BitcoinIntegration class must be available and properly configured."
                ],
                "post-conditions": [
                  "A donation address for Bitcoin integration is requested."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.sample.SampleActivity.handleRequest()": {
            "qualifiedName": "de.schildbach.wallet.integration.sample.SampleActivity.handleRequest()",
            "description": {
              "What": "This method generates a payment request with two outputs for donation addresses.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return any value."
            }
          },
          "de.schildbach.wallet.integration.sample.SampleActivity.onActivityResult(int,int,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.integration.sample.SampleActivity.onActivityResult(int,int,android.content.Intent)",
            "description": {
              "What": "Handles the result of an activity started for a specific request code, displaying transaction information and a thank you message if successful.",
              "Parameters": [
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code that was used to start the activity."
                },
                {
                  "name": "resultCode",
                  "type": "int",
                  "description": "The result code returned by the activity."
                },
                {
                  "name": "data",
                  "type": "Intent",
                  "description": "The data returned by the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the result of a specific activity and update the UI accordingly.",
              "How-to-use": "Override this method in a subclass of SampleActivity to handle the result of a specific activity started with the REQUEST_CODE. Update the UI with transaction information and display a thank you message if successful.",
              "How-it-is-done": "The method checks if the requestCode matches the REQUEST_CODE, then checks the resultCode to determine the action to take. If the result is OK, it extracts the transaction hash and updates the UI with the hash and a thank you message. If the result is CANCELED, it displays a cancellation message. Otherwise, it shows an unknown result message.",
              "Property": {
                "pre-conditions": [
                  "The REQUEST_CODE constant must be defined in the SampleActivity class."
                ],
                "post-conditions": [
                  "The UI is updated with transaction information and a thank you message if the result is OK.",
                  "The UI displays a cancellation message if the result is CANCELED.",
                  "The UI shows an unknown result message if the result is neither OK nor CANCELED."
                ]
              }
            }
          },
          "de.schildbach.wallet.integration.sample.SampleActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.integration.sample.SampleActivity.onCreate(android.os.Bundle)",
            "description": {
              "method": {
                "What": "Initialize the UI components and set click listeners for donate and request buttons in the sample activity.",
                "Parameters": [
                  {
                    "name": "savedInstanceState",
                    "type": "android.os.Bundle",
                    "description": "The saved instance state of the activity."
                  },
                  "Returns"
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To set up the UI components and handle user interactions in the sample activity.",
                "How-to-use": "Extend the SampleActivity class, override the onCreate method, call super.onCreate(savedInstanceState), set the content view to sample_activity layout, initialize UI components, and set click listeners for buttons.",
                "How-it-is-done": "The method first calls super.onCreate(savedInstanceState) to perform default activity creation, then sets the content view to the sample_activity layout. It initializes donateButton and requestButton with their respective views from the layout, sets click listeners for both buttons to call handleDonate() and handleRequest() methods, and initializes donateMessage with the corresponding view.",
                "Property": {
                  "pre-conditions": [
                    "The layout file sample_activity must be defined in the project's resources.",
                    "The views with IDs sample_donate_button, sample_request_button, and sample_donate_message must be present in the sample_activity layout."
                  ],
                  "post-conditions": [
                    "The UI components are initialized and set up with click listeners in the sample activity."
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.offline": {
    "qualifiedName": "de.schildbach.wallet.offline",
    "classes": {
      "de.schildbach.wallet.offline.AcceptBluetoothService": {
        "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothService",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.offline.AcceptBluetoothService.de.schildbach.wallet.offline.AcceptBluetoothService()": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothService.de.schildbach.wallet.offline.AcceptBluetoothService()",
            "description": {
              "What": "Initialize an instance of AcceptBluetoothService.",
              "Parameters": [],
              "Returns": {
                "type": "AcceptBluetoothService",
                "description": "An instance of AcceptBluetoothService."
              },
              "Why": "To provide a way to create and manage instances of AcceptBluetoothService.",
              "How-to-use": "Simply call the constructor to create a new instance of AcceptBluetoothService.",
              "How-it-is-done": "The method initializes a new instance of AcceptBluetoothService without any parameters.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of AcceptBluetoothService is created and ready for use."
                ]
              }
            }
          },
          "de.schildbach.wallet.offline.AcceptBluetoothService.handleTx(org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothService.handleTx(org.bitcoinj.core.Transaction)",
            "description": {
              "What": "Handle a Bitcoin transaction received via Bluetooth by checking if it is relevant to the wallet and broadcasting it if so.",
              "Parameters": [
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The Bitcoin transaction received via Bluetooth."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the transaction was successfully handled, false otherwise."
              },
              "Why": "To process incoming Bitcoin transactions received via Bluetooth and update the wallet accordingly.",
              "How-to-use": "Call this method with a Bitcoin transaction received via Bluetooth to handle it in the wallet and potentially broadcast it to the network.",
              "How-it-is-done": "The method logs the arrival of the transaction, checks if it is relevant to the wallet, receives it as pending if so, and then broadcasts it using a separate thread. If the transaction cannot be verified, an exception is caught and logged.",
              "Property": {
                "pre-conditions": "The wallet instance must be initialized and set in the class before calling this method.",
                "post-conditions": "The wallet's pending transactions may be updated, and the provided transaction may be broadcasted if relevant."
              }
            }
          },
          "de.schildbach.wallet.offline.AcceptBluetoothService.onBind(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothService.onBind(android.content.Intent)",
            "description": {
              "What": "This method returns null when binding to the service.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent that was used to bind to the service."
                }
              ],
              "Returns": {
                "type": "android.os.IBinder",
                "description": "Returns null to indicate that the service does not support binding."
              },
              "Why": "The method is provided to handle binding to the service, even though it does not support binding.",
              "How-to-use": "When implementing a service that does not support binding, override this method and return null to indicate that binding is not supported.",
              "How-it-is-done": "The method simply returns null without performing any additional logic or operations.",
              "Property": {
                "pre-conditions": [
                  "The service must extend the Service class."
                ],
                "post-conditions": [
                  "The service will not support binding."
                ]
              }
            }
          },
          "de.schildbach.wallet.offline.AcceptBluetoothService.onCreate()": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothService.onCreate()",
            "description": {
              "What": "This method initializes the AcceptBluetoothService by setting up Bluetooth communication and starting threads to handle transactions.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to set up the AcceptBluetoothService for handling Bluetooth transactions in a Bitcoin wallet application.",
              "How-to-use": "To use this method, simply call onCreate() on an instance of AcceptBluetoothService after it has been instantiated.",
              "How-it-is-done": "The method first initializes necessary components such as BluetoothAdapter and PowerManager, then creates threads for handling different types of transactions. It also sets up observers for wallet changes to start the threads when the wallet is updated.",
              "Property": {
                "pre-conditions": [
                  "The AcceptBluetoothService instance must be properly instantiated before calling onCreate()."
                ],
                "post-conditions": [
                  "The AcceptBluetoothService is set up with Bluetooth communication and threads for handling transactions are started."
                ]
              }
            }
          },
          "de.schildbach.wallet.offline.AcceptBluetoothService.onDestroy()": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothService.onDestroy()",
            "description": {
              "What": "This method is responsible for cleaning up resources and stopping the Bluetooth service when it is destroyed.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to ensure proper cleanup and resource release when the service is destroyed.",
              "How-to-use": "Simply call this method when the service is being destroyed to stop accepting Bluetooth connections and release resources.",
              "How-it-is-done": "The method first stops accepting Bluetooth connections by calling 'stopAccepting()' on the paymentProtocolThread and classicThread if they are not null. It then unregisters a broadcast receiver, releases a wake lock, removes any pending callbacks and messages from the handler, logs the duration the service was up, and finally calls the superclass's onDestroy method.",
              "Property": {
                "pre-conditions": [
                  "The paymentProtocolThread and classicThread should be initialized before calling this method."
                ],
                "post-conditions": [
                  "Bluetooth connections are stopped, resources are released, and the service is properly cleaned up."
                ]
              }
            }
          },
          "de.schildbach.wallet.offline.AcceptBluetoothService.onStartCommand(android.content.Intent,int,int)": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothService.onStartCommand(android.content.Intent,int,int)",
            "description": {
              "What": "This method is used to handle the start command for the AcceptBluetoothService, setting a timeout for Bluetooth communication.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent passed to the service."
                },
                {
                  "name": "flags",
                  "type": "int",
                  "description": "Additional data about the start request."
                },
                {
                  "name": "startId",
                  "type": "int",
                  "description": "A unique integer representing the start request."
                },
                "Returns"
              ],
              "returnType": "int",
              "description": "The return value indicating what semantics the system should use for the service's current state."
            }
          }
        }
      },
      "de.schildbach.wallet.offline.AcceptBluetoothThread": {
        "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothThread",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.offline.AcceptBluetoothThread.de.schildbach.wallet.offline.AcceptBluetoothThread(android.bluetooth.BluetoothServerSocket)": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothThread.de.schildbach.wallet.offline.AcceptBluetoothThread(android.bluetooth.BluetoothServerSocket)",
            "description": {
              "What": "Initialize an AcceptBluetoothThread object with a BluetoothServerSocket for listening to incoming Bluetooth connections.",
              "Parameters": [
                {
                  "name": "listeningSocket",
                  "type": "android.bluetooth.BluetoothServerSocket",
                  "description": "The BluetoothServerSocket used for listening to incoming Bluetooth connections."
                }
              ],
              "Returns": {
                "type": "AcceptBluetoothThread",
                "description": "A new instance of AcceptBluetoothThread initialized with the provided BluetoothServerSocket."
              },
              "Why": "To set up the AcceptBluetoothThread object with the necessary BluetoothServerSocket for handling incoming Bluetooth connections.",
              "How-to-use": "Create a BluetoothServerSocket object for listening to incoming Bluetooth connections, then pass it as a parameter when creating a new instance of AcceptBluetoothThread.",
              "How-it-is-done": "The constructor of AcceptBluetoothThread takes a BluetoothServerSocket as a parameter and assigns it to the listeningSocket field of the AcceptBluetoothThread object.",
              "Property": {
                "pre-conditions": [
                  "A valid BluetoothServerSocket object must be provided as a parameter."
                ],
                "post-conditions": [
                  "The AcceptBluetoothThread object is initialized with the provided BluetoothServerSocket."
                ]
              }
            }
          },
          "de.schildbach.wallet.offline.AcceptBluetoothThread.handleTx(org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothThread.handleTx(org.bitcoinj.core.Transaction)",
            "description": {
              "What": "This method is responsible for handling a Bitcoin transaction.",
              "Parameters": [
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The Bitcoin transaction to be handled."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the transaction was successfully handled, false otherwise."
              },
              "Why": "To provide a way for subclasses to define how to handle a Bitcoin transaction.",
              "How-to-use": "Subclasses need to implement this method to define the logic for handling a Bitcoin transaction.",
              "How-it-is-done": "Subclasses will override this method and provide their own implementation to process the Bitcoin transaction, such as validating it or updating the wallet.",
              "Property": {
                "pre-conditions": "The subclass must override this method to provide a concrete implementation.",
                "post-conditions": "The method should return true if the transaction was successfully handled, false otherwise."
              }
            }
          },
          "de.schildbach.wallet.offline.AcceptBluetoothThread.stopAccepting()": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothThread.stopAccepting()",
            "description": {
              "What": "Stop accepting incoming Bluetooth connections by closing the listening socket.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To gracefully stop accepting incoming Bluetooth connections and release associated resources.",
              "How-to-use": "Simply call this method when you want to stop accepting incoming Bluetooth connections.",
              "How-it-is-done": "The method sets a flag to indicate that it should stop running, then closes the listening socket used for accepting connections.",
              "Property": {
                "pre-conditions": [
                  "The listening socket must be initialized and open."
                ],
                "post-conditions": [
                  "The flag indicating whether the thread is running is set to false.",
                  "The listening socket is closed."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.offline.AcceptBluetoothThread$ClassicBluetoothThread": {
        "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothThread$ClassicBluetoothThread",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.offline.AcceptBluetoothThread$ClassicBluetoothThread.de.schildbach.wallet.offline.AcceptBluetoothThread$ClassicBluetoothThread(android.bluetooth.BluetoothAdapter)": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothThread$ClassicBluetoothThread.de.schildbach.wallet.offline.AcceptBluetoothThread$ClassicBluetoothThread(android.bluetooth.BluetoothAdapter)",
            "description": {
              "What": "This method initializes a ClassicBluetoothThread for accepting Bluetooth connections using insecure RFCOMM with a specific service record.",
              "Parameters": [
                {
                  "name": "adapter",
                  "type": "android.bluetooth.BluetoothAdapter",
                  "description": "The Bluetooth adapter to use for listening to incoming connections."
                }
              ],
              "Returns": {
                "type": "ClassicBluetoothThread",
                "description": "A new instance of ClassicBluetoothThread initialized with the specified Bluetooth adapter."
              },
              "Why": "This method is provided to set up a Bluetooth thread for accepting connections using the Classic Payment Protocol over Bluetooth.",
              "How-to-use": "Create an instance of ClassicBluetoothThread by passing a BluetoothAdapter as the parameter, then start the thread to listen for incoming Bluetooth connections.",
              "How-it-is-done": "The method calls the superclass constructor with the result of listenUsingInsecureRfcommWithServiceRecord method, which creates a BluetoothServerSocket for listening to incoming connections with a specific service record UUID.",
              "Property": {
                "pre-conditions": [
                  "The BluetoothAdapter must be initialized and available for use."
                ],
                "post-conditions": [
                  "A new instance of ClassicBluetoothThread is created and ready to accept incoming Bluetooth connections."
                ]
              }
            }
          },
          "de.schildbach.wallet.offline.AcceptBluetoothThread$ClassicBluetoothThread.run()": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothThread$ClassicBluetoothThread.run()",
            "description": {
              "What": "Accepts classic Bluetooth connections, reads messages, processes Bitcoin transactions, and sends acknowledgment back.",
              "Parameters": [
                {
                  "name": "socket",
                  "type": "android.bluetooth.BluetoothSocket",
                  "description": "The Bluetooth socket for communication."
                },
                {
                  "name": "is",
                  "type": "java.io.DataInputStream",
                  "description": "Input stream to read data from the socket."
                },
                {
                  "name": "os",
                  "type": "java.io.DataOutputStream",
                  "description": "Output stream to write data to the socket."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle incoming Bluetooth connections, process Bitcoin transactions, and provide acknowledgment for received messages.",
              "How-to-use": "Create an instance of ClassicBluetoothThread and start the thread to listen for incoming Bluetooth connections and process Bitcoin transactions.",
              "How-it-is-done": "The method listens for incoming Bluetooth connections, reads the number of messages, reads each message, attempts to decode it as a Bitcoin transaction, handles the transaction, and sends an acknowledgment back.",
              "Property": {
                "pre-conditions": "The Bluetooth socket must be open and ready for communication.",
                "post-conditions": "The method processes incoming messages, handles Bitcoin transactions, and sends acknowledgment back over the Bluetooth connection."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.offline.AcceptBluetoothThread$PaymentProtocolThread": {
        "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothThread$PaymentProtocolThread",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.offline.AcceptBluetoothThread$PaymentProtocolThread.de.schildbach.wallet.offline.AcceptBluetoothThread$PaymentProtocolThread(android.bluetooth.BluetoothAdapter)": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothThread$PaymentProtocolThread.de.schildbach.wallet.offline.AcceptBluetoothThread$PaymentProtocolThread(android.bluetooth.BluetoothAdapter)",
            "description": {
              "What": "Creates a PaymentProtocolThread for handling Bluetooth communication for BIP70 payment protocol.",
              "Parameters": [
                {
                  "name": "adapter",
                  "type": "android.bluetooth.BluetoothAdapter",
                  "description": "The Bluetooth adapter to use for communication."
                }
              ],
              "Returns": {
                "type": "PaymentProtocolThread",
                "description": "A new instance of PaymentProtocolThread for handling Bluetooth communication."
              },
              "Why": "To provide a way to handle Bluetooth communication for BIP70 payment protocol.",
              "How-to-use": "Create an instance of PaymentProtocolThread by passing a BluetoothAdapter as a parameter to the constructor.",
              "How-it-is-done": "The constructor initializes the PaymentProtocolThread by using the BluetoothAdapter to listen for insecure RFCOMM connections with a specific service record for BIP70 payment protocol.",
              "Property": {
                "pre-conditions": "The BluetoothAdapter must be initialized and available for use.",
                "post-conditions": "A new instance of PaymentProtocolThread is created and ready to handle Bluetooth communication for BIP70 payment protocol."
              }
            }
          },
          "de.schildbach.wallet.offline.AcceptBluetoothThread$PaymentProtocolThread.run()": {
            "qualifiedName": "de.schildbach.wallet.offline.AcceptBluetoothThread$PaymentProtocolThread.run()",
            "description": {
              "What": "Accepts payment protocol messages over Bluetooth, processes the payment, and sends an acknowledgment back.",
              "Parameters": [
                {
                  "name": "socket",
                  "type": "BluetoothSocket",
                  "description": "The Bluetooth socket for communication."
                },
                {
                  "name": "is",
                  "type": "DataInputStream",
                  "description": "Input stream for reading data from the socket."
                },
                {
                  "name": "os",
                  "type": "DataOutputStream",
                  "description": "Output stream for writing data to the socket."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle payment protocol messages over Bluetooth and provide an acknowledgment response.",
              "How-to-use": "Create an instance of PaymentProtocolThread and start the thread to listen for incoming payment protocol messages over Bluetooth.",
              "How-it-is-done": "The method listens for incoming Bluetooth connections, reads payment messages, processes transactions, generates an acknowledgment message, and sends it back over Bluetooth.",
              "Property": {
                "pre-conditions": "The Bluetooth listening socket must be set up and running.",
                "post-conditions": "An acknowledgment message is sent back over Bluetooth in response to the received payment message."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.offline.DirectPaymentTask": {
        "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.offline.DirectPaymentTask.de.schildbach.wallet.offline.DirectPaymentTask(android.os.Handler,de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback)": {
            "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask.de.schildbach.wallet.offline.DirectPaymentTask(android.os.Handler,de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback)",
            "description": {
              "What": "Initialize a DirectPaymentTask object with a background handler and a result callback.",
              "Parameters": [
                {
                  "name": "backgroundHandler",
                  "type": "android.os.Handler",
                  "description": "Handler for background tasks."
                },
                {
                  "name": "resultCallback",
                  "type": "de.schildbach.wallet.offline.DirectPaymentTask.ResultCallback",
                  "description": "Callback for handling task results."
                }
              ],
              "Returns": {
                "type": "DirectPaymentTask",
                "description": "A new instance of DirectPaymentTask."
              },
              "Why": "To set up the necessary components for performing a direct payment task asynchronously.",
              "How-to-use": "Create a new DirectPaymentTask object by passing a background handler and a result callback to the constructor.",
              "How-it-is-done": "The constructor initializes the backgroundHandler with the provided handler, creates a new handler for the current thread's looper, and sets the resultCallback to the provided callback.",
              "Property": {
                "pre-conditions": [
                  "The backgroundHandler must not be null.",
                  "The resultCallback must not be null."
                ],
                "post-conditions": [
                  "A new DirectPaymentTask object is successfully created with the provided parameters."
                ]
              }
            }
          },
          "de.schildbach.wallet.offline.DirectPaymentTask.onFail(int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask.onFail(int,java.lang.Object[])",
            "description": {
              "What": "This method posts a runnable task to the callback handler to notify the result callback of a failure with a message resource ID and optional message arguments.",
              "Parameters": [
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "The resource ID of the message to be displayed for the failure."
                },
                {
                  "name": "messageArgs",
                  "type": "Object[]",
                  "description": "Optional arguments to be used in formatting the failure message."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle and notify failures in a separate thread to prevent blocking the main thread.",
              "How-to-use": "Extend the DirectPaymentTask class and override the onFail method to handle failure scenarios by providing the message resource ID and optional message arguments.",
              "How-it-is-done": "The method uses the callbackHandler to post a new Runnable that calls the onFail method of the resultCallback with the provided message resource ID and arguments.",
              "Property": {
                "pre-conditions": [
                  "The callbackHandler must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The resultCallback's onFail method will be called with the specified message resource ID and arguments in a separate thread."
                ]
              }
            }
          },
          "de.schildbach.wallet.offline.DirectPaymentTask.onResult(boolean)": {
            "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask.onResult(boolean)",
            "description": {
              "What": "Posts the result of the DirectPaymentTask to the callback handler.",
              "Parameters": [
                {
                  "name": "ack",
                  "type": "boolean",
                  "description": "Indicates whether the task was acknowledged or not."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the result of the DirectPaymentTask in a separate thread and notify the resultCallback.",
              "How-to-use": "Extend the DirectPaymentTask class and override the onResult method to handle the result of the task. Use the callbackHandler to post the result to the resultCallback.",
              "How-it-is-done": "The onResult method uses the callbackHandler to post a new Runnable that calls the onResult method of the resultCallback with the provided ack parameter.",
              "Property": {
                "pre-conditions": "The callbackHandler must be initialized before calling this method.",
                "post-conditions": "The resultCallback will be notified with the result of the DirectPaymentTask."
              }
            }
          },
          "de.schildbach.wallet.offline.DirectPaymentTask.send(org.bitcoin.protocols.payments.Protos.Payment)": {
            "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask.send(org.bitcoin.protocols.payments.Protos.Payment)",
            "description": {
              "What": "This method sends a Bitcoin payment using the provided Payment object.",
              "Parameters": [
                {
                  "name": "payment",
                  "type": "org.bitcoin.protocols.payments.Protos.Payment",
                  "description": "The Payment object containing the details of the payment to be sent."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow sending Bitcoin payments using the DirectPaymentTask class.",
              "How-to-use": "Create a Payment object with the necessary payment details, then call this method with the Payment object as the parameter to send the payment.",
              "How-it-is-done": "The method likely establishes a connection to the Bitcoin network, verifies the payment details, and broadcasts the payment transaction to the network for processing.",
              "Property": {
                "pre-conditions": [
                  "The Payment object must be properly constructed with valid payment details."
                ],
                "post-conditions": [
                  "The payment transaction is sent to the Bitcoin network for processing."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.offline.DirectPaymentTask$BluetoothPaymentTask": {
        "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask$BluetoothPaymentTask",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.offline.DirectPaymentTask$BluetoothPaymentTask.de.schildbach.wallet.offline.DirectPaymentTask$BluetoothPaymentTask(android.os.Handler,de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback,android.bluetooth.BluetoothAdapter,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask$BluetoothPaymentTask.de.schildbach.wallet.offline.DirectPaymentTask$BluetoothPaymentTask(android.os.Handler,de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback,android.bluetooth.BluetoothAdapter,java.lang.String)",
            "description": {
              "What": "Initialize a BluetoothPaymentTask object with a background handler, result callback, Bluetooth adapter, and Bluetooth MAC address.",
              "Parameters": [
                {
                  "name": "backgroundHandler",
                  "type": "android.os.Handler",
                  "description": "Handler for background tasks."
                },
                {
                  "name": "resultCallback",
                  "type": "de.schildbach.wallet.offline.DirectPaymentTask.ResultCallback",
                  "description": "Callback for handling payment results."
                },
                {
                  "name": "bluetoothAdapter",
                  "type": "android.bluetooth.BluetoothAdapter",
                  "description": "Bluetooth adapter for communication."
                },
                {
                  "name": "bluetoothMac",
                  "type": "java.lang.String",
                  "description": "MAC address of the Bluetooth device."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.offline.DirectPaymentTask$BluetoothPaymentTask",
                "description": "A new instance of BluetoothPaymentTask."
              },
              "Why": "To initialize a BluetoothPaymentTask object with necessary parameters for Bluetooth communication.",
              "How-to-use": "Create a new instance of BluetoothPaymentTask by passing a background handler, result callback, Bluetooth adapter, and Bluetooth MAC address as parameters.",
              "How-it-is-done": "The method assigns the provided background handler, result callback, Bluetooth adapter, and Bluetooth MAC address to the corresponding fields of the BluetoothPaymentTask object.",
              "Property": {
                "pre-conditions": [
                  "The backgroundHandler, resultCallback, bluetoothAdapter, and bluetoothMac parameters must not be null."
                ],
                "post-conditions": [
                  "A new BluetoothPaymentTask object is created with the provided parameters assigned to its fields."
                ]
              }
            }
          },
          "de.schildbach.wallet.offline.DirectPaymentTask$BluetoothPaymentTask.send(org.bitcoin.protocols.payments.Protos.Payment)": {
            "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask$BluetoothPaymentTask.send(org.bitcoin.protocols.payments.Protos.Payment)",
            "description": {
              "What": "Send a Bitcoin payment via Bluetooth using the BIP70 payment protocol.",
              "Parameters": [
                {
                  "name": "payment",
                  "type": "org.bitcoin.protocols.payments.Protos.Payment",
                  "description": "The Bitcoin payment to be sent via Bluetooth."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To enable sending Bitcoin payments securely over Bluetooth connections.",
              "How-to-use": "Create an instance of BluetoothPaymentTask and call the send method with the Payment object to send the payment via Bluetooth.",
              "How-it-is-done": "The method posts a Runnable to a background handler, establishes a Bluetooth connection, sends the payment data, receives a payment acknowledgment, and logs the result.",
              "Property": {
                "pre-conditions": [
                  "The payment object must contain exactly one transaction."
                ],
                "post-conditions": [
                  "The method will log the success or failure of sending the payment via Bluetooth."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.offline.DirectPaymentTask$HttpPaymentTask": {
        "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask$HttpPaymentTask",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.offline.DirectPaymentTask$HttpPaymentTask.de.schildbach.wallet.offline.DirectPaymentTask$HttpPaymentTask(android.os.Handler,de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback,java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask$HttpPaymentTask.de.schildbach.wallet.offline.DirectPaymentTask$HttpPaymentTask(android.os.Handler,de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback,java.lang.String,java.lang.String)",
            "description": {
              "What": "Initialize a new HttpPaymentTask object with a background handler, result callback, URL, and user agent.",
              "Parameters": [
                {
                  "name": "backgroundHandler",
                  "type": "android.os.Handler",
                  "description": "Handler for background processing."
                },
                {
                  "name": "resultCallback",
                  "type": "de.schildbach.wallet.offline.DirectPaymentTask.ResultCallback",
                  "description": "Callback for handling the result of the payment task."
                },
                {
                  "name": "url",
                  "type": "java.lang.String",
                  "description": "URL for the payment task."
                },
                {
                  "name": "userAgent",
                  "type": "java.lang.String",
                  "description": "User agent string for the HTTP request. Can be null."
                }
              ],
              "Returns": {
                "type": "HttpPaymentTask",
                "description": "A new instance of HttpPaymentTask."
              },
              "Why": "To provide a way to perform a payment task over HTTP with the specified URL and user agent.",
              "How-to-use": "Create a new HttpPaymentTask object by passing a background handler, result callback, URL, and optional user agent. Then execute the task using the execute() method.",
              "How-it-is-done": "The constructor initializes the HttpPaymentTask object with the provided parameters, setting the URL and user agent. The task can then be executed to perform the payment task over HTTP.",
              "Property": {
                "pre-conditions": [
                  "The backgroundHandler and resultCallback parameters must not be null."
                ],
                "post-conditions": [
                  "A new HttpPaymentTask object is created with the specified URL and user agent."
                ]
              }
            }
          },
          "de.schildbach.wallet.offline.DirectPaymentTask$HttpPaymentTask.send(org.bitcoin.protocols.payments.Protos.Payment)": {
            "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask$HttpPaymentTask.send(org.bitcoin.protocols.payments.Protos.Payment)",
            "description": {
              "What": "This method sends a Bitcoin payment via HTTP and handles the response accordingly.",
              "Parameters": [
                {
                  "name": "payment",
                  "type": "org.bitcoin.protocols.payments.Protos.Payment",
                  "description": "The Bitcoin payment to be sent."
                }
              ],
              "Returns": "void",
              "Why": "To facilitate sending Bitcoin payments over HTTP and processing the response.",
              "How-to-use": "Create an instance of DirectPaymentTask$HttpPaymentTask and call the send method with the payment to be sent.",
              "How-it-is-done": "The method constructs an HTTP request with the payment data, sends the request, reads the response, and processes it accordingly.",
              "Property": {
                "pre-conditions": [
                  "The payment parameter must not be null."
                ],
                "post-conditions": [
                  "The method will either log success information and call onResult method with true if the payment was acknowledged, or log error information and call onFail method with the appropriate error message."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback": {
        "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback",
        "kind": "interface",
        "methods": {
          "de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback.onFail(int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback.onFail(int,java.lang.Object[])",
            "description": {
              "What": "This method is called when a direct payment task fails, providing a message resource ID and optional message arguments.",
              "Parameters": [
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "The resource ID of the message to be displayed."
                },
                {
                  "name": "messageArgs",
                  "type": "Object[]",
                  "description": "Optional arguments to be used in formatting the message."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle the failure scenario of a direct payment task and provide feedback to the user.",
              "How-to-use": "Implement this method in a class that implements the ResultCallback interface to handle failure scenarios of direct payment tasks.",
              "How-it-is-done": "When a direct payment task fails, this method is called with the message resource ID and optional message arguments, which can be used to display an appropriate error message to the user.",
              "Property": {
                "pre-conditions": [
                  "The implementing class must implement the ResultCallback interface."
                ],
                "post-conditions": [
                  "An appropriate error message should be displayed to the user based on the provided message resource ID and arguments."
                ]
              }
            }
          },
          "de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback.onResult(boolean)": {
            "qualifiedName": "de.schildbach.wallet.offline.DirectPaymentTask$ResultCallback.onResult(boolean)",
            "description": {
              "What": "This method is called when the result of a direct payment task is received, indicating whether the payment was acknowledged or not.",
              "Parameters": [
                {
                  "name": "ack",
                  "type": "boolean",
                  "description": "A boolean value indicating whether the payment was acknowledged (true) or not (false)."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle the result of a direct payment task and take appropriate actions based on whether the payment was acknowledged or not.",
              "How-to-use": "Implement this method in a class that implements the ResultCallback interface to handle the result of a direct payment task, such as updating UI elements or triggering further actions based on the acknowledgment status.",
              "How-it-is-done": "When this method is called, the implementation should check the value of the 'ack' parameter to determine if the payment was acknowledged or not, and then perform the necessary actions accordingly.",
              "Property": {
                "pre-conditions": "The method should only be called when the result of a direct payment task is received.",
                "post-conditions": "After this method is executed, the application should have processed the result of the direct payment task and taken appropriate actions based on the acknowledgment status."
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.service": {
    "qualifiedName": "de.schildbach.wallet.service",
    "classes": {
      "de.schildbach.wallet.service.BlockchainService": {
        "qualifiedName": "de.schildbach.wallet.service.BlockchainService",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.service.BlockchainService.broadcastBlockchainState()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.broadcastBlockchainState()",
            "description": {
              "What": "Broadcasts the current blockchain state to all interested components within the application.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To inform other components within the application about the current state of the blockchain.",
              "How-to-use": "Simply call this method within the BlockchainService class to broadcast the blockchain state to all interested components.",
              "How-it-is-done": "Creates an Intent with the ACTION_BLOCKCHAIN_STATE action, retrieves the current blockchain state, adds it as extras to the Intent if not null, and broadcasts the Intent using LocalBroadcastManager.",
              "Property": {
                "pre-conditions": [
                  "The BlockchainService class must be instantiated and running."
                ],
                "post-conditions": [
                  "All interested components within the application will receive the broadcasted blockchain state."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.broadcastPeerState(int)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.broadcastPeerState(int)",
            "description": {
              "What": "Broadcasts the number of peers to the local broadcast manager.",
              "Parameters": [
                {
                  "name": "numPeers",
                  "type": "int",
                  "description": "The number of peers to broadcast."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To inform other components of the application about the current number of peers connected to the service.",
              "How-to-use": "Call this method with the number of peers as the argument to broadcast the information to other components.",
              "How-it-is-done": "Creates an Intent with the action ACTION_PEER_STATE, adds the number of peers as an extra, and sends the broadcast using the LocalBroadcastManager.",
              "Property": {
                "pre-conditions": [
                  "The method should be called within the context of a BlockchainService instance."
                ],
                "post-conditions": [
                  "Other components listening for the ACTION_PEER_STATE broadcast will receive the number of peers."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.broadcastTransaction(android.content.Context,org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.broadcastTransaction(android.content.Context,org.bitcoinj.core.Transaction)",
            "description": {
              "What": "Broadcasts a Bitcoin transaction to the network.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The Android application context."
                },
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The Bitcoin transaction to be broadcasted."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to broadcast their Bitcoin transactions to the network for confirmation and inclusion in the blockchain.",
              "How-to-use": "Call this method with the application context and the Bitcoin transaction object to broadcast the transaction.",
              "How-it-is-done": "The method creates an intent with the specified action and transaction hash, then starts a service with this intent to broadcast the transaction.",
              "Property": {
                "pre-conditions": [
                  "The context must not be null.",
                  "The transaction must not be null."
                ],
                "post-conditions": [
                  "The transaction will be broadcasted to the Bitcoin network for confirmation."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.de.schildbach.wallet.service.BlockchainService()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.de.schildbach.wallet.service.BlockchainService()",
            "description": {
              "What": "This method is a constructor for the BlockchainService class.",
              "Parameters": [],
              "Returns": {
                "type": "BlockchainService",
                "description": "An instance of the BlockchainService class."
              },
              "Why": "To initialize an instance of the BlockchainService class.",
              "How-to-use": "Simply create a new instance of the BlockchainService class using the 'new' keyword.",
              "How-it-is-done": "The constructor initializes a new instance of the BlockchainService class with default values for its properties.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the BlockchainService class is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.getBlockchainState()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.getBlockchainState()",
            "description": {
              "What": "This method returns the current state of the blockchain including the date of the best chain, its height, whether it is replaying, and any impediments.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.service.BlockchainState",
                "description": "An object containing the date of the best chain, its height, replaying status, and any impediments."
              },
              "Why": "To provide information about the current state of the blockchain to the calling code or application.",
              "How-to-use": "Simply call the getBlockchainState() method on an instance of the BlockchainService class to retrieve the current blockchain state.",
              "How-it-is-done": "The method first checks if the blockChain object is null, then retrieves the chain head, date, height, and checks if it is replaying. Finally, it creates a new BlockchainState object with this information.",
              "Property": {
                "pre-conditions": "The blockChain object must be initialized before calling this method.",
                "post-conditions": "The method will return a BlockchainState object with the current state of the blockchain."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.getConnectedPeers()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.getConnectedPeers()",
            "description": {
              "What": "This method returns a list of connected peers in the blockchain network.",
              "Parameters": [
                {
                  "name": null,
                  "type": "None",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "java.util.List<org.bitcoinj.core.Peer>",
                "description": "A list of connected peers in the blockchain network."
              },
              "Why": "To provide information about the peers connected to the blockchain network.",
              "How-to-use": "Simply call the method getConnectedPeers() on an instance of BlockchainService to retrieve the list of connected peers.",
              "How-it-is-done": "The method checks if the peerGroup is not null, then returns the list of connected peers from the peerGroup object.",
              "Property": {
                "pre-conditions": "The peerGroup object must be initialized before calling this method.",
                "post-conditions": "The method returns null if the peerGroup is null, otherwise it returns a list of connected peers."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.getRecentBlocks(int)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.getRecentBlocks(int)",
            "description": {
              "What": "This method retrieves a list of recent blocks from the blockchain up to a specified maximum number.",
              "Parameters": [
                {
                  "name": "maxBlocks",
                  "type": "int",
                  "description": "The maximum number of blocks to retrieve."
                }
              ],
              "Returns": {
                "type": "java.util.List<org.bitcoinj.core.StoredBlock>",
                "description": "A list of StoredBlock objects representing the recent blocks."
              },
              "Why": "To provide access to recent blocks in the blockchain for various analysis or processing purposes.",
              "How-to-use": "Call the method with the desired maximum number of blocks to retrieve, and handle the returned list of StoredBlock objects.",
              "How-it-is-done": "The method iterates through the blockchain starting from the chain head, adding each block to the list until the maximum number is reached or the end of the chain is reached.",
              "Property": {
                "pre-conditions": "The blockChain object must be initialized and not null.",
                "post-conditions": "The returned list may contain up to the specified maximum number of recent blocks."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.notifyCoinsReceived(org.bitcoinj.core.Address,org.bitcoinj.core.Coin,org.bitcoinj.core.Sha256Hash)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.notifyCoinsReceived(org.bitcoinj.core.Address,org.bitcoinj.core.Coin,org.bitcoinj.core.Sha256Hash)",
            "description": {
              "What": "Notify the user about received coins with a summary notification and individual notifications for each transaction.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The address where the coins were received."
                },
                {
                  "name": "amount",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The amount of coins received."
                },
                {
                  "name": "transactionHash",
                  "type": "org.bitcoinj.core.Sha256Hash",
                  "description": "The hash of the transaction."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To inform the user about received coins and provide a summary of the total amount received.",
              "How-to-use": "Call this method with the address, amount, and transaction hash of the received coins to notify the user.",
              "How-it-is-done": "The method increments the notification count, accumulates the total amount received, adds the address to the notification list if not already present, creates summary and individual notifications with appropriate content, and notifies the user using the Android NotificationManager.",
              "Property": {
                "pre-conditions": [
                  "The config and application must be properly initialized before calling this method."
                ],
                "post-conditions": [
                  "The user will be notified about the received coins with summary and individual notifications."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.observeLiveDatasThatAreDependentOnWalletAndBlockchain()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.observeLiveDatasThatAreDependentOnWalletAndBlockchain()",
            "description": {
              "What": "Observes live data related to wallet and blockchain for new transactions and time updates.",
              "Parameters": [
                {
                  "name": "newTransaction",
                  "type": "NewTransactionLiveData",
                  "description": "LiveData for new transactions related to the wallet."
                },
                {
                  "name": "time",
                  "type": "TimeLiveData",
                  "description": "LiveData for time updates."
                },
                {
                  "name": "impediments",
                  "type": "ImpedimentsLiveData",
                  "description": "LiveData for blockchain state impediments."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To monitor and react to changes in wallet transactions, time updates, and blockchain state impediments.",
              "How-to-use": "Call this method to set up observers for new transactions, time updates, and blockchain state impediments.",
              "How-it-is-done": "The method sets up observers for new transactions, time updates, and blockchain state impediments using LiveData objects and defines behavior for each type of update.",
              "Property": {
                "preconditions": [
                  "The wallet and blockchain service must be initialized before calling this method."
                ],
                "postconditions": [
                  "Observers are set up to react to new transactions, time updates, and blockchain state changes."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.onBind(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.onBind(android.content.Intent)",
            "description": {
              "What": "Returns the IBinder object associated with the service.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The Intent object that was used to bind to the service."
                }
              ],
              "Returns": {
                "type": "android.os.IBinder",
                "description": "The IBinder object that clients can use to interact with the service."
              },
              "Why": "To provide clients with the IBinder object for interacting with the service.",
              "How-to-use": "Call onBind method with the Intent object used to bind to the service to get the IBinder object for communication.",
              "How-it-is-done": "The method logs a debug message and then returns the mBinder object, which is the IBinder associated with the service.",
              "Property": {
                "pre-conditions": "The service must be running and available for binding.",
                "post-conditions": "The IBinder object is returned for client interaction."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.onCreate()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.onCreate()",
            "description": {
              "What": "Initializes the BlockchainService by setting up various components like notification manager, power manager, wallet balance, exchange rate, wallet, block store, and block chain.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "The method does not return anything."
              },
              "Why": "To set up the necessary components and data structures required for the BlockchainService to function properly.",
              "How-to-use": "Simply call onCreate() method of the BlockchainService class to initialize the service.",
              "How-it-is-done": "The method initializes various components like notification manager, power manager, wallet balance, exchange rate, wallet, block store, and block chain by creating instances and setting up observers.",
              "Property": {
                "pre-conditions": [
                  "The application context must be available."
                ],
                "post-conditions": [
                  "The BlockchainService is initialized with all the required components set up."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.onDestroy()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.onDestroy()",
            "description": {
              "What": "This method is responsible for cleaning up resources and stopping the blockchain service.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return any value."
            }
          },
          "de.schildbach.wallet.service.BlockchainService.onStartCommand(android.content.Intent,int,int)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.onStartCommand(android.content.Intent,int,int)",
            "description": {
              "What": "Handles different actions based on the intent received by the service.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent passed to the service."
                },
                {
                  "name": "flags",
                  "type": "int",
                  "description": "Additional data about this start request."
                },
                {
                  "name": "startId",
                  "type": "int",
                  "description": "A unique integer representing this specific request to start."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The return value indicating what semantics the system should use for the service's current state."
              },
              "Why": "To handle different actions triggered by intents and manage the service's behavior accordingly.",
              "How-to-use": "Call this method when you want to handle different actions based on the intent received by the service.",
              "How-it-is-done": "The method checks the intent for specific actions and performs corresponding operations such as canceling notifications, resetting the blockchain, or broadcasting transactions.",
              "Property": {
                "pre-conditions": "The intent parameter must not be null.",
                "post-conditions": "The service may cancel notifications, reset the blockchain, or broadcast transactions based on the intent received."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.onTrimMemory(int)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.onTrimMemory(int)",
            "description": {
              "What": "This method is called when the system is running low on memory and stops the service if the memory level is background or lower.",
              "Parameters": [
                {
                  "name": "level",
                  "type": "int",
                  "description": "The memory trim level passed by the system."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to handle low memory situations and stop the service to free up resources.",
              "How-to-use": "Override this method in a class that extends BlockchainService and implement the desired behavior when the system is running low on memory.",
              "How-it-is-done": "The method logs the memory trim level, checks if it is background or lower, then logs a warning and stops the service if true.",
              "Property": {
                "pre-conditions": "The method should be overridden in a class that extends BlockchainService.",
                "post-conditions": "The service may be stopped if the memory level is background or lower."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.onUnbind(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.onUnbind(android.content.Intent)",
            "description": {
              "What": "Logs a debug message when the service is unbound.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent that was used to unbind the service."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the service is unbound successfully."
              },
              "Why": "To provide a way to log when the service is unbound for debugging purposes.",
              "How-to-use": "Call this method when unbinding the service to log a debug message.",
              "How-it-is-done": "The method logs a debug message using the service's logger and then calls the superclass method to handle the unbinding process.",
              "Property": {
                "pre-conditions": "The service must be currently bound.",
                "post-conditions": "The service is unbound successfully."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.resetBlockchain(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.resetBlockchain(android.content.Context)",
            "description": {
              "What": "Resets the blockchain data of the wallet service.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                },
                "Returns"
              ],
              "Returns": "void",
              "Why": "To allow users to reset the blockchain data in case of issues or for maintenance purposes.",
              "How-to-use": "Call this method with the application context to initiate the reset of blockchain data.",
              "How-it-is-done": "The method creates an intent with the action ACTION_RESET_BLOCKCHAIN and starts the BlockchainService to handle the reset process.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The blockchain data of the wallet service will be reset."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.scheduleStart(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.scheduleStart(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Schedule a blockchain sync based on the last usage time of the application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance to schedule the blockchain sync for."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To automatically schedule blockchain synchronization based on the last usage time of the application.",
              "How-to-use": "Call this method with a WalletApplication instance to schedule blockchain synchronization based on the last usage time of the application.",
              "How-it-is-done": "The method calculates the alarm interval based on the last usage time, logs the information, cancels any existing alarms, and sets an inexact repeating alarm for blockchain synchronization.",
              "Property": {
                "pre-conditions": "The application parameter must not be null.",
                "post-conditions": "An alarm is set for blockchain synchronization based on the last usage time of the application."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.start(android.content.Context,boolean)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.start(android.content.Context,boolean)",
            "description": {
              "What": "Starts the BlockchainService with an option to cancel coins received.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the service should be started."
                },
                {
                  "name": "cancelCoinsReceived",
                  "type": "boolean",
                  "description": "A flag indicating whether to cancel coins received."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "Provided to start the BlockchainService with an option to cancel coins received.",
              "How-to-use": "Call this method with the context and a boolean flag to start the BlockchainService with or without canceling coins received.",
              "How-it-is-done": "The method checks the cancelCoinsReceived flag and starts the service accordingly by creating and starting an Intent with the appropriate action and context.",
              "Property": {
                "pre-conditions": [
                  "The context must not be null."
                ],
                "post-conditions": [
                  "The BlockchainService is started with the specified options."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService.stop(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService.stop(android.content.Context)",
            "description": {
              "What": "This method stops the BlockchainService by calling the stopService method on the provided context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to stop the BlockchainService."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow the stopping of the BlockchainService programmatically.",
              "How-to-use": "To stop the BlockchainService, simply call BlockchainService.stop(context) with the appropriate context.",
              "How-it-is-done": "The method creates a new Intent with the context and the BlockchainService class, then calls stopService on the context with this Intent.",
              "Property": {
                "pre-conditions": [
                  "The context provided must not be null."
                ],
                "post-conditions": [
                  "The BlockchainService will be stopped."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData": {
        "qualifiedName": "de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData.de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData.de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize an instance of ImpedimentsLiveData with the given WalletApplication and set its initial value.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance to be used."
                }
              ],
              "Returns": {
                "type": "ImpedimentsLiveData",
                "description": "An instance of ImpedimentsLiveData initialized with the provided WalletApplication."
              },
              "Why": "To create a LiveData object that holds impediments data for the application.",
              "How-to-use": "Create a new instance of ImpedimentsLiveData by passing a WalletApplication instance as a parameter, and the initial value will be set automatically.",
              "How-it-is-done": "The method initializes the ImpedimentsLiveData with the provided WalletApplication, retrieves the ConnectivityManager service from the application, and sets the initial value of impediments.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The ImpedimentsLiveData instance is initialized with the provided WalletApplication.",
                  "The initial value of impediments is set."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData.handleIntent(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData.handleIntent(android.content.Intent)",
            "description": {
              "What": "Handle different types of intents related to network connectivity and device storage and update the impediments LiveData accordingly.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent to be handled by the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the impediments LiveData based on changes in network connectivity and device storage status.",
              "How-to-use": "Call this method with the intent that needs to be handled, typically received from a broadcast receiver.",
              "How-it-is-done": "The method checks the action of the intent and updates the impediments LiveData based on the type of action (network connectivity or device storage). It logs relevant information about the network state and device storage status.",
              "Property": {
                "pre-conditions": [
                  "The intent passed to the method must not be null."
                ],
                "post-conditions": [
                  "The impediments LiveData is updated based on the intent action."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData.onActive()",
            "description": {
              "What": "Registers a broadcast receiver to listen for connectivity and device storage events and handles the received intents.",
              "Parameters": [
                {
                  "name": "intentFilter",
                  "type": "android.content.IntentFilter",
                  "description": "Filter for the types of intents to listen for."
                },
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The received intent from registering the broadcast receiver."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To monitor connectivity and device storage events and react accordingly within the application.",
              "How-to-use": "Call this method when the LiveData becomes active to start listening for connectivity and device storage events.",
              "How-it-is-done": "The method creates an intent filter with actions for connectivity and device storage events, registers a broadcast receiver with the filter, and handles the received intent if not null.",
              "Property": {
                "pre-conditions": "The application context must be available to access the registerReceiver method.",
                "post-conditions": "The broadcast receiver is registered to listen for specified intents and the handleIntent method may be called to process received intents."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$ImpedimentsLiveData.onInactive()",
            "description": {
              "What": "Unregisters a connectivity receiver when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To clean up resources and prevent memory leaks by unregistering the connectivity receiver when it is no longer needed.",
              "How-to-use": "Simply call this method when the LiveData associated with the connectivity receiver becomes inactive, typically in the onInactive() method of a custom LiveData class.",
              "How-it-is-done": "The method calls the unregisterReceiver() method on the application object, passing the connectivityReceiver instance as the argument, to unregister the receiver and stop listening for connectivity changes.",
              "Property": {
                "pre-conditions": [
                  "The application object must be initialized and accessible within the scope of the method."
                ],
                "post-conditions": [
                  "The connectivity receiver is unregistered and will no longer receive connectivity change notifications."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.service.BlockchainService$LocalBinder": {
        "qualifiedName": "de.schildbach.wallet.service.BlockchainService$LocalBinder",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.service.BlockchainService$LocalBinder.de.schildbach.wallet.service.BlockchainService$LocalBinder()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$LocalBinder.de.schildbach.wallet.service.BlockchainService$LocalBinder()",
            "description": {
              "What": "This method is a constructor for the LocalBinder class.",
              "Parameters": [],
              "Returns": {
                "type": "LocalBinder",
                "description": "An instance of the LocalBinder class."
              },
              "Why": "To initialize an instance of the LocalBinder class.",
              "How-to-use": "Simply create a new instance of the LocalBinder class by calling the constructor.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the LocalBinder class.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the LocalBinder class is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$LocalBinder.getService()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$LocalBinder.getService()",
            "description": {
              "What": "Returns the instance of BlockchainService from the LocalBinder class.",
              "Parameters": [],
              "Returns": {
                "Type": "de.schildbach.wallet.service.BlockchainService",
                "Description": "The instance of BlockchainService."
              },
              "Why": "To provide access to the BlockchainService instance within the LocalBinder class.",
              "How-to-use": "Simply call getService() on an instance of LocalBinder to get the associated BlockchainService instance.",
              "How-it-is-done": "The method simply returns the current instance of the LocalBinder class, which is also an instance of BlockchainService.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "The method always returns the current instance of BlockchainService."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData": {
        "qualifiedName": "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData.de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData.de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Initialize a new instance of NewTransactionLiveData with a given Bitcoin wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The Bitcoin wallet to be associated with the NewTransactionLiveData instance."
                }
              ],
              "Returns": {
                "type": "NewTransactionLiveData",
                "description": "A new instance of NewTransactionLiveData initialized with the provided Bitcoin wallet."
              },
              "Why": "To provide a LiveData object that can observe new transactions in the associated Bitcoin wallet.",
              "How-to-use": "Create a new instance of NewTransactionLiveData by passing a Bitcoin wallet as the parameter, then observe new transactions using LiveData observers.",
              "How-it-is-done": "The method simply assigns the provided Bitcoin wallet to the instance variable 'wallet' of the NewTransactionLiveData object.",
              "Property": {
                "pre-conditions": [
                  "The 'wallet' parameter must not be null."
                ],
                "post-conditions": [
                  "The NewTransactionLiveData instance is initialized with the provided Bitcoin wallet."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData.onActive()",
            "description": {
              "What": "This method adds a listener to the wallet for received and sent coins events.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "Wallet",
                  "description": "The wallet to add the listener to."
                },
                {
                  "name": "walletListener",
                  "type": "WalletCoinsListener",
                  "description": "The listener to be added to the wallet."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow the class to listen for received and sent coins events on the wallet.",
              "How-to-use": "Create an instance of NewTransactionLiveData, passing in the wallet and walletListener as parameters, then observe the LiveData object to receive notifications of received and sent coins events.",
              "How-it-is-done": "The method overrides the onActive() method of LiveData, and adds the walletListener to the wallet for received and sent coins events using the addCoinsReceivedEventListener() and addCoinsSentEventListener() methods of the wallet.",
              "Property": {
                "pre-conditions": [
                  "The wallet and walletListener parameters must not be null."
                ],
                "post-conditions": [
                  "The wallet will have the walletListener added for received and sent coins events."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData.onInactive()",
            "description": {
              "What": "This method removes event listeners for coins sent and received from the wallet when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "Wallet",
                  "description": "The wallet object from which the event listeners are removed."
                },
                {
                  "name": "walletListener",
                  "type": "WalletCoinsListener",
                  "description": "The listener object that was previously added to the wallet."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and prevent memory leaks by removing event listeners when they are no longer needed.",
              "How-to-use": "Call this method when the LiveData object associated with new transactions becomes inactive, typically in the onInactive() method of a LiveData subclass.",
              "How-it-is-done": "The method calls the removeCoinsSentEventListener() and removeCoinsReceivedEventListener() methods on the wallet object, passing the walletListener object as a parameter to remove the previously added event listeners.",
              "Property": {
                "pre-conditions": [
                  "The wallet object and walletListener object must be initialized and valid."
                ],
                "post-conditions": [
                  "The event listeners for coins sent and received are successfully removed from the wallet object."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData$WalletListener": {
        "qualifiedName": "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData$WalletListener",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData$WalletListener.de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData$WalletListener()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData$WalletListener.de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData$WalletListener()",
            "description": {
              "What": "Initialize a new instance of WalletListener.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this constructor."
                }
              ],
              "Returns": {
                "type": "WalletListener",
                "description": "A new instance of WalletListener is returned."
              },
              "Why": "To provide a default constructor for initializing a WalletListener instance.",
              "How-to-use": "Simply create a new instance of WalletListener by calling the constructor with no parameters.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of WalletListener.",
              "Property": {
                "pre-conditions": "No pre-conditions are required for this constructor.",
                "post-conditions": "A new instance of WalletListener is successfully created."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData$WalletListener.onCoinsReceived(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData$WalletListener.onCoinsReceived(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)",
            "description": {
              "What": "Posts the received transaction to the LiveData object.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet receiving the coins."
                },
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction that was received."
                },
                {
                  "name": "prevBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The previous balance of the wallet before receiving the coins."
                },
                {
                  "name": "newBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The new balance of the wallet after receiving the coins."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To notify observers of the LiveData object about the new transaction received by the wallet.",
              "How-to-use": "Create an instance of BlockchainService$NewTransactionLiveData$WalletListener and override the onCoinsReceived method to handle the received transaction.",
              "How-it-is-done": "When coins are received by the wallet, the method posts the received transaction to the LiveData object using the postValue method.",
              "Property": {
                "pre-conditions": "The wallet, transaction, previous balance, and new balance parameters must not be null.",
                "post-conditions": "The received transaction is successfully posted to the LiveData object."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData$WalletListener.onCoinsSent(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$NewTransactionLiveData$WalletListener.onCoinsSent(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)",
            "description": {
              "What": "Posts the transaction to the LiveData when coins are sent from the wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which coins are sent."
                },
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction that sent the coins."
                },
                {
                  "name": "prevBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The previous balance of the wallet before the transaction."
                },
                {
                  "name": "newBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The new balance of the wallet after the transaction."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To notify observers when coins are sent from the wallet.",
              "How-to-use": "Create an instance of BlockchainService$NewTransactionLiveData$WalletListener and set it as a listener for the wallet to receive notifications when coins are sent.",
              "How-it-is-done": "When coins are sent from the wallet, the method is called with the transaction details, and the transaction is posted to the LiveData for observers to be notified.",
              "Property": {
                "pre-conditions": "The wallet, transaction, previous balance, and new balance must not be null.",
                "post-conditions": "The transaction is posted to the LiveData for observers to be notified."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener": {
        "qualifiedName": "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.changed(int)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.changed(int)",
            "description": {
              "What": "Updates the notification based on the number of connected peers.",
              "Parameters": [
                {
                  "name": "numPeers",
                  "type": "int",
                  "description": "The number of connected peers."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide real-time updates on the number of connected peers and manage the notification display.",
              "How-to-use": "Call this method with the number of connected peers to update the notification accordingly.",
              "How-it-is-done": "The method checks if the service is stopped, then updates the notification based on the number of peers by creating a notification with relevant information and setting it as ongoing or stopping the foreground service.",
              "Property": {
                "pre-conditions": "The service should not be stopped.",
                "post-conditions": "The notification is updated based on the number of connected peers."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener()",
            "description": {
              "method": {
                "What": "Registers a listener for shared preference changes in the configuration.",
                "Parameters": [
                  {
                    "name": "config",
                    "type": "Configuration",
                    "description": "The configuration object to register the listener with."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "Constructor method, no return type specified."
                },
                "Why": "To allow the class to listen for changes in shared preferences and react accordingly.",
                "How-to-use": "Create an instance of PeerConnectivityListener class and pass a Configuration object to the constructor.",
                "How-it-is-done": "The constructor method registers the instance of PeerConnectivityListener as a listener for shared preference changes in the provided Configuration object.",
                "Property": {
                  "pre-conditions": [
                    "The Configuration object must be initialized before passing it to the constructor."
                  ],
                  "post-conditions": [
                    "The PeerConnectivityListener instance is registered as a listener for shared preference changes in the Configuration object."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.onPeerConnected(org.bitcoinj.core.Peer,int)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.onPeerConnected(org.bitcoinj.core.Peer,int)",
            "description": {
              "What": "Updates the peer count and triggers a change event when a new peer is connected.",
              "Parameters": [
                {
                  "name": "peer",
                  "type": "org.bitcoinj.core.Peer",
                  "description": "The peer that has been connected."
                },
                {
                  "name": "peerCount",
                  "type": "int",
                  "description": "The total count of connected peers after the new connection."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To track the number of connected peers and notify listeners when a new peer is connected.",
              "How-to-use": "Create an instance of PeerConnectivityListener and register it with a BlockchainService to receive notifications when peers are connected.",
              "How-it-is-done": "When a new peer is connected, the method updates the peer count with the new value and triggers a change event to notify listeners.",
              "Property": {
                "pre-conditions": "The peer and peerCount parameters must be valid and not null.",
                "post-conditions": "The peer count is updated with the new value and listeners are notified of the change."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.onPeerDisconnected(org.bitcoinj.core.Peer,int)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.onPeerDisconnected(org.bitcoinj.core.Peer,int)",
            "description": {
              "What": "Updates the peer count and triggers a change event when a peer disconnects.",
              "Parameters": [
                {
                  "name": "peer",
                  "type": "org.bitcoinj.core.Peer",
                  "description": "The disconnected peer."
                },
                {
                  "name": "peerCount",
                  "type": "int",
                  "description": "The updated count of connected peers."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the event of a peer disconnecting and update the peer count accordingly.",
              "How-to-use": "Implement this method in a class that extends BlockchainService$PeerConnectivityListener to receive notifications when a peer disconnects.",
              "How-it-is-done": "When a peer disconnects, the method updates the peer count with the new value and triggers a change event by calling the 'changed' method.",
              "Property": {
                "pre-conditions": [
                  "The 'peer' parameter must not be null.",
                  "The 'peerCount' parameter must be a valid integer."
                ],
                "post-conditions": [
                  "The 'peerCount' property of the class is updated with the new value.",
                  "The 'changed' method is called to notify listeners of the peer count change."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)",
            "description": {
              "What": "This method is triggered when a shared preference is changed, specifically for connectivity notifications, and calls the 'changed' method with the current peer count.",
              "Parameters": [
                {
                  "name": "sharedPreferences",
                  "type": "android.content.SharedPreferences",
                  "description": "The shared preferences that were changed."
                },
                {
                  "name": "key",
                  "type": "java.lang.String",
                  "description": "The key of the preference that was changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle changes in shared preferences related to connectivity notifications and update the peer count accordingly.",
              "How-to-use": "Implement this method in a class that extends BlockchainService$PeerConnectivityListener to respond to changes in connectivity notification preferences.",
              "How-it-is-done": "When the specified preference key for connectivity notifications is changed, the method calls the 'changed' method with the current peer count.",
              "Property": {
                "pre-conditions": [
                  "The class containing this method must extend BlockchainService$PeerConnectivityListener."
                ],
                "post-conditions": [
                  "The 'changed' method is called with the current peer count when the specified preference key is changed."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.stop()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainService$PeerConnectivityListener.stop()",
            "description": {
              "What": "Stop the peer connectivity listener and cancel any notifications.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To stop the peer connectivity listener and clean up any resources or notifications associated with it.",
              "How-to-use": "Simply call the stop() method on an instance of PeerConnectivityListener to stop the listener and cancel notifications.",
              "How-it-is-done": "The method sets a boolean flag 'stopped' to true, unregisters a shared preference change listener, and cancels a notification with a specific ID.",
              "Property": {
                "pre-conditions": [
                  "The PeerConnectivityListener instance must be initialized and running."
                ],
                "post-conditions": [
                  "The peer connectivity listener is stopped and any associated resources are cleaned up."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.service.BlockchainState": {
        "qualifiedName": "de.schildbach.wallet.service.BlockchainState",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.service.BlockchainState.de.schildbach.wallet.service.BlockchainState(java.util.Date,int,boolean,java.util.Set)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainState.de.schildbach.wallet.service.BlockchainState(java.util.Date,int,boolean,java.util.Set)",
            "description": {
              "What": "Initialize a BlockchainState object with the provided parameters.",
              "Parameters": [
                {
                  "name": "bestChainDate",
                  "type": "java.util.Date",
                  "description": "The date of the best chain."
                },
                {
                  "name": "bestChainHeight",
                  "type": "int",
                  "description": "The height of the best chain."
                },
                {
                  "name": "replaying",
                  "type": "boolean",
                  "description": "Flag indicating if the blockchain is replaying."
                },
                {
                  "name": "impediments",
                  "type": "java.util.Set<de.schildbach.wallet.service.BlockchainState.Impediment>",
                  "description": "Set of impediments affecting the blockchain state."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.service.BlockchainState",
                "description": "A new instance of BlockchainState initialized with the provided parameters."
              },
              "Why": "To create a BlockchainState object with specific attributes for tracking the state of the blockchain.",
              "How-to-use": "Create a new instance of BlockchainState by passing the required parameters such as bestChainDate, bestChainHeight, replaying flag, and a set of impediments.",
              "How-it-is-done": "The method assigns the provided parameters to the corresponding fields of the BlockchainState object, converting the set of impediments to an EnumSet for better handling.",
              "Property": {
                "pre-conditions": "The impediments parameter must not be null.",
                "post-conditions": "A new BlockchainState object is created with the specified attributes."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainState.fromIntent(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainState.fromIntent(android.content.Intent)",
            "description": {
              "What": "This method creates a BlockchainState object from the data stored in an Intent object.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The Intent object containing the data to create the BlockchainState object."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.service.BlockchainState",
                "description": "A BlockchainState object created from the data in the Intent object, or null if the data is incomplete."
              },
              "Why": "To provide a convenient way to create a BlockchainState object from Intent data.",
              "How-to-use": "Call this method with an Intent object as the parameter to create a BlockchainState object with the data stored in the Intent.",
              "How-it-is-done": "The method retrieves the best chain date, height, replaying flag, and impediments from the Intent object, and creates a new BlockchainState object with this data if all necessary information is present.",
              "Property": {
                "pre-conditions": "The Intent object must contain the necessary data (best chain date, height, impediments) as extras.",
                "post-conditions": "If all necessary data is present, a new BlockchainState object is created and returned; otherwise, null is returned."
              }
            }
          },
          "de.schildbach.wallet.service.BlockchainState.putExtras(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainState.putExtras(android.content.Intent)",
            "description": {
              "What": "This method adds extra data to an Android Intent object related to blockchain state information.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The Intent object to which extra data will be added."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide additional blockchain state information to be passed along with an Intent object.",
              "How-to-use": "Create an instance of BlockchainState, call putExtras method with an Intent object as the parameter, and then use the Intent object with the added blockchain state information.",
              "How-it-is-done": "The method simply puts the bestChainDate, bestChainHeight, replaying, and impediments values as extras into the provided Intent object.",
              "Property": {
                "pre-conditions": "The Intent object passed as a parameter must not be null.",
                "post-conditions": "The Intent object will have extra data related to blockchain state information added to it."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.service.BlockchainState$Impediment": {
        "qualifiedName": "de.schildbach.wallet.service.BlockchainState$Impediment",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.service.BlockchainState$Impediment.de.schildbach.wallet.service.BlockchainState$Impediment()": {
            "qualifiedName": "de.schildbach.wallet.service.BlockchainState$Impediment.de.schildbach.wallet.service.BlockchainState$Impediment()",
            "description": {
              "What": "This method is a constructor for the enum Impediment in the BlockchainState class.",
              "Parameters": [],
              "Returns": {
                "type": "Impediment",
                "description": "A new instance of the Impediment enum."
              },
              "Why": "To initialize a new instance of the Impediment enum.",
              "How-to-use": "Simply call the Impediment() constructor to create a new instance of the Impediment enum.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the Impediment enum.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the Impediment enum is created."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.service.BootstrapReceiver": {
        "qualifiedName": "de.schildbach.wallet.service.BootstrapReceiver",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.service.BootstrapReceiver.de.schildbach.wallet.service.BootstrapReceiver()": {
            "qualifiedName": "de.schildbach.wallet.service.BootstrapReceiver.de.schildbach.wallet.service.BootstrapReceiver()",
            "description": {
              "What": "This method is a constructor for the BootstrapReceiver class.",
              "Parameters": [],
              "Returns": "BootstrapReceiver",
              "Why": "The method is provided to initialize an instance of the BootstrapReceiver class.",
              "How-to-use": "To use this method, simply create a new instance of the BootstrapReceiver class by calling new BootstrapReceiver().",
              "How-it-is-done": "The method initializes a new instance of the BootstrapReceiver class without any parameters or additional logic.",
              "Property": {
                "pre-conditions": "No pre-conditions are required for this method.",
                "post-conditions": "The method will always return a new instance of the BootstrapReceiver class."
              }
            }
          },
          "de.schildbach.wallet.service.BootstrapReceiver.onReceive(android.content.Context,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.service.BootstrapReceiver.onReceive(android.content.Context,android.content.Intent)",
            "description": {
              "What": "The method handles broadcast intents related to boot completion or package replacement, triggering necessary actions like upgrading the wallet service and scheduling blockchain service start.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the broadcast receiver is running."
                },
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The broadcast intent received by the receiver."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle system events like boot completion or package replacement and perform necessary actions for the wallet application.",
              "How-to-use": "Register an instance of BootstrapReceiver as a broadcast receiver in the AndroidManifest.xml file with appropriate intent filters for ACTION_BOOT_COMPLETED and ACTION_MY_PACKAGE_REPLACED.",
              "How-it-is-done": "The method logs the received intent, retrieves the application context, checks if the intent is for package replacement or boot completion, triggers wallet service upgrade if needed, schedules blockchain service start, and starts inactivity notification service based on configuration.",
              "Property": {
                "pre-conditions": "The method assumes that the context and intent parameters are not null.",
                "post-conditions": "After execution, the necessary actions related to boot completion or package replacement are performed by the wallet application."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.service.InactivityNotificationService": {
        "qualifiedName": "de.schildbach.wallet.service.InactivityNotificationService",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.service.InactivityNotificationService.de.schildbach.wallet.service.InactivityNotificationService()": {
            "qualifiedName": "de.schildbach.wallet.service.InactivityNotificationService.de.schildbach.wallet.service.InactivityNotificationService()",
            "description": {
              "What": "Initialize an instance of InactivityNotificationService class.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this constructor."
                }
              ],
              "Returns": {
                "type": "InactivityNotificationService",
                "description": "An instance of the InactivityNotificationService class is returned."
              },
              "Why": "To provide a constructor for initializing instances of the InactivityNotificationService class with intent redelivery enabled.",
              "How-to-use": "Simply create a new instance of InactivityNotificationService to enable inactivity notifications with intent redelivery.",
              "How-it-is-done": "The constructor initializes the InactivityNotificationService class by setting the class name and enabling intent redelivery.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "An instance of InactivityNotificationService class is created with intent redelivery enabled."
              }
            }
          },
          "de.schildbach.wallet.service.InactivityNotificationService.handleDismiss()": {
            "qualifiedName": "de.schildbach.wallet.service.InactivityNotificationService.handleDismiss()",
            "description": {
              "What": "Dismisses the inactivity notification by canceling the notification.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "Provided to allow users to dismiss the inactivity notification and improve user experience.",
              "How-to-use": "Simply call the handleDismiss() method to dismiss the inactivity notification.",
              "How-it-is-done": "The method logs a message indicating the dismissal of the notification and then cancels the notification using the NotificationManager.",
              "Property": {
                "pre-conditions": [
                  "The inactivity notification must be currently displayed."
                ],
                "post-conditions": [
                  "The inactivity notification is dismissed and no longer displayed."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.InactivityNotificationService.handleDismissForever()": {
            "qualifiedName": "de.schildbach.wallet.service.InactivityNotificationService.handleDismissForever()",
            "description": {
              "What": "Dismisses the inactivity notification forever by setting remind balance to false and cancelling the notification.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to dismiss the inactivity notification permanently and stop receiving reminders.",
              "How-to-use": "Simply call the handleDismissForever() method to dismiss the inactivity notification forever.",
              "How-it-is-done": "The method logs a message, sets the remind balance to false in the configuration, and cancels the inactivity notification using the notification manager.",
              "Property": {
                "pre-conditions": [
                  "The configuration object (config) must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The inactivity notification will be dismissed permanently."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.InactivityNotificationService.handleDonate(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.service.InactivityNotificationService.handleDonate(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Starts a donation process with the specified wallet balance and fee category, cancels inactivity notification, and closes system dialogs.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which the donation will be made."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To initiate a donation process with the wallet balance and handle related UI notifications.",
              "How-to-use": "Call this method with a valid org.bitcoinj.wallet.Wallet object to start a donation process with the wallet balance and specified fee category.",
              "How-it-is-done": "The method retrieves the available spendable balance from the wallet, starts the donation process with the SendCoinsActivity class, cancels the inactivity notification, and sends a broadcast to close system dialogs.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "The donation process is initiated with the specified wallet balance and fee category.",
                  "The inactivity notification is canceled.",
                  "System dialogs are closed."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.InactivityNotificationService.handleMaybeShowNotification(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.service.InactivityNotificationService.handleMaybeShowNotification(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Show an inactivity notification if the wallet balance is positive.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet to check for balance."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To notify the user when there is a positive balance in the wallet and provide options for donation.",
              "How-to-use": "Call this method with a Wallet object to check for balance and show the inactivity notification if the balance is positive.",
              "How-it-is-done": "The method checks the estimated balance of the wallet, constructs a notification message with donation options if applicable, creates intents for dismiss, dismiss forever, and donate actions, builds a notification with the message and actions, and finally notifies the user.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must not be null."
                ],
                "post-conditions": [
                  "If the estimated balance is positive, an inactivity notification will be shown to the user."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.InactivityNotificationService.onCreate()": {
            "qualifiedName": "de.schildbach.wallet.service.InactivityNotificationService.onCreate()",
            "description": {
              "What": "This method creates a notification for the service to run in the foreground.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "The method is provided to ensure that the service runs in the foreground and displays a notification to the user.",
              "How-to-use": "Call this method within the onCreate() method of the InactivityNotificationService class to set up the notification for the service.",
              "How-it-is-done": "The method initializes the NotificationManager, gets the application instance, and creates a notification using NotificationCompat.Builder. If the Android version is Oreo or higher, it starts the service in the foreground with the notification.",
              "Property": {
                "pre-conditions": [
                  "The service must be created and started."
                ],
                "post-conditions": [
                  "The service will run in the foreground with a notification displayed to the user."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.InactivityNotificationService.onHandleIntent(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.service.InactivityNotificationService.onHandleIntent(android.content.Intent)",
            "description": {
              "What": "Handles different actions based on the intent received by the service.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent received by the service."
                },
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet object obtained from the application."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle different actions triggered by the inactivity notification service.",
              "How-to-use": "Extend the InactivityNotificationService class and override the onHandleIntent method. Pass the intent received by the service as a parameter to the method.",
              "How-it-is-done": "The method first propagates the BitcoinJ context, then checks the action of the intent to determine which action to perform. It can dismiss the notification, dismiss it forever, donate, or show the notification.",
              "Property": {
                "pre-conditions": "The application object must be initialized with a valid wallet object.",
                "post-conditions": "The appropriate action based on the intent will be executed by the service."
              }
            }
          },
          "de.schildbach.wallet.service.InactivityNotificationService.startMaybeShowNotification(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.service.InactivityNotificationService.startMaybeShowNotification(android.content.Context)",
            "description": {
              "What": "Starts the InactivityNotificationService as a foreground service in the given context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the service should be started."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that the InactivityNotificationService runs as a foreground service and can show notifications even when the app is in the background.",
              "How-to-use": "Simply call this method with the desired context to start the InactivityNotificationService as a foreground service.",
              "How-it-is-done": "The method uses the ContextCompat.startForegroundService() method to start the InactivityNotificationService as a foreground service in the given context.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The InactivityNotificationService will be started as a foreground service in the given context."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.service.UpgradeWalletService": {
        "qualifiedName": "de.schildbach.wallet.service.UpgradeWalletService",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.service.UpgradeWalletService.de.schildbach.wallet.service.UpgradeWalletService()": {
            "qualifiedName": "de.schildbach.wallet.service.UpgradeWalletService.de.schildbach.wallet.service.UpgradeWalletService()",
            "description": {
              "What": "Initialize an UpgradeWalletService object with the class name and set intent redelivery to true.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the constructor."
                }
              ],
              "Returns": {
                "type": "UpgradeWalletService",
                "description": "Constructs an UpgradeWalletService object."
              },
              "Why": "To provide a way to create an instance of UpgradeWalletService and set intent redelivery for the service.",
              "How-to-use": "Simply create a new instance of UpgradeWalletService to initialize the service with intent redelivery enabled.",
              "How-it-is-done": "The constructor initializes the UpgradeWalletService object by passing the class name to the superclass constructor and setting intent redelivery to true.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "An instance of UpgradeWalletService is created with intent redelivery enabled."
              }
            }
          },
          "de.schildbach.wallet.service.UpgradeWalletService.maybeUpgradeToSecureChain(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.service.UpgradeWalletService.maybeUpgradeToSecureChain(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Performs wallet maintenance and starts the blockchain service if necessary for upgrading to a secure chain.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet to upgrade to a secure chain."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure the wallet is upgraded to a secure chain by performing necessary maintenance tasks and starting the blockchain service.",
              "How-to-use": "Call this method with the wallet instance that needs to be upgraded to a secure chain.",
              "How-it-is-done": "The method first calls wallet.doMaintenance() with null parameters and then starts the blockchain service using BlockchainService.start(). Any exceptions are caught and logged as errors.",
              "Property": {
                "pre-conditions": "The wallet instance must not be null.",
                "post-conditions": "The wallet is upgraded to a secure chain after performing maintenance tasks and starting the blockchain service."
              }
            }
          },
          "de.schildbach.wallet.service.UpgradeWalletService.onCreate()": {
            "qualifiedName": "de.schildbach.wallet.service.UpgradeWalletService.onCreate()",
            "description": {
              "What": "Creates a notification for the service and sets it as ongoing foreground notification if the device's SDK version is Oreo or higher.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure the service runs in the foreground and displays a notification on devices with Android Oreo or higher.",
              "How-to-use": "Simply call the onCreate() method of the UpgradeWalletService class to set up the ongoing foreground notification for the service.",
              "How-it-is-done": "The method first obtains the application instance, then checks if the device's SDK version is Oreo or higher. If true, it creates a notification with specific attributes and sets it as an ongoing foreground notification.",
              "Property": {
                "pre-conditions": [
                  "The service must be created and started."
                ],
                "post-conditions": [
                  "If the device's SDK version is Oreo or higher, an ongoing foreground notification is displayed for the service."
                ]
              }
            }
          },
          "de.schildbach.wallet.service.UpgradeWalletService.onHandleIntent(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.service.UpgradeWalletService.onHandleIntent(android.content.Intent)",
            "description": {
              "What": "This method checks if a wallet upgrade is required and performs the upgrade if necessary.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent passed to the service."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to handle wallet upgrades and ensure compatibility with the latest features.",
              "How-to-use": "To use this method, create an instance of UpgradeWalletService and call onHandleIntent with the intent to trigger the wallet upgrade process.",
              "How-it-is-done": "The method first propagates the BitcoinJ context, then checks if a deterministic upgrade is required for the wallet. If needed, it upgrades the wallet to deterministic, logs the upgrade, and starts the blockchain service. Finally, it may perform additional upgrades to a secure chain.",
              "Property": {
                "pre-conditions": "The application must have a valid wallet instance set before calling this method.",
                "post-conditions": "After the method execution, the wallet may be upgraded to a deterministic wallet if required."
              }
            }
          },
          "de.schildbach.wallet.service.UpgradeWalletService.startUpgrade(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.service.UpgradeWalletService.startUpgrade(android.content.Context)",
            "description": {
              "What": "Starts the UpgradeWalletService as a foreground service in the given context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the service should be started."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To initiate the upgrade process of the wallet service in the background.",
              "How-to-use": "Call this method with a valid context to start the UpgradeWalletService as a foreground service.",
              "How-it-is-done": "The method uses the ContextCompat class to start the UpgradeWalletService as a foreground service by creating a new Intent with the UpgradeWalletService class.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The UpgradeWalletService will be started as a foreground service in the given context."
                ]
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.ui": {
    "qualifiedName": "de.schildbach.wallet.ui",
    "classes": {
      "de.schildbach.wallet.ui.AbstractWalletActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.AbstractWalletActivity",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.AbstractWalletActivity.de.schildbach.wallet.ui.AbstractWalletActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.AbstractWalletActivity.de.schildbach.wallet.ui.AbstractWalletActivity()",
            "description": {
              "What": "Initialize an instance of AbstractWalletActivity.",
              "Parameters": [],
              "Returns": "AbstractWalletActivity instance",
              "Why": "To provide a base class for wallet-related activities in the application.",
              "How-to-use": "Extend this class to create custom wallet activities in the application.",
              "How-it-is-done": "The method initializes an instance of AbstractWalletActivity without any specific parameters.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "An instance of AbstractWalletActivity is created and ready for further customization."
              }
            }
          },
          "de.schildbach.wallet.ui.AbstractWalletActivity.getWalletApplication()": {
            "qualifiedName": "de.schildbach.wallet.ui.AbstractWalletActivity.getWalletApplication()",
            "description": {
              "What": "This method returns the WalletApplication instance associated with the AbstractWalletActivity.",
              "Parameters": [],
              "Returns": {
                "type": "de.schildbach.wallet.WalletApplication",
                "description": "The WalletApplication instance associated with the AbstractWalletActivity."
              },
              "Why": "To provide access to the WalletApplication instance for subclasses of AbstractWalletActivity.",
              "How-to-use": "Simply call this method on an instance of a subclass of AbstractWalletActivity to retrieve the WalletApplication instance.",
              "How-it-is-done": "The method simply returns the 'application' field of the AbstractWalletActivity class, which holds the WalletApplication instance.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "The method always returns the same WalletApplication instance associated with the AbstractWalletActivity."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AbstractWalletActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.AbstractWalletActivity.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initializes the activity by setting the application context and task description if the SDK version is at least Lollipop.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the activity with necessary context and task description for better user experience.",
              "How-to-use": "Extend this class in a custom activity and override the onCreate method to initialize the activity with the application context and task description.",
              "How-it-is-done": "The method first assigns the application context by casting the application to WalletApplication. It then checks the SDK version and sets the task description with a background color if it's at least Lollipop. Finally, it calls the super.onCreate method to complete the activity initialization.",
              "Property": {
                "pre-conditions": [
                  "The activity must extend AbstractWalletActivity.",
                  "The application class must be WalletApplication."
                ],
                "post-conditions": [
                  "The activity is initialized with the application context and task description if applicable."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AbstractWalletActivity.onOptionsItemSelected(android.view.MenuItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.AbstractWalletActivity.onOptionsItemSelected(android.view.MenuItem)",
            "description": {
              "What": "Handles the selection of menu items in the activity, specifically the home button.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "android.view.MenuItem",
                  "description": "The selected menu item."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the item selection was handled, false otherwise."
              },
              "Why": "To provide custom behavior when a menu item is selected, in this case, handling the home button press.",
              "How-to-use": "Override this method in a subclass of AbstractWalletActivity to define custom behavior for handling menu item selections, such as navigating back when the home button is pressed.",
              "How-it-is-done": "The method checks the ID of the selected menu item and performs the appropriate action, in this case, calling onBackPressed() when the home button is pressed.",
              "Property": {
                "pre-conditions": "The activity must extend AbstractWalletActivity to use this method.",
                "post-conditions": "The selected menu item is handled, and the appropriate action is taken based on its ID."
              }
            }
          },
          "de.schildbach.wallet.ui.AbstractWalletActivity.reportFullyDrawn()": {
            "qualifiedName": "de.schildbach.wallet.ui.AbstractWalletActivity.reportFullyDrawn()",
            "description": {
              "What": "This method reports that the activity has been fully drawn to the user.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to handle reporting when the activity has been fully drawn, with a fallback for older Android versions.",
              "How-to-use": "Simply call this method within the activity class to report that the activity has been fully drawn to the user.",
              "How-it-is-done": "The method first checks the Android version, then calls the super method to report fully drawn. If the super method throws a SecurityException, it catches the exception and does nothing.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The activity is reported as fully drawn to the user."
              }
            }
          },
          "de.schildbach.wallet.ui.AbstractWalletActivity.setShowWhenLocked(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.AbstractWalletActivity.setShowWhenLocked(boolean)",
            "description": {
              "What": "This method sets whether the activity should be shown when the device is locked.",
              "Parameters": [
                {
                  "name": "showWhenLocked",
                  "type": "boolean",
                  "description": "A boolean value indicating whether the activity should be shown when the device is locked."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To control the visibility of the activity when the device is locked based on the Android version and set appropriate window flags.",
              "How-to-use": "Call this method with a boolean parameter to set whether the activity should be shown when the device is locked.",
              "How-it-is-done": "If the Android version is O_MR1 or higher, the method delegates to the superclass implementation; otherwise, it adds or clears the FLAG_SHOW_WHEN_LOCKED window flag based on the showWhenLocked parameter.",
              "Property": {
                "pre-conditions": "The activity must extend AbstractWalletActivity. The parameter showWhenLocked must be a valid boolean value.",
                "post-conditions": "The visibility of the activity when the device is locked is set according to the showWhenLocked parameter."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.AddressAndLabel": {
        "qualifiedName": "de.schildbach.wallet.ui.AddressAndLabel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.AddressAndLabel.de.schildbach.wallet.ui.AddressAndLabel(android.os.Parcel)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressAndLabel.de.schildbach.wallet.ui.AddressAndLabel(android.os.Parcel)",
            "description": {
              "What": "Constructs an AddressAndLabel object by reading address and label from a Parcel.",
              "Parameters": [
                {
                  "name": "in",
                  "type": "android.os.Parcel",
                  "description": "The Parcel containing address and label data."
                }
              ],
              "Returns": {
                "type": "AddressAndLabel",
                "description": "A new AddressAndLabel object constructed from the Parcel data."
              },
              "Why": "To provide a way to create an AddressAndLabel object by reading data from a Parcel, which is commonly used in Android development for passing data between components.",
              "How-to-use": "Create a new AddressAndLabel object by passing a Parcel object containing address and label data to the constructor.",
              "How-it-is-done": "The method reads a base58 encoded address and a label from the Parcel object, then constructs a new AddressAndLabel object with these values.",
              "Property": {
                "pre-conditions": [
                  "The Parcel object 'in' must contain valid address and label data."
                ],
                "post-conditions": [
                  "A new AddressAndLabel object is successfully constructed with the address and label data read from the Parcel."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AddressAndLabel.de.schildbach.wallet.ui.AddressAndLabel(org.bitcoinj.core.Address,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressAndLabel.de.schildbach.wallet.ui.AddressAndLabel(org.bitcoinj.core.Address,java.lang.String)",
            "description": {
              "What": "This method initializes an AddressAndLabel object with a Bitcoin address and an optional label.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to be associated with the object."
                },
                {
                  "name": "label",
                  "type": "java.lang.String",
                  "description": "An optional label to be associated with the Bitcoin address."
                }
              ],
              "Returns": {
                "type": "AddressAndLabel",
                "description": "An instance of the AddressAndLabel class initialized with the provided address and label."
              },
              "Why": "To create an object that represents a Bitcoin address along with an optional label for identification or categorization purposes.",
              "How-to-use": "Create a new AddressAndLabel object by passing a Bitcoin address and an optional label as parameters to the constructor.",
              "How-it-is-done": "The constructor initializes the AddressAndLabel object by assigning the provided address to the 'address' field and the provided label to the 'label' field.",
              "Property": {
                "pre-conditions": [
                  "The 'address' parameter must not be null."
                ],
                "post-conditions": [
                  "The AddressAndLabel object is successfully initialized with the provided address and label."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AddressAndLabel.de.schildbach.wallet.ui.AddressAndLabel(org.bitcoinj.core.NetworkParameters,java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressAndLabel.de.schildbach.wallet.ui.AddressAndLabel(org.bitcoinj.core.NetworkParameters,java.lang.String,java.lang.String)",
            "description": {
              "What": "Constructs an AddressAndLabel object from a base58 address string and label.",
              "Parameters": [
                {
                  "name": "addressParams",
                  "type": "org.bitcoinj.core.NetworkParameters",
                  "description": "The network parameters for the address."
                },
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The base58 encoded address string."
                },
                {
                  "name": "label",
                  "type": "java.lang.String",
                  "description": "The label associated with the address, can be null."
                }
              ],
              "Returns": {
                "type": "AddressAndLabel",
                "description": "An AddressAndLabel object representing the provided address and label."
              },
              "Why": "To create an AddressAndLabel object from a base58 address and label, simplifying the process for users.",
              "How-to-use": "Create a new AddressAndLabel object by providing the network parameters, base58 address, and optional label as parameters to the constructor.",
              "How-it-is-done": "The method uses the Address.fromBase58 method to convert the base58 address string to a BitcoinJ Address object, then calls another constructor of AddressAndLabel to create the final object.",
              "Property": {
                "pre-conditions": "The addressParams and address parameters must not be null.",
                "post-conditions": "An AddressAndLabel object is successfully created with the provided address and label."
              }
            }
          },
          "de.schildbach.wallet.ui.AddressAndLabel.describeContents()": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressAndLabel.describeContents()",
            "description": {
              "What": "This method returns an integer value representing the contents of the AddressAndLabel object.",
              "Parameters": [],
              "Returns": {
                "type": "int",
                "description": "Returns 0 to indicate that the contents of the AddressAndLabel object are empty."
              },
              "Why": "This method is provided as part of the Parcelable interface implementation for AddressAndLabel objects.",
              "How-to-use": "To use this method, simply call describeContents() on an instance of AddressAndLabel to get the integer value representing its contents.",
              "How-it-is-done": "The method simply returns 0 as AddressAndLabel objects do not have any special contents to describe for the Parcelable interface.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "The method always returns 0 as the contents of AddressAndLabel objects are considered empty."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AddressAndLabel.equals(java.lang.Object)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressAndLabel.equals(java.lang.Object)",
            "description": {
              "What": "Checks if the current AddressAndLabel object is equal to another object based on the address and label fields.",
              "Parameters": [
                {
                  "name": "o",
                  "type": "java.lang.Object",
                  "description": "The object to compare with the current AddressAndLabel object."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the objects are equal based on address and label, false otherwise."
              },
              "Why": "To provide a way to compare AddressAndLabel objects for equality based on their address and label fields.",
              "How-to-use": "Create an instance of AddressAndLabel and call the equals method with another object to check for equality based on address and label.",
              "How-it-is-done": "The method first checks if the objects are the same instance, then compares their classes and casts the object to AddressAndLabel. Finally, it compares the address and label fields using Google Guava's Objects.equal method.",
              "Property": {
                "pre-conditions": [
                  "The object passed as a parameter should not be null."
                ],
                "post-conditions": [
                  "The method returns true if the address and label fields of both objects are equal, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AddressAndLabel.hashCode()": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressAndLabel.hashCode()",
            "description": {
              "What": "This method calculates the hash code of an AddressAndLabel object based on its address and label fields.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "String",
                  "description": "The address field of the AddressAndLabel object."
                },
                {
                  "name": "label",
                  "type": "String",
                  "description": "The label field of the AddressAndLabel object."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The hash code value calculated based on the address and label fields."
              },
              "Why": "To provide a way to generate a hash code for AddressAndLabel objects for efficient hashing-based data structures or algorithms.",
              "How-to-use": "Create an instance of AddressAndLabel, set the address and label fields, then call the hashCode() method to get the hash code value.",
              "How-it-is-done": "The method uses the Objects.hashCode() method from the Google Guava library to calculate the hash code based on the address and label fields.",
              "Property": {
                "pre-conditions": "The address and label fields of the AddressAndLabel object must be set before calling this method.",
                "post-conditions": "The returned hash code value is based on the address and label fields and is consistent with the equals() method implementation."
              }
            }
          },
          "de.schildbach.wallet.ui.AddressAndLabel.toString()": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressAndLabel.toString()",
            "description": {
              "What": "This method returns a string representation of the AddressAndLabel object, including the address in base58 format and an optional label.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "String",
                "description": "A string representation of the AddressAndLabel object, including the address and label if present."
              },
              "Why": "To provide a human-readable representation of the AddressAndLabel object for debugging or logging purposes.",
              "How-to-use": "Simply call the toString() method on an instance of AddressAndLabel to obtain a string containing the address and label.",
              "How-it-is-done": "The method creates a StringBuilder, appends the class name and opening bracket, appends the address in base58 format, appends a comma and label if present, and finally appends a closing bracket before returning the resulting string.",
              "Property": {
                "pre-conditions": [
                  "The AddressAndLabel object must have a valid address."
                ],
                "post-conditions": [
                  "The returned string will contain the class name, address in base58 format, and label if present."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AddressAndLabel.writeToParcel(android.os.Parcel,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressAndLabel.writeToParcel(android.os.Parcel,int)",
            "description": {
              "What": "This method writes the address and label of an AddressAndLabel object to a Parcel.",
              "Parameters": [
                {
                  "name": "dest",
                  "type": "android.os.Parcel",
                  "description": "The destination Parcel to write the data to."
                },
                {
                  "name": "flags",
                  "type": "int",
                  "description": "Additional flags about how the object should be written."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow AddressAndLabel objects to be serialized and passed between components using Parcels.",
              "How-to-use": "Create an instance of AddressAndLabel, call writeToParcel() on it passing a Parcel and flags as parameters, and then read the data back using the corresponding readFromParcel() method.",
              "How-it-is-done": "The method writes the address and label of the AddressAndLabel object to the Parcel by converting them to strings and writing them using the Parcel's writeString() method.",
              "Property": {
                "pre-conditions": [
                  "The AddressAndLabel object must not be null."
                ],
                "post-conditions": [
                  "The address and label data are written to the Parcel."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.AddressBookActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.AddressBookActivity.de.schildbach.wallet.ui.AddressBookActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity.de.schildbach.wallet.ui.AddressBookActivity()",
            "description": {
              "What": "Initialize an instance of AddressBookActivity.",
              "Parameters": [],
              "Returns": "AddressBookActivity instance",
              "Why": "To provide a constructor for initializing AddressBookActivity instances.",
              "How-to-use": "Simply call the constructor to create a new instance of AddressBookActivity.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes an instance of AddressBookActivity.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of AddressBookActivity is created."
              }
            }
          },
          "de.schildbach.wallet.ui.AddressBookActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initializes the AddressBookActivity layout with two fragments for wallet addresses and sending addresses.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the layout of the AddressBookActivity with fragments for displaying wallet addresses and sending addresses.",
              "How-to-use": "Call this method in the onCreate() method of the AddressBookActivity class passing the savedInstanceState parameter.",
              "How-it-is-done": "The method initializes the layout by setting the content view, finding or creating fragments for wallet addresses and sending addresses, setting up a ViewPager with tabs, and handling page changes.",
              "Property": {
                "pre-conditions": [
                  "The layout file 'address_book_content' must be defined.",
                  "Fragments 'WalletAddressesFragment' and 'SendingAddressesFragment' must be available."
                ],
                "post-conditions": [
                  "The AddressBookActivity layout is set up with two fragments for wallet addresses and sending addresses."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AddressBookActivity.start(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity.start(android.content.Context)",
            "description": {
              "What": "Starts the AddressBookActivity class in the given context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the activity should be started."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a simple way to start the AddressBookActivity class from any context.",
              "How-to-use": "Simply call AddressBookActivity.start(context) with the desired context to start the activity.",
              "How-it-is-done": "The method creates a new Intent with the AddressBookActivity class and starts it in the given context using startActivity.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The AddressBookActivity class is started in the given context."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter": {
        "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.support.v4.app.Fragment)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.support.v4.app.Fragment)",
            "description": {
              "What": "Initialize a TwoFragmentAdapter with a FragmentManager, left Fragment, and right Fragment.",
              "Parameters": [
                {
                  "name": "fragmentManager",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to handle the Fragments."
                },
                {
                  "name": "left",
                  "type": "android.support.v4.app.Fragment",
                  "description": "The left Fragment to be displayed."
                },
                {
                  "name": "right",
                  "type": "android.support.v4.app.Fragment",
                  "description": "The right Fragment to be displayed."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter",
                "description": "A new instance of TwoFragmentAdapter initialized with the provided parameters."
              },
              "Why": "To set up a TwoFragmentAdapter for managing two Fragments in an AddressBookActivity.",
              "How-to-use": "Create a new instance of TwoFragmentAdapter by passing a FragmentManager, left Fragment, and right Fragment as parameters, then set this adapter to the ViewPager in the AddressBookActivity.",
              "How-it-is-done": "The constructor initializes the TwoFragmentAdapter with the provided FragmentManager, left Fragment, and right Fragment by assigning them to the corresponding class fields.",
              "Property": {
                "pre-conditions": [
                  "The fragmentManager, left, and right parameters must not be null."
                ],
                "post-conditions": [
                  "A new instance of TwoFragmentAdapter is created with the specified parameters."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.destroyItem(android.view.ViewGroup,int,java.lang.Object)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.destroyItem(android.view.ViewGroup,int,java.lang.Object)",
            "description": {
              "What": "This method throws an UnsupportedOperationException when attempting to destroy an item in the TwoFragmentAdapter of the AddressBookActivity.",
              "Parameters": [
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The parent container of the item to be destroyed."
                },
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item to be destroyed."
                },
                {
                  "name": "object",
                  "type": "java.lang.Object",
                  "description": "The object representing the item to be destroyed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to indicate that the operation of destroying an item is not supported in the TwoFragmentAdapter.",
              "How-to-use": "Simply call this method with the container, position, and object parameters when attempting to destroy an item in the adapter.",
              "How-it-is-done": "The method simply throws an UnsupportedOperationException, indicating that the operation is not supported and should not be performed.",
              "Property": {
                "pre-conditions": [
                  "The TwoFragmentAdapter must be instantiated and used within the AddressBookActivity."
                ],
                "post-conditions": [
                  "An UnsupportedOperationException is thrown when attempting to destroy an item."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.finishUpdate(android.view.ViewGroup)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.finishUpdate(android.view.ViewGroup)",
            "description": {
              "What": "Commits the current transaction and executes pending transactions in the fragment manager.",
              "Parameters": [
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The container view group where the transaction will be committed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that the current transaction is committed and any pending transactions are executed in the fragment manager.",
              "How-to-use": "Call this method passing the container view group as a parameter to commit the current transaction and execute pending transactions in the fragment manager.",
              "How-it-is-done": "If there is a current transaction, it is committed using commitAllowingStateLoss() method, and then the current transaction is set to null. Finally, executePendingTransactions() is called on the fragment manager to process any pending transactions.",
              "Property": {
                "pre-conditions": "The currentTransaction should not be null.",
                "post-conditions": "The currentTransaction is set to null after committing it, and any pending transactions are executed in the fragment manager."
              }
            }
          },
          "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.getCount()": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.getCount()",
            "description": {
              "What": "This method returns the count of items in the adapter, which is hardcoded to 2.",
              "Parameters": [],
              "Returns": {
                "Type": "int",
                "Description": "The count of items in the adapter."
              },
              "Why": "The method is provided to specify the number of items in the adapter, in this case, always returning 2.",
              "How-to-use": "Simply call getCount() on an instance of TwoFragmentAdapter to get the count of items in the adapter.",
              "How-it-is-done": "The method overrides the getCount() method from the base class and returns a hardcoded value of 2.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "The method always returns 2 as the count of items in the adapter."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.instantiateItem(android.view.ViewGroup,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.instantiateItem(android.view.ViewGroup,int)",
            "description": {
              "What": "This method instantiates a fragment and adds it to a container based on the position parameter.",
              "Parameters": [
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The container where the fragment will be added."
                },
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the fragment to be instantiated."
                },
                "Returns"
              ],
              "Returns": {
                "type": "java.lang.Object",
                "description": "The instantiated fragment."
              },
              "Why": "To dynamically add fragments to a container based on the position parameter.",
              "How-to-use": "Call this method passing a ViewGroup container and an int position to instantiate and add a fragment to the container.",
              "How-it-is-done": "The method checks if a transaction exists, determines the tag and fragment based on the position, adds the fragment to the container, and sets menu visibility and user visible hint.",
              "Property": {
                "pre-conditions": "The fragmentManager must be initialized before calling this method.",
                "post-conditions": "The fragment is added to the container and its visibility settings are adjusted."
              }
            }
          },
          "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.isViewFromObject(android.view.View,java.lang.Object)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.isViewFromObject(android.view.View,java.lang.Object)",
            "description": {
              "method": {
                "What": "Checks if the object is associated with the given view in the adapter.",
                "Parameters": [
                  {
                    "name": "view",
                    "type": "android.view.View",
                    "description": "The view to check against the object."
                  },
                  {
                    "name": "object",
                    "type": "java.lang.Object",
                    "description": "The object to check if associated with the view."
                  }
                ],
                "Returns": {
                  "type": "boolean",
                  "description": "True if the object is associated with the given view, false otherwise."
                },
                "Why": "To determine if a specific object is currently associated with a particular view in the adapter.",
                "How-to-use": "Call this method within the adapter to check if a fragment object is associated with a specific view.",
                "How-it-is-done": "The method typecasts the object to a Fragment and compares its view with the given view to determine if they are the same.",
                "Property": {
                  "pre-conditions": "The object must be a Fragment type.",
                  "post-conditions": "Returns true if the object's view matches the given view, false otherwise."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)": {
            "qualifiedName": "de.schildbach.wallet.ui.AddressBookActivity$TwoFragmentAdapter.setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)",
            "description": {
              "method": {
                "What": "Sets the primary item in the container and updates its visibility state.",
                "Parameters": [
                  {
                    "name": "container",
                    "type": "android.view.ViewGroup",
                    "description": "The container where the primary item is set."
                  },
                  {
                    "name": "position",
                    "type": "int",
                    "description": "The position of the item in the container."
                  },
                  {
                    "name": "object",
                    "type": "java.lang.Object",
                    "description": "The object representing the item to be set as primary."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To manage the visibility state of items in a ViewPager adapter.",
                "How-to-use": "Call this method when you want to set a specific item as the primary item in a ViewPager container.",
                "How-it-is-done": "The method checks if the provided object is different from the current primary item, updates the visibility state of the current and new primary items, and sets the new primary item.",
                "Property": {
                  "pre-conditions": "The container, position, and object parameters must not be null.",
                  "post-conditions": "The visibility state of the primary item is updated according to the provided object."
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.AlertDialogsFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.AlertDialogsFragment.add(android.support.v4.app.FragmentManager)": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.add(android.support.v4.app.FragmentManager)",
            "description": {
              "What": "Adds an instance of AlertDialogsFragment to the specified FragmentManager if it does not already exist.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to add the AlertDialogsFragment to."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that only one instance of AlertDialogsFragment is added to the FragmentManager at a time.",
              "How-to-use": "Call this method with the desired FragmentManager as the parameter to add the AlertDialogsFragment instance.",
              "How-it-is-done": "The method first checks if an instance of AlertDialogsFragment already exists in the FragmentManager. If not, it creates a new instance and adds it to the FragmentManager using a FragmentTransaction.",
              "Property": {
                "pre-conditions": "The FragmentManager fm must not be null.",
                "post-conditions": "An instance of AlertDialogsFragment is added to the FragmentManager if it did not already exist."
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.createInsecureBluetoothAlertDialog(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.createInsecureBluetoothAlertDialog(java.lang.String)",
            "description": {
              "What": "Creates an alert dialog to inform the user about insecure Bluetooth settings and provides an option to navigate to Bluetooth settings.",
              "Parameters": [
                {
                  "name": "minSecurityPatch",
                  "type": "String",
                  "description": "The minimum security patch level required for Bluetooth settings."
                },
                1
              ],
              "Returns": {
                "type": "Dialog",
                "description": "An alert dialog to display insecure Bluetooth settings message and options."
              },
              "Why": "To prompt the user about insecure Bluetooth settings and offer a quick way to navigate to Bluetooth settings for security enhancement.",
              "How-to-use": "Call this method with the minimum security patch level as a parameter to create an alert dialog with a message and options to navigate to Bluetooth settings.",
              "How-it-is-done": "The method creates a DialogBuilder instance with a warning message about insecure Bluetooth settings, adds a positive button to navigate to Bluetooth settings if the intent is resolvable, and a negative button to dismiss the dialog.",
              "Property": {
                "pre-conditions": [
                  "The 'activity' variable must be initialized before calling this method.",
                  "The 'R.string.alert_dialogs_fragment_insecure_bluetooth_title' and 'R.string.alert_dialogs_fragment_insecure_bluetooth_message' resources must be defined."
                ],
                "post-conditions": [
                  "An alert dialog is created with the specified message and options based on the availability of Bluetooth settings intent."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.createLowStorageAlertDialog()": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.createLowStorageAlertDialog()",
            "description": {
              "What": "Creates a dialog to alert the user about low storage on the device.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity where the dialog will be shown."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog to alert the user about low storage."
              },
              "Why": "To inform the user about low storage on the device and provide an option to manage applications to free up space.",
              "How-to-use": "Call this method passing the current activity as a parameter to create and show a dialog alerting the user about low storage.",
              "How-it-is-done": "The method creates a dialog using a DialogBuilder with a warning message about low storage. It checks if the settingsIntent to manage applications is resolvable, and if so, adds a positive button to open the settings. Finally, it sets a negative button to dismiss the dialog.",
              "Property": {
                "pre-conditions": [
                  "The activity parameter must not be null."
                ],
                "post-conditions": [
                  "A dialog is created and returned to alert the user about low storage."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.createSettingsFailedDialog(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.createSettingsFailedDialog(java.lang.String)",
            "description": {
              "What": "Creates a dialog to display a message about settings failure.",
              "Parameters": [
                {
                  "name": "exceptionMessage",
                  "type": "java.lang.String",
                  "description": "The message to be displayed in the dialog."
                },
                "Returns"
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying the exception message."
              },
              "Why": "To inform the user about settings failure in a dialog.",
              "How-to-use": "Call this method with the exception message as a parameter to create a dialog for displaying the message about settings failure.",
              "How-it-is-done": "The method creates a DialogBuilder instance with the activity context, sets the title and message using the provided exception message, adds a single dismiss button, and returns the created dialog.",
              "Property": {
                "Pre-conditions": "The 'activity' field must be initialized with a valid context before calling this method.",
                "Post-conditions": "A dialog displaying the exception message about settings failure is created and returned."
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.createTimeskewAlertDialog(long)": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.createTimeskewAlertDialog(long)",
            "description": {
              "What": "Creates an alert dialog to notify the user about time skew issues.",
              "Parameters": [
                {
                  "name": "diffMinutes",
                  "type": "long",
                  "description": "The time difference in minutes."
                },
                {
                  "name": "settingsIntent",
                  "type": "Intent",
                  "description": "Intent to open device settings."
                }
              ],
              "Returns": {
                "type": "Dialog",
                "description": "The created alert dialog."
              },
              "Why": "To inform the user about time skew and provide an option to adjust device settings.",
              "How-to-use": "Call createTimeskewAlertDialog(long diffMinutes) with the time difference in minutes to create the alert dialog.",
              "How-it-is-done": "The method creates a DialogBuilder with a warning message about time skew, adds a positive button to open device settings if available, and a negative button to dismiss the dialog.",
              "Property": {
                "pre-conditions": "Activity 'activity' must be initialized before calling this method.",
                "post-conditions": "The alert dialog is created and returned to be shown to the user."
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.createVersionAlertDialog()": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.createVersionAlertDialog()",
            "description": {
              "What": "Creates an alert dialog for displaying version information and options to update the wallet application.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity context where the dialog will be displayed."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying version information and options to update the wallet application."
              },
              "Why": "To inform users about new versions of the wallet application and provide options for updating.",
              "How-to-use": "Call this method passing the activity context as a parameter to create and show the version alert dialog.",
              "How-it-is-done": "The method creates a dialog with a title, message, and buttons for updating the app from the market or binary URL. It checks for available activities to handle the intents and sets click listeners to launch the corresponding actions.",
              "Property": {
                "pre-conditions": [
                  "The activity context must be valid and not null."
                ],
                "post-conditions": [
                  "The dialog is created and returned to be displayed to the user."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.de.schildbach.wallet.ui.AlertDialogsFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.de.schildbach.wallet.ui.AlertDialogsFragment()",
            "description": {
              "method": {
                "What": "This method initializes an instance of the AlertDialogsFragment class.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "AlertDialogsFragment",
                  "description": "An instance of the AlertDialogsFragment class."
                },
                "Why": "To provide a way to create instances of the AlertDialogsFragment class.",
                "How-to-use": "Simply call the constructor to create a new instance of AlertDialogsFragment.",
                "How-it-is-done": "The constructor does not take any parameters and simply initializes an instance of the AlertDialogsFragment class.",
                "Property": {
                  "pre-conditions": [],
                  "post-conditions": [
                    "An instance of the AlertDialogsFragment class is created."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.handleCatchAll()": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.handleCatchAll()",
            "description": {
              "What": "This method checks for low device storage and displays an alert dialog if storage is low.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "Returns true if a low storage intent is received and the alert dialog is shown, otherwise returns false."
              },
              "Why": "This method is provided to handle low device storage situations and alert the user accordingly.",
              "How-to-use": "Call this method to check for low device storage and display an alert dialog if necessary.",
              "How-it-is-done": "The method registers a receiver for low storage intent, checks if the intent is not null, and then posts a runnable to show the low storage alert dialog if the fragment is added.",
              "Property": {
                "pre-conditions": [
                  "The activity must be available and not null."
                ],
                "post-conditions": [
                  "If a low storage intent is received, the low storage alert dialog is shown to the user."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.handleException(java.lang.Exception)": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.handleException(java.lang.Exception)",
            "description": {
              "What": "Handles exceptions by logging specific types of exceptions and saving background trace for others.",
              "Parameters": [
                {
                  "name": "x",
                  "type": "java.lang.Exception",
                  "description": "The exception to be handled."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide specific handling for certain types of exceptions while saving background trace for others to aid in debugging.",
              "How-to-use": "Call this method with the exception to be handled as the parameter.",
              "How-it-is-done": "The method checks the type of the exception and logs it if it is an instance of UnknownHostException, SocketException, or SocketTimeoutException. Otherwise, it saves a background trace with a new RuntimeException containing the exception and the version URL.",
              "Property": {
                "pre-conditions": "The parameter x must be a non-null instance of java.lang.Exception.",
                "post-conditions": "The method will either log the exception if it is of a specific type or save a background trace with a new RuntimeException."
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.handleLine(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.handleLine(java.lang.String)",
            "description": {
              "What": "This method checks if the server version code is greater than the application version code and shows an alert dialog if necessary.",
              "Parameters": [
                {
                  "name": "line",
                  "type": "java.lang.String",
                  "description": "The input line containing the server version code."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if an alert dialog is shown, false otherwise."
              },
              "Why": "To notify the user if there is a newer version of the application available.",
              "How-to-use": "Call this method with a string containing the server version code to check and handle the alert dialog if needed.",
              "How-it-is-done": "The method parses the server version code from the input line, compares it with the application version code, and shows an alert dialog if the server version code is greater.",
              "Property": {
                "pre-conditions": "The input line must contain the server version code.",
                "post-conditions": "An alert dialog may be shown to the user if the server version code is greater than the application version code."
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.handleProperty(java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.handleProperty(java.lang.String,java.lang.String)",
            "description": {
              "What": "This method handles a specific property related to the minimum security patch level for Bluetooth and displays an alert dialog if the device's security patch level is below the specified minimum level.",
              "Parameters": [
                {
                  "name": "key",
                  "type": "String",
                  "description": "The key of the property to be handled."
                },
                {
                  "name": "value",
                  "type": "String",
                  "description": "The value associated with the property."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the property was handled and an alert dialog was shown, false otherwise."
              },
              "Why": "To ensure that the device meets the minimum security requirements for Bluetooth communication and prompt the user if necessary.",
              "How-to-use": "Call this method with the key and value of the property to handle the minimum security patch level for Bluetooth.",
              "How-it-is-done": "The method checks if the key corresponds to the minimum security patch level for Bluetooth, compares the device's security patch level with the minimum level, and shows an alert dialog if the conditions are met.",
              "Property": {
                "pre-conditions": [
                  "The key must not be null.",
                  "The value must not be null."
                ],
                "post-conditions": [
                  "If the key matches 'min.security_patch.bluetooth' and the device's security patch level is below the specified minimum level, an alert dialog may be displayed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.handleServerTime(long)": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.handleServerTime(long)",
            "description": {
              "What": "Checks if the system clock is off by more than 60 minutes compared to the server time and shows an alert dialog if necessary.",
              "Parameters": [
                {
                  "name": "serverTime",
                  "type": "long",
                  "description": "The server time to compare with the system time."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the system clock is off by more than 60 minutes, false otherwise."
              },
              "Why": "To notify the user if the system clock is significantly different from the server time, which could affect the functionality of the application.",
              "How-to-use": "Call handleServerTime(long serverTime) with the server time obtained from the server response to check for time skew and display an alert dialog if necessary.",
              "How-it-is-done": "The method calculates the absolute difference in minutes between the system time and the server time, logs the difference if it's greater than or equal to 60 minutes, and then posts a runnable to show an alert dialog if the fragment is still added to the activity.",
              "Property": {
                "pre-conditions": "The server time parameter must be a valid positive long value.",
                "post-conditions": "The method returns true if the system clock is off by more than 60 minutes, false otherwise."
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.onActivityCreated(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.onActivityCreated(android.os.Bundle)",
            "description": {
              "What": "This method queries a URL for version information and handles the response asynchronously.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": "void",
              "Why": "To asynchronously query a URL for version information and handle the response in the background.",
              "How-to-use": "Call this method passing the saved instance state of the fragment to initiate the version information query process.",
              "How-it-is-done": "The method sends a request to the specified URL using an HTTP client, reads the response, and processes the version information in a background thread.",
              "Property": {
                "pre-conditions": [
                  "The versionUrl field must be set with the URL to query."
                ],
                "post-conditions": [
                  "The version information is processed and appropriate actions are taken based on the response."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.onAttach(android.content.Context)",
            "description": {
              "method": {
                "What": "Initialize the activity, application, and package manager variables of the AlertDialogsFragment class.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context of the calling activity."
                  },
                  "Returns"
                ],
                "Returns": "void",
                "Why": "To set up necessary variables for the AlertDialogsFragment class to interact with the activity, application, and package manager.",
                "How-to-use": "Call this method in the onAttach() lifecycle method of the AlertDialogsFragment class with the context parameter.",
                "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then casts the context to AbstractWalletActivity to access the activity and application, and finally gets the package manager from the activity.",
                "Property": {
                  "pre-conditions": "The context parameter must not be null.",
                  "post-conditions": "The activity, application, and package manager variables of the AlertDialogsFragment class are initialized."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize background thread, handler, and version URL for the AlertDialogsFragment.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up necessary components and data for the AlertDialogsFragment.",
              "How-to-use": "Call this method in the onCreate() method of the AlertDialogsFragment class, passing the saved instance state as a parameter.",
              "How-it-is-done": "1. Create a new background thread with THREAD_PRIORITY_BACKGROUND. 2. Initialize a handler with the background thread's looper. 3. Get package information and construct the version URL with relevant parameters.",
              "Property": {
                "pre-conditions": [
                  "The application instance must be available to access package information."
                ],
                "post-conditions": [
                  "The background thread, handler, and version URL are initialized for further use."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.AlertDialogsFragment.onDestroy()": {
            "qualifiedName": "de.schildbach.wallet.ui.AlertDialogsFragment.onDestroy()",
            "description": {
              "What": "This method quits the background thread looper and calls the superclass' onDestroy method.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To properly clean up resources and handle the destruction of the fragment.",
              "How-to-use": "Simply call this method when the fragment is being destroyed to ensure proper cleanup of resources.",
              "How-it-is-done": "The method accesses the background thread's looper and calls the quit method to stop the thread. It then calls the superclass' onDestroy method to handle any additional cleanup.",
              "Property": {
                "pre-conditions": [
                  "The backgroundThread object must be initialized and running."
                ],
                "post-conditions": [
                  "The background thread looper is stopped and resources are properly cleaned up."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.BitmapFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.BitmapFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.BitmapFragment.de.schildbach.wallet.ui.BitmapFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.BitmapFragment.de.schildbach.wallet.ui.BitmapFragment()",
            "description": {
              "What": "This method is a constructor for the BitmapFragment class.",
              "Parameters": [],
              "Returns": "BitmapFragment - the constructed BitmapFragment object.",
              "Why": "To initialize a new instance of the BitmapFragment class.",
              "How-to-use": "Simply call the constructor to create a new BitmapFragment object.",
              "How-it-is-done": "The constructor initializes a new instance of the BitmapFragment class with default values.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new BitmapFragment object is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.ui.BitmapFragment.instance(android.graphics.Bitmap)": {
            "qualifiedName": "de.schildbach.wallet.ui.BitmapFragment.instance(android.graphics.Bitmap)",
            "description": {
              "What": "Creates a new instance of BitmapFragment with a given Bitmap as an argument.",
              "Parameters": [
                {
                  "name": "bitmap",
                  "type": "android.graphics.Bitmap",
                  "description": "The Bitmap to be passed as an argument to the BitmapFragment."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.BitmapFragment",
                "description": "A new instance of BitmapFragment with the provided Bitmap as an argument."
              },
              "Why": "To allow the creation of BitmapFragment instances with a Bitmap argument for display purposes.",
              "How-to-use": "Call this method with a Bitmap object as the parameter to create a new instance of BitmapFragment with the Bitmap set as an argument.",
              "How-it-is-done": "The method creates a new BitmapFragment instance, creates a Bundle to store the Bitmap argument, sets the Bitmap in the Bundle, sets the Bundle as arguments for the fragment, and returns the fragment instance.",
              "Property": {
                "pre-conditions": [
                  "The Bitmap parameter must not be null."
                ],
                "post-conditions": [
                  "The returned BitmapFragment instance will have the provided Bitmap set as an argument."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.BitmapFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.BitmapFragment.onAttach(android.content.Context)",
            "description": {
              "method": {
                "What": "Assigns the context to the activity variable of the BitmapFragment class.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context to be assigned to the activity variable."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To set the activity variable of the BitmapFragment class to the provided context.",
                "How-to-use": "Call this method with a valid context parameter to assign it to the activity variable of the BitmapFragment class.",
                "How-it-is-done": "The method overrides the onAttach method of the Fragment class, calls the super method with the context parameter, and then assigns the context to the activity variable of the BitmapFragment class.",
                "Property": {
                  "pre-conditions": [
                    "The context parameter must not be null."
                  ],
                  "post-conditions": [
                    "The activity variable of the BitmapFragment class is set to the provided context."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.BitmapFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.BitmapFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog displaying a bitmap image with an option to dismiss on click.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying the bitmap image."
              },
              "Why": "To provide a way to display a bitmap image in a dialog with dismiss functionality.",
              "How-to-use": "Create an instance of BitmapFragment, set the bitmap image using setArguments, and show the dialog using show method.",
              "How-it-is-done": "The method retrieves the bitmap from arguments, creates a BitmapDrawable, sets it to an ImageView in a custom dialog layout, and dismisses the dialog on image click.",
              "Property": {
                "pre-conditions": [
                  "The fragment must have arguments containing the bitmap image."
                ],
                "post-conditions": [
                  "A dialog displaying the bitmap image is shown with dismiss functionality."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.BitmapFragment.show(android.support.v4.app.FragmentManager,android.graphics.Bitmap)": {
            "qualifiedName": "de.schildbach.wallet.ui.BitmapFragment.show(android.support.v4.app.FragmentManager,android.graphics.Bitmap)",
            "description": {
              "What": "Show a bitmap in a fragment using the support library FragmentManager.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for displaying the bitmap."
                },
                {
                  "name": "bitmap",
                  "type": "android.graphics.Bitmap",
                  "description": "The bitmap to display in the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to display a bitmap in a fragment using the support library FragmentManager.",
              "How-to-use": "Call this static method with the FragmentManager and the bitmap you want to display to show the bitmap in a fragment.",
              "How-it-is-done": "The method creates an instance of BitmapFragment with the provided bitmap and then shows this fragment using the given FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The bitmap parameter must not be null."
                ],
                "post-conditions": [
                  "A fragment displaying the provided bitmap is shown using the given FragmentManager."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.CircularProgressView": {
        "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.CircularProgressView.de.schildbach.wallet.ui.CircularProgressView(android.content.Context,android.util.AttributeSet)": {
            "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView.de.schildbach.wallet.ui.CircularProgressView(android.content.Context,android.util.AttributeSet)",
            "description": {
              "What": "Initialize a CircularProgressView with specified attributes and set up paint styles.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the view is created."
                },
                {
                  "name": "attrs",
                  "type": "android.util.AttributeSet",
                  "description": "The set of attributes defined in XML."
                }
              ],
              "Returns": {
                "type": "CircularProgressView",
                "description": "A new instance of CircularProgressView with initialized paint styles."
              },
              "Why": "To set up the paint styles for the CircularProgressView to be used for drawing.",
              "How-to-use": "Create a new instance of CircularProgressView by passing a valid context and attributes, then add this view to a layout to display a circular progress indicator.",
              "How-it-is-done": "The method initializes the fill and stroke paint styles with specified colors, anti-aliasing, and stroke width based on the device density.",
              "Property": {
                "pre-conditions": [
                  "The context must be a valid non-null Android context object.",
                  "The attrs must be a valid non-null AttributeSet object."
                ],
                "post-conditions": [
                  "The CircularProgressView instance will have initialized paint styles for filling and stroking."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CircularProgressView.getBaseline()": {
            "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView.getBaseline()",
            "description": {
              "What": "This method returns the baseline of the Circular Progress View, which is the measured height minus 1.",
              "Parameters": [],
              "Returns": {
                "type": "int",
                "description": "The baseline value of the Circular Progress View."
              },
              "Why": "The method is provided to determine the baseline of the view for layout purposes.",
              "How-to-use": "Simply call the getBaseline() method on an instance of CircularProgressView to retrieve the baseline value.",
              "How-it-is-done": "The method overrides the getBaseline() method from the superclass and returns the measured height of the view minus 1.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "The returned baseline value will be the measured height of the view minus 1."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CircularProgressView.onDraw(android.graphics.Canvas)": {
            "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView.onDraw(android.graphics.Canvas)",
            "description": {
              "What": "Draws a path on the canvas using fill and stroke paint.",
              "Parameters": [
                {
                  "name": "canvas",
                  "type": "android.graphics.Canvas",
                  "description": "The canvas on which to draw the path."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To visually display a path with fill and stroke paint on the canvas.",
              "How-to-use": "Extend the CircularProgressView class and override the onDraw method, providing the canvas parameter to draw the desired path with fill and stroke paint.",
              "How-it-is-done": "The method first calls the super.onDraw method to ensure any parent class drawing is preserved, then it draws the path twice on the canvas - first with fill paint and then with stroke paint.",
              "Property": {
                "pre-conditions": "The path, fillPaint, and strokePaint variables must be properly initialized before calling this method.",
                "post-conditions": "After calling this method, the path will be drawn on the canvas with the specified fill and stroke paint."
              }
            }
          },
          "de.schildbach.wallet.ui.CircularProgressView.onMeasure(int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView.onMeasure(int,int)",
            "description": {
              "What": "This method is responsible for measuring the width and height of the view based on the provided measure specifications.",
              "Parameters": [
                {
                  "name": "wMeasureSpec",
                  "type": "int",
                  "description": "The measure specification for the width of the view."
                },
                {
                  "name": "hMeasureSpec",
                  "type": "int",
                  "description": "The measure specification for the height of the view."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle the measurement of the view's dimensions based on the measure specifications provided by the parent layout.",
              "How-to-use": "Call this method within the onMeasure() method of a custom view to measure its width and height based on the measure specifications passed by the parent layout.",
              "How-it-is-done": "The method first extracts the mode and size of the width and height measure specifications. It then sets the width and height of the view based on the mode and size values, ensuring that they do not exceed the specified size. Finally, it sets the measured dimensions of the view using setMeasuredDimension().",
              "Property": {
                "pre-conditions": "The method should be called within the onMeasure() method of a custom view.",
                "post-conditions": "The width and height of the view will be measured and set based on the provided measure specifications."
              }
            }
          },
          "de.schildbach.wallet.ui.CircularProgressView.onSizeChanged(int,int,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView.onSizeChanged(int,int,int,int)",
            "description": {
              "What": "Updates the path of the circular progress view when the size changes.",
              "Parameters": [
                {
                  "name": "w",
                  "type": "int",
                  "description": "The new width of the view."
                },
                {
                  "name": "h",
                  "type": "int",
                  "description": "The new height of the view."
                },
                {
                  "name": "oldw",
                  "type": "int",
                  "description": "The old width of the view."
                },
                {
                  "name": "oldh",
                  "type": "int",
                  "description": "The old height of the view."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the path of the circular progress view based on the new size of the view.",
              "How-to-use": "Override this method in a custom CircularProgressView class to handle size changes and update the path accordingly.",
              "How-it-is-done": "The method calls the updatePath(w, h) method to update the path based on the new width and height, then calls the super.onSizeChanged(w, h, oldw, oldh) to handle any additional size change logic.",
              "Property": {
                "pre-conditions": "The method assumes that the view has already been initialized and has a valid path to update.",
                "post-conditions": "After the method is called, the path of the circular progress view will be updated based on the new size of the view."
              }
            }
          },
          "de.schildbach.wallet.ui.CircularProgressView.setColors(int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView.setColors(int,int)",
            "description": {
              "What": "This method sets the colors for the fill and stroke of the CircularProgressView.",
              "Parameters": [
                {
                  "name": "fillColor",
                  "type": "int",
                  "description": "The color to set for the fill of the CircularProgressView."
                },
                {
                  "name": "strokeColor",
                  "type": "int",
                  "description": "The color to set for the stroke of the CircularProgressView."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow customization of the colors of the CircularProgressView.",
              "How-to-use": "Call this method with the desired fill and stroke colors as parameters to update the colors of the CircularProgressView.",
              "How-it-is-done": "The method sets the fill and stroke colors using the provided parameters, then invalidates the view to trigger a redraw with the new colors.",
              "Property": {
                "pre-conditions": [
                  "The CircularProgressView instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The fill and stroke colors of the CircularProgressView will be updated to the specified colors."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CircularProgressView.setMaxProgress(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView.setMaxProgress(int)",
            "description": {
              "What": "This method sets the maximum progress value for the circular progress view.",
              "Parameters": [
                {
                  "name": "maxProgress",
                  "type": "int",
                  "description": "The maximum progress value to set."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return anything."
            }
          },
          "de.schildbach.wallet.ui.CircularProgressView.setMaxSize(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView.setMaxSize(int)",
            "description": {
              "What": "This method sets the maximum size of the circular progress view.",
              "Parameters": [
                {
                  "name": "maxSize",
                  "type": "int",
                  "description": "The maximum size of the circular progress view."
                },
                "Returns"
              ]
            }
          },
          "de.schildbach.wallet.ui.CircularProgressView.setProgress(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView.setProgress(int)",
            "description": {
              "What": "Updates the progress value of the Circular Progress View and triggers a redraw.",
              "Parameters": [
                {
                  "name": "progress",
                  "type": "int",
                  "description": "The new progress value to set."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return anything."
            }
          },
          "de.schildbach.wallet.ui.CircularProgressView.setSize(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView.setSize(int)",
            "description": {
              "What": "Updates the size of the circular progress view and invalidates the view to trigger a redraw.",
              "Parameters": [
                {
                  "name": "size",
                  "type": "int",
                  "description": "The new size of the circular progress view."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow dynamic resizing of the circular progress view based on user input or device orientation changes.",
              "How-to-use": "Call this method with the desired size value to update the size of the circular progress view, triggering a redraw of the view.",
              "How-it-is-done": "The method sets the 'size' property to the provided value, updates the path used to draw the circular progress based on the current width and height of the view, and then invalidates the view to trigger a redraw.",
              "Property": {
                "pre-conditions": [
                  "The method should be called after the view has been initialized and attached to a layout."
                ],
                "post-conditions": [
                  "The size of the circular progress view will be updated to the specified value.",
                  "The view will be invalidated, triggering a redraw."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CircularProgressView.updatePath(int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CircularProgressView.updatePath(int,int)",
            "description": {
              "What": "Updates the path used to draw a circular progress view based on the given width and height of the view.",
              "Parameters": [
                {
                  "name": "w",
                  "type": "int",
                  "description": "The width of the view."
                },
                {
                  "name": "h",
                  "type": "int",
                  "description": "The height of the view."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically update the path used for drawing the circular progress view based on the current progress and size.",
              "How-to-use": "Call this method whenever the width or height of the circular progress view changes to update the path accordingly.",
              "How-it-is-done": "Calculates the maximum absolute size based on the minimum of width and height, then calculates the absolute size based on the current size and maximum size. Resets the path and updates it based on the progress and maxProgress values.",
              "Property": {
                "pre-conditions": [
                  "The method should be called after the size, progress, and maxProgress values have been set."
                ],
                "post-conditions": [
                  "The path used for drawing the circular progress view is updated based on the current width, height, progress, and size."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.CurrencyAmountView": {
        "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.CurrencyAmountView.de.schildbach.wallet.ui.CurrencyAmountView(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.de.schildbach.wallet.ui.CurrencyAmountView(android.content.Context)",
            "description": {
              "What": "Initialize a CurrencyAmountView object with the given context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to initialize the view."
                }
              ],
              "Returns": {
                "type": "CurrencyAmountView",
                "description": "A new CurrencyAmountView object."
              },
              "Why": "To provide a way to create a CurrencyAmountView object with a specific context.",
              "How-to-use": "Create a new instance of CurrencyAmountView by passing a valid context as a parameter.",
              "How-it-is-done": "The method calls the superclass constructor with the given context and then initializes the view using the init() method.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "A new CurrencyAmountView object is created and initialized."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.de.schildbach.wallet.ui.CurrencyAmountView(android.content.Context,android.util.AttributeSet)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.de.schildbach.wallet.ui.CurrencyAmountView(android.content.Context,android.util.AttributeSet)",
            "description": {
              "method": {
                "What": "Initialize a CurrencyAmountView with the given context and attributes.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context in which the view is created."
                  },
                  {
                    "name": "attrs",
                    "type": "android.util.AttributeSet",
                    "description": "The attributes of the view as defined in XML layout files."
                  }
                ],
                "Returns": {
                  "type": "CurrencyAmountView",
                  "description": "A new instance of CurrencyAmountView."
                },
                "Why": "To allow the creation of CurrencyAmountView instances with specific context and attributes.",
                "How-to-use": "Create a new CurrencyAmountView instance by passing a valid context and attributes to the constructor.",
                "How-it-is-done": "The method calls the superclass constructor with the provided context and attributes, then initializes the view using the init() method.",
                "Property": {
                  "pre-conditions": "The context must not be null.",
                  "post-conditions": "A new CurrencyAmountView instance is created and initialized."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.getAmount()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.getAmount()",
            "description": {
              "What": "This method retrieves the amount entered in a text view and parses it into a Monetary object.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.core.Monetary",
                "description": "The parsed Monetary object representing the amount entered in the text view."
              },
              "Why": "To extract and parse the amount entered by the user for further processing or display.",
              "How-to-use": "Call this method to retrieve and parse the amount entered in the associated text view.",
              "How-it-is-done": "The method first checks if the entered amount is valid, then retrieves the text from the text view, and finally parses it using the appropriate format based on the currency code.",
              "Property": {
                "pre-conditions": [
                  "The text view must contain a valid amount."
                ],
                "post-conditions": [
                  "If the amount is successfully parsed, a Monetary object representing the amount is returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.getTextView()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.getTextView()",
            "description": {
              "What": "This method returns the TextView associated with the CurrencyAmountView.",
              "Parameters": [],
              "Returns": {
                "type": "android.widget.TextView",
                "description": "The TextView associated with the CurrencyAmountView."
              },
              "Why": "To provide access to the TextView within the CurrencyAmountView for external use or manipulation.",
              "How-to-use": "Call getTextView() on an instance of CurrencyAmountView to retrieve the associated TextView.",
              "How-it-is-done": "The method simply returns the textView instance variable that holds the reference to the TextView associated with the CurrencyAmountView.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "The method will always return the TextView instance associated with the CurrencyAmountView."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.init(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.init(android.content.Context)",
            "description": {
              "What": "Initialize the colors and drawable resources used in the CurrencyAmountView.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to access resources."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the necessary colors and drawable resources for displaying currency amounts in the view.",
              "How-to-use": "Call this method with a valid context parameter before using the CurrencyAmountView to ensure proper initialization of colors and drawable resources.",
              "How-it-is-done": "The method retrieves color and drawable resources from the provided context and assigns them to corresponding fields in the CurrencyAmountView class.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The significantColor, lessSignificantColor, errorColor, and deleteButtonDrawable fields are initialized with the appropriate resources."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.isValidAmount(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.isValidAmount(boolean)",
            "description": {
              "What": "This method checks if the input amount is valid based on certain conditions.",
              "Parameters": [
                {
                  "name": "zeroIsValid",
                  "type": "boolean",
                  "description": "Flag indicating if zero amount is considered valid."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the input amount is valid, false otherwise."
              },
              "Why": "To validate user input for currency amounts and prevent invalid amounts from being processed.",
              "How-to-use": "Call the method with a boolean parameter indicating if zero amount is valid, and it will return true if the input amount is valid based on the conditions.",
              "How-it-is-done": "The method retrieves the input text, parses it into a monetary amount, checks if it exceeds the maximum allowed amount, and returns true if the amount is greater than zero or zero is considered valid.",
              "Property": {
                "pre-conditions": "The textView must not be null.",
                "post-conditions": "The method returns false if an exception occurs during parsing or if the input amount is empty."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.onFinishInflate()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.onFinishInflate()",
            "description": {
              "What": "Initialize the CurrencyAmountView by setting up the text view, input type, hint color, single line, validation, listeners, and context button.",
              "Parameters": [
                {
                  "name": "wMeasureSpec",
                  "type": "int",
                  "description": "Width measure specification for the context button."
                },
                {
                  "name": "hMeasureSpec",
                  "type": "int",
                  "description": "Height measure specification for the context button."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the CurrencyAmountView with necessary configurations and appearance for displaying currency amounts.",
              "How-to-use": "Call this method after inflating the CurrencyAmountView layout to initialize its components and appearance.",
              "How-it-is-done": "The method first sets up the text view with input type, hint color, single line, validation, and listeners. Then, it creates a context button with specific layout parameters and adds it to the view.",
              "Property": {
                "pre-conditions": [
                  "The CurrencyAmountView layout must be inflated before calling this method."
                ],
                "post-conditions": [
                  "The CurrencyAmountView will be fully initialized with the text view, input type, hint color, single line, validation, listeners, and context button."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.onRestoreInstanceState(android.os.Parcelable)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.onRestoreInstanceState(android.os.Parcelable)",
            "description": {
              "What": "This method restores the state of the CurrencyAmountView by retrieving the saved instance state and setting the amount and text view accordingly.",
              "Parameters": [
                {
                  "name": "state",
                  "type": "android.os.Parcelable",
                  "description": "The saved instance state to be restored."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to restore the state of the CurrencyAmountView after it has been saved, ensuring that the amount and text view are correctly set.",
              "How-to-use": "Call this method when restoring the state of the CurrencyAmountView, passing the saved instance state as the parameter.",
              "How-it-is-done": "If the saved state is a Bundle, it retrieves the super state and child text view state, then sets the amount using the saved Monetary object. Otherwise, it calls the superclass method to handle the state restoration.",
              "Property": {
                "pre-conditions": [
                  "The CurrencyAmountView instance must have a valid saved instance state to restore."
                ],
                "post-conditions": [
                  "The CurrencyAmountView's state is successfully restored with the correct amount and text view state."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.onSaveInstanceState()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.onSaveInstanceState()",
            "description": {
              "What": "This method saves the instance state of the CurrencyAmountView by storing the super state, child textview state, and the amount value in a Bundle object.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "Parcelable",
                "description": "A Bundle object containing the saved instance state data."
              },
              "Why": "To save the state of the CurrencyAmountView and its components for later restoration.",
              "How-to-use": "Call this method to save the instance state of the CurrencyAmountView before it gets destroyed, typically in the onSaveInstanceState() method of the containing Activity or Fragment.",
              "How-it-is-done": "The method creates a new Bundle object, saves the super state and child textview state by calling their respective onSaveInstanceState() methods, and stores the amount value as a Serializable object in the Bundle before returning it.",
              "Property": {
                "pre-conditions": [
                  "The CurrencyAmountView instance must be initialized and have a valid amount value set."
                ],
                "post-conditions": [
                  "A Bundle object containing the saved instance state data is returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setAmount(org.bitcoinj.core.Monetary,boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setAmount(org.bitcoinj.core.Monetary,boolean)",
            "description": {
              "What": "Sets the amount to be displayed in the CurrencyAmountView with an optional listener notification.",
              "Parameters": [
                {
                  "name": "amount",
                  "type": "org.bitcoinj.core.Monetary",
                  "description": "The amount to be displayed."
                },
                {
                  "name": "fireListener",
                  "type": "boolean",
                  "description": "Flag to indicate whether to fire a listener notification."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the displayed amount in the view and optionally notify a listener.",
              "How-to-use": "Call setAmount method with the desired amount and a boolean flag to indicate whether to notify a listener.",
              "How-it-is-done": "If the fireListener flag is false, temporarily disable listener notifications, then set the text of the view based on the provided amount. Finally, re-enable listener notifications if needed.",
              "Property": {
                "pre-conditions": "None.",
                "post-conditions": "The CurrencyAmountView will display the provided amount, and if fireListener is true, a listener notification may be fired."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setAmountSigned(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setAmountSigned(boolean)",
            "description": {
              "What": "This method sets a boolean flag to indicate whether the amount is signed or not.",
              "Parameters": [
                {
                  "name": "amountSigned",
                  "type": "boolean",
                  "description": "Flag to indicate whether the amount is signed or not."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow the user to specify whether the amount displayed should be signed or not.",
              "How-to-use": "Simply call this method with a boolean value to set the flag indicating whether the amount is signed or not.",
              "How-it-is-done": "The method simply assigns the provided boolean value to the 'amountSigned' field of the class.",
              "Property": {
                "pre-conditions": [
                  "The parameter 'amountSigned' should be a valid boolean value."
                ],
                "post-conditions": [
                  "The 'amountSigned' flag of the class will be set to the provided boolean value."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setContextButton(int,de.schildbach.wallet.ui.OnClickListener)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setContextButton(int,de.schildbach.wallet.ui.OnClickListener)",
            "description": {
              "What": "Sets a context button with a specified drawable resource and click listener for the CurrencyAmountView.",
              "Parameters": [
                {
                  "name": "contextButtonResId",
                  "type": "int",
                  "description": "The resource ID of the drawable for the context button."
                },
                {
                  "name": "contextButtonClickListener",
                  "type": "de.schildbach.wallet.ui.OnClickListener",
                  "description": "The click listener for the context button."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow customization of the context button appearance and behavior within the CurrencyAmountView.",
              "How-to-use": "Call setContextButton(int contextButtonResId, de.schildbach.wallet.ui.OnClickListener contextButtonClickListener) with the desired drawable resource ID and click listener to set the context button for the CurrencyAmountView.",
              "How-it-is-done": "The method sets the contextButtonDrawable field to the drawable obtained from the specified resource ID and assigns the provided click listener to the contextButtonClickListener field, then calls updateAppearance() to reflect the changes.",
              "Property": {
                "pre-conditions": "The CurrencyAmountView instance must be initialized and visible on the screen.",
                "post-conditions": "The context button in the CurrencyAmountView will be updated with the specified drawable and click listener."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setCurrencySymbol(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setCurrencySymbol(java.lang.String)",
            "description": {
              "What": "Sets the currency symbol based on the provided currency code or generates a custom currency symbol if the code is null.",
              "Parameters": [
                {
                  "name": "currencyCode",
                  "type": "java.lang.String",
                  "description": "The currency code to determine the currency symbol."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically set the currency symbol based on the provided currency code or generate a custom symbol if the code is null.",
              "How-to-use": "Call this method with a currency code as the parameter to set the currency symbol for the view.",
              "How-it-is-done": "The method checks the currency code and sets the appropriate currency symbol drawable based on the code. If the code is null, it generates a custom currency symbol drawable using the currency symbol utility method.",
              "Property": {
                "pre-conditions": "The method assumes that the resources for currency symbol drawables are available.",
                "post-conditions": "After calling this method, the currency symbol for the view will be updated based on the provided currency code."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setEnabled(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setEnabled(boolean)",
            "description": {
              "What": "This method sets the enabled state of the CurrencyAmountView and its internal TextView.",
              "Parameters": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "description": "A boolean value indicating whether the view should be enabled or not."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow enabling or disabling the CurrencyAmountView for user interaction.",
              "How-to-use": "Call this method with a boolean parameter to enable or disable the CurrencyAmountView and its internal TextView.",
              "How-it-is-done": "The method first calls the super class's setEnabled method with the provided boolean value, then sets the enabled state of the internal TextView, and finally updates the appearance of the view.",
              "Property": {
                "pre-conditions": [
                  "The CurrencyAmountView instance must not be null."
                ],
                "post-conditions": [
                  "The enabled state of the CurrencyAmountView and its internal TextView will be updated according to the provided boolean value."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setHint(org.bitcoinj.core.Monetary)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setHint(org.bitcoinj.core.Monetary)",
            "description": {
              "What": "This method sets a hint for the currency amount view.",
              "Parameters": [
                {
                  "name": "hint",
                  "type": "org.bitcoinj.core.Monetary",
                  "description": "The hint to be set for the currency amount view."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow setting a hint for the currency amount view, which can provide additional information or guidance to the user.",
              "How-to-use": "To set a hint for the currency amount view, simply call this method with the desired hint as the parameter.",
              "How-it-is-done": "The method assigns the provided hint to the 'hint' instance variable of the CurrencyAmountView class and then calls the 'updateAppearance' method to reflect any changes in the view.",
              "Property": {
                "pre-conditions": [
                  "The hint parameter can be null."
                ],
                "post-conditions": [
                  "The hint for the currency amount view is updated to the provided value."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setHintFormat(org.bitcoinj.utils.MonetaryFormat)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setHintFormat(org.bitcoinj.utils.MonetaryFormat)",
            "description": {
              "What": "Sets the format used for displaying hints in the CurrencyAmountView.",
              "Parameters": [
                {
                  "name": "hintFormat",
                  "type": "org.bitcoinj.utils.MonetaryFormat",
                  "description": "The format used for displaying hints."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow customization of the hint format displayed in the CurrencyAmountView.",
              "How-to-use": "Create an instance of MonetaryFormat and pass it as the parameter to setHintFormat method to update the hint format displayed in the CurrencyAmountView.",
              "How-it-is-done": "The method assigns the provided hintFormat to the hintFormat property of the CurrencyAmountView instance after removing any currency code, then triggers an update of the view's appearance.",
              "Property": {
                "pre-conditions": "The hintFormat parameter must not be null.",
                "post-conditions": "The hintFormat property of the CurrencyAmountView is updated with the provided format, and the appearance of the view is updated."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setInputFormat(org.bitcoinj.utils.MonetaryFormat)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setInputFormat(org.bitcoinj.utils.MonetaryFormat)",
            "description": {
              "What": "Sets the input format for the currency amount view without currency code.",
              "Parameters": [
                {
                  "name": "inputFormat",
                  "type": "org.bitcoinj.utils.MonetaryFormat",
                  "description": "The monetary format to set as input format."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return anything."
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setListener(de.schildbach.wallet.ui.CurrencyAmountView$Listener)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setListener(de.schildbach.wallet.ui.CurrencyAmountView$Listener)",
            "description": {
              "What": "Sets a listener for CurrencyAmountView events.",
              "Parameters": [
                {
                  "name": "listener",
                  "type": "de.schildbach.wallet.ui.CurrencyAmountView.Listener",
                  "description": "The listener to be set for CurrencyAmountView events."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow external classes to listen for events triggered by CurrencyAmountView.",
              "How-to-use": "Create an instance of CurrencyAmountView and call setListener with a custom Listener implementation to handle events.",
              "How-it-is-done": "Assign the provided listener parameter to the 'listener' field of the CurrencyAmountView instance.",
              "Property": {
                "pre-conditions": [
                  "The CurrencyAmountView instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The listener for CurrencyAmountView events is set to the provided listener."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setNextFocusId(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setNextFocusId(int)",
            "description": {
              "What": "Sets the next focus ID for the text view in the CurrencyAmountView.",
              "Parameters": [
                {
                  "name": "nextFocusId",
                  "type": "int",
                  "description": "The ID of the view to focus on next."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow setting the next focus view for better user interaction and navigation.",
              "How-to-use": "Call this method with the ID of the view that should receive focus next after interacting with the text view.",
              "How-it-is-done": "The method sets the next focus down and forward IDs of the text view to the provided next focus ID.",
              "Property": {
                "pre-conditions": "The text view in the CurrencyAmountView must be initialized before calling this method.",
                "post-conditions": "The next focus ID for the text view is set to the provided value."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setStrikeThru(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setStrikeThru(boolean)",
            "description": {
              "What": "This method sets or removes the strike-through effect on the text displayed in the CurrencyAmountView.",
              "Parameters": [
                {
                  "name": "strikeThru",
                  "type": "boolean",
                  "description": "A boolean value indicating whether to apply the strike-through effect or not."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to allow users to visually indicate a strike-through effect on the text displayed in the CurrencyAmountView.",
              "How-to-use": "To apply a strike-through effect, call setStrikeThru(true); to remove the effect, call setStrikeThru(false); on an instance of CurrencyAmountView.",
              "How-it-is-done": "The method toggles the STRIKE_THRU_TEXT_FLAG in the PaintFlags of the underlying TextView based on the boolean parameter provided.",
              "Property": {
                "pre-conditions": "The CurrencyAmountView instance must be initialized and attached to a layout before calling this method.",
                "post-conditions": "The text displayed in the CurrencyAmountView will have a strike-through effect if the strikeThru parameter is true, and the effect will be removed if the parameter is false."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setTextColor(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setTextColor(int)",
            "description": {
              "What": "This method sets the text color of the CurrencyAmountView.",
              "Parameters": [
                {
                  "name": "color",
                  "type": "int",
                  "description": "The color to set for the text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow the customization of the text color in the CurrencyAmountView.",
              "How-to-use": "To set a specific color for the text in the CurrencyAmountView, call setTextcolor(int) with the desired color value as the parameter.",
              "How-it-is-done": "The method simply assigns the provided color value to the significantColor variable and then calls the updateAppearance() method to reflect the changes in the view.",
              "Property": {
                "pre-conditions": [
                  "The CurrencyAmountView instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The text color of the CurrencyAmountView will be updated to the specified color."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.setValidateAmount(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.setValidateAmount(boolean)",
            "description": {
              "What": "This method sets a flag to enable or disable amount validation in the CurrencyAmountView.",
              "Parameters": [
                {
                  "name": "validateAmount",
                  "type": "boolean",
                  "description": "Flag to enable or disable amount validation."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide flexibility for developers to control whether amount validation should be performed in the CurrencyAmountView.",
              "How-to-use": "Call this method with a boolean parameter to enable or disable amount validation in the CurrencyAmountView.",
              "How-it-is-done": "The method simply assigns the value of the 'validateAmount' parameter to the 'validateAmount' field of the CurrencyAmountView instance.",
              "Property": {
                "pre-conditions": [
                  "The CurrencyAmountView instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The 'validateAmount' flag in the CurrencyAmountView will be set to the value provided as the parameter."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView.updateAppearance()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView.updateAppearance()",
            "description": {
              "What": "Updates the appearance of the CurrencyAmountView based on the text input and enabled status.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return any value."
            }
          }
        }
      },
      "de.schildbach.wallet.ui.CurrencyAmountView$Listener": {
        "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView$Listener",
        "kind": "interface",
        "methods": {
          "de.schildbach.wallet.ui.CurrencyAmountView$Listener.changed()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView$Listener.changed()",
            "description": {
              "method": {
                "What": "Notifies the listener that the currency amount has changed.",
                "Parameters": [
                  {
                    "name": "None",
                    "type": "None",
                    "description": "No parameters are passed to the method."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To allow external classes to be notified when the currency amount in the view has changed.",
                "How-to-use": "Implement this method in a class that implements the CurrencyAmountView$Listener interface to handle currency amount change events.",
                "How-it-is-done": "When the currency amount changes in the view, the changed() method is called on all registered listeners to notify them of the change.",
                "Property": {
                  "pre-conditions": "The class implementing this method must implement the CurrencyAmountView$Listener interface.",
                  "post-conditions": "After calling this method, the listener should perform any necessary actions in response to the currency amount change."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView$Listener.focusChanged(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView$Listener.focusChanged(boolean)",
            "description": {
              "What": "This method is used to notify when the focus of the currency amount view has changed.",
              "Parameters": [
                {
                  "name": "hasFocus",
                  "type": "boolean",
                  "description": "A boolean indicating whether the currency amount view has gained or lost focus."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow external classes to react to changes in focus of the currency amount view.",
              "How-to-use": "Implement this method in a class that implements the CurrencyAmountView$Listener interface to handle focus change events of the currency amount view.",
              "How-it-is-done": "When the focus of the currency amount view changes, this method is called with a boolean parameter indicating whether the view has gained or lost focus. The implementation should include the necessary logic to handle the focus change event.",
              "Property": {
                "pre-conditions": [
                  "The class implementing this method must implement the CurrencyAmountView$Listener interface."
                ],
                "post-conditions": [
                  "The focus change event of the currency amount view is handled according to the logic defined in the implementation of this method."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener": {
        "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.afterTextChanged(android.text.Editable)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.afterTextChanged(android.text.Editable)",
            "description": {
              "What": "This method replaces any commas in the input text with periods and applies monetary formatting to the text.",
              "Parameters": [
                {
                  "name": "s",
                  "type": "android.text.Editable",
                  "description": "The editable text input."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to ensure that the input text is properly formatted for monetary values.",
              "How-to-use": "Create an instance of CurrencyAmountView$TextViewListener and set it as a text watcher for an EditText to automatically format the input text for monetary values.",
              "How-it-is-done": "The method first converts the input text to a string, replaces any commas with periods, clears the input text, and then appends the modified text. Finally, it applies monetary formatting to the text using predefined significant and insignificant spans.",
              "Property": {
                "pre-conditions": [
                  "The input text should not be null."
                ],
                "post-conditions": [
                  "The input text will have commas replaced with periods and be formatted as a monetary value."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.beforeTextChanged(java.lang.CharSequence,int,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.beforeTextChanged(java.lang.CharSequence,int,int,int)",
            "description": {
              "What": "This method is called before the text is changed in a TextView.",
              "Parameters": [
                {
                  "name": "s",
                  "type": "java.lang.CharSequence",
                  "description": "The text content of the TextView before the change."
                },
                {
                  "name": "start",
                  "type": "int",
                  "description": "The index where the change starts in the text."
                },
                {
                  "name": "count",
                  "type": "int",
                  "description": "The number of characters that are going to be replaced."
                },
                {
                  "name": "after",
                  "type": "int",
                  "description": "The length of the new text that will replace the old text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a callback before the text in a TextView is changed.",
              "How-to-use": "Create an instance of TextViewListener and set it as a TextWatcher for a TextView to receive callbacks before text changes.",
              "How-it-is-done": "The method does not have any implementation and is meant to be overridden by subclasses to provide custom functionality before text changes in a TextView.",
              "Property": {
                "pre-conditions": [
                  "The TextView must have a TextWatcher set with an instance of TextViewListener."
                ],
                "post-conditions": [
                  "The method is called before the text in the TextView is changed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener()",
            "description": {
              "What": "Initialize a new instance of TextViewListener.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the constructor."
                }
              ],
              "Returns": {
                "type": "N/A",
                "description": "N/A"
              },
              "Why": "To provide a default constructor for initializing a TextViewListener instance.",
              "How-to-use": "Simply create a new instance of TextViewListener by calling new TextViewListener().",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of TextViewListener.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new instance of TextViewListener is created."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.onFocusChange(android.view.View,boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.onFocusChange(android.view.View,boolean)",
            "description": {
              "What": "This method is used to handle the focus change event of a view in the CurrencyAmountView class, updating the amount if focus is lost and notifying a listener if present.",
              "Parameters": [
                {
                  "name": "v",
                  "type": "android.view.View",
                  "description": "The view that triggered the focus change event."
                },
                {
                  "name": "hasFocus",
                  "type": "boolean",
                  "description": "A boolean indicating whether the view currently has focus or not."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the amount displayed in the view when focus is lost and to notify a listener about the focus change event.",
              "How-to-use": "Create an instance of CurrencyAmountView$TextViewListener and set it as the focus change listener for a view. Implement the focusChanged method in the listener to handle focus change events.",
              "How-it-is-done": "The method first checks if the view has lost focus, then retrieves the current amount and updates the view with it. Finally, it notifies the listener about the focus change event if present.",
              "Property": {
                "pre-conditions": [
                  "The method should be called within the context of a CurrencyAmountView$TextViewListener instance."
                ],
                "post-conditions": [
                  "The amount displayed in the view may be updated if focus is lost.",
                  "The focusChanged method of the listener, if present, will be called with the focus change event."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.onTextChanged(java.lang.CharSequence,int,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.onTextChanged(java.lang.CharSequence,int,int,int)",
            "description": {
              "What": "Updates the appearance of the CurrencyAmountView and notifies a listener if present when the text is changed.",
              "Parameters": [
                {
                  "name": "s",
                  "type": "java.lang.CharSequence",
                  "description": "The new text content."
                },
                {
                  "name": "start",
                  "type": "int",
                  "description": "The index at which the change starts."
                },
                {
                  "name": "before",
                  "type": "int",
                  "description": "The length of the text that was removed."
                },
                {
                  "name": "count",
                  "type": "int",
                  "description": "The length of the new text that was inserted."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the appearance of the CurrencyAmountView and notify a listener of text changes.",
              "How-to-use": "Create an instance of CurrencyAmountView$TextViewListener and set it as a listener for a CurrencyAmountView to receive text change notifications.",
              "How-it-is-done": "The method first updates the appearance of the CurrencyAmountView by calling updateAppearance(). Then, if a listener is set and the 'fire' flag is true, it calls the listener's changed() method to notify of the text change.",
              "Property": {
                "pre-conditions": [
                  "The CurrencyAmountView$TextViewListener instance must be set as a listener for a CurrencyAmountView."
                ],
                "post-conditions": [
                  "The appearance of the CurrencyAmountView is updated.",
                  "If a listener is present and the 'fire' flag is true, the listener's changed() method is called."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.setFire(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyAmountView$TextViewListener.setFire(boolean)",
            "description": {
              "What": "This method sets a boolean flag to indicate whether a fire event should be triggered.",
              "Parameters": [
                {
                  "name": "fire",
                  "type": "boolean",
                  "description": "The boolean flag to set."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to control the triggering of a fire event based on a boolean flag.",
              "How-to-use": "To use this method, simply call setFire(true) to enable the fire event or setFire(false) to disable it.",
              "How-it-is-done": "The method simply assigns the value of the 'fire' parameter to the 'fire' instance variable of the class.",
              "Property": {
                "pre-conditions": [
                  "The 'fire' parameter must be a valid boolean value."
                ],
                "post-conditions": [
                  "The 'fire' instance variable will be set to the value of the 'fire' parameter."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.CurrencyCalculatorLink": {
        "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.activeTextView()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.activeTextView()",
            "description": {
              "What": "This method returns the active TextView based on the exchange direction flag.",
              "Parameters": [
                {
                  "name": "exchangeDirection",
                  "type": "boolean",
                  "description": "Flag indicating the exchange direction."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The active TextView based on the exchange direction."
              },
              "Why": "To dynamically determine and return the active TextView based on the exchange direction for currency calculation purposes.",
              "How-to-use": "Call this method with the exchange direction flag as a parameter to get the active TextView for displaying the relevant currency amount.",
              "How-it-is-done": "The method checks the exchange direction flag and returns the corresponding TextView either for BTC amount or local amount.",
              "Property": {
                "pre-conditions": [
                  "The exchangeDirection flag should be set before calling this method."
                ],
                "post-conditions": [
                  "The method returns the active TextView based on the exchange direction."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.de.schildbach.wallet.ui.CurrencyCalculatorLink(de.schildbach.wallet.ui.CurrencyAmountView,de.schildbach.wallet.ui.CurrencyAmountView)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.de.schildbach.wallet.ui.CurrencyCalculatorLink(de.schildbach.wallet.ui.CurrencyAmountView,de.schildbach.wallet.ui.CurrencyAmountView)",
            "description": {
              "What": "Initialize a CurrencyCalculatorLink object with two CurrencyAmountView objects and update the views.",
              "Parameters": [
                {
                  "name": "btcAmountView",
                  "type": "CurrencyAmountView",
                  "description": "The Bitcoin amount view to link with."
                },
                {
                  "name": "localAmountView",
                  "type": "CurrencyAmountView",
                  "description": "The local currency amount view to link with."
                }
              ],
              "Returns": {
                "type": "CurrencyCalculatorLink",
                "description": "A new CurrencyCalculatorLink object."
              },
              "Why": "To establish a link between Bitcoin and local currency amount views for conversion purposes.",
              "How-to-use": "Create a new CurrencyCalculatorLink object by passing two CurrencyAmountView objects, then use the linked views to display and update Bitcoin and local currency amounts.",
              "How-it-is-done": "The method assigns the provided CurrencyAmountView objects to the corresponding fields, sets listeners for each view, and calls the update method to synchronize the views.",
              "Property": {
                "pre-conditions": "The provided CurrencyAmountView objects must not be null.",
                "post-conditions": "The CurrencyCalculatorLink object is initialized with the provided views and the views are linked for updates."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.getAmount()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.getAmount()",
            "description": {
              "What": "This method returns the amount in Bitcoin (BTC) based on the exchange rate and the input amount in local currency or directly from the BTC amount view.",
              "Parameters": [
                {
                  "name": "exchangeDirection",
                  "type": "boolean",
                  "description": "Flag indicating the exchange direction."
                },
                {
                  "name": "exchangeRate",
                  "type": "org.bitcoinj.utils.Fiat",
                  "description": "Exchange rate between local currency and Bitcoin."
                },
                {
                  "name": "btcAmountView",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "Bitcoin amount view."
                },
                {
                  "name": "localAmountView",
                  "type": "org.bitcoinj.utils.Fiat",
                  "description": "Local currency amount view."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.core.Coin",
                "description": "Bitcoin amount calculated based on the exchange rate and input amount."
              },
              "Why": "To provide a way to convert local currency amounts to Bitcoin amounts and vice versa based on the exchange rate.",
              "How-to-use": "Call the getAmount() method with the necessary parameters set up, such as exchangeDirection, exchangeRate, btcAmountView, and localAmountView, to get the Bitcoin amount.",
              "How-it-is-done": "The method checks the exchange direction and calculates the Bitcoin amount based on the exchange rate and input amount in local currency or directly from the BTC amount view. It handles exceptions for invalid calculations.",
              "Property": {
                "pre-conditions": [
                  "exchangeDirection should be set to true if converting from local currency to Bitcoin."
                ],
                "post-conditions": [
                  "The method returns the Bitcoin amount calculated based on the exchange rate and input amount."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.getExchangeDirection()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.getExchangeDirection()",
            "description": {
              "What": "This method returns the current exchange direction set in the CurrencyCalculatorLink class.",
              "Parameters": [],
              "Returns": {
                "Type": "boolean",
                "Description": "The exchange direction value."
              },
              "Why": "To provide access to the exchange direction value stored in the CurrencyCalculatorLink class.",
              "How-to-use": "Call this method on an instance of CurrencyCalculatorLink to retrieve the current exchange direction value.",
              "How-it-is-done": "The method simply returns the value of the exchangeDirection variable in the CurrencyCalculatorLink class.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.getExchangeRate()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.getExchangeRate()",
            "description": {
              "What": "This method returns the current exchange rate used in the currency calculator.",
              "Parameters": [],
              "Returns": {
                "type": "org.bitcoinj.utils.ExchangeRate",
                "description": "The current exchange rate."
              },
              "Why": "To provide access to the current exchange rate for calculations and display purposes.",
              "How-to-use": "Simply call this method on an instance of CurrencyCalculatorLink to retrieve the current exchange rate.",
              "How-it-is-done": "The method simply returns the exchangeRate property of the CurrencyCalculatorLink instance, which holds the current exchange rate.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "The method will always return the current exchange rate stored in the exchangeRate property of the CurrencyCalculatorLink instance."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.hasAmount()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.hasAmount()",
            "description": {
              "What": "The method checks if the amount is not null.",
              "Parameters": [],
              "Returns": {
                "Type": "boolean",
                "Description": "True if the amount is not null, false otherwise."
              },
              "Why": "To determine if an amount is set before performing calculations or operations.",
              "How-to-use": "Call the hasAmount() method to check if an amount is present before proceeding with further actions.",
              "How-it-is-done": "The method simply returns the result of comparing the amount with null using the '!=' operator.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "The method returns true if the amount is not null, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.requestFocus()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.requestFocus()",
            "description": {
              "What": "This method focuses on the active text view within the CurrencyCalculatorLink class.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow easy focusing on the active text view within the CurrencyCalculatorLink class.",
              "How-to-use": "Simply call the requestFocus() method on an instance of CurrencyCalculatorLink to focus on the active text view.",
              "How-it-is-done": "The method calls the requestFocus() method on the activeTextView() within the CurrencyCalculatorLink class, ensuring that the focus is set to the active text view.",
              "Property": {
                "pre-conditions": [
                  "An instance of CurrencyCalculatorLink must be created before calling this method."
                ],
                "post-conditions": [
                  "The active text view within the CurrencyCalculatorLink class will have focus after calling this method."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.setBtcAmount(org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.setBtcAmount(org.bitcoinj.core.Coin)",
            "description": {
              "What": "Sets the Bitcoin amount in the CurrencyCalculatorLink class.",
              "Parameters": [
                {
                  "name": "amount",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The Bitcoin amount to be set."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the Bitcoin amount displayed in the CurrencyCalculatorLink view.",
              "How-to-use": "Create an instance of CurrencyCalculatorLink, call setBtcAmount with the desired Bitcoin amount as the parameter.",
              "How-it-is-done": "The method first saves the current listener, sets it to null, updates the Bitcoin amount in the view using btcAmountView.setAmount, and then restores the listener.",
              "Property": {
                "pre-conditions": "The CurrencyCalculatorLink instance must be initialized with a valid btcAmountView.",
                "post-conditions": "The Bitcoin amount displayed in the CurrencyCalculatorLink view is updated to the specified amount."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.setEnabled(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.setEnabled(boolean)",
            "description": {
              "What": "This method sets the enabled status of the CurrencyCalculatorLink and updates its appearance accordingly.",
              "Parameters": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "description": "The new enabled status to be set for the CurrencyCalculatorLink."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow external classes to enable or disable the CurrencyCalculatorLink component based on certain conditions.",
              "How-to-use": "To enable or disable the CurrencyCalculatorLink, call setEnabled(true) to enable it or setEnabled(false) to disable it.",
              "How-it-is-done": "The method simply sets the 'enabled' property of the CurrencyCalculatorLink to the provided boolean value and then calls the 'update' method to update its appearance.",
              "Property": {
                "pre-conditions": "None.",
                "post-conditions": "After calling this method, the enabled status of the CurrencyCalculatorLink will be updated to the provided value."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.setExchangeDirection(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.setExchangeDirection(boolean)",
            "description": {
              "What": "This method sets the exchange direction for the currency calculator link and triggers an update.",
              "Parameters": [
                {
                  "name": "exchangeDirection",
                  "type": "boolean",
                  "description": "The new exchange direction to be set."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow users to change the exchange direction of the currency calculator link and update the display accordingly.",
              "How-to-use": "To use this method, simply call setExchangeDirection(boolean) with the desired exchange direction as the parameter.",
              "How-it-is-done": "The method sets the exchange direction property of the class to the provided boolean value and then calls the update() method to refresh the display.",
              "Property": {
                "pre-conditions": [
                  "The parameter exchangeDirection must be a valid boolean value."
                ],
                "post-conditions": [
                  "The exchange direction property of the class will be updated to the new value.",
                  "The display will be refreshed to reflect the new exchange direction."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.setExchangeRate(org.bitcoinj.utils.ExchangeRate)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.setExchangeRate(org.bitcoinj.utils.ExchangeRate)",
            "description": {
              "What": "This method sets the exchange rate for the currency calculator link and triggers an update.",
              "Parameters": [
                {
                  "name": "exchangeRate",
                  "type": "org.bitcoinj.utils.ExchangeRate",
                  "description": "The exchange rate to be set."
                },
                "Returns"
              ]
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.setListener(de.schildbach.wallet.ui.CurrencyAmountView$Listener)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.setListener(de.schildbach.wallet.ui.CurrencyAmountView$Listener)",
            "description": {
              "What": "This method sets a listener for the CurrencyAmountView in the CurrencyCalculatorLink class.",
              "Parameters": [
                {
                  "name": "listener",
                  "type": "de.schildbach.wallet.ui.CurrencyAmountView.Listener",
                  "description": "The listener to be set for the CurrencyAmountView."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow external classes to listen for changes in the CurrencyAmountView within the CurrencyCalculatorLink.",
              "How-to-use": "Create an instance of CurrencyCalculatorLink and call setListener with a CurrencyAmountView.Listener implementation to receive updates from the CurrencyAmountView.",
              "How-it-is-done": "The method simply assigns the provided listener to the 'listener' field of the CurrencyCalculatorLink instance.",
              "Property": {
                "pre-conditions": "The CurrencyCalculatorLink instance must be initialized before calling this method.",
                "post-conditions": "After calling this method, the listener for CurrencyAmountView in CurrencyCalculatorLink will be set to the provided listener."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.setNextFocusId(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.setNextFocusId(int)",
            "description": {
              "What": "This method sets the next focus ID for both the BTC amount view and the local amount view in a currency calculator link.",
              "Parameters": [
                {
                  "name": "nextFocusId",
                  "type": "int",
                  "description": "The ID of the view to focus on next."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return anything."
            }
          },
          "de.schildbach.wallet.ui.CurrencyCalculatorLink.update()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyCalculatorLink.update()",
            "description": {
              "What": "Updates the UI components based on the exchange rate and user input.",
              "Parameters": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "description": "Flag indicating if the UI components should be enabled or disabled."
                },
                {
                  "name": "exchangeRate",
                  "type": "ExchangeRate",
                  "description": "Exchange rate between Bitcoin and local currency."
                },
                {
                  "name": "exchangeDirection",
                  "type": "boolean",
                  "description": "Flag indicating the direction of the exchange rate calculation."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To dynamically update the UI components based on the exchange rate and user input.",
              "How-to-use": "Call this method whenever the exchange rate or user input changes to update the displayed amounts accordingly.",
              "How-it-is-done": "The method enables/disables UI components based on the 'enabled' flag, sets currency symbols, calculates local amount from BTC amount or vice versa using the exchange rate, and handles exceptions.",
              "Property": {
                "pre-conditions": "The 'exchangeRate' parameter must not be null.",
                "post-conditions": "The UI components are updated based on the exchange rate and user input."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.CurrencySymbolDrawable": {
        "qualifiedName": "de.schildbach.wallet.ui.CurrencySymbolDrawable",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.CurrencySymbolDrawable.de.schildbach.wallet.ui.CurrencySymbolDrawable(java.lang.String,float,int,float)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencySymbolDrawable.de.schildbach.wallet.ui.CurrencySymbolDrawable(java.lang.String,float,int,float)",
            "description": {
              "What": "Initialize a drawable with a currency symbol, text size, color, and y position.",
              "Parameters": [
                {
                  "name": "symbol",
                  "type": "String",
                  "description": "The currency symbol to display."
                },
                {
                  "name": "textSize",
                  "type": "float",
                  "description": "The size of the text."
                },
                {
                  "name": "color",
                  "type": "int",
                  "description": "The color of the text."
                },
                {
                  "name": "y",
                  "type": "float",
                  "description": "The y position of the text."
                }
              ],
              "Returns": "N/A (Constructor)",
              "Why": "To create a drawable object that displays a currency symbol with specified properties.",
              "How-to-use": "Create a new instance of CurrencySymbolDrawable by passing the currency symbol, text size, color, and y position as parameters.",
              "How-it-is-done": "The method initializes the paint object with the specified color and anti-aliasing, sets the text size, appends a hair space to the symbol, and assigns the y position.",
              "Property": {
                "pre-conditions": "The symbol, textSize, color, and y parameters must not be null.",
                "post-conditions": "A CurrencySymbolDrawable object is created with the specified properties."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencySymbolDrawable.draw(android.graphics.Canvas)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencySymbolDrawable.draw(android.graphics.Canvas)",
            "description": {
              "What": "Draws the currency symbol on the canvas at the specified y-coordinate.",
              "Parameters": [
                {
                  "name": "canvas",
                  "type": "android.graphics.Canvas",
                  "description": "The canvas on which to draw the currency symbol."
                },
                {
                  "name": "symbol",
                  "type": "String",
                  "description": "The currency symbol to be drawn."
                },
                {
                  "name": "y",
                  "type": "float",
                  "description": "The y-coordinate at which to draw the currency symbol."
                },
                {
                  "name": "paint",
                  "type": "android.graphics.Paint",
                  "description": "The paint object defining the color, style, etc. of the text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to draw a currency symbol on a canvas with specified parameters.",
              "How-to-use": "Create an instance of CurrencySymbolDrawable, set the symbol, y-coordinate, and paint properties, then call draw(canvas) to draw the symbol on the canvas.",
              "How-it-is-done": "The method uses the canvas's drawText() method to draw the specified currency symbol at the given y-coordinate using the provided paint object.",
              "Property": {
                "pre-conditions": [
                  "The canvas, symbol, y-coordinate, and paint object must be properly initialized before calling this method."
                ],
                "post-conditions": [
                  "The currency symbol will be drawn on the canvas at the specified y-coordinate."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencySymbolDrawable.getIntrinsicWidth()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencySymbolDrawable.getIntrinsicWidth()",
            "description": {
              "What": "This method returns the intrinsic width of the currency symbol drawable based on the measured text width of the symbol.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The intrinsic width of the currency symbol drawable."
              },
              "Why": "This method is provided to calculate and return the intrinsic width of the currency symbol drawable for proper layout and rendering.",
              "How-to-use": "Simply call this method on an instance of CurrencySymbolDrawable to get the intrinsic width of the drawable.",
              "How-it-is-done": "The method uses the Paint object 'paint' associated with the drawable to measure the width of the symbol text using the 'measureText' method.",
              "Property": {
                "pre-conditions": [
                  "The 'paint' object must be properly initialized before calling this method."
                ],
                "post-conditions": [
                  "The method returns the intrinsic width of the currency symbol drawable based on the measured text width of the symbol."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencySymbolDrawable.getOpacity()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencySymbolDrawable.getOpacity()",
            "description": {
              "What": "This method returns the opacity of the drawable, which is always 0.",
              "Parameters": [],
              "Returns": {
                "type": "int",
                "description": "The opacity value of the drawable, which is always 0."
              },
              "Why": "The method is provided to implement the Drawable interface and return the opacity of the drawable.",
              "How-to-use": "Simply call the getOpacity() method on an instance of CurrencySymbolDrawable to retrieve the opacity value, which will always be 0.",
              "How-it-is-done": "The method simply returns a hardcoded value of 0, indicating that the drawable is completely transparent.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "The method always returns 0 as the opacity value."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencySymbolDrawable.setAlpha(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencySymbolDrawable.setAlpha(int)",
            "description": {
              "What": "This method sets the alpha value (transparency) of the currency symbol drawable.",
              "Parameters": [
                {
                  "name": "alpha",
                  "type": "int",
                  "description": "The alpha value to set for the currency symbol drawable (0-255)."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow the customization of the alpha value of the currency symbol drawable for visual effects or blending with other drawables.",
              "How-to-use": "Call this method on an instance of CurrencySymbolDrawable passing the desired alpha value as an argument to set the transparency level of the drawable.",
              "How-it-is-done": "The method simply sets the alpha value of the currency symbol drawable to the provided value, adjusting the transparency level accordingly.",
              "Property": {
                "pre-conditions": [
                  "The alpha value must be within the range of 0 to 255."
                ],
                "post-conditions": [
                  "The alpha value of the currency symbol drawable is set to the provided value."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencySymbolDrawable.setColorFilter(android.graphics.ColorFilter)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencySymbolDrawable.setColorFilter(android.graphics.ColorFilter)",
            "description": {
              "What": "Sets a color filter to be applied to the drawable.",
              "Parameters": [
                {
                  "name": "cf",
                  "type": "android.graphics.ColorFilter",
                  "description": "The color filter to be applied to the drawable."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow users to apply a color filter to the drawable, which can be useful for tinting or changing the color of the drawable.",
              "How-to-use": "Create an instance of CurrencySymbolDrawable, call setColorFilter() method on the instance, and pass a ColorFilter object as the parameter to apply the color filter.",
              "How-it-is-done": "The method simply sets the provided ColorFilter object to be applied to the drawable when it is drawn on the screen.",
              "Property": {
                "pre-conditions": "The CurrencySymbolDrawable instance must be created before calling this method.",
                "post-conditions": "The color filter will be applied to the drawable when it is drawn on the screen."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.CurrencyTextView": {
        "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.CurrencyTextView.de.schildbach.wallet.ui.CurrencyTextView(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView.de.schildbach.wallet.ui.CurrencyTextView(android.content.Context)",
            "description": {
              "What": "Initialize a new instance of CurrencyTextView with the given context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to create the CurrencyTextView."
                }
              ],
              "Returns": {
                "type": "CurrencyTextView",
                "description": "A new instance of CurrencyTextView."
              },
              "Why": "To provide a way to create a CurrencyTextView object with a specific context.",
              "How-to-use": "Create a new CurrencyTextView object by passing a valid context as a parameter.",
              "How-it-is-done": "The method simply calls the superclass constructor passing the context parameter.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "A new instance of CurrencyTextView is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyTextView.de.schildbach.wallet.ui.CurrencyTextView(android.content.Context,android.util.AttributeSet)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView.de.schildbach.wallet.ui.CurrencyTextView(android.content.Context,android.util.AttributeSet)",
            "description": {
              "method": {
                "What": "Initialize a CurrencyTextView with the given context and attributes.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context in which the view is created."
                  },
                  {
                    "name": "attrs",
                    "type": "android.util.AttributeSet",
                    "description": "The attributes of the XML tag that is inflating the view."
                  }
                ],
                "Returns": {
                  "type": "CurrencyTextView",
                  "description": "A new instance of CurrencyTextView."
                },
                "Why": "To allow the creation of CurrencyTextView with specific context and attributes.",
                "How-to-use": "When creating a new CurrencyTextView in an Android application, pass the context and attributes to this constructor.",
                "How-it-is-done": "The constructor calls the superclass constructor passing the context and attributes to initialize the view.",
                "Property": {
                  "pre-conditions": "The context and attributes must be valid and not null.",
                  "post-conditions": "A new instance of CurrencyTextView is created with the provided context and attributes."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyTextView.onFinishInflate()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView.onFinishInflate()",
            "description": {
              "What": "Sets the appearance and behavior of the CurrencyTextView after inflation.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To customize the appearance and behavior of the CurrencyTextView after it has been inflated.",
              "How-to-use": "Simply call this method on an instance of CurrencyTextView after it has been inflated to set the prefix color, scale, relative size, and ensure it is single line.",
              "How-it-is-done": "The method first calls the super class's onFinishInflate method, then sets the prefix color, scale, relative size, and ensures the text is single line for the CurrencyTextView instance.",
              "Property": {
                "pre-conditions": "The CurrencyTextView instance must be inflated before calling this method.",
                "post-conditions": "The CurrencyTextView will have its prefix color, scale, relative size, and single line properties set as specified."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyTextView.setAlwaysSigned(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView.setAlwaysSigned(boolean)",
            "description": {
              "What": "Sets whether the currency value should always be displayed with a sign, regardless of its value.",
              "Parameters": [
                {
                  "name": "alwaysSigned",
                  "type": "boolean",
                  "description": "Flag indicating whether the currency value should always be signed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide the flexibility for users to choose whether they want currency values to always display a sign.",
              "How-to-use": "Call this method with a boolean parameter to specify whether the currency value should always be signed.",
              "How-it-is-done": "The method simply sets the 'alwaysSigned' property of the class to the provided boolean value and then calls the 'updateView()' method to reflect the change in the UI.",
              "Property": {
                "pre-conditions": [
                  "The class instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The currency value displayed in the UI will be updated according to the new 'alwaysSigned' setting."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyTextView.setAmount(org.bitcoinj.core.Monetary)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView.setAmount(org.bitcoinj.core.Monetary)",
            "description": {
              "method": {
                "What": "Sets the amount of the CurrencyTextView and updates the view accordingly.",
                "Parameters": [
                  {
                    "name": "amount",
                    "type": "org.bitcoinj.core.Monetary",
                    "description": "The monetary amount to be set."
                  },
                  "Returns"
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To allow setting the amount displayed in the CurrencyTextView and automatically update the view.",
                "How-to-use": "Create an instance of CurrencyTextView, call setAmount() with the desired Monetary amount as the parameter, and the view will be updated with the new amount.",
                "How-it-is-done": "The method simply assigns the provided amount to the 'amount' field of the CurrencyTextView instance and then calls the updateView() method to refresh the displayed amount.",
                "Property": {
                  "pre-conditions": [
                    "The CurrencyTextView instance must be initialized before calling this method."
                  ],
                  "post-conditions": [
                    "The amount displayed in the CurrencyTextView will be updated to the provided Monetary amount."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyTextView.setFormat(org.bitcoinj.utils.MonetaryFormat)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView.setFormat(org.bitcoinj.utils.MonetaryFormat)",
            "description": {
              "What": "Sets the format for displaying monetary values in the CurrencyTextView.",
              "Parameters": [
                {
                  "name": "format",
                  "type": "org.bitcoinj.utils.MonetaryFormat",
                  "description": "The monetary format to be set for displaying values."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow customization of the display format for monetary values in the CurrencyTextView.",
              "How-to-use": "Create an instance of MonetaryFormat with the desired settings, then call setFormat() on a CurrencyTextView instance with the created MonetaryFormat object as the parameter.",
              "How-it-is-done": "The method assigns the provided format to the 'format' field of the CurrencyTextView instance, with a code separator of a hair space character, and then updates the view.",
              "Property": {
                "pre-conditions": [
                  "The format parameter can be null."
                ],
                "post-conditions": [
                  "The format of the CurrencyTextView is updated to the provided format, or set to null if the format parameter is null."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyTextView.setInsignificantRelativeSize(float)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView.setInsignificantRelativeSize(float)",
            "description": {
              "What": "Sets the relative size of insignificant digits in the text displayed by the CurrencyTextView.",
              "Parameters": [
                {
                  "name": "insignificantRelativeSize",
                  "type": "float",
                  "description": "The relative size of insignificant digits compared to the main text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow customization of the relative size of insignificant digits in the displayed text.",
              "How-to-use": "Call setInsignificantRelativeSize(float) with the desired relative size value to adjust the appearance of insignificant digits in the CurrencyTextView.",
              "How-it-is-done": "If the provided relative size is not equal to 1, create new RelativeSizeSpan instances with the specified size for prefix and insignificant digits; otherwise, set them to null.",
              "Property": {
                "pre-conditions": "The method should be called on an instance of CurrencyTextView.",
                "post-conditions": "The relative size of insignificant digits in the displayed text is set according to the provided value."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyTextView.setPrefixColor(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView.setPrefixColor(int)",
            "description": {
              "What": "Sets the color of the prefix text in the CurrencyTextView.",
              "Parameters": [
                {
                  "name": "prefixColor",
                  "type": "int",
                  "description": "The color to set for the prefix text."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow customization of the prefix text color in the CurrencyTextView.",
              "How-to-use": "Call setPrefixColor(int) with the desired color value to change the color of the prefix text displayed in the CurrencyTextView.",
              "How-it-is-done": "The method creates a new ForegroundColorSpan with the specified color value and assigns it to the prefixColorSpan field, then calls updateView() to apply the changes to the view.",
              "Property": {
                "pre-conditions": "The CurrencyTextView instance must be initialized before calling this method.",
                "post-conditions": "The color of the prefix text in the CurrencyTextView will be updated to the specified color."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyTextView.setPrefixScaleX(float)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView.setPrefixScaleX(float)",
            "description": {
              "What": "This method sets the scale factor for the prefix text in the CurrencyTextView.",
              "Parameters": [
                {
                  "name": "prefixScaleX",
                  "type": "float",
                  "description": "The scale factor for the prefix text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow customization of the scale factor for the prefix text in the CurrencyTextView.",
              "How-to-use": "Call this method with the desired scale factor value to adjust the appearance of the prefix text in the CurrencyTextView.",
              "How-it-is-done": "The method creates a new ScaleXSpan object with the provided scale factor, assigns it to the prefixScaleXSpan field, and then calls the updateView method to apply the changes.",
              "Property": {
                "pre-conditions": [
                  "The CurrencyTextView instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The prefix text in the CurrencyTextView will be displayed with the specified scale factor."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyTextView.setStrikeThru(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView.setStrikeThru(boolean)",
            "description": {
              "What": "This method sets or removes the strike-through effect on the text displayed by the CurrencyTextView.",
              "Parameters": [
                {
                  "name": "strikeThru",
                  "type": "boolean",
                  "description": "A boolean value indicating whether to apply the strike-through effect or not."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to allow users to visually indicate a strike-through effect on the text displayed by the CurrencyTextView.",
              "How-to-use": "To apply a strike-through effect, call setStrikeThru(true); to remove the effect, call setStrikeThru(false); on an instance of CurrencyTextView.",
              "How-it-is-done": "The method checks the boolean parameter 'strikeThru' to determine whether to apply or remove the strike-through effect by updating the paint flags of the CurrencyTextView accordingly.",
              "Property": {
                "pre-conditions": "The CurrencyTextView instance must be initialized before calling this method.",
                "post-conditions": "The text displayed by the CurrencyTextView will have a strike-through effect if 'strikeThru' is true, and the effect will be removed if 'strikeThru' is false."
              }
            }
          },
          "de.schildbach.wallet.ui.CurrencyTextView.updateView()": {
            "qualifiedName": "de.schildbach.wallet.ui.CurrencyTextView.updateView()",
            "description": {
              "What": "Updates the view with the formatted monetary amount.",
              "Parameters": [
                {
                  "name": "format",
                  "type": "String",
                  "description": "The format to apply to the monetary amount."
                },
                {
                  "name": "alwaysSigned",
                  "type": "boolean",
                  "description": "Flag indicating if the amount should always be signed."
                },
                {
                  "name": "amount",
                  "type": "BigDecimal",
                  "description": "The monetary amount to be displayed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the view with the latest monetary amount and format for display purposes.",
              "How-to-use": "Call this method whenever the monetary amount needs to be updated in the view, providing the format, sign flag, and amount as parameters.",
              "How-it-is-done": "The method creates a new MonetarySpannable object with the provided format, sign flag, and amount, then applies markup to it using specified spans, and sets the resulting text to the view.",
              "Property": {
                "pre-conditions": "The 'format' parameter must not be null.",
                "post-conditions": "The view is updated with the formatted monetary amount based on the provided parameters."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.DialogBuilder": {
        "qualifiedName": "de.schildbach.wallet.ui.DialogBuilder",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.DialogBuilder.de.schildbach.wallet.ui.DialogBuilder(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.DialogBuilder.de.schildbach.wallet.ui.DialogBuilder(android.content.Context)",
            "description": {
              "What": "Initialize a DialogBuilder object with a custom title layout and views for icon and title.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to create the DialogBuilder."
                },
                "Returns"
              ],
              "Returns": "void",
              "Why": "To provide a way to create a DialogBuilder with a custom title layout and views for icon and title.",
              "How-to-use": "Create a new instance of DialogBuilder by passing a valid context as a parameter.",
              "How-it-is-done": "The method initializes the DialogBuilder with a custom title layout, inflates the layout, and assigns the icon and title views.",
              "Property": {
                "Pre-conditions": "The context parameter must not be null.",
                "Post-conditions": "The DialogBuilder object is initialized with a custom title layout and views for icon and title."
              }
            }
          },
          "de.schildbach.wallet.ui.DialogBuilder.setIcon(android.graphics.drawable.Drawable)": {
            "qualifiedName": "de.schildbach.wallet.ui.DialogBuilder.setIcon(android.graphics.drawable.Drawable)",
            "description": {
              "What": "Sets the icon of the dialog builder with the provided drawable.",
              "Parameters": [
                {
                  "name": "icon",
                  "type": "android.graphics.drawable.Drawable",
                  "description": "The drawable to set as the icon of the dialog builder."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.DialogBuilder",
                "description": "The dialog builder instance to allow method chaining."
              },
              "Why": "To allow customization of the dialog builder by setting an icon.",
              "How-to-use": "Create an instance of DialogBuilder, call setIcon method with a drawable parameter to set the icon, and continue customizing the dialog builder as needed.",
              "How-it-is-done": "If the provided icon is not null, the custom title is set, the icon view is updated with the drawable, and the icon view is made visible.",
              "Property": {
                "pre-conditions": "The icon parameter should not be null.",
                "post-conditions": "The icon of the dialog builder is set to the provided drawable if it is not null."
              }
            }
          },
          "de.schildbach.wallet.ui.DialogBuilder.setIcon(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.DialogBuilder.setIcon(int)",
            "description": {
              "What": "Sets the icon of the dialog builder if a valid resource ID is provided.",
              "Parameters": [
                {
                  "name": "iconResId",
                  "type": "int",
                  "description": "The resource ID of the icon to be set."
                }
              ],
              "Returns": {
                "type": "DialogBuilder",
                "description": "The instance of the DialogBuilder to allow method chaining."
              },
              "Why": "To allow customization of the dialog builder by setting an icon.",
              "How-to-use": "Create an instance of DialogBuilder, call setIcon(int) with the desired icon resource ID, and continue customizing the dialog builder as needed.",
              "How-it-is-done": "If the provided iconResId is not 0, set the custom title, set the icon of the iconView to the provided resource ID, and make the iconView visible.",
              "Property": {
                "pre-conditions": "The DialogBuilder instance must be initialized before calling this method.",
                "post-conditions": "The icon of the dialog builder is set to the provided resource ID if it is not 0."
              }
            }
          },
          "de.schildbach.wallet.ui.DialogBuilder.setMessage(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.DialogBuilder.setMessage(int)",
            "description": {
              "What": "This method sets the message of the dialog using the provided resource ID.",
              "Parameters": [
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "The resource ID of the message to be set in the dialog."
                }
              ],
              "Returns": {
                "type": "DialogBuilder",
                "description": "The instance of the DialogBuilder to allow method chaining."
              },
              "Why": "To provide a convenient way to set the message of a dialog using a resource ID.",
              "How-to-use": "Create an instance of DialogBuilder, call setMessage(int) with the resource ID of the message to be set, and use the returned DialogBuilder instance to further customize the dialog.",
              "How-it-is-done": "The method overrides the setMessage(int) method of the superclass, sets the message of the dialog using the provided resource ID, and returns the current instance of DialogBuilder.",
              "Property": {
                "pre-conditions": "The DialogBuilder instance must be initialized before calling this method.",
                "post-conditions": "The message of the dialog will be set to the text associated with the provided resource ID."
              }
            }
          },
          "de.schildbach.wallet.ui.DialogBuilder.setMessage(java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.ui.DialogBuilder.setMessage(java.lang.CharSequence)",
            "description": {
              "What": "This method sets the message to be displayed in the dialog and returns the DialogBuilder instance for method chaining.",
              "Parameters": [
                {
                  "name": "message",
                  "type": "java.lang.CharSequence",
                  "description": "The message to be displayed in the dialog."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.DialogBuilder",
                "description": "The DialogBuilder instance with the message set."
              },
              "Why": "To allow setting the message of a dialog and chaining multiple method calls on the same DialogBuilder instance.",
              "How-to-use": "Create an instance of DialogBuilder, call setMessage(CharSequence) with the desired message, and continue chaining other methods to customize the dialog.",
              "How-it-is-done": "The method overrides the setMessage(CharSequence) method of the superclass, sets the message using the provided parameter, and returns 'this' to enable method chaining.",
              "Property": {
                "pre-conditions": "The DialogBuilder instance must be initialized before calling this method.",
                "post-conditions": "The message of the dialog will be set to the provided CharSequence."
              }
            }
          },
          "de.schildbach.wallet.ui.DialogBuilder.setTitle(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.DialogBuilder.setTitle(int)",
            "description": {
              "What": "Sets the title of the dialog using the provided string resource ID.",
              "Parameters": [
                {
                  "name": "titleResId",
                  "type": "int",
                  "description": "The resource ID of the string to be used as the title."
                }
              ],
              "Returns": {
                "type": "DialogBuilder",
                "description": "The DialogBuilder instance to allow method chaining."
              },
              "Why": "To dynamically set the title of a dialog using a string resource ID.",
              "How-to-use": "Call setTitle(int) with the resource ID of the desired title string to set the title of the dialog.",
              "How-it-is-done": "If the provided titleResId is not 0, it sets the custom title of the dialog, then sets the text of the titleView to the specified resource ID.",
              "Property": {
                "pre-conditions": "The titleResId should be a valid resource ID of a string.",
                "post-conditions": "The title of the dialog will be set to the string specified by the resource ID."
              }
            }
          },
          "de.schildbach.wallet.ui.DialogBuilder.setTitle(java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.ui.DialogBuilder.setTitle(java.lang.CharSequence)",
            "description": {
              "What": "Sets the title of the dialog builder with the provided CharSequence.",
              "Parameters": [
                {
                  "name": "title",
                  "type": "java.lang.CharSequence",
                  "description": "The title to be set for the dialog builder."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.DialogBuilder",
                "description": "The instance of the DialogBuilder to allow method chaining."
              },
              "Why": "To allow users to set a custom title for the dialog builder.",
              "How-to-use": "Create an instance of DialogBuilder, call setTitle(CharSequence) with the desired title, and continue configuring the dialog builder as needed.",
              "How-it-is-done": "If the provided title is not null, it sets a custom title (if any) and updates the title view with the new title text.",
              "Property": {
                "pre-conditions": "The title parameter should not be null.",
                "post-conditions": "The title of the dialog builder is set to the provided CharSequence."
              }
            }
          },
          "de.schildbach.wallet.ui.DialogBuilder.singleDismissButton(android.content.DialogInterface.OnClickListener)": {
            "qualifiedName": "de.schildbach.wallet.ui.DialogBuilder.singleDismissButton(android.content.DialogInterface.OnClickListener)",
            "description": {
              "What": "Sets a single dismiss button with the specified listener for the dialog.",
              "Parameters": [
                {
                  "name": "dismissListener",
                  "type": "android.content.DialogInterface.OnClickListener",
                  "description": "The listener to be invoked when the dismiss button is clicked."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.DialogBuilder",
                "description": "The DialogBuilder instance to allow method chaining."
              },
              "Why": "To provide a convenient way to set a dismiss button with a listener for dialogs.",
              "How-to-use": "Call singleDismissButton method on a DialogBuilder instance passing the dismiss listener as a parameter to set a single dismiss button for the dialog.",
              "How-it-is-done": "The method internally calls setNeutralButton method with the dismiss listener and a predefined 'Dismiss' button text, then returns the DialogBuilder instance for method chaining.",
              "Property": {
                "pre-conditions": "The DialogBuilder instance must be initialized before calling this method.",
                "post-conditions": "The dialog will have a single dismiss button with the specified listener set."
              }
            }
          },
          "de.schildbach.wallet.ui.DialogBuilder.warn(android.content.Context,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.DialogBuilder.warn(android.content.Context,int)",
            "description": {
              "What": "This method creates a DialogBuilder instance with a warning icon and a specified title resource ID.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to create the DialogBuilder."
                },
                {
                  "name": "titleResId",
                  "type": "int",
                  "description": "The resource ID of the title to be set for the DialogBuilder."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.DialogBuilder",
                "description": "A DialogBuilder instance with a warning icon and the specified title."
              },
              "Why": "To provide a convenient way to create a DialogBuilder with a warning icon and a specified title.",
              "How-to-use": "Call the 'warn' method with a context and a title resource ID to get a DialogBuilder instance with a warning icon and the specified title.",
              "How-it-is-done": "The method creates a new DialogBuilder instance, sets the warning icon, and sets the title using the provided resource ID before returning the builder.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "The returned DialogBuilder instance will have the warning icon set and the specified title."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.DividerItemDecoration": {
        "qualifiedName": "de.schildbach.wallet.ui.DividerItemDecoration",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.DividerItemDecoration.de.schildbach.wallet.ui.DividerItemDecoration(android.content.Context,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.DividerItemDecoration.de.schildbach.wallet.ui.DividerItemDecoration(android.content.Context,int)",
            "description": {
              "What": "Initializes a DividerItemDecoration object with a given context and orientation.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to obtain styled attributes."
                },
                {
                  "name": "orientation",
                  "type": "int",
                  "description": "The orientation of the divider (vertical or horizontal)."
                }
              ],
              "Returns": {
                "type": "DividerItemDecoration",
                "description": "A new instance of DividerItemDecoration."
              },
              "Why": "To provide a way to create a DividerItemDecoration object with specified attributes for dividing items in a RecyclerView.",
              "How-to-use": "Create a new instance of DividerItemDecoration by passing a context and orientation, then set it to a RecyclerView using addItemDecoration method.",
              "How-it-is-done": "The method obtains styled attributes for the divider, sets the orientation, and initializes the DividerItemDecoration object with the provided context and orientation.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "A new DividerItemDecoration object is created with the specified orientation."
              }
            }
          },
          "de.schildbach.wallet.ui.DividerItemDecoration.drawHorizontal(android.graphics.Canvas,android.support.v7.widget.RecyclerView)": {
            "qualifiedName": "de.schildbach.wallet.ui.DividerItemDecoration.drawHorizontal(android.graphics.Canvas,android.support.v7.widget.RecyclerView)",
            "description": {
              "What": "Draws horizontal dividers between items in a RecyclerView.",
              "Parameters": [
                {
                  "name": "c",
                  "type": "android.graphics.Canvas",
                  "description": "The canvas on which to draw the dividers."
                },
                {
                  "name": "parent",
                  "type": "android.support.v7.widget.RecyclerView",
                  "description": "The RecyclerView containing the items."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To visually separate items in a RecyclerView for better readability and user experience.",
              "How-to-use": "Create an instance of DividerItemDecoration and set it as the item decoration for the RecyclerView using setItemDecoration().",
              "How-it-is-done": "Iterates through the child views of the RecyclerView, calculates the position of the divider, sets the bounds of the divider, and draws it on the canvas.",
              "Property": {
                "pre-conditions": [
                  "The RecyclerView parent must not be null.",
                  "The Canvas c must not be null."
                ],
                "post-conditions": [
                  "Horizontal dividers are drawn between items in the RecyclerView."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.DividerItemDecoration.drawVertical(android.graphics.Canvas,android.support.v7.widget.RecyclerView)": {
            "qualifiedName": "de.schildbach.wallet.ui.DividerItemDecoration.drawVertical(android.graphics.Canvas,android.support.v7.widget.RecyclerView)",
            "description": {
              "What": "Draws vertical dividers between items in a RecyclerView.",
              "Parameters": [
                {
                  "name": "c",
                  "type": "android.graphics.Canvas",
                  "description": "The canvas on which to draw the dividers."
                },
                {
                  "name": "parent",
                  "type": "android.support.v7.widget.RecyclerView",
                  "description": "The RecyclerView containing the items to draw dividers between."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To visually separate items in a RecyclerView for better readability and user experience.",
              "How-to-use": "Create an instance of DividerItemDecoration and set it as an item decoration on the RecyclerView using addItemDecoration() method.",
              "How-it-is-done": "Iterates through the child views of the RecyclerView, calculates the position of the dividers, sets the bounds of the divider drawable, and draws it on the canvas.",
              "Property": {
                "pre-conditions": [
                  "The RecyclerView parent must not be null.",
                  "The RecyclerView parent must have valid child views."
                ],
                "post-conditions": [
                  "Vertical dividers are drawn between the child views of the RecyclerView parent."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.DividerItemDecoration.getItemOffsets(android.graphics.Rect,int,android.support.v7.widget.RecyclerView)": {
            "qualifiedName": "de.schildbach.wallet.ui.DividerItemDecoration.getItemOffsets(android.graphics.Rect,int,android.support.v7.widget.RecyclerView)",
            "description": {
              "What": "This method sets the item offsets for drawing dividers between items in a RecyclerView based on the orientation of the layout.",
              "Parameters": [
                {
                  "name": "outRect",
                  "type": "android.graphics.Rect",
                  "description": "The Rect object to set the item offsets for."
                },
                {
                  "name": "itemPosition",
                  "type": "int",
                  "description": "The position of the item in the RecyclerView."
                },
                {
                  "name": "parent",
                  "type": "android.support.v7.widget.RecyclerView",
                  "description": "The RecyclerView instance containing the items."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way to customize the spacing between items in a RecyclerView layout.",
              "How-to-use": "Create an instance of DividerItemDecoration and set it as the item decorator for the RecyclerView to automatically add dividers between items.",
              "How-it-is-done": "The method checks the orientation of the layout and sets the appropriate item offsets to include the height or width of the divider between items.",
              "Property": {
                "pre-conditions": [
                  "The DividerItemDecoration instance must be set as the item decorator for the RecyclerView."
                ],
                "post-conditions": [
                  "The item offsets for drawing dividers between items will be set based on the orientation of the layout."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.DividerItemDecoration.onDraw(android.graphics.Canvas,android.support.v7.widget.RecyclerView)": {
            "qualifiedName": "de.schildbach.wallet.ui.DividerItemDecoration.onDraw(android.graphics.Canvas,android.support.v7.widget.RecyclerView)",
            "description": {
              "What": "This method determines whether to draw a vertical or horizontal divider based on the orientation specified.",
              "Parameters": [
                {
                  "name": "c",
                  "type": "android.graphics.Canvas",
                  "description": "The canvas on which to draw the divider."
                },
                {
                  "name": "parent",
                  "type": "android.support.v7.widget.RecyclerView",
                  "description": "The RecyclerView to which the divider will be applied."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to draw dividers in a RecyclerView based on the specified orientation.",
              "How-to-use": "Create an instance of DividerItemDecoration, set the orientation, and attach it to a RecyclerView using RecyclerView.addItemDecoration().",
              "How-it-is-done": "The method checks the orientation set for the DividerItemDecoration instance and calls the appropriate draw method (drawVertical or drawHorizontal) to draw the divider on the canvas.",
              "Property": {
                "pre-conditions": [
                  "The DividerItemDecoration instance must be properly initialized with an orientation."
                ],
                "post-conditions": [
                  "A vertical or horizontal divider is drawn on the canvas based on the specified orientation."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.DividerItemDecoration.setOrientation(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.DividerItemDecoration.setOrientation(int)",
            "description": {
              "What": "Sets the orientation of the divider in the RecyclerView layout.",
              "Parameters": [
                {
                  "name": "orientation",
                  "type": "int",
                  "description": "The orientation of the divider, either HORIZONTAL_LIST or VERTICAL_LIST."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow the user to specify the orientation of the divider in the RecyclerView layout.",
              "How-to-use": "Create an instance of DividerItemDecoration and call setOrientation(int) with the desired orientation value before setting it to the RecyclerView layout manager.",
              "How-it-is-done": "The method checks if the provided orientation is valid, then sets the mOrientation field of the class to the specified orientation value.",
              "Property": {
                "pre-conditions": "The orientation parameter must be either HORIZONTAL_LIST or VERTICAL_LIST.",
                "post-conditions": "The mOrientation field of the class will be set to the specified orientation value."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.EditAddressBookEntryFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.EditAddressBookEntryFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.EditAddressBookEntryFragment.de.schildbach.wallet.ui.EditAddressBookEntryFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.EditAddressBookEntryFragment.de.schildbach.wallet.ui.EditAddressBookEntryFragment()",
            "description": {
              "What": "Initialize a new instance of EditAddressBookEntryFragment.",
              "Parameters": [
                {
                  "name": "",
                  "type": "",
                  "description": ""
                }
              ],
              "Returns": {
                "type": "EditAddressBookEntryFragment",
                "description": "A new instance of EditAddressBookEntryFragment."
              },
              "Why": "To provide a way to create a new EditAddressBookEntryFragment object.",
              "How-to-use": "Simply call the constructor EditAddressBookEntryFragment() to create a new instance of EditAddressBookEntryFragment.",
              "How-it-is-done": "The method initializes a new instance of EditAddressBookEntryFragment without any parameters or specific initialization logic.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new instance of EditAddressBookEntryFragment is created."
              }
            }
          },
          "de.schildbach.wallet.ui.EditAddressBookEntryFragment.edit(android.support.v4.app.FragmentManager,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.EditAddressBookEntryFragment.edit(android.support.v4.app.FragmentManager,java.lang.String)",
            "description": {
              "What": "This method is used to edit an address book entry in a wallet application.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for editing the address book entry."
                },
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The address to edit in the address book entry."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow users to edit address book entries in the wallet application.",
              "How-to-use": "To use this method, pass the FragmentManager and the address to be edited as parameters when calling it.",
              "How-it-is-done": "The method calls another overloaded edit method in the EditAddressBookEntryFragment class, passing the FragmentManager, the Bitcoin address converted from the base58 format, and null as parameters.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The address must be a valid Bitcoin address in base58 format."
                ],
                "post-conditions": [
                  "The address book entry corresponding to the provided address is edited in the wallet application."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.EditAddressBookEntryFragment.edit(android.support.v4.app.FragmentManager,org.bitcoinj.core.Address)": {
            "qualifiedName": "de.schildbach.wallet.ui.EditAddressBookEntryFragment.edit(android.support.v4.app.FragmentManager,org.bitcoinj.core.Address)",
            "description": {
              "What": "This method is used to edit an address book entry in a fragment by providing the FragmentManager and the Bitcoin address.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to handle the fragment transaction."
                },
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to be edited in the address book entry."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to edit an address book entry in a fragment without the need to handle fragment transactions manually.",
              "How-to-use": "Call this method with the FragmentManager and the Bitcoin address as parameters to initiate the editing process of the address book entry.",
              "How-it-is-done": "The method delegates the editing process to another method in the EditAddressBookEntryFragment class by passing the FragmentManager, Bitcoin address, and null as the entry parameter.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The Bitcoin address (address) must not be null."
                ],
                "post-conditions": [
                  "The address book entry corresponding to the provided Bitcoin address is edited in the fragment."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.EditAddressBookEntryFragment.edit(android.support.v4.app.FragmentManager,org.bitcoinj.core.Address,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.EditAddressBookEntryFragment.edit(android.support.v4.app.FragmentManager,org.bitcoinj.core.Address,java.lang.String)",
            "description": {
              "What": "This method opens a dialog fragment to edit an address book entry with the provided address and suggested label.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The fragment manager to handle the dialog fragment."
                },
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to edit."
                },
                {
                  "name": "suggestedAddressLabel",
                  "type": "java.lang.String",
                  "description": "The suggested label for the address, can be null."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to edit an address book entry.",
              "How-to-use": "Call this method with the fragment manager, the Bitcoin address to edit, and an optional suggested label to open the edit dialog fragment.",
              "How-it-is-done": "The method creates a new instance of EditAddressBookEntryFragment with the provided address and suggested label, then shows this fragment using the fragment manager.",
              "Property": {
                "pre-conditions": [
                  "The fragment manager (fm) must not be null.",
                  "The Bitcoin address (address) must not be null."
                ],
                "post-conditions": [
                  "A dialog fragment for editing the address book entry is displayed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.EditAddressBookEntryFragment.instance(org.bitcoinj.core.Address,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.EditAddressBookEntryFragment.instance(org.bitcoinj.core.Address,java.lang.String)",
            "description": {
              "What": "Creates an instance of EditAddressBookEntryFragment with the provided address and suggested label.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to be used in the fragment."
                },
                {
                  "name": "suggestedAddressLabel",
                  "type": "java.lang.String",
                  "description": "The suggested label for the address."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.EditAddressBookEntryFragment",
                "description": "An instance of EditAddressBookEntryFragment initialized with the provided address and suggested label."
              },
              "Why": "To create a new instance of EditAddressBookEntryFragment with specific address and label data.",
              "How-to-use": "Call the static method instance() with a Bitcoin address and a suggested label to get an instance of EditAddressBookEntryFragment ready for use.",
              "How-it-is-done": "The method creates a new EditAddressBookEntryFragment instance, sets arguments for the address and suggested label, and returns the fragment.",
              "Property": {
                "pre-conditions": "The address parameter must not be null.",
                "post-conditions": "The returned EditAddressBookEntryFragment instance will have the provided address and suggested label set as arguments."
              }
            }
          },
          "de.schildbach.wallet.ui.EditAddressBookEntryFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.EditAddressBookEntryFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Initialize the EditAddressBookEntryFragment with necessary dependencies such as activity, address book DAO, and wallet.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the fragment."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the necessary dependencies for the fragment to interact with the wallet application.",
              "How-to-use": "Call this method when attaching the EditAddressBookEntryFragment to a context, typically in the onAttach method of the fragment.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then assigns the activity, address book DAO, and wallet based on the context provided.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The activity, address book DAO, and wallet fields of the fragment are initialized with the appropriate values."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.EditAddressBookEntryFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.EditAddressBookEntryFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog for editing or adding an address book entry.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the fragment."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog for editing or adding an address book entry."
              },
              "Why": "To provide a user interface for editing or adding address book entries.",
              "How-to-use": "Call onCreateDialog method passing the saved instance state as a parameter to create a dialog for editing or adding an address book entry.",
              "How-it-is-done": "The method retrieves arguments, resolves the address label, determines if it is an addition or edit, sets the dialog title, inflates the view, handles button clicks to update or delete the entry, and creates the dialog.",
              "Property": {
                "pre-conditions": [
                  "The fragment must have arguments containing the address and suggested label."
                ],
                "post-conditions": [
                  "A dialog for editing or adding an address book entry is created and displayed to the user."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.EncryptKeysDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment.de.schildbach.wallet.ui.EncryptKeysDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment.de.schildbach.wallet.ui.EncryptKeysDialogFragment()",
            "description": {
              "method": {
                "What": "Initialize a new instance of EncryptKeysDialogFragment.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "EncryptKeysDialogFragment",
                  "description": "A new instance of EncryptKeysDialogFragment."
                },
                "Why": "To provide a way to create a new instance of EncryptKeysDialogFragment.",
                "How-to-use": "To create a new instance of EncryptKeysDialogFragment, simply call the constructor without any parameters.",
                "How-it-is-done": "The constructor initializes a new instance of EncryptKeysDialogFragment without any specific parameters or initialization logic.",
                "Property": {
                  "pre-conditions": "No specific pre-conditions for calling the constructor.",
                  "post-conditions": "A new instance of EncryptKeysDialogFragment is created and ready for further use."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment.handleGo()": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment.handleGo()",
            "description": {
              "What": "This method handles the encryption, decryption, and password changing functionality for a wallet in an Android application.",
              "Parameters": [
                {
                  "name": "oldPassword",
                  "type": "String",
                  "description": "The old password for the wallet."
                },
                {
                  "name": "newPassword",
                  "type": "String",
                  "description": "The new password for the wallet."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide functionality for changing, setting, or removing the spending password of a wallet in the application.",
              "How-to-use": "Call this method with the old and new passwords to handle encryption, decryption, or password changing for the wallet.",
              "How-it-is-done": "The method first logs the action to be performed based on the presence of old and new passwords, then it derives keys for encryption/decryption, updates the wallet state, and performs the necessary encryption/decryption operations.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must be initialized and accessible within the class."
                ],
                "post-conditions": [
                  "The wallet's encryption state is updated based on the provided passwords.",
                  "The wallet is either encrypted, decrypted, or the spending password is changed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onAttach(android.content.Context)",
            "description": {
              "method": {
                "What": "Initialize the activity, application, and wallet variables of the EncryptKeysDialogFragment class.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context of the calling component."
                  },
                  "Returns"
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To set up necessary variables for the EncryptKeysDialogFragment class to interact with the wallet application.",
                "How-to-use": "Call this method passing the context of the calling component as the parameter before interacting with the EncryptKeysDialogFragment instance.",
                "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then casts the context to AbstractWalletActivity to access the wallet application and wallet instances.",
                "Property": {
                  "pre-conditions": [
                    "The context parameter must not be null."
                  ],
                  "post-conditions": [
                    "The activity, application, and wallet variables of the EncryptKeysDialogFragment class are properly initialized."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize background thread and handler for background processing.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": "void",
              "Why": "To set up a background thread and handler for performing tasks that should not block the main UI thread.",
              "How-to-use": "Call this method in the onCreate() method of a Fragment to initialize the background thread and handler for background processing.",
              "How-it-is-done": "The method creates a new HandlerThread with a specified name and priority, starts the thread, and then initializes a new Handler with the thread's looper.",
              "Property": {
                "pre-conditions": "The method should be called in the onCreate() method of a Fragment.",
                "post-conditions": "The background thread and handler are successfully initialized for background processing."
              }
            }
          },
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog for encrypting keys with options to enter old and new passwords.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog for encrypting keys with password input fields."
              },
              "Why": "To provide a user interface for encrypting keys with password protection.",
              "How-to-use": "Call onCreateDialog method passing the saved instance state to create an encryption dialog with password input fields.",
              "How-it-is-done": "The method inflates a layout for the dialog, sets up password input fields, buttons, and listeners for user interactions, and returns the created dialog.",
              "Property": {
                "pre-conditions": "The activity context must be set before calling this method.",
                "post-conditions": "A dialog for encrypting keys with password input fields is created and returned."
              }
            }
          },
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onDestroy()": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onDestroy()",
            "description": {
              "What": "This method quits the background thread looper before calling the superclass's onDestroy method.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure proper cleanup and termination of resources associated with the background thread before the fragment is destroyed.",
              "How-to-use": "Simply call this method when the fragment is being destroyed to properly handle the background thread cleanup.",
              "How-it-is-done": "The method accesses the background thread's looper and calls the quit method to terminate the looper. Then, it calls the superclass's onDestroy method to complete the destruction process.",
              "Property": {
                "pre-conditions": [
                  "The backgroundThread object must be initialized and accessible within the class."
                ],
                "post-conditions": [
                  "The background thread looper is terminated, ensuring proper cleanup of resources."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onDismiss(android.content.DialogInterface)": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onDismiss(android.content.DialogInterface)",
            "description": {
              "What": "This method is called when the dialog is dismissed, and it performs cleanup tasks related to the dialog and text watchers.",
              "Parameters": [
                {
                  "name": "dialog",
                  "type": "android.content.DialogInterface",
                  "description": "The dialog that is being dismissed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle cleanup tasks when the dialog is dismissed and to ensure proper removal of listeners and references.",
              "How-to-use": "Override this method in a class that extends EncryptKeysDialogFragment to perform cleanup tasks when the dialog is dismissed.",
              "How-it-is-done": "The method sets the dialog reference to null, removes text change listeners from password views, unsets the checked change listener from a view, wipes passwords, and calls the superclass method to handle dialog dismissal.",
              "Property": {
                "pre-conditions": "The dialog reference and password views must be initialized before calling this method.",
                "post-conditions": "The dialog reference is set to null, text change listeners are removed from password views, checked change listener is unset, and passwords are wiped."
              }
            }
          },
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onResume()": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment.onResume()",
            "description": {
              "method": {
                "What": "Updates the view when the dialog fragment is resumed.",
                "Parameters": [
                  {
                    "name": "None",
                    "type": "N/A",
                    "description": "No parameters are passed to the method."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To ensure that the view is updated with the latest data when the dialog fragment is resumed.",
                "How-to-use": "Simply call the onResume() method on an instance of EncryptKeysDialogFragment to update the view.",
                "How-it-is-done": "The method calls the super.onResume() to handle any necessary operations, then it calls the updateView() method to update the view.",
                "Property": {
                  "pre-conditions": "The dialog fragment must be in a resumed state.",
                  "post-conditions": "The view is updated with the latest data."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment.show(android.support.v4.app.FragmentManager)": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment.show(android.support.v4.app.FragmentManager)",
            "description": {
              "What": "Show the EncryptKeysDialogFragment using the provided FragmentManager.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for displaying the dialog fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow easy display of the EncryptKeysDialogFragment without the need for direct instantiation and showing.",
              "How-to-use": "Simply call EncryptKeysDialogFragment.show(fm) where 'fm' is the FragmentManager instance you want to use for displaying the dialog.",
              "How-it-is-done": "The method creates a new instance of EncryptKeysDialogFragment, then calls the show method on the new fragment passing the provided FragmentManager and a tag for identification.",
              "Property": {
                "pre-conditions": [
                  "The provided FragmentManager 'fm' must not be null."
                ],
                "post-conditions": [
                  "The EncryptKeysDialogFragment will be displayed using the provided FragmentManager."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment.updateView()": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment.updateView()",
            "description": {
              "What": "Updates the view of the EncryptKeysDialogFragment based on the current state and input values.",
              "Parameters": [
                {
                  "name": "oldPasswordView",
                  "type": "EditText",
                  "description": "The view for entering the old password."
                },
                {
                  "name": "newPasswordView",
                  "type": "EditText",
                  "description": "The view for entering the new password."
                },
                {
                  "name": "passwordStrengthView",
                  "type": "TextView",
                  "description": "The view for displaying password strength."
                },
                {
                  "name": "showView",
                  "type": "View",
                  "description": "The view for showing password strength."
                },
                {
                  "name": "positiveButton",
                  "type": "Button",
                  "description": "The positive button in the dialog."
                },
                {
                  "name": "negativeButton",
                  "type": "Button",
                  "description": "The negative button in the dialog."
                }
              ],
              "Returns": "void",
              "Why": "To dynamically update the UI elements based on user input and the current state of encryption.",
              "How-to-use": "Call this method whenever there is a change in the input fields or the state of encryption to update the UI accordingly.",
              "How-it-is-done": "The method checks the input values, state of encryption, and password length to determine the visibility and text of UI elements such as password strength, buttons, and text views.",
              "Property": {
                "Pre-conditions": [
                  "The dialog object must not be null."
                ],
                "Post-conditions": [
                  "UI elements are updated based on the input values and encryption state."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment.wipePasswords()": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment.wipePasswords()",
            "description": {
              "What": "This method clears the text in the oldPasswordView and newPasswordView fields.",
              "Parameters": [
                {
                  "name": "oldPasswordView",
                  "type": "TextView",
                  "description": "The view containing the old password text."
                },
                {
                  "name": "newPasswordView",
                  "type": "TextView",
                  "description": "The view containing the new password text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to clear password fields for security or user convenience purposes.",
              "How-to-use": "Call this method when you want to clear the password fields in the UI, such as after a user has successfully logged in or when resetting password fields.",
              "How-it-is-done": "The method sets the text of both oldPasswordView and newPasswordView to null, effectively clearing any text displayed in these fields.",
              "Property": {
                "pre-conditions": [
                  "The oldPasswordView and newPasswordView fields must be initialized and accessible within the scope of this method."
                ],
                "post-conditions": [
                  "The text in oldPasswordView and newPasswordView will be cleared after this method is called."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.EncryptKeysDialogFragment$State": {
        "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment$State",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.ui.EncryptKeysDialogFragment$State.de.schildbach.wallet.ui.EncryptKeysDialogFragment$State()": {
            "qualifiedName": "de.schildbach.wallet.ui.EncryptKeysDialogFragment$State.de.schildbach.wallet.ui.EncryptKeysDialogFragment$State()",
            "description": {
              "What": "Initialize a new instance of the State enum.",
              "Parameters": [],
              "Returns": {
                "type": "State",
                "description": "A new instance of the State enum."
              },
              "Why": "To provide a default constructor for the State enum.",
              "How-to-use": "Simply create a new instance of the State enum by calling State() constructor.",
              "How-it-is-done": "The method initializes a new instance of the State enum without any parameters.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the State enum is created."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ExchangeRatesActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.ExchangeRatesActivity.de.schildbach.wallet.ui.ExchangeRatesActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesActivity.de.schildbach.wallet.ui.ExchangeRatesActivity()",
            "description": {
              "method": {
                "What": "Initialize an instance of ExchangeRatesActivity class.",
                "Parameters": [],
                "Returns": "ExchangeRatesActivity",
                "Why": "To create an instance of ExchangeRatesActivity for managing exchange rates.",
                "How-to-use": "Simply call the constructor to create a new instance of ExchangeRatesActivity.",
                "How-it-is-done": "The constructor initializes an instance of ExchangeRatesActivity class with default values or settings.",
                "Property": {
                  "pre-conditions": [],
                  "post-conditions": [
                    "An instance of ExchangeRatesActivity is created and ready for use."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesActivity.onCreate(android.os.Bundle)",
            "description": {
              "method": {
                "What": "Sets the content view to display the exchange rates layout.",
                "Parameters": [
                  {
                    "name": "savedInstanceState",
                    "type": "android.os.Bundle",
                    "description": "The saved instance state of the activity."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To initialize the activity with the exchange rates layout.",
                "How-to-use": "Extend ExchangeRatesActivity and call onCreate method passing the saved instance state.",
                "How-it-is-done": "The method calls the superclass onCreate method passing the saved instance state and sets the content view to the exchange rates layout.",
                "Property": {
                  "pre-conditions": "The activity must extend ExchangeRatesActivity.",
                  "post-conditions": "The exchange rates layout is displayed on the screen."
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ExchangeRatesAdapter": {
        "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesAdapter",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.ExchangeRatesAdapter.buildListItems(android.database.Cursor,org.bitcoinj.core.Coin,de.schildbach.wallet.service.BlockchainState,java.lang.String,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesAdapter.buildListItems(android.database.Cursor,org.bitcoinj.core.Coin,de.schildbach.wallet.service.BlockchainState,java.lang.String,org.bitcoinj.core.Coin)",
            "description": {
              "What": "Builds a list of ExchangeRatesAdapter.ListItem objects based on the provided cursor, balance, blockchain state, default currency, and rate base.",
              "Parameters": [
                {
                  "name": "cursor",
                  "type": "android.database.Cursor",
                  "description": "The cursor containing exchange rate data."
                },
                {
                  "name": "balance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The balance in bitcoins."
                },
                {
                  "name": "blockchainState",
                  "type": "de.schildbach.wallet.service.BlockchainState",
                  "description": "The current blockchain state."
                },
                {
                  "name": "defaultCurrency",
                  "type": "java.lang.String",
                  "description": "The default currency code."
                },
                {
                  "name": "rateBase",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The base rate in bitcoins."
                }
              ],
              "Returns": {
                "type": "java.util.List<de.schildbach.wallet.ui.ExchangeRatesAdapter.ListItem>",
                "description": "A list of ExchangeRatesAdapter.ListItem objects."
              },
              "Why": "To generate a list of exchange rate items for display in the UI.",
              "How-to-use": "Call the method with the required parameters to get a list of ExchangeRatesAdapter.ListItem objects for display.",
              "How-it-is-done": "Iterates over the cursor, extracts exchange rate data, converts rates to fiat, calculates decimals, and creates ExchangeRatesAdapter.ListItem objects.",
              "Property": {
                "pre-conditions": [
                  "The cursor must not be null.",
                  "The balance and rateBase parameters must not be null."
                ],
                "post-conditions": [
                  "A non-null list of ExchangeRatesAdapter.ListItem objects is returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesAdapter.de.schildbach.wallet.ui.ExchangeRatesAdapter(android.content.Context,de.schildbach.wallet.ui.ExchangeRatesAdapter$OnClickListener)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesAdapter.de.schildbach.wallet.ui.ExchangeRatesAdapter(android.content.Context,de.schildbach.wallet.ui.ExchangeRatesAdapter$OnClickListener)",
            "description": {
              "method": {
                "What": "Constructs an ExchangeRatesAdapter with a context and an OnClickListener.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context used for inflating layout resources."
                  },
                  {
                    "name": "onClickListener",
                    "type": "de.schildbach.wallet.ui.ExchangeRatesAdapter.OnClickListener",
                    "description": "The OnClickListener for handling item clicks."
                  }
                ],
                "Returns": {
                  "type": "ExchangeRatesAdapter",
                  "description": "A new instance of ExchangeRatesAdapter."
                },
                "Why": "To initialize an ExchangeRatesAdapter with necessary parameters for displaying exchange rates.",
                "How-to-use": "Create a new instance of ExchangeRatesAdapter by passing a context and an OnClickListener to the constructor.",
                "How-it-is-done": "The constructor initializes the adapter with a DiffUtil ItemCallback to handle item comparison and updates, sets the LayoutInflater from the context, and assigns the OnClickListener.",
                "Property": {
                  "pre-conditions": "The context must not be null.",
                  "post-conditions": "A new instance of ExchangeRatesAdapter is created with the provided context and OnClickListener."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesAdapter.onBindViewHolder(de.schildbach.wallet.ui.ExchangeRatesAdapter$ViewHolder,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesAdapter.onBindViewHolder(de.schildbach.wallet.ui.ExchangeRatesAdapter$ViewHolder,int)",
            "description": {
              "What": "Updates the view holder with the data at the specified position in the list.",
              "Parameters": [
                {
                  "name": "holder",
                  "type": "de.schildbach.wallet.ui.ExchangeRatesAdapter.ViewHolder",
                  "description": "The view holder to update."
                },
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item in the list."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the view holder with the data at the specified position in the list based on the item's properties.",
              "How-to-use": "Call this method when binding data to a view holder in a RecyclerView adapter to update the UI with the correct information for the item at the given position.",
              "How-it-is-done": "The method retrieves the item at the specified position, sets the background color and visibility of views based on the item's properties, and updates text and formatting for various views within the view holder. It also sets a click listener for a menu view if provided.",
              "Property": {
                "pre-conditions": [
                  "The list of items should not be null.",
                  "The position should be within the bounds of the list."
                ],
                "post-conditions": [
                  "The view holder is updated with the data from the item at the specified position."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesAdapter.onCreateViewHolder(android.view.ViewGroup,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesAdapter.onCreateViewHolder(android.view.ViewGroup,int)",
            "description": {
              "What": "Creates a new ViewHolder object for displaying exchange rate rows in a RecyclerView.",
              "Parameters": [
                {
                  "name": "parent",
                  "type": "android.view.ViewGroup",
                  "description": "The parent ViewGroup in which the ViewHolder will be added."
                },
                {
                  "name": "viewType",
                  "type": "int",
                  "description": "The type of view to be created, not used in this method."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.ExchangeRatesAdapter.ViewHolder",
                "description": "A new ViewHolder object for displaying exchange rate rows."
              },
              "Why": "To provide a way to create ViewHolder objects for displaying exchange rate rows in a RecyclerView.",
              "How-to-use": "Call this method passing the parent ViewGroup as the first argument and the viewType as the second argument to create a new ViewHolder object.",
              "How-it-is-done": "The method inflates the 'exchange_rate_row' layout using the inflater and parent ViewGroup, then creates a new ViewHolder object with the inflated view.",
              "Property": {
                "pre-conditions": "The 'inflater' and 'R.layout.exchange_rate_row' must be properly initialized before calling this method.",
                "post-conditions": "A new ViewHolder object is returned for displaying exchange rate rows in a RecyclerView."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ExchangeRatesAdapter$ListItem": {
        "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesAdapter$ListItem",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.ExchangeRatesAdapter$ListItem.de.schildbach.wallet.ui.ExchangeRatesAdapter$ListItem(de.schildbach.wallet.data.ExchangeRate,org.bitcoinj.utils.Fiat,int,org.bitcoinj.utils.Fiat,boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesAdapter$ListItem.de.schildbach.wallet.ui.ExchangeRatesAdapter$ListItem(de.schildbach.wallet.data.ExchangeRate,org.bitcoinj.utils.Fiat,int,org.bitcoinj.utils.Fiat,boolean)",
            "description": {
              "What": "Initialize a ListItem object with exchange rate, base rate as Fiat, base rate minimum decimals, balance as Fiat, and selection status.",
              "Parameters": [
                {
                  "name": "exchangeRate",
                  "type": "de.schildbach.wallet.data.ExchangeRate",
                  "description": "The exchange rate object."
                },
                {
                  "name": "baseRateAsFiat",
                  "type": "org.bitcoinj.utils.Fiat",
                  "description": "The base rate as Fiat object."
                },
                {
                  "name": "baseRateMinDecimals",
                  "type": "int",
                  "description": "The minimum decimals for the base rate."
                },
                {
                  "name": "balanceAsFiat",
                  "type": "org.bitcoinj.utils.Fiat",
                  "description": "The balance as Fiat object."
                },
                {
                  "name": "isSelected",
                  "type": "boolean",
                  "description": "The selection status of the ListItem."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.ExchangeRatesAdapter$ListItem",
                "description": "A ListItem object initialized with the provided parameters."
              },
              "Why": "To create a ListItem object with necessary information for displaying exchange rates.",
              "How-to-use": "Create a new ListItem object by passing the required parameters such as exchange rate, base rate as Fiat, base rate minimum decimals, balance as Fiat, and selection status.",
              "How-it-is-done": "The method assigns the provided exchange rate, base rate as Fiat, base rate minimum decimals, balance as Fiat, and selection status to the corresponding fields of the ListItem object.",
              "Property": {
                "pre-conditions": "The exchangeRate, baseRateAsFiat, balanceAsFiat parameters must not be null.",
                "post-conditions": "A new ListItem object is created with the provided parameters initialized."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ExchangeRatesAdapter$OnClickListener": {
        "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesAdapter$OnClickListener",
        "kind": "interface",
        "methods": {
          "de.schildbach.wallet.ui.ExchangeRatesAdapter$OnClickListener.onExchangeRateMenuClick(android.view.View,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesAdapter$OnClickListener.onExchangeRateMenuClick(android.view.View,java.lang.String)",
            "description": {
              "method": {
                "What": "Handles the click event on the exchange rate menu for a specific currency.",
                "Parameters": [
                  {
                    "name": "view",
                    "type": "android.view.View",
                    "description": "The view that was clicked."
                  },
                  {
                    "name": "currencyCode",
                    "type": "java.lang.String",
                    "description": "The currency code associated with the exchange rate."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To provide a callback mechanism for handling exchange rate menu clicks in the UI.",
                "How-to-use": "Implement this method in a class that implements ExchangeRatesAdapter$OnClickListener interface to handle exchange rate menu clicks for a specific currency.",
                "How-it-is-done": "When the exchange rate menu is clicked, this method is called with the clicked view and the currency code as parameters to perform the necessary actions, such as displaying a menu or initiating a currency conversion.",
                "Property": {
                  "pre-conditions": "The implementing class must be set as the OnClickListener for the exchange rate menu in the UI.",
                  "post-conditions": "Upon calling this method, the appropriate action for the exchange rate menu click should be executed."
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ExchangeRatesAdapter$ViewHolder": {
        "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesAdapter$ViewHolder",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.ExchangeRatesAdapter$ViewHolder.de.schildbach.wallet.ui.ExchangeRatesAdapter$ViewHolder(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesAdapter$ViewHolder.de.schildbach.wallet.ui.ExchangeRatesAdapter$ViewHolder(android.view.View)",
            "description": {
              "What": "Initialize the ViewHolder with views for exchange rate row items.",
              "Parameters": [
                {
                  "name": "itemView",
                  "type": "android.view.View",
                  "description": "The view representing an exchange rate row item."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "N/A"
              },
              "Why": "To set up the ViewHolder with necessary views for displaying exchange rate row items.",
              "How-to-use": "Create a new instance of ViewHolder by passing the itemView representing an exchange rate row item.",
              "How-it-is-done": "The method initializes the ViewHolder by finding and assigning specific views for currency code, exchange rate, wallet balance, and menu button within the itemView.",
              "Property": {
                "pre-conditions": "The itemView must contain the necessary views with the specified IDs (R.id.exchange_rate_row_default, R.id.exchange_rate_row_currency_code, R.id.exchange_rate_row_rate, R.id.exchange_rate_row_balance, R.id.exchange_rate_row_menu).",
                "post-conditions": "The ViewHolder is successfully initialized with the required views for displaying exchange rate row items."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ExchangeRatesFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.ExchangeRatesFragment.de.schildbach.wallet.ui.ExchangeRatesFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment.de.schildbach.wallet.ui.ExchangeRatesFragment()",
            "description": {
              "method": {
                "What": "Initialize a new instance of ExchangeRatesFragment.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "ExchangeRatesFragment",
                  "description": "A new instance of ExchangeRatesFragment."
                },
                "Why": "To provide a way to create and initialize ExchangeRatesFragment objects.",
                "How-to-use": "Simply call the constructor ExchangeRatesFragment() to create a new instance of ExchangeRatesFragment.",
                "How-it-is-done": "The method creates a new instance of ExchangeRatesFragment without any parameters or initialization logic.",
                "Property": {
                  "pre-conditions": "None",
                  "post-conditions": "A new instance of ExchangeRatesFragment is created."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment.maybeSubmitList()": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment.maybeSubmitList()",
            "description": {
              "What": "This method submits a list of exchange rates to the adapter for display in the UI.",
              "Parameters": [
                {
                  "name": "exchangeRates",
                  "type": "Cursor",
                  "description": "The cursor containing exchange rate data."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the list of exchange rates displayed in the UI based on the latest data.",
              "How-to-use": "Call this method when there is a need to update the list of exchange rates displayed in the UI.",
              "How-it-is-done": "The method retrieves the exchange rates from the ViewModel, builds a list of items using the ExchangeRatesAdapter, and submits this list to the adapter for display.",
              "Property": {
                "pre-conditions": [
                  "The ViewModel must have the latest exchange rate data available."
                ],
                "post-conditions": [
                  "The list of exchange rates displayed in the UI is updated with the latest data."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Initialize the ExchangeRatesFragment with the context, activity, application, and configuration.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context to attach to the fragment."
                }
              ],
              "Returns": "void",
              "Why": "To set up the necessary components for the ExchangeRatesFragment to function properly.",
              "How-to-use": "Call this method when attaching the ExchangeRatesFragment to a context, typically in the onAttach method of the fragment.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then assigns the activity, application, and configuration based on the context provided.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "The activity, application, and configuration properties of the ExchangeRatesFragment are properly initialized."
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "This method initializes the ExchangeRatesFragment by setting up options menu, observing exchange rates, balance, and blockchain state changes, and creating an adapter.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the fragment."
                }
              ],
              "Returns": "void",
              "Why": "To set up the ExchangeRatesFragment with necessary functionalities and data observation.",
              "How-to-use": "Call this method in the onCreate() method of ExchangeRatesFragment to initialize the fragment with exchange rates, balance, and blockchain state observation.",
              "How-it-is-done": "The method sets up options menu, observes exchange rates, balance, and blockchain state changes using ViewModelProviders, creates an adapter, and registers a shared preference change listener.",
              "Property": {
                "pre-conditions": [
                  "The Constants.ENABLE_EXCHANGE_RATES flag should be set to true."
                ],
                "post-conditions": [
                  "The ExchangeRatesFragment is initialized with exchange rates, balance, and blockchain state observation.",
                  "The adapter is created and shared preference change listener is registered."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)",
            "description": {
              "What": "This method inflates a menu for the ExchangeRatesFragment and sets up a search functionality if enabled.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu to inflate options into."
                },
                {
                  "name": "inflater",
                  "type": "android.view.MenuInflater",
                  "description": "The inflater to inflate the menu layout."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a search functionality for exchange rates if enabled and inflate menu options for the fragment.",
              "How-to-use": "Call this method in the ExchangeRatesFragment to set up the menu options and search functionality.",
              "How-it-is-done": "The method inflates the menu layout, finds the search view, sets up query listeners, and customizes the search input text color if exchange rates are enabled.",
              "Property": {
                "pre-conditions": [
                  "The ExchangeRatesFragment must be active and visible."
                ],
                "post-conditions": [
                  "The menu options are inflated and the search functionality is set up if exchange rates are enabled."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "method": {
                "What": "Creates and initializes the view for the ExchangeRatesFragment.",
                "Parameters": [
                  {
                    "name": "inflater",
                    "type": "android.view.LayoutInflater",
                    "description": "The LayoutInflater object that can be used to inflate any views in the fragment."
                  },
                  {
                    "name": "container",
                    "type": "android.view.ViewGroup",
                    "description": "The parent view that the fragment's UI should be attached to."
                  },
                  {
                    "name": "savedInstanceState",
                    "type": "android.os.Bundle",
                    "description": "The saved state of the fragment."
                  },
                  "Returns"
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment.onDestroy()": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment.onDestroy()",
            "description": {
              "What": "Unregisters a shared preference change listener when the fragment is destroyed.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "de.schildbach.wallet.ui.ExchangeRatesFragment",
                  "description": "The instance of the ExchangeRatesFragment class."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and prevent memory leaks by unregistering the shared preference change listener when the fragment is no longer in use.",
              "How-to-use": "Simply call this method when the ExchangeRatesFragment is being destroyed to unregister the shared preference change listener.",
              "How-it-is-done": "The method calls the unregisterOnSharedPreferenceChangeListener() method on the config object with 'this' as the listener parameter, and then calls the super.onDestroy() method to perform any additional cleanup.",
              "Property": {
                "pre-conditions": [
                  "The ExchangeRatesFragment instance must be valid and initialized."
                ],
                "post-conditions": [
                  "The shared preference change listener is successfully unregistered."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment.onExchangeRateMenuClick(android.view.View,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment.onExchangeRateMenuClick(android.view.View,java.lang.String)",
            "description": {
              "What": "Displays a popup menu with options related to exchange rates for a specific currency code.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view that triggered the menu click event."
                },
                {
                  "name": "currencyCode",
                  "type": "java.lang.String",
                  "description": "The currency code for which the exchange rate menu is being displayed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to set a specific currency as the default for exchange rate display.",
              "How-to-use": "Call this method when a user interacts with the exchange rate menu for a specific currency to display options like setting it as default.",
              "How-it-is-done": "Creates a PopupMenu with options from R.menu.exchange_rates_context, sets a click listener to handle menu item clicks, and updates the default exchange currency code if the corresponding menu item is selected.",
              "Property": {
                "pre-conditions": [
                  "The 'activity' field must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The default exchange currency code may be updated if the user selects the corresponding menu option."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)",
            "description": {
              "What": "This method is triggered when a shared preference is changed, and it checks if the key corresponds to the exchange currency or BTC precision preferences to update the list accordingly.",
              "Parameters": [
                {
                  "name": "sharedPreferences",
                  "type": "android.content.SharedPreferences",
                  "description": "The SharedPreferences object containing the changed preference."
                },
                {
                  "name": "key",
                  "type": "java.lang.String",
                  "description": "The key of the changed preference."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the list of exchange rates when the user changes the currency or BTC precision preferences.",
              "How-to-use": "Implement this method in a class that extends ExchangeRatesFragment to handle changes in exchange currency or BTC precision preferences.",
              "How-it-is-done": "The method checks if the key corresponds to the exchange currency or BTC precision preferences and calls maybeSubmitList() to update the list if necessary.",
              "Property": {
                "pre-conditions": "The ExchangeRatesFragment class must be properly set up and registered as a listener for shared preference changes.",
                "post-conditions": "The list of exchange rates displayed in the fragment is updated based on the changed preference."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData.de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData.de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "This method initializes an ExchangeRatesLiveData object with a CursorLoader that loads exchange rates data from a content provider.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance used to create the CursorLoader."
                }
              ],
              "Returns": {
                "type": "ExchangeRatesLiveData",
                "description": "An instance of ExchangeRatesLiveData initialized with a CursorLoader."
              },
              "Why": "To load exchange rates data from a content provider and provide it to the UI for display.",
              "How-to-use": "Create a new instance of ExchangeRatesLiveData by passing a WalletApplication instance as the parameter.",
              "How-it-is-done": "The method creates a new CursorLoader with the content URI for exchange rates data, sets the query parameters, and overrides the deliverResult method to set the value of the LiveData with the loaded Cursor.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The ExchangeRatesLiveData object is initialized with a CursorLoader that loads exchange rates data."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData.onActive()",
            "description": {
              "method": {
                "What": "Starts loading exchange rates data when the LiveData becomes active.",
                "Parameters": [
                  {
                    "name": "None",
                    "type": "None",
                    "description": "No parameters are required for this method."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To initiate the loading process of exchange rates data when the LiveData is active.",
                "How-to-use": "Simply call this method when the ExchangeRatesLiveData becomes active, typically in the onResume() method of the Fragment.",
                "How-it-is-done": "The method calls the startLoading() method of the loader object, which is responsible for loading exchange rates data.",
                "Property": {
                  "pre-conditions": [
                    "The loader object must be initialized before calling this method."
                  ],
                  "post-conditions": [
                    "Exchange rates data loading process is initiated."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData.onInactive()",
            "description": {
              "method": {
                "What": "Stop loading the exchange rates data when the LiveData becomes inactive.",
                "Parameters": [
                  {
                    "name": "N/A",
                    "type": "N/A",
                    "description": "No parameters are passed to this method."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To ensure that resources are released and unnecessary data loading is stopped when the LiveData is not active.",
                "How-to-use": "Simply call this method when the ExchangeRatesLiveData becomes inactive to stop loading exchange rates data.",
                "How-it-is-done": "The method calls the 'stopLoading()' method of the 'loader' object, which is responsible for loading exchange rates data.",
                "Property": {
                  "pre-conditions": [
                    "The 'loader' object must be initialized and properly set up before calling this method."
                  ],
                  "post-conditions": [
                    "The loading of exchange rates data is stopped when the LiveData becomes inactive."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData.setQuery(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment$ExchangeRatesLiveData.setQuery(java.lang.String)",
            "description": {
              "What": "This method sets a query string for the loader and forces it to load data based on the new query.",
              "Parameters": [
                {
                  "name": "query",
                  "type": "java.lang.String",
                  "description": "The query string to set for the loader."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow users to update the query string for the loader and trigger a reload of data based on the new query.",
              "How-to-use": "To use this method, create an instance of ExchangeRatesLiveData and call setQuery with the desired query string as the parameter.",
              "How-it-is-done": "The method sets the selection arguments of the loader to the provided query string using nullToEmpty method from Google Guava library, then forces the loader to load data.",
              "Property": {
                "pre-conditions": [
                  "The loader instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The loader will load data based on the new query string set by this method."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel.de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel.de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for ExchangeRatesFragment with the application context.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to create the ViewModel."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel",
                "description": "A ViewModel instance for ExchangeRatesFragment."
              },
              "Why": "To provide a ViewModel for ExchangeRatesFragment that requires the application context for initialization.",
              "How-to-use": "Create a new instance of ExchangeRatesFragment$ViewModel by passing the application context as a parameter.",
              "How-it-is-done": "The method initializes the ViewModel by casting the application context to WalletApplication and assigning it to the application field.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The ViewModel is successfully initialized with the application context."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel.getBalance()": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel.getBalance()",
            "description": {
              "What": "This method returns a LiveData object that holds the balance of a wallet.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the WalletBalanceLiveData object."
                }
              ],
              "Returns": {
                "type": "WalletBalanceLiveData",
                "description": "A LiveData object that represents the balance of a wallet."
              },
              "Why": "To provide a way to observe and access the balance of a wallet in a reactive manner.",
              "How-to-use": "Call this method to get a LiveData object that holds the balance of a wallet, and observe changes to the balance using LiveData observers.",
              "How-it-is-done": "The method checks if the balance LiveData object is null, and if so, it creates a new WalletBalanceLiveData object with the application context. It then returns the balance LiveData object.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The method always returns a non-null WalletBalanceLiveData object."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel.getBlockchainState()": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel.getBlockchainState()",
            "description": {
              "What": "This method returns a LiveData object that provides the current blockchain state for the application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the BlockchainStateLiveData object."
                }
              ],
              "Returns": {
                "type": "BlockchainStateLiveData",
                "description": "A LiveData object that contains the current blockchain state."
              },
              "Why": "To allow access to real-time blockchain state information within the application.",
              "How-to-use": "Call this method to get an instance of BlockchainStateLiveData, which can be observed for changes in the blockchain state.",
              "How-it-is-done": "The method checks if the blockchainState object is null, and if so, it creates a new BlockchainStateLiveData object using the provided application context.",
              "Property": {
                "pre-conditions": [
                  "The application context must be valid and not null."
                ],
                "post-conditions": [
                  "The method always returns a non-null instance of BlockchainStateLiveData."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel.getExchangeRates()": {
            "qualifiedName": "de.schildbach.wallet.ui.ExchangeRatesFragment$ViewModel.getExchangeRates()",
            "description": {
              "What": "This method returns an instance of ExchangeRatesLiveData if it is not already initialized, otherwise it returns the existing instance.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create ExchangeRatesLiveData."
                }
              ],
              "Returns": {
                "type": "ExchangeRatesLiveData",
                "description": "An instance of ExchangeRatesLiveData that provides exchange rates data."
              },
              "Why": "To provide a way to access exchange rates data in the ViewModel of ExchangeRatesFragment.",
              "How-to-use": "Call getExchangeRates() method on an instance of ExchangeRatesFragment$ViewModel to get the ExchangeRatesLiveData object for observing exchange rates data.",
              "How-it-is-done": "The method checks if the exchangeRates instance is null, if so, it initializes a new ExchangeRatesLiveData object with the application context and assigns it to exchangeRates. It then returns the exchangeRates object.",
              "Property": {
                "pre-conditions": "The application context must be provided as a parameter.",
                "post-conditions": "The method returns an instance of ExchangeRatesLiveData, either newly created or existing."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.FancyListFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.FancyListFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.FancyListFragment.de.schildbach.wallet.ui.FancyListFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.FancyListFragment.de.schildbach.wallet.ui.FancyListFragment()",
            "description": {
              "What": "This method is a constructor for the FancyListFragment class.",
              "Parameters": [],
              "Returns": "FancyListFragment",
              "Why": "To initialize a new instance of the FancyListFragment class.",
              "How-to-use": "Simply call the constructor to create a new FancyListFragment object.",
              "How-it-is-done": "The constructor initializes a new instance of the FancyListFragment class.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "A new instance of the FancyListFragment class is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.FancyListFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.FancyListFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "What": "The method inflates a layout resource and returns the corresponding view.",
              "Parameters": [
                {
                  "name": "inflater",
                  "type": "android.view.LayoutInflater",
                  "description": "The LayoutInflater object that can be used to inflate any views in the layout."
                },
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view that the returned view will be attached to."
                },
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment, if available."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The inflated view from the specified layout resource."
              },
              "Why": "To provide the layout content for the fragment's view.",
              "How-to-use": "Override this method in a subclass of FancyListFragment to specify the layout resource to be inflated for the fragment's view.",
              "How-it-is-done": "The method uses the LayoutInflater object to inflate the specified layout resource (R.layout.fancy_list_content) and attaches it to the provided ViewGroup container.",
              "Property": {
                "pre-conditions": [
                  "The layout resource (R.layout.fancy_list_content) must exist in the project's resources."
                ],
                "post-conditions": [
                  "The returned view will be attached to the specified ViewGroup container."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.FancyListFragment.setEmptyText(java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.ui.FancyListFragment.setEmptyText(java.lang.CharSequence)",
            "description": {
              "What": "Sets the text to be displayed when the list is empty in the fragment.",
              "Parameters": [
                {
                  "name": "text",
                  "type": "java.lang.CharSequence",
                  "description": "The text to be displayed when the list is empty."
                }
              ],
              "Returns": "void",
              "Why": "To allow customization of the empty text message in the fragment.",
              "How-to-use": "Call this method with the desired text to be displayed when the list is empty.",
              "How-it-is-done": "The method retrieves the TextView for the empty view from the fragment's layout and sets the provided text to it.",
              "Property": {
                "pre-conditions": "The fragment view must be initialized before calling this method.",
                "post-conditions": "The text displayed in the empty view of the fragment will be updated to the provided text."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.HelpDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.HelpDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.HelpDialogFragment.de.schildbach.wallet.ui.HelpDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.HelpDialogFragment.de.schildbach.wallet.ui.HelpDialogFragment()",
            "description": {
              "What": "This method is a constructor for the HelpDialogFragment class.",
              "Parameters": [],
              "Returns": "HelpDialogFragment",
              "Why": "To initialize a new instance of the HelpDialogFragment class.",
              "How-to-use": "To create a new HelpDialogFragment object, simply call the constructor HelpDialogFragment().",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the HelpDialogFragment class.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of the HelpDialogFragment class is created."
              }
            }
          },
          "de.schildbach.wallet.ui.HelpDialogFragment.instance(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.HelpDialogFragment.instance(int)",
            "description": {
              "What": "Creates an instance of HelpDialogFragment with a specified message resource ID.",
              "Parameters": [
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "The resource ID of the message to be displayed in the dialog."
                }
              ],
              "Returns": {
                "type": "HelpDialogFragment",
                "description": "An instance of HelpDialogFragment with the specified message resource ID set."
              },
              "Why": "To provide a convenient way to create instances of HelpDialogFragment with different message contents.",
              "How-to-use": "Call this method with the desired message resource ID to obtain an instance of HelpDialogFragment with the specified message.",
              "How-it-is-done": "The method creates a new instance of HelpDialogFragment, sets the message resource ID as an argument, and returns the fragment.",
              "Property": {
                "pre-conditions": "The messageResId parameter must be a valid resource ID of a string message.",
                "post-conditions": "The returned HelpDialogFragment instance will have the specified message resource ID set as an argument."
              }
            }
          },
          "de.schildbach.wallet.ui.HelpDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.HelpDialogFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Assigns the context to the activity variable of the HelpDialogFragment class.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context to be assigned to the activity variable."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set the activity variable of the HelpDialogFragment class to the provided context for further use within the class.",
              "How-to-use": "Call this method with a valid context parameter before using any methods or variables that rely on the activity variable within the HelpDialogFragment class.",
              "How-it-is-done": "The method first calls the superclass method onAttach with the provided context, then casts the context to AbstractWalletActivity and assigns it to the activity variable of the HelpDialogFragment class.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The activity variable of the HelpDialogFragment class is set to the provided context."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.HelpDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.HelpDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog with a message from a specified resource ID.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the fragment."
                },
                {
                  "name": "args",
                  "type": "android.os.Bundle",
                  "description": "The arguments passed to the fragment."
                },
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "The resource ID of the message to be displayed in the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "The dialog created with the specified message."
              },
              "Why": "To display help messages or information in a dialog for user interaction.",
              "How-to-use": "Create an instance of HelpDialogFragment, set the message resource ID using setArguments, and show the dialog using show method.",
              "How-it-is-done": "Extract the message resource ID from arguments, create a DialogBuilder instance with the message, set a single dismiss button, and return the created dialog.",
              "Property": {
                "pre-conditions": "The fragment must have arguments set with the message resource ID.",
                "post-conditions": "A dialog is created with the specified message and can be shown to the user."
              }
            }
          },
          "de.schildbach.wallet.ui.HelpDialogFragment.page(android.support.v4.app.FragmentManager,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.HelpDialogFragment.page(android.support.v4.app.FragmentManager,int)",
            "description": {
              "What": "Show a help dialog fragment with a specific message resource ID.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for managing the fragment."
                },
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "The resource ID of the message to display in the dialog fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to display help information in a dialog fragment.",
              "How-to-use": "Call this method with the FragmentManager and the resource ID of the message to display in the dialog.",
              "How-it-is-done": "The method creates a new instance of HelpDialogFragment with the specified message resource ID, then shows the fragment using the provided FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The messageResId must be a valid resource ID."
                ],
                "post-conditions": [
                  "A help dialog fragment is displayed with the specified message."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.InputParser": {
        "qualifiedName": "de.schildbach.wallet.ui.InputParser",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.InputParser.cannotClassify(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser.cannotClassify(java.lang.String)",
            "description": {
              "What": "Logs a message and displays an error message when input cannot be classified.",
              "Parameters": [
                {
                  "name": "input",
                  "type": "java.lang.String",
                  "description": "The input string that cannot be classified."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "Provided to handle cases where input cannot be classified and inform the user.",
              "How-to-use": "Call this method when input cannot be classified to log the input and display an error message to the user.",
              "How-it-is-done": "The method logs the input using a logger and calls the 'error' method with a specific error message resource ID and the input string.",
              "Property": {
                "pre-conditions": [
                  "The 'error' method must be implemented in the subclass."
                ],
                "post-conditions": [
                  "An error message is displayed to the user when input cannot be classified."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser.de.schildbach.wallet.ui.InputParser()": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser.de.schildbach.wallet.ui.InputParser()",
            "description": {
              "What": "Initialize an instance of InputParser class.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this constructor."
                }
              ],
              "Returns": {
                "type": "InputParser",
                "description": "An instance of the InputParser class is returned."
              },
              "Why": "To provide a way to create instances of the InputParser class.",
              "How-to-use": "Simply call the constructor to create a new instance of the InputParser class.",
              "How-it-is-done": "The constructor initializes a new instance of the InputParser class without any parameters.",
              "Property": {
                "pre-conditions": "No pre-conditions are required for this constructor.",
                "post-conditions": "A new instance of the InputParser class is successfully created."
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser.dialog(android.content.Context,android.content.DialogInterface.OnClickListener,int,int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser.dialog(android.content.Context,android.content.DialogInterface.OnClickListener,int,int,java.lang.Object[])",
            "description": {
              "What": "Displays a dialog with a title, message, and dismiss button in the given context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the dialog should be displayed."
                },
                {
                  "name": "dismissListener",
                  "type": "android.content.DialogInterface.OnClickListener",
                  "description": "Listener to be invoked when the dialog is dismissed."
                },
                {
                  "name": "titleResId",
                  "type": "int",
                  "description": "Resource ID for the title of the dialog."
                },
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "Resource ID for the message of the dialog."
                },
                {
                  "name": "messageArgs",
                  "type": "java.lang.Object[]",
                  "description": "Arguments to be formatted into the message string."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to display a dialog with customizable title, message, and dismiss button.",
              "How-to-use": "Call this method with the required parameters to display a dialog with the specified title, message, and dismiss listener.",
              "How-it-is-done": "The method creates a DialogBuilder instance with the given context, sets the title and message using the provided resource IDs and arguments, adds a dismiss button with the listener, and then shows the dialog.",
              "Property": {
                "pre-conditions": [
                  "The context must not be null.",
                  "The titleResId and messageResId should be valid resource IDs."
                ],
                "post-conditions": [
                  "A dialog is displayed in the specified context with the given title, message, and dismiss button functionality."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser.error(int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser.error(int,java.lang.Object[])",
            "description": {
              "What": "This method is used to display an error message with the specified message resource ID and arguments.",
              "Parameters": [
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "The resource ID of the error message to be displayed."
                },
                {
                  "name": "messageArgs",
                  "type": "Object[]",
                  "description": "The arguments to be used in formatting the error message."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow subclasses to handle and display error messages in a customizable way.",
              "How-to-use": "Subclasses of InputParser should implement this method to define how error messages are displayed when parsing input.",
              "How-it-is-done": "Subclasses can override this method to show error messages in a dialog, log them, or handle them in any other desired way.",
              "Property": {
                "pre-conditions": "The subclass must implement this method to handle error messages.",
                "post-conditions": "After calling this method, the error message specified by messageResId and messageArgs should be displayed to the user."
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser.handleDirectTransaction(org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser.handleDirectTransaction(org.bitcoinj.core.Transaction)",
            "description": {
              "What": "Handles a direct transaction by throwing a VerificationException if needed.",
              "Parameters": [
                {
                  "name": "transaction",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction to be handled."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to handle direct transactions with the possibility of throwing a VerificationException.",
              "How-to-use": "Extend the InputParser class and implement the handleDirectTransaction method to define custom handling logic for direct transactions.",
              "How-it-is-done": "The method implementation should contain the logic to handle the provided transaction, and if any verification issues are encountered, a VerificationException should be thrown.",
              "Property": {
                "pre-conditions": "The transaction parameter must not be null.",
                "post-conditions": "If the method completes without throwing an exception, the transaction has been successfully handled."
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser.handlePaymentIntent(de.schildbach.wallet.data.PaymentIntent)": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser.handlePaymentIntent(de.schildbach.wallet.data.PaymentIntent)",
            "description": {
              "What": "Handles a payment intent by processing the payment information.",
              "Parameters": [
                {
                  "name": "paymentIntent",
                  "type": "de.schildbach.wallet.data.PaymentIntent",
                  "description": "The payment intent containing the payment information."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way to handle payment intents and process payment information within the input parser.",
              "How-to-use": "Subclasses of InputParser should implement this method to define how to handle payment intents.",
              "How-it-is-done": "The method implementation should include logic to process the payment information contained in the payment intent, such as validating the payment details and initiating the payment transaction.",
              "Property": {
                "pre-conditions": "The paymentIntent parameter must not be null.",
                "post-conditions": "After the method is executed, the payment information in the payment intent should be processed according to the logic defined in the implementation."
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser.parse()": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser.parse()",
            "description": {
              "What": "This method is used to parse input data.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow subclasses to implement their own parsing logic.",
              "How-to-use": "Subclasses of InputParser should override this method to provide custom parsing functionality.",
              "How-it-is-done": "Subclasses should implement this method to define how input data should be parsed.",
              "Property": {
                "pre-conditions": "Subclasses must override this method to provide parsing logic.",
                "post-conditions": "This method does not have any specific post-conditions."
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser.parseAndHandlePaymentRequest(byte[])": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser.parseAndHandlePaymentRequest(byte[])",
            "description": {
              "What": "Parse and handle a serialized payment request using the PaymentIntent class.",
              "Parameters": [
                {
                  "name": "serializedPaymentRequest",
                  "type": "byte[]",
                  "description": "The serialized payment request to be parsed and handled."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to parse and handle payment requests in a standardized manner.",
              "How-to-use": "Call this method with a byte array containing a serialized payment request to parse and handle it using the PaymentIntent class.",
              "How-it-is-done": "The method first parses the serialized payment request into a PaymentIntent object using the parsePaymentRequest method, then calls the handlePaymentIntent method with the parsed PaymentIntent object.",
              "Property": {
                "pre-conditions": [
                  "The serializedPaymentRequest parameter must not be null."
                ],
                "post-conditions": [
                  "The payment request is successfully parsed and handled using the PaymentIntent class."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser.parsePaymentRequest(byte[])": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser.parsePaymentRequest(byte[])",
            "description": {
              "What": "Parse a serialized payment request into a PaymentIntent object.",
              "Parameters": [
                {
                  "name": "serializedPaymentRequest",
                  "type": "byte[]",
                  "description": "The serialized payment request to be parsed."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.data.PaymentIntent",
                "description": "A PaymentIntent object representing the parsed payment request."
              },
              "Why": "To convert a serialized payment request into a structured PaymentIntent object for further processing.",
              "How-to-use": "Call parsePaymentRequest method with a byte array containing the serialized payment request as the parameter to obtain a PaymentIntent object.",
              "How-it-is-done": "The method first checks the size of the serialized payment request, then parses it using Protos.PaymentRequest. It verifies the payment request PKI, checks for expiry, network parameters, and constructs a PaymentIntent object with relevant details.",
              "Property": {
                "pre-conditions": [
                  "The serializedPaymentRequest parameter must not be null."
                ],
                "post-conditions": [
                  "A valid PaymentIntent object representing the parsed payment request is returned."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.InputParser$BinaryInputParser": {
        "qualifiedName": "de.schildbach.wallet.ui.InputParser$BinaryInputParser",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.InputParser$BinaryInputParser.de.schildbach.wallet.ui.InputParser$BinaryInputParser(java.lang.String,byte[])": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser$BinaryInputParser.de.schildbach.wallet.ui.InputParser$BinaryInputParser(java.lang.String,byte[])",
            "description": {
              "What": "Initialize a BinaryInputParser object with input type and byte array input.",
              "Parameters": [
                {
                  "name": "inputType",
                  "type": "java.lang.String",
                  "description": "The type of input being parsed."
                },
                {
                  "name": "input",
                  "type": "byte[]",
                  "description": "The byte array input to be parsed."
                }
              ],
              "Returns": {
                "type": "BinaryInputParser",
                "description": "A new instance of BinaryInputParser initialized with the provided input type and byte array."
              },
              "Why": "To allow for the creation of BinaryInputParser objects with specific input types and byte array inputs.",
              "How-to-use": "Create a new instance of BinaryInputParser by providing the input type and byte array input as parameters to the constructor.",
              "How-it-is-done": "The constructor initializes the BinaryInputParser object with the provided input type and byte array input by assigning them to the corresponding class fields.",
              "Property": {
                "pre-conditions": [
                  "The inputType parameter must not be null.",
                  "The input parameter must not be null."
                ],
                "post-conditions": [
                  "A new instance of BinaryInputParser is created with the provided input type and byte array input."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser$BinaryInputParser.handleDirectTransaction(org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser$BinaryInputParser.handleDirectTransaction(org.bitcoinj.core.Transaction)",
            "description": {
              "What": "This method throws an UnsupportedOperationException when attempting to handle a direct transaction.",
              "Parameters": [
                {
                  "name": "transaction",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction to be handled."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "The method is provided to indicate that handling direct transactions is not supported.",
              "How-to-use": "To use this method, simply call it with a transaction as the parameter, and it will throw an UnsupportedOperationException.",
              "How-it-is-done": "When this method is called with a transaction as the parameter, it simply throws an UnsupportedOperationException, indicating that handling direct transactions is not supported.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "An UnsupportedOperationException is thrown when this method is called."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser$BinaryInputParser.parse()": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser$BinaryInputParser.parse()",
            "description": {
              "What": "This method parses binary input data, handles direct transactions or payment requests, and logs errors if encountered.",
              "Parameters": [
                {
                  "name": "inputType",
                  "type": "String",
                  "description": "The type of input data (e.g., transaction or payment request)."
                },
                {
                  "name": "input",
                  "type": "byte[]",
                  "description": "The binary input data to be parsed."
                },
                "Returns"
              ]
            }
          }
        }
      },
      "de.schildbach.wallet.ui.InputParser$StreamInputParser": {
        "qualifiedName": "de.schildbach.wallet.ui.InputParser$StreamInputParser",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.InputParser$StreamInputParser.de.schildbach.wallet.ui.InputParser$StreamInputParser(java.lang.String,java.io.InputStream)": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser$StreamInputParser.de.schildbach.wallet.ui.InputParser$StreamInputParser(java.lang.String,java.io.InputStream)",
            "description": {
              "What": "Initialize a StreamInputParser object with the specified input type and input stream.",
              "Parameters": [
                {
                  "name": "inputType",
                  "type": "String",
                  "description": "The type of input."
                },
                {
                  "name": "is",
                  "type": "InputStream",
                  "description": "The input stream to be parsed."
                }
              ],
              "Returns": "StreamInputParser",
              "Why": "To provide a way to parse input from a stream in a specific format.",
              "How-to-use": "Create a new instance of StreamInputParser by passing the input type and input stream as parameters to the constructor.",
              "How-it-is-done": "The constructor initializes the inputType and is fields of the StreamInputParser object with the provided values.",
              "Property": {
                "pre-conditions": "The inputType parameter must not be null. The is parameter must not be null.",
                "post-conditions": "A new StreamInputParser object is created with the specified input type and input stream."
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser$StreamInputParser.handleDirectTransaction(org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser$StreamInputParser.handleDirectTransaction(org.bitcoinj.core.Transaction)",
            "description": {
              "What": "This method throws an UnsupportedOperationException when attempting to handle a direct transaction.",
              "Parameters": [
                {
                  "name": "transaction",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction to be handled."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "The method is provided to indicate that handling direct transactions is not supported.",
              "How-to-use": "Simply call this method with a direct transaction as the parameter to trigger the UnsupportedOperationException.",
              "How-it-is-done": "When this method is called, it simply throws an UnsupportedOperationException, indicating that the operation is not supported.",
              "Property": {
                "pre-conditions": [
                  "The transaction parameter must not be null."
                ],
                "post-conditions": [
                  "An UnsupportedOperationException is thrown."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser$StreamInputParser.parse()": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser$StreamInputParser.parse()",
            "description": {
              "What": "This method parses a payment request input stream and handles it accordingly.",
              "Parameters": [
                {
                  "name": "inputType",
                  "type": "String",
                  "description": "The type of input stream being parsed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to parse payment request input streams and handle them based on their type.",
              "How-to-use": "Call the parse() method with the inputType parameter set to the type of input stream being parsed.",
              "How-it-is-done": "The method checks if the inputType is a payment request, reads the input stream, parses the payment request, handles different exceptions, and closes the input stream.",
              "Property": {
                "pre-conditions": "The inputType parameter must not be null.",
                "post-conditions": "The payment request input stream is parsed and handled accordingly."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.InputParser$StringInputParser": {
        "qualifiedName": "de.schildbach.wallet.ui.InputParser$StringInputParser",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.InputParser$StringInputParser.de.schildbach.wallet.ui.InputParser$StringInputParser(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser$StringInputParser.de.schildbach.wallet.ui.InputParser$StringInputParser(java.lang.String)",
            "description": {
              "What": "Initialize a StringInputParser object with the given input string.",
              "Parameters": [
                {
                  "name": "input",
                  "type": "java.lang.String",
                  "description": "The input string to be parsed."
                },
                "Returns"
              ],
              "Returns": {
                "type": "StringInputParser",
                "description": "A new instance of StringInputParser initialized with the input string."
              },
              "Why": "To provide a way to parse a given input string in the context of the StringInputParser class.",
              "How-to-use": "Create a new instance of StringInputParser by passing a string input to the constructor.",
              "How-it-is-done": "The constructor initializes the input field of the StringInputParser object with the provided input string.",
              "Property": {
                "pre-conditions": "The input parameter must not be null.",
                "post-conditions": "A new instance of StringInputParser is created with the input string set."
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser$StringInputParser.handlePrivateKey(org.bitcoinj.core.VersionedChecksummedBytes)": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser$StringInputParser.handlePrivateKey(org.bitcoinj.core.VersionedChecksummedBytes)",
            "description": {
              "What": "Handles a private key by converting it to an address and creating a payment intent from that address.",
              "Parameters": [
                {
                  "name": "key",
                  "type": "org.bitcoinj.core.VersionedChecksummedBytes",
                  "description": "The private key to handle."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To convert a private key to an address and create a payment intent for further processing.",
              "How-to-use": "Call this method with a private key as the parameter to convert it to an address and create a payment intent.",
              "How-it-is-done": "The method first creates an address from the private key using the BitcoinJ library, then creates a payment intent from that address.",
              "Property": {
                "pre-conditions": [
                  "The private key must be a valid VersionedChecksummedBytes object."
                ],
                "post-conditions": [
                  "A payment intent is created from the address derived from the private key."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.InputParser$StringInputParser.parse()": {
            "qualifiedName": "de.schildbach.wallet.ui.InputParser$StringInputParser.parse()",
            "description": {
              "What": "This method parses different types of input related to Bitcoin transactions and handles them accordingly.",
              "Parameters": [
                {
                  "name": "input",
                  "type": "String",
                  "description": "The input string to be parsed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a centralized method for parsing various types of Bitcoin-related input and handling them appropriately.",
              "How-to-use": "Call the parse() method with a String input to parse different types of Bitcoin-related input such as payment requests, Bitcoin URIs, transactions, private keys, and addresses.",
              "How-it-is-done": "The method checks the input string for specific prefixes to determine the type of Bitcoin-related input, then processes it accordingly using various BitcoinJ classes and methods.",
              "Property": {
                "pre-conditions": "The input string must not be null.",
                "post-conditions": "The method will handle the input string based on its type and may log errors or exceptions if encountered during processing."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.MaybeMaintenanceFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.MaybeMaintenanceFragment.add(android.support.v4.app.FragmentManager)": {
            "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceFragment.add(android.support.v4.app.FragmentManager)",
            "description": {
              "What": "This method adds a MaybeMaintenanceFragment to the specified FragmentManager if it does not already exist.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to add the MaybeMaintenanceFragment to."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "The method is provided to ensure that only one instance of MaybeMaintenanceFragment is added to the FragmentManager.",
              "How-to-use": "Call this method with the desired FragmentManager as the parameter to add the MaybeMaintenanceFragment if it does not already exist.",
              "How-it-is-done": "The method first checks if the MaybeMaintenanceFragment already exists in the FragmentManager. If not, it creates a new instance of MaybeMaintenanceFragment and adds it to the FragmentManager using a FragmentTransaction.",
              "Property": {
                "pre-conditions": "The FragmentManager fm must not be null.",
                "post-conditions": "After calling this method, the MaybeMaintenanceFragment will be added to the FragmentManager if it did not already exist."
              }
            }
          },
          "de.schildbach.wallet.ui.MaybeMaintenanceFragment.de.schildbach.wallet.ui.MaybeMaintenanceFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceFragment.de.schildbach.wallet.ui.MaybeMaintenanceFragment()",
            "description": {
              "What": "Initialize a new instance of MaybeMaintenanceFragment.",
              "Parameters": [],
              "Returns": {
                "Type": "MaybeMaintenanceFragment",
                "Description": "A new instance of MaybeMaintenanceFragment."
              },
              "Why": "To provide a way to create a new instance of MaybeMaintenanceFragment.",
              "How-to-use": "Simply call the MaybeMaintenanceFragment() constructor to create a new instance of MaybeMaintenanceFragment.",
              "How-it-is-done": "The method initializes a new instance of MaybeMaintenanceFragment without any parameters or specific initialization logic.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of MaybeMaintenanceFragment is created."
              }
            }
          },
          "de.schildbach.wallet.ui.MaybeMaintenanceFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceFragment.onCreate(android.os.Bundle)",
            "description": {
              "method": {
                "What": "This method is responsible for creating the MaybeMaintenanceFragment and initializing its ViewModel to show a maintenance dialog if needed.",
                "Parameters": [
                  {
                    "name": "savedInstanceState",
                    "type": "android.os.Bundle",
                    "description": "The saved state of the fragment."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "The method is provided to handle the creation and initialization of the MaybeMaintenanceFragment and its ViewModel, ensuring the maintenance dialog is shown when necessary.",
                "How-to-use": "Call this method in the onCreate() method of the MaybeMaintenanceFragment to set up the ViewModel and observe changes to show the maintenance dialog.",
                "How-it-is-done": "The method first calls the super.onCreate() method, then initializes the ViewModel using ViewModelProviders.of(this).get(MaybeMaintenanceViewModel.class). It then observes changes in showDialog LiveData and shows the maintenance dialog if necessary.",
                "Property": {
                  "pre-conditions": [
                    "The MaybeMaintenanceFragment must be created and attached to an activity."
                  ],
                  "post-conditions": [
                    "The ViewModel is initialized and set up to show the maintenance dialog when needed."
                  ]
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.MaybeMaintenanceViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.MaybeMaintenanceViewModel.de.schildbach.wallet.ui.MaybeMaintenanceViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceViewModel.de.schildbach.wallet.ui.MaybeMaintenanceViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for handling maintenance recommendations and blockchain state updates.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used for initializing the ViewModel."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "Constructor method, no explicit return value."
              },
              "Why": "To provide a ViewModel for managing maintenance recommendations and blockchain state updates in the application.",
              "How-to-use": "Create an instance of MaybeMaintenanceViewModel by passing an android.app.Application context as a parameter.",
              "How-it-is-done": "The method initializes the ViewModel by setting up LiveData sources for wallet maintenance recommendations and blockchain state updates, and registers observers to trigger a dialog display when changes occur.",
              "Property": {
                "pre-conditions": "The application parameter must not be null.",
                "post-conditions": "The ViewModel is initialized with LiveData sources for wallet maintenance recommendations and blockchain state updates."
              }
            }
          },
          "de.schildbach.wallet.ui.MaybeMaintenanceViewModel.getDialogWasShown()": {
            "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceViewModel.getDialogWasShown()",
            "description": {
              "What": "This method returns the value of the dialogWasShown boolean variable.",
              "Parameters": [],
              "Returns": {
                "type": "boolean",
                "description": "The value of the dialogWasShown boolean variable."
              },
              "Why": "To provide access to the dialogWasShown variable outside the class.",
              "How-to-use": "Call this method to check if the dialog has been shown.",
              "How-it-is-done": "The method simply returns the current value of the dialogWasShown boolean variable.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.ui.MaybeMaintenanceViewModel.maybeShowDialog()": {
            "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceViewModel.maybeShowDialog()",
            "description": {
              "What": "This method checks if a dialog should be shown based on the blockchain state and maintenance recommendation.",
              "Parameters": [
                {
                  "name": "blockchainState",
                  "type": "de.schildbach.wallet.service.BlockchainState",
                  "description": "The current blockchain state."
                },
                {
                  "name": "maintenanceRecommended",
                  "type": "java.lang.Boolean",
                  "description": "Flag indicating if maintenance is recommended."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To determine if a dialog should be shown to the user based on certain conditions.",
              "How-to-use": "Call this method with the current blockchain state and maintenance recommendation values to check if a dialog should be shown to the user.",
              "How-it-is-done": "The method first retrieves the current blockchain state and maintenance recommendation values. It then checks if the blockchain is not replaying, maintenance is recommended, and the recommendation is true. If all conditions are met, it triggers the showing of a dialog.",
              "Property": {
                "pre-conditions": [
                  "The blockchainState and maintenanceRecommended parameters should not be null."
                ],
                "post-conditions": [
                  "If all conditions are met, the showDialog live data will be triggered to show a dialog to the user."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.MaybeMaintenanceViewModel.setDialogWasShown()": {
            "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceViewModel.setDialogWasShown()",
            "description": {
              "What": "Sets a flag indicating that a dialog was shown.",
              "Parameters": [
                {
                  "name": "dialogWasShown",
                  "type": "boolean",
                  "description": "A boolean flag indicating whether a dialog was shown."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To track whether a dialog has been shown to the user.",
              "How-to-use": "Call this method when a dialog is shown to the user to update the flag.",
              "How-it-is-done": "The method simply sets the 'dialogWasShown' flag to true.",
              "Property": {
                "pre-conditions": [
                  "The 'dialogWasShown' flag should be initialized before calling this method."
                ],
                "post-conditions": [
                  "The 'dialogWasShown' flag will be set to true after calling this method."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.MaybeMaintenanceViewModel$WalletMaintenanceRecommendedLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceViewModel$WalletMaintenanceRecommendedLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.MaybeMaintenanceViewModel$WalletMaintenanceRecommendedLiveData.de.schildbach.wallet.ui.MaybeMaintenanceViewModel$WalletMaintenanceRecommendedLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceViewModel$WalletMaintenanceRecommendedLiveData.de.schildbach.wallet.ui.MaybeMaintenanceViewModel$WalletMaintenanceRecommendedLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initializes a new instance of WalletMaintenanceRecommendedLiveData with the provided WalletApplication.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance to be used for the WalletMaintenanceRecommendedLiveData."
                }
              ],
              "Returns": {
                "type": "WalletMaintenanceRecommendedLiveData",
                "description": "A new instance of WalletMaintenanceRecommendedLiveData."
              },
              "Why": "To create a LiveData object that provides recommended maintenance information for the wallet.",
              "How-to-use": "Create a new instance of WalletMaintenanceRecommendedLiveData by passing a WalletApplication object as the parameter.",
              "How-it-is-done": "The constructor initializes the WalletMaintenanceRecommendedLiveData with the provided WalletApplication instance by calling the super constructor with the application parameter.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "A new instance of WalletMaintenanceRecommendedLiveData is successfully created."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.MaybeMaintenanceViewModel$WalletMaintenanceRecommendedLiveData.load()": {
            "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceViewModel$WalletMaintenanceRecommendedLiveData.load()",
            "description": {
              "What": "This method asynchronously checks if wallet maintenance is recommended and updates the LiveData accordingly.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet object to perform maintenance on."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way to check if wallet maintenance is recommended without blocking the main thread.",
              "How-to-use": "Create an instance of WalletMaintenanceRecommendedLiveData, set the wallet object using setWallet(), and observe the LiveData to get maintenance recommendation updates.",
              "How-it-is-done": "The method uses an AsyncTask to run the maintenance check in a background thread. It then posts the result to the LiveData based on the outcome of the maintenance check.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must be set before calling this method."
                ],
                "post-conditions": [
                  "The LiveData will be updated with the result of the maintenance check."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.MaybeMaintenanceViewModel$WalletMaintenanceRecommendedLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.MaybeMaintenanceViewModel$WalletMaintenanceRecommendedLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method triggers the loading process when a wallet becomes active.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that becomes active."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To initiate necessary actions when a wallet is activated.",
              "How-to-use": "Call this method when a wallet becomes active to trigger the loading process.",
              "How-it-is-done": "When a wallet becomes active, the 'load()' method is called to initiate the necessary actions for maintenance.",
              "Property": {
                "pre-conditions": "The wallet parameter must not be null.",
                "post-conditions": "The 'load()' method is triggered to perform maintenance tasks."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ProgressDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.ProgressDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.ProgressDialogFragment.de.schildbach.wallet.ui.ProgressDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.ProgressDialogFragment.de.schildbach.wallet.ui.ProgressDialogFragment()",
            "description": {
              "method": {
                "What": "Initialize a new instance of ProgressDialogFragment.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "ProgressDialogFragment",
                  "description": "A new instance of ProgressDialogFragment."
                },
                "Why": "To provide a default constructor for creating instances of ProgressDialogFragment.",
                "How-to-use": "Simply call the constructor ProgressDialogFragment() to create a new instance of ProgressDialogFragment.",
                "How-it-is-done": "The constructor initializes a new instance of ProgressDialogFragment without any parameters or additional logic.",
                "Property": {
                  "pre-conditions": "None",
                  "post-conditions": "A new instance of ProgressDialogFragment is created."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.ProgressDialogFragment.dismissProgress(android.support.v4.app.FragmentManager)": {
            "qualifiedName": "de.schildbach.wallet.ui.ProgressDialogFragment.dismissProgress(android.support.v4.app.FragmentManager)",
            "description": {
              "What": "Dismisses a progress dialog fragment using the support FragmentManager.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The support FragmentManager used to find and dismiss the progress dialog fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "Provided to allow easy dismissal of progress dialog fragments in Android applications.",
              "How-to-use": "Call this static method with the FragmentManager instance as the parameter to dismiss the progress dialog fragment.",
              "How-it-is-done": "The method finds the progress dialog fragment by tag using the FragmentManager, then dismisses it allowing state loss.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager instance (fm) should not be null."
                ],
                "post-conditions": [
                  "The progress dialog fragment is dismissed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ProgressDialogFragment.instance(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.ProgressDialogFragment.instance(java.lang.String)",
            "description": {
              "What": "Creates an instance of ProgressDialogFragment with a specified message.",
              "Parameters": [
                {
                  "name": "message",
                  "type": "java.lang.String",
                  "description": "The message to be displayed in the progress dialog."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.ProgressDialogFragment",
                "description": "An instance of ProgressDialogFragment with the specified message."
              },
              "Why": "To provide a convenient way to create instances of ProgressDialogFragment with a custom message.",
              "How-to-use": "Call the 'instance' method with the desired message as the parameter to create a new instance of ProgressDialogFragment.",
              "How-it-is-done": "The method creates a new instance of ProgressDialogFragment, sets the message in the arguments bundle, and returns the fragment.",
              "Property": {
                "pre-conditions": [
                  "The 'message' parameter must not be null."
                ],
                "post-conditions": [
                  "The returned ProgressDialogFragment instance will have the specified message set."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ProgressDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.ProgressDialogFragment.onAttach(android.content.Context)",
            "description": {
              "method": {
                "What": "Assigns the activity context to the activity field of the ProgressDialogFragment.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context to be assigned to the activity field."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To initialize the activity field of the fragment with the provided context.",
                "How-to-use": "Call this method with the context of the activity when attaching the ProgressDialogFragment to the activity.",
                "How-it-is-done": "The method first calls the superclass method to perform any necessary initialization, then assigns the context casted to an Activity to the activity field of the fragment.",
                "Property": {
                  "pre-conditions": [
                    "The context parameter must not be null."
                  ],
                  "post-conditions": [
                    "The activity field of the fragment is assigned with the provided context."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.ProgressDialogFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.ProgressDialogFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Sets the dialog to be not cancelable when the back button is pressed.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that the progress dialog cannot be dismissed by pressing the back button, providing a consistent user experience.",
              "How-to-use": "Extend the ProgressDialogFragment class and override the onCreate method to set the dialog as not cancelable.",
              "How-it-is-done": "The method calls the super class onCreate method passing the savedInstanceState, then sets the dialog to be not cancelable using the setCancelable method with a parameter of false.",
              "Property": {
                "pre-conditions": [
                  "The method should be called within a class that extends ProgressDialogFragment."
                ],
                "post-conditions": [
                  "The dialog associated with the fragment will not be cancelable by pressing the back button."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ProgressDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.ProgressDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates and returns a progress dialog with a specified message.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A progress dialog with the specified message."
              },
              "Why": "To display a progress dialog with a custom message during an operation.",
              "How-to-use": "Call onCreateDialog method passing the saved instance state as a parameter to create a progress dialog with a custom message.",
              "How-it-is-done": "The method retrieves the message from the arguments, creates a progress dialog using the activity context, and shows the dialog with the specified message.",
              "Property": {
                "pre-conditions": "The method requires the activity context to be set before calling.",
                "post-conditions": "A progress dialog with the specified message is displayed on the screen."
              }
            }
          },
          "de.schildbach.wallet.ui.ProgressDialogFragment.showProgress(android.support.v4.app.FragmentManager,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.ProgressDialogFragment.showProgress(android.support.v4.app.FragmentManager,java.lang.String)",
            "description": {
              "What": "Show a progress dialog with a specified message using the provided FragmentManager.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to show the progress dialog."
                },
                {
                  "name": "message",
                  "type": "java.lang.String",
                  "description": "The message to display in the progress dialog."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to show a progress dialog in Android applications.",
              "How-to-use": "Call this method with the FragmentManager instance and the message to display in the progress dialog to show the dialog.",
              "How-it-is-done": "The method creates an instance of ProgressDialogFragment with the provided message, then shows this fragment using the given FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The message should not be null or empty."
                ],
                "post-conditions": [
                  "A progress dialog with the specified message is displayed using the provided FragmentManager."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ReportIssueDialogBuilder": {
        "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogBuilder",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.ReportIssueDialogBuilder.collectApplicationInfo()": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogBuilder.collectApplicationInfo()",
            "description": {
              "What": "This method collects application information, but always returns null.",
              "Parameters": [],
              "Returns": {
                "Type": "java.lang.CharSequence",
                "Description": "The collected application information, which is always null in this case."
              },
              "Why": "The method is provided as a placeholder for subclasses to override and implement the actual collection of application information.",
              "How-to-use": "Subclasses should override this method to provide the actual implementation of collecting application information.",
              "How-it-is-done": "The method is declared as protected and returns null by default, allowing subclasses to override it with their own implementation.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "The method always returns null."
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogBuilder.collectContextualData()": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogBuilder.collectContextualData()",
            "description": {
              "What": "This method collects contextual data for reporting an issue.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "java.lang.CharSequence",
                "description": "A CharSequence containing the collected contextual data, or null if no data is collected."
              },
              "Why": "To provide a hook for subclasses to collect contextual data specific to their implementation when reporting an issue.",
              "How-to-use": "Subclasses can override this method to collect relevant contextual data and return it as a CharSequence.",
              "How-it-is-done": "The method is implemented to return null by default, allowing subclasses to override it and implement their own logic for collecting contextual data.",
              "Property": {
                "pre-conditions": "N/A",
                "post-conditions": "The method should return either a CharSequence containing contextual data or null."
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogBuilder.collectDeviceInfo()": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogBuilder.collectDeviceInfo()",
            "description": {
              "What": "This method returns null and does not collect any device information.",
              "Parameters": [],
              "Returns": {
                "Type": "java.lang.CharSequence",
                "Description": "Returns null as it does not collect any device information."
              },
              "Why": "The method is provided as a placeholder for subclasses to override and implement device information collection if needed.",
              "How-to-use": "Subclasses can override this method to collect device information and return it as a CharSequence.",
              "How-it-is-done": "The method is currently implemented to simply return null, indicating that no device information is collected. Subclasses can override this method to implement actual device information collection logic.",
              "Property": {
                "Pre-conditions": "None.",
                "Post-conditions": "The method always returns null."
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogBuilder.collectStackTrace()": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogBuilder.collectStackTrace()",
            "description": {
              "What": "This method returns a null value and may throw an IOException when collecting a stack trace.",
              "Parameters": [],
              "Returns": {
                "Type": "java.lang.CharSequence",
                "Description": "A null value is returned."
              },
              "Why": "The method is provided to allow subclasses to implement stack trace collection if needed.",
              "How-to-use": "Subclasses can override this method to provide custom stack trace collection functionality if required.",
              "How-it-is-done": "The method is implemented to simply return a null value, indicating that no stack trace is collected. Subclasses can override this method to implement their own stack trace collection logic.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "The method should return a null value."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogBuilder.collectWalletDump()": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogBuilder.collectWalletDump()",
            "description": {
              "What": "This method returns a null value of type CharSequence after collecting a wallet dump.",
              "Parameters": [],
              "Returns": {
                "Type": "java.lang.CharSequence",
                "Description": "A null value representing the collected wallet dump."
              },
              "Why": "The method is provided to allow subclasses to implement the functionality of collecting a wallet dump.",
              "How-to-use": "Subclasses can override this method to implement the logic for collecting a wallet dump and return the result.",
              "How-it-is-done": "The method is declared as protected and returns a null value, allowing subclasses to override it and provide their own implementation for collecting a wallet dump.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogBuilder.de.schildbach.wallet.ui.ReportIssueDialogBuilder(android.app.Activity,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogBuilder.de.schildbach.wallet.ui.ReportIssueDialogBuilder(android.app.Activity,int,int)",
            "description": {
              "What": "Constructs a dialog for reporting issues with the wallet application.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity where the dialog will be displayed."
                },
                {
                  "name": "titleResId",
                  "type": "int",
                  "description": "Resource ID for the title of the dialog."
                },
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "Resource ID for the message displayed in the dialog."
                }
              ],
              "Returns": {
                "type": "ReportIssueDialogBuilder",
                "description": "A new instance of ReportIssueDialogBuilder."
              },
              "Why": "To provide users with a convenient way to report issues and collect relevant information for debugging purposes.",
              "How-to-use": "Create an instance of ReportIssueDialogBuilder by passing the activity, title resource ID, and message resource ID, then customize the dialog further if needed.",
              "How-it-is-done": "The method inflates a layout for the dialog, sets the message text, initializes checkboxes for collecting device info, installed packages, application log, and wallet dump, sets the title, view, positive button action, and negative button action.",
              "Property": {
                "pre-conditions": "The activity must not be null.",
                "post-conditions": "A dialog for reporting issues is constructed with the specified title, message, and options for collecting additional information."
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogBuilder.onClick(android.content.DialogInterface,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogBuilder.onClick(android.content.DialogInterface,int)",
            "description": {
              "What": "This method collects various data and attachments for reporting an issue and then initiates the sending process.",
              "Parameters": [
                {
                  "name": "dialog",
                  "type": "android.content.DialogInterface",
                  "description": "The dialog that triggered the onClick event."
                },
                {
                  "name": "which",
                  "type": "int",
                  "description": "The identifier of the button that was clicked."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way for users to report issues with the application and gather necessary information for debugging purposes.",
              "How-to-use": "Call this method when a button click event occurs on the report issue dialog to collect data and attachments for issue reporting.",
              "How-it-is-done": "The method initializes variables, collects various data such as contextual data, application info, stack trace, device info, installed packages, wallet dump, and background traces, creates attachments, and then initiates the sending process.",
              "Property": {
                "pre-conditions": [
                  "The activity instance must be set before calling this method."
                ],
                "post-conditions": [
                  "The collected data and attachments are sent for further processing."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogBuilder.startSend(java.lang.String,java.lang.CharSequence,java.util.List)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogBuilder.startSend(java.lang.String,java.lang.CharSequence,java.util.List)",
            "description": {
              "What": "Starts the process of sending an email with attachments to report an issue.",
              "Parameters": [
                {
                  "name": "subject",
                  "type": "java.lang.String",
                  "description": "The subject of the email."
                },
                {
                  "name": "text",
                  "type": "java.lang.CharSequence",
                  "description": "The text content of the email."
                },
                {
                  "name": "attachments",
                  "type": "java.util.List<android.net.Uri>",
                  "description": "A list of URIs representing attachments to be included in the email."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way for users to report issues with the application via email.",
              "How-to-use": "Call this method with the subject, text, and a list of attachments to initiate the email sending process for reporting an issue.",
              "How-it-is-done": "The method creates an IntentBuilder for email sharing, adds attachments, sets email recipient, subject, text, type, and chooser title, then starts the chooser for sending the email.",
              "Property": {
                "pre-conditions": [
                  "The 'activity' field must be initialized before calling this method."
                ],
                "post-conditions": [
                  "An email intent with the specified subject, text, and attachments is started for the user to report an issue."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogBuilder.subject()": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogBuilder.subject()",
            "description": {
              "What": "This method returns the subject of the report issue dialog.",
              "Parameters": [],
              "Returns": {
                "type": "java.lang.String",
                "description": "The subject of the report issue dialog."
              },
              "Why": "To provide a way for subclasses to implement their own logic for determining the subject of the report issue dialog.",
              "How-to-use": "Subclasses of ReportIssueDialogBuilder should implement this method to return the desired subject for the report issue dialog.",
              "How-it-is-done": "Subclasses override this method to provide custom logic for determining the subject of the report issue dialog, based on their specific requirements.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": []
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ReportIssueDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.appendApplicationInfo(java.lang.Appendable,de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.appendApplicationInfo(java.lang.Appendable,de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "This method appends various application information to a given Appendable object.",
              "Parameters": [
                {
                  "name": "report",
                  "type": "java.lang.Appendable",
                  "description": "The object to which the application information will be appended."
                },
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication object containing the application information."
                }
              ],
              "Returns": "void",
              "Why": "To provide a way to gather and display detailed information about the application for debugging or issue reporting purposes.",
              "How-to-use": "Call this method with an Appendable object and a WalletApplication object to append detailed application information to the Appendable object.",
              "How-it-is-done": "The method retrieves various information such as version, package, installation details, timestamps, network parameters, wallet details, transaction details, and database information, and appends them to the provided Appendable object.",
              "Property": {
                "Pre-conditions": [
                  "The 'report' parameter must not be null.",
                  "The 'application' parameter must not be null."
                ],
                "Post-conditions": [
                  "The 'report' object will contain detailed application information appended by the method."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.appendDeviceInfo(java.lang.Appendable,android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.appendDeviceInfo(java.lang.Appendable,android.content.Context)",
            "description": {
              "What": "This method appends device information to a given Appendable object using the provided Context.",
              "Parameters": [
                {
                  "name": "report",
                  "type": "java.lang.Appendable",
                  "description": "The object to which the device information will be appended."
                },
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to retrieve device information."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to gather and report device information for debugging or issue tracking purposes.",
              "How-to-use": "Call this method with an Appendable object and a valid Context to append device information to the Appendable object.",
              "How-it-is-done": "The method retrieves various device information using the provided Context and appends it to the given Appendable object in a structured format.",
              "Property": {
                "pre-conditions": [
                  "The 'report' parameter must not be null.",
                  "The 'context' parameter must be a valid Android Context object."
                ],
                "post-conditions": [
                  "The Appendable object 'report' will contain the appended device information."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.appendDir(java.lang.Appendable,java.io.File,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.appendDir(java.lang.Appendable,java.io.File,int)",
            "description": {
              "What": "This method appends a directory structure to a given Appendable object with specified indentation level.",
              "Parameters": [
                {
                  "name": "report",
                  "type": "java.lang.Appendable",
                  "description": "The object to which the directory structure will be appended."
                },
                {
                  "name": "file",
                  "type": "java.io.File",
                  "description": "The directory to be appended."
                },
                {
                  "name": "indent",
                  "type": "int",
                  "description": "The level of indentation for the directory structure."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To recursively append the directory structure with proper indentation for reporting purposes.",
              "How-to-use": "Call this method with an Appendable object, a File representing the directory, and an integer for indentation level to append the directory structure.",
              "How-it-is-done": "The method first appends the directory name and details to the Appendable object, then recursively calls itself for each file in the directory with increased indentation level.",
              "Property": {
                "pre-conditions": [
                  "The 'report' parameter must not be null.",
                  "The 'file' parameter must represent a valid directory."
                ],
                "post-conditions": [
                  "The directory structure is appended to the 'report' object with proper indentation."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.bluetoothMac()": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.bluetoothMac()",
            "description": {
              "What": "This method retrieves the Bluetooth MAC address of the device.",
              "Parameters": [],
              "Returns": {
                "Type": "java.lang.String",
                "Description": "The Bluetooth MAC address of the device, or an error message if an exception occurs."
              },
              "Why": "To provide the Bluetooth MAC address of the device for reporting purposes.",
              "How-to-use": "Call the method bluetoothMac() to get the Bluetooth MAC address of the device or an error message if retrieval fails.",
              "How-it-is-done": "The method tries to retrieve the Bluetooth MAC address using the BluetoothAdapter.getDefaultAdapter() method and the getAddress() method from the Bluetooth utility class. If successful, it returns the MAC address; otherwise, it returns the error message from the caught exception.",
              "Property": {
                "Pre-conditions": "The device must have Bluetooth capabilities.",
                "Post-conditions": "The method will return either the Bluetooth MAC address or an error message."
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.de.schildbach.wallet.ui.ReportIssueDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.de.schildbach.wallet.ui.ReportIssueDialogFragment()",
            "description": {
              "What": "Initialize a new instance of ReportIssueDialogFragment.",
              "Parameters": [],
              "Returns": "ReportIssueDialogFragment",
              "Why": "To provide a way to create a new instance of ReportIssueDialogFragment.",
              "How-to-use": "Simply call the constructor to create a new instance of ReportIssueDialogFragment.",
              "How-it-is-done": "The constructor initializes a new instance of ReportIssueDialogFragment without any parameters.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of ReportIssueDialogFragment is created."
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.onAttach(android.content.Context)",
            "description": {
              "method": "Initialize the ReportIssueDialogFragment by setting the activity and application fields.",
              "parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the calling component."
                }
              ],
              "returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "why": "To set up the necessary activity and application references for the dialog fragment.",
              "how-to-use": "Call this method when attaching the ReportIssueDialogFragment to a context, typically in the onAttach method of a fragment.",
              "how-it-is-done": "The method first calls the superclass method to ensure proper initialization, then casts the context to AbstractWalletActivity and retrieves the WalletApplication instance from it.",
              "property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The activity and application fields of the ReportIssueDialogFragment are set to valid values."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize the viewModel with ReportIssueViewModel class using ViewModelProviders.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the ViewModel for handling data and UI-related logic in the fragment.",
              "How-to-use": "Call this method in the onCreate() method of a Fragment to initialize the ViewModel for handling data and UI logic.",
              "How-it-is-done": "The method calls the super class onCreate() method to handle any saved instance state, then uses ViewModelProviders to get an instance of ReportIssueViewModel class and assigns it to the viewModel variable.",
              "Property": {
                "pre-conditions": "The fragment must extend android.support.v4.app.Fragment.",
                "post-conditions": "The viewModel variable will be initialized with an instance of ReportIssueViewModel class."
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog for reporting issues with the application.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "The dialog for reporting issues."
              },
              "Why": "To provide users with a way to report issues and collect relevant information for debugging purposes.",
              "How-to-use": "Call onCreateDialog method passing the saved instance state to create a dialog for reporting issues.",
              "How-it-is-done": "The method retrieves arguments, builds a dialog with specific information, and sets up listeners for enabling/disabling buttons based on wallet changes.",
              "Property": {
                "pre-conditions": [
                  "The arguments must contain the necessary keys for title, message, subject, and contextual data."
                ],
                "post-conditions": [
                  "A dialog with the required information for reporting issues is created and displayed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.onDismiss(android.content.DialogInterface)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.onDismiss(android.content.DialogInterface)",
            "description": {
              "What": "Deletes the saved crash trace and calls the superclass method to dismiss the dialog.",
              "Parameters": [
                {
                  "name": "dialog",
                  "type": "android.content.DialogInterface",
                  "description": "The dialog that is being dismissed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To perform cleanup actions when the dialog is dismissed, such as deleting saved crash traces.",
              "How-to-use": "Override this method in a custom dialog fragment class to add specific actions to be performed when the dialog is dismissed.",
              "How-it-is-done": "The method first calls 'deleteSaveCrashTrace()' method from 'CrashReporter' class to delete any saved crash trace. Then, it calls the superclass method 'super.onDismiss(dialog)' to dismiss the dialog.",
              "Property": {
                "pre-conditions": [
                  "The 'CrashReporter' class must have a method 'deleteSaveCrashTrace()' available."
                ],
                "post-conditions": [
                  "Any saved crash trace is deleted.",
                  "The dialog is dismissed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.show(android.support.v4.app.FragmentManager,int,int,java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.show(android.support.v4.app.FragmentManager,int,int,java.lang.String,java.lang.String)",
            "description": {
              "What": "Show a dialog fragment for reporting an issue with the specified title, message, subject, and contextual data.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for managing the dialog fragment."
                },
                {
                  "name": "titleResId",
                  "type": "int",
                  "description": "Resource ID of the title for the dialog."
                },
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "Resource ID of the message for the dialog."
                },
                {
                  "name": "subject",
                  "type": "java.lang.String",
                  "description": "The subject of the reported issue."
                },
                {
                  "name": "contextualData",
                  "type": "java.lang.String",
                  "description": "Additional contextual data related to the reported issue."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to show a dialog for reporting issues with necessary information.",
              "How-to-use": "Call this static method with the required parameters to display the report issue dialog fragment.",
              "How-it-is-done": "Create a new instance of ReportIssueDialogFragment, set arguments with the provided data, and show the fragment using the FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The titleResId and messageResId should be valid resource IDs."
                ],
                "post-conditions": [
                  "The dialog fragment for reporting the issue is displayed with the specified title, message, subject, and contextual data."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.supportedAbisKitKat()": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.supportedAbisKitKat()",
            "description": {
              "What": "This method returns an array of supported ABIs (Application Binary Interfaces) for devices running on Android KitKat (API level 19).",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "String[]",
                "description": "An array containing the supported ABIs (CPU_ABI and CPU_ABI2) for the device."
              },
              "Why": "The method is provided to retrieve the supported ABIs for devices running on Android KitKat, which can be useful for compatibility checks or optimizations.",
              "How-to-use": "Simply call the method supportedAbisKitKat() to get the array of supported ABIs for the device running on Android KitKat.",
              "How-it-is-done": "The method uses the Build class to access the CPU_ABI and CPU_ABI2 fields, which represent the primary and secondary ABIs supported by the device. It then uses the Guava library to handle empty or null values and returns them in an array.",
              "Property": {
                "pre-conditions": "The method assumes that it is being called on a device running on Android KitKat (API level 19) or higher.",
                "post-conditions": "The method will return an array with either null values or the supported ABIs of the device."
              }
            }
          },
          "de.schildbach.wallet.ui.ReportIssueDialogFragment.supportedAbisLollipop()": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueDialogFragment.supportedAbisLollipop()",
            "description": {
              "What": "This method returns an array of supported ABIs (Application Binary Interfaces) for devices running on Android Lollipop (API level 21).",
              "Parameters": [],
              "Returns": {
                "Type": "java.lang.String[]",
                "Description": "An array of supported ABIs for devices running on Android Lollipop."
              },
              "Why": "To provide information about the supported ABIs on devices running on Android Lollipop.",
              "How-to-use": "Call the method supportedAbisLollipop() to get the array of supported ABIs for devices running on Android Lollipop.",
              "How-it-is-done": "The method uses the Build.SUPPORTED_ABIS constant provided by the Android SDK to retrieve the array of supported ABIs for the device.",
              "Property": {
                "Pre-conditions": "The method should only be called on devices running on Android Lollipop (API level 21) or higher.",
                "Post-conditions": "The method returns an array of supported ABIs for the device."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ReportIssueViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.ReportIssueViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.ReportIssueViewModel.de.schildbach.wallet.ui.ReportIssueViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.ReportIssueViewModel.de.schildbach.wallet.ui.ReportIssueViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ReportIssueViewModel with the application and create a WalletLiveData instance.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to create the ReportIssueViewModel."
                }
              ],
              "Returns": {
                "type": "ReportIssueViewModel",
                "description": "A new instance of ReportIssueViewModel initialized with the provided application."
              },
              "Why": "To set up the ViewModel with necessary dependencies and data sources for reporting issues within the application.",
              "How-to-use": "Create a new instance of ReportIssueViewModel by passing an android.app.Application as the parameter.",
              "How-it-is-done": "The method initializes the ViewModel with the application context, casts the application to WalletApplication, and creates a new WalletLiveData instance for the wallet data.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "A new ReportIssueViewModel instance is created with the application context and a WalletLiveData instance for wallet data."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.RequestCoinsActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.RequestCoinsActivity.de.schildbach.wallet.ui.RequestCoinsActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsActivity.de.schildbach.wallet.ui.RequestCoinsActivity()",
            "description": {
              "What": "Initialize a new instance of RequestCoinsActivity class.",
              "Parameters": [
                {
                  "name": "",
                  "type": "",
                  "description": ""
                }
              ],
              "Returns": {
                "type": "RequestCoinsActivity",
                "description": "A new instance of RequestCoinsActivity class."
              },
              "Why": "To provide a constructor for initializing a RequestCoinsActivity object.",
              "How-to-use": "Simply call the constructor RequestCoinsActivity() to create a new instance of RequestCoinsActivity.",
              "How-it-is-done": "The constructor initializes a new instance of RequestCoinsActivity class without any parameters.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new instance of RequestCoinsActivity class is created."
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsActivity.onAttachedToWindow()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsActivity.onAttachedToWindow()",
            "description": {
              "method": {
                "What": "Sets the activity to be shown when the device is locked.",
                "Parameters": [
                  {
                    "name": "None",
                    "type": "N/A",
                    "description": "No parameters are required for this method."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To ensure that the activity is displayed when the device is locked.",
                "How-to-use": "Simply call this method within the RequestCoinsActivity class to set the activity to be shown when the device is locked.",
                "How-it-is-done": "The method overrides the onAttachedToWindow() method and sets the activity to be shown when the device is locked by calling setShowWhenLocked(true).",
                "Property": {
                  "pre-conditions": "The method should be called within the RequestCoinsActivity class.",
                  "post-conditions": "The activity will be displayed when the device is locked."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsActivity.onCreate(android.os.Bundle)",
            "description": {
              "What": "Sets the content view of the activity to the layout 'request_coins_content'.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To initialize the activity with the specified layout.",
              "How-to-use": "Extend the RequestCoinsActivity class and override the onCreate method, passing the savedInstanceState parameter if needed.",
              "How-it-is-done": "The method calls the superclass method onCreate with the savedInstanceState parameter and then sets the content view to the layout resource 'request_coins_content'.",
              "Property": {
                "pre-conditions": [
                  "The layout 'request_coins_content' must be defined in the resources of the application."
                ],
                "post-conditions": [
                  "The content view of the activity is set to the specified layout."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsActivity.onCreateOptionsMenu(android.view.Menu)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsActivity.onCreateOptionsMenu(android.view.Menu)",
            "description": {
              "method": {
                "What": "Inflates the menu resource for the RequestCoinsActivity options menu.",
                "Parameters": [
                  {
                    "name": "menu",
                    "type": "android.view.Menu",
                    "description": "The menu in which the items are placed."
                  }
                ],
                "Returns": {
                  "type": "boolean",
                  "description": "True if the menu is displayed successfully."
                },
                "Why": "To set up the options menu for the RequestCoinsActivity.",
                "How-to-use": "Override this method in the RequestCoinsActivity class and call getMenuInflater().inflate() with the desired menu resource ID.",
                "How-it-is-done": "The method inflates the menu resource specified by R.menu.request_coins_activity_options into the provided menu object using getMenuInflater().inflate() method and returns the result of super.onCreateOptionsMenu(menu).",
                "Property": {
                  "pre-conditions": "The RequestCoinsActivity class must override onCreateOptionsMenu() method.",
                  "post-conditions": "The options menu for RequestCoinsActivity will be displayed with the items specified in the menu resource."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsActivity.onOptionsItemSelected(android.view.MenuItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsActivity.onOptionsItemSelected(android.view.MenuItem)",
            "description": {
              "What": "This method handles the selection of options in the menu of the RequestCoinsActivity, specifically showing a help dialog when the 'Help' option is selected.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "android.view.MenuItem",
                  "description": "The selected menu item that triggered the method."
                },
                "Returns"
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the selected menu item was handled, false otherwise."
              },
              "Why": "To provide users with a way to access help information related to requesting coins within the activity.",
              "How-to-use": "Override the onOptionsItemSelected method in the RequestCoinsActivity class and switch on the item.getItemId() to handle specific menu options, such as showing help.",
              "How-it-is-done": "The method checks the ID of the selected menu item and if it matches the 'Help' option, it displays a help dialog using a HelpDialogFragment with the specified help page. It then returns true to indicate that the item was handled.",
              "Property": {
                "pre-conditions": "The method should be called within a RequestCoinsActivity context with a valid android.view.MenuItem parameter.",
                "post-conditions": "The help dialog related to requesting coins is displayed if the 'Help' option is selected."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.RequestCoinsFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.RequestCoinsFragment.createNdefMessage(byte[])": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.createNdefMessage(byte[])",
            "description": {
              "What": "Creates an NdefMessage object for NFC communication with a given payment request byte array.",
              "Parameters": [
                {
                  "name": "paymentRequest",
                  "type": "byte[]",
                  "description": "The byte array representing the payment request."
                },
                "Returns"
              ],
              "Returns": {
                "type": "android.nfc.NdefMessage",
                "description": "An NdefMessage object containing the payment request as an NdefRecord."
              },
              "Why": "To facilitate NFC communication of payment requests between devices.",
              "How-to-use": "Call this method with the payment request byte array as the parameter to generate an NdefMessage for NFC communication.",
              "How-it-is-done": "The method checks if the payment request is not null, then creates an NdefMessage with a single NdefRecord containing the payment request using the PaymentProtocol.MIMETYPE_PAYMENTREQUEST MIME type.",
              "Property": {
                "pre-conditions": "The paymentRequest parameter must not be null.",
                "post-conditions": "The method returns an NdefMessage object with the payment request as an NdefRecord, or null if the payment request is null."
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.de.schildbach.wallet.ui.RequestCoinsFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.de.schildbach.wallet.ui.RequestCoinsFragment()",
            "description": {
              "method": {
                "What": "Initialize a new instance of RequestCoinsFragment.",
                "Parameters": [
                  {
                    "name": "None",
                    "type": "None",
                    "description": "No parameters are required for this constructor."
                  }
                ],
                "Returns": {
                  "type": "RequestCoinsFragment",
                  "description": "A new instance of RequestCoinsFragment is returned."
                },
                "Why": "To provide a way to create a new instance of RequestCoinsFragment for use in the application.",
                "How-to-use": "Simply call the constructor RequestCoinsFragment() to create a new instance of the RequestCoinsFragment class.",
                "How-it-is-done": "The constructor initializes a new instance of RequestCoinsFragment without any parameters or additional setup.",
                "Property": {
                  "pre-conditions": "No specific pre-conditions are required before calling this constructor.",
                  "post-conditions": "After calling this constructor, a new instance of RequestCoinsFragment is created and ready for use."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.handleCopy()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.handleCopy()",
            "description": {
              "What": "Copy the Bitcoin payment request URI to the clipboard and display a toast message.",
              "Parameters": [
                {
                  "request": "android.net.Uri",
                  "description": "The Bitcoin payment request URI to be copied to the clipboard."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide users with an easy way to copy the payment request URI and notify them of the action.",
              "How-to-use": "Call this method when the user wants to copy the Bitcoin payment request URI to the clipboard, typically triggered by a user action like a button click.",
              "How-it-is-done": "The method sets the Bitcoin payment request URI as the primary clip in the clipboard manager, logs the action, and displays a toast message to notify the user.",
              "Property": {
                "pre-conditions": "The viewModel.bitcoinUri must contain a valid Bitcoin payment request URI.",
                "post-conditions": "The Bitcoin payment request URI is copied to the clipboard, and a toast message is displayed to notify the user."
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.handleLocalApp()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.handleLocalApp()",
            "description": {
              "What": "Handles the opening of a local app to send coins using a Bitcoin URI.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity context in which the method is called."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to send coins using a local app that supports Bitcoin URIs.",
              "How-to-use": "Call this method passing the activity context as a parameter to handle the opening of a local app for sending coins.",
              "How-it-is-done": "The method disables the component, starts the intent to open the local app with the Bitcoin URI, catches any ActivityNotFoundException, shows a toast message if the local app is not found, enables the component back, and finishes the activity.",
              "Property": {
                "pre-conditions": [
                  "The activity context must be valid and not null.",
                  "The viewModel.bitcoinUri must contain a valid Bitcoin URI."
                ],
                "post-conditions": [
                  "The local app for sending coins is opened if available.",
                  "A toast message is shown if the local app is not found.",
                  "The activity is finished after handling the local app."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.handleShare()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.handleShare()",
            "description": {
              "What": "Handles sharing the payment request via intent.",
              "Parameters": [
                {
                  "name": "request",
                  "type": "android.net.Uri",
                  "description": "The payment request URI to be shared."
                },
                {
                  "name": "builder",
                  "type": "android.support.v4.app.ShareCompat.IntentBuilder",
                  "description": "Builder for creating the share intent."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to easily share the payment request URI with others.",
              "How-to-use": "Call this method to share the payment request URI via intent. Ensure that the viewModel has the bitcoinUri value set before calling this method.",
              "How-it-is-done": "The method retrieves the payment request URI from the viewModel, creates a ShareCompat IntentBuilder with the activity, sets the type to 'text/plain', sets the text to the payment request URI, sets the chooser title, and starts the chooser. Finally, it logs the shared payment request URI.",
              "Property": {
                "pre-conditions": [
                  "The viewModel must have the bitcoinUri value set before calling this method."
                ],
                "post-conditions": [
                  "The payment request URI is shared via intent."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.maybeStartBluetoothListening()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.maybeStartBluetoothListening()",
            "description": {
              "What": "Starts Bluetooth listening service if Bluetooth address is available and user has checked acceptBluetoothPaymentView.",
              "Parameters": [
                {
                  "name": "bluetoothAdapter",
                  "type": "java.lang.Object",
                  "description": "The Bluetooth adapter object."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if Bluetooth service is started, false otherwise."
              },
              "Why": "To initiate Bluetooth listening for payment requests when Bluetooth address is available and user has opted for Bluetooth payments.",
              "How-to-use": "Call maybeStartBluetoothListening() with the Bluetooth adapter object as the parameter to start the Bluetooth service for payment requests.",
              "How-it-is-done": "Checks if Bluetooth address is available and user has checked acceptBluetoothPaymentView, then sets up the Bluetooth service intent, starts the service, compresses the Bluetooth address, and returns true. Otherwise, returns false.",
              "Property": {
                "pre-conditions": [
                  "The Bluetooth adapter object must be valid."
                ],
                "post-conditions": [
                  "The Bluetooth service may be started if Bluetooth address is available and user has checked acceptBluetoothPaymentView."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onActivityResult(int,int,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onActivityResult(int,int,android.content.Intent)",
            "description": {
              "What": "Handles the result of enabling Bluetooth and updates the UI accordingly.",
              "Parameters": [
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code passed to startActivityForResult."
                },
                {
                  "name": "resultCode",
                  "type": "int",
                  "description": "The result code returned by the child activity."
                },
                {
                  "name": "data",
                  "type": "Intent",
                  "description": "The data returned by the child activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the result of enabling Bluetooth and update the UI based on the result.",
              "How-to-use": "Call this method when receiving the result of enabling Bluetooth in the parent activity's onActivityResult method.",
              "How-it-is-done": "Checks if the requestCode matches the REQUEST_CODE_ENABLE_BLUETOOTH, then checks if the result is RESULT_OK and the Bluetooth adapter is not null. It then calls maybeStartBluetoothListening and updates the UI based on the result.",
              "Property": {
                "pre-conditions": [
                  "The requestCode should match REQUEST_CODE_ENABLE_BLUETOOTH."
                ],
                "post-conditions": [
                  "The UI is updated based on the result of enabling Bluetooth."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Initialize various variables and adapters related to the wallet application in the RequestCoinsFragment class.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the activity where the fragment is attached."
                }
              ],
              "Returns": "void",
              "Why": "To set up necessary variables and adapters for the RequestCoinsFragment to interact with the wallet application and system services.",
              "How-to-use": "Call this method when the RequestCoinsFragment is attached to an activity to initialize required variables and adapters for wallet functionality.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then assigns the activity, application, configuration, clipboardManager, bluetoothAdapter, and nfcAdapter based on the context provided.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "The activity, application, configuration, clipboardManager, bluetoothAdapter, and nfcAdapter variables are initialized with appropriate values."
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize the RequestCoinsFragment by setting up options menu, view model, observers for receive address, QR code, payment request, bitcoin URI, and exchange rate, and restoring instance state if available.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the fragment with necessary components and data for requesting coins.",
              "How-to-use": "Call this method in the onCreate() method of the RequestCoinsFragment class passing the savedInstanceState parameter.",
              "How-it-is-done": "The method sets up options menu, initializes the view model, observes changes in receive address, QR code, payment request, bitcoin URI, and exchange rate, and restores instance state if available.",
              "Property": {
                "pre-conditions": [
                  "The fragment must be created and attached to an activity."
                ],
                "post-conditions": [
                  "The fragment is initialized with necessary components and data for requesting coins."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)",
            "description": {
              "method": {
                "What": "Inflates the menu resource for the RequestCoinsFragment options menu.",
                "Parameters": [
                  {
                    "name": "menu",
                    "type": "android.view.Menu",
                    "description": "The menu in which the options menu items are placed."
                  },
                  {
                    "name": "inflater",
                    "type": "android.view.MenuInflater",
                    "description": "The MenuInflater to inflate the menu resource."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To set up the options menu for the RequestCoinsFragment.",
                "How-to-use": "Override this method in the RequestCoinsFragment class and call super.onCreateOptionsMenu(menu, inflater) to inflate the menu resource.",
                "How-it-is-done": "The method inflates the menu resource 'R.menu.request_coins_fragment_options' using the provided MenuInflater and adds the menu items to the specified menu.",
                "Property": {
                  "pre-conditions": "The RequestCoinsFragment class must be extended to override this method.",
                  "post-conditions": "The options menu for the RequestCoinsFragment will be inflated with the specified menu items."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "What": "This method inflates the layout for the RequestCoinsFragment, initializes various views and sets up Bluetooth payment functionality.",
              "Parameters": [
                {
                  "name": "inflater",
                  "type": "android.view.LayoutInflater",
                  "description": "The LayoutInflater object that can be used to inflate any views in the fragment."
                },
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view that the fragment's UI should be attached to."
                },
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment, if available."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The inflated view for the RequestCoinsFragment."
              },
              "Why": "To set up the UI and functionality for requesting coins in the wallet application.",
              "How-to-use": "Call this method when creating the RequestCoinsFragment to initialize the UI components and Bluetooth payment functionality.",
              "How-it-is-done": "The method inflates the layout, initializes views for amount input, sets up Bluetooth payment checkbox, and handles Bluetooth enable/disable actions.",
              "Property": {
                "pre-conditions": [
                  "The layout file 'request_coins_fragment.xml' must be available in the resources.",
                  "The BluetoothAdapter instance must be set in the fragment before calling this method."
                ],
                "post-conditions": [
                  "The RequestCoinsFragment will have its UI set up with amount input views and Bluetooth payment functionality."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onDestroyView()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onDestroyView()",
            "description": {
              "What": "Sets the last exchange direction in the configuration when the view is destroyed.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To save the last exchange direction in the configuration when the view is destroyed to maintain state.",
              "How-to-use": "Simply call onDestroyView() method on an instance of RequestCoinsFragment to set the last exchange direction in the configuration.",
              "How-it-is-done": "The method calls the setLastExchangeDirection() method on the config object, passing the exchange direction obtained from the amountCalculatorLink.",
              "Property": {
                "pre-conditions": [
                  "The config object must be initialized before calling this method.",
                  "The amountCalculatorLink must be set with a valid exchange direction."
                ],
                "post-conditions": [
                  "The last exchange direction in the configuration is updated."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onOptionsItemSelected(android.view.MenuItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onOptionsItemSelected(android.view.MenuItem)",
            "description": {
              "What": "Handles options menu item selection in the RequestCoinsFragment class.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "android.view.MenuItem",
                  "description": "The selected menu item."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the item selection was handled, false otherwise."
              },
              "Why": "To provide functionality for handling different options menu item selections in the RequestCoinsFragment.",
              "How-to-use": "Override the onOptionsItemSelected method in the RequestCoinsFragment class and implement the desired functionality for each menu item case.",
              "How-it-is-done": "The method checks the ID of the selected menu item and calls the corresponding handler method (handleCopy, handleShare, handleLocalApp) before returning true. If the ID does not match any known cases, it calls the super class's onOptionsItemSelected method.",
              "Property": {
                "pre-conditions": "The RequestCoinsFragment class must be properly set up and initialized.",
                "post-conditions": "The selected menu item action is handled appropriately based on the ID."
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onPause()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onPause()",
            "description": {
              "method": {
                "What": "This method disassociates the listener from the amount calculator link when the fragment is paused.",
                "Parameters": [
                  {
                    "name": "N/A",
                    "type": "N/A",
                    "description": "No parameters are passed to this method."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To prevent memory leaks and ensure proper cleanup when the fragment is paused.",
                "How-to-use": "Simply call this method within the onPause() lifecycle method of the fragment to detach the listener from the amount calculator link.",
                "How-it-is-done": "The method calls the setListener() method on the amountCalculatorLink object with a null parameter to detach the listener, then calls the super.onPause() method to handle any additional cleanup.",
                "Property": {
                  "pre-conditions": "The amountCalculatorLink object must be initialized and have a valid listener attached before calling this method.",
                  "post-conditions": "After calling this method, the listener will be detached from the amount calculator link, preventing any further updates or callbacks."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onPrepareOptionsMenu(android.view.Menu)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onPrepareOptionsMenu(android.view.Menu)",
            "description": {
              "What": "This method prepares the options menu by enabling or disabling menu items based on the presence of a Bitcoin URI.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu to be prepared."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return anything."
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onResume()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onResume()",
            "description": {
              "What": "This method sets a listener for the amount calculator and checks if Bluetooth is enabled to start Bluetooth listening if needed.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the amount value based on user input and handle Bluetooth functionality if enabled.",
              "How-to-use": "Simply call onResume() on an instance of RequestCoinsFragment to set the listener for the amount calculator and check Bluetooth status.",
              "How-it-is-done": "The method sets a listener for the amount calculator to update the amount value in the view model when changed. It also checks if Bluetooth is enabled and the acceptBluetoothPaymentView is checked to potentially start Bluetooth listening.",
              "Property": {
                "pre-conditions": [
                  "The amountCalculatorLink and acceptBluetoothPaymentView must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The listener for the amount calculator is set to update the amount value in the view model.",
                  "Bluetooth listening may be started if Bluetooth is enabled and acceptBluetoothPaymentView is checked."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onSaveInstanceState(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onSaveInstanceState(android.os.Bundle)",
            "description": {
              "method": {
                "What": "Save the instance state of the fragment by calling the saveInstanceState method.",
                "Parameters": [
                  {
                    "name": "outState",
                    "type": "android.os.Bundle",
                    "description": "The Bundle object to save the instance state."
                  },
                  "Returns"
                ]
              },
              "type": "void",
              "description": "This method does not return anything."
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.onViewCreated(android.view.View,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.onViewCreated(android.view.View,android.os.Bundle)",
            "description": {
              "method": {
                "What": "Sets the exchange direction and requests focus for the amount calculator link in the RequestCoinsFragment view.",
                "Parameters": [
                  {
                    "name": "view",
                    "type": "android.view.View",
                    "description": "The view to be created."
                  },
                  {
                    "name": "savedInstanceState",
                    "type": "android.os.Bundle",
                    "description": "The saved instance state of the fragment."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To initialize the exchange direction and set focus on the amount calculator link for user interaction.",
                "How-to-use": "Call this method after the fragment view is created to set the exchange direction and focus on the amount calculator link.",
                "How-it-is-done": "The method calls the super.onViewCreated() method to perform any necessary initialization, then sets the exchange direction using the last saved configuration and requests focus for the amount calculator link.",
                "Property": {
                  "pre-conditions": "The fragment view must be created before calling this method.",
                  "post-conditions": "The exchange direction is set and the amount calculator link has focus for user input."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.restoreInstanceState(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.restoreInstanceState(android.os.Bundle)",
            "description": {
              "What": "Restore the receive address from the saved instance state bundle.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state bundle containing the receive address."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To restore the receive address when the fragment is recreated, ensuring data persistence.",
              "How-to-use": "Call this method passing the saved instance state bundle as a parameter when restoring the fragment's state.",
              "How-it-is-done": "Check if the saved instance state contains the receive address key, then set the receive address in the view model using the saved address from the bundle.",
              "Property": {
                "Pre-conditions": "The saved instance state bundle must not be null.",
                "Post-conditions": "The receive address in the view model will be updated with the saved address from the bundle if it exists."
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.saveInstanceState(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.saveInstanceState(android.os.Bundle)",
            "description": {
              "What": "This method saves the receive address in the bundle for state persistence.",
              "Parameters": [
                {
                  "name": "outState",
                  "type": "android.os.Bundle",
                  "description": "The bundle to save the receive address."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To store the receive address for state persistence and retrieval when needed.",
              "How-to-use": "Call this method with the bundle where the receive address should be saved as the parameter.",
              "How-it-is-done": "The method retrieves the receive address from the view model, converts it to a string, and saves it in the bundle using a specific key.",
              "Property": {
                "pre-conditions": [
                  "The view model must have a valid fresh receive address."
                ],
                "post-conditions": [
                  "The receive address is saved in the bundle with the appropriate key for state persistence."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsFragment.stopBluetoothListening()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsFragment.stopBluetoothListening()",
            "description": {
              "What": "Stop listening for Bluetooth connections and reset Bluetooth related values in the view model.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To stop Bluetooth listening and reset Bluetooth values when needed.",
              "How-to-use": "Call this method when you want to stop listening for Bluetooth connections and reset Bluetooth related values in the view model.",
              "How-it-is-done": "If the Bluetooth service intent is not null in the view model, the method stops the service using the intent, sets the intent to null, and resets the Bluetooth MAC address value in the view model.",
              "Property": {
                "pre-conditions": [
                  "The view model must have a valid Bluetooth service intent."
                ],
                "post-conditions": [
                  "The Bluetooth service is stopped if it was running.",
                  "The Bluetooth service intent in the view model is set to null.",
                  "The Bluetooth MAC address value in the view model is reset to null."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.RequestCoinsViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.RequestCoinsViewModel.de.schildbach.wallet.ui.RequestCoinsViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsViewModel.de.schildbach.wallet.ui.RequestCoinsViewModel(android.app.Application)",
            "description": {
              "What": "This method initializes a ViewModel for requesting coins with live data sources for generating QR codes, payment requests, and Bitcoin URIs.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to initialize the ViewModel."
                }
              ],
              "Returns": {
                "type": "RequestCoinsViewModel",
                "description": "A ViewModel instance for requesting coins with live data sources."
              },
              "Why": "To provide a ViewModel that dynamically updates QR codes, payment requests, and Bitcoin URIs based on changes in receive address, label, amount, and Bluetooth MAC address.",
              "How-to-use": "Create an instance of RequestCoinsViewModel by passing an android.app.Application context, observe the live data sources for QR codes, payment requests, and Bitcoin URIs, and handle onChanged events to update the UI.",
              "How-it-is-done": "The method initializes live data sources for receive address, label, amount, and Bluetooth MAC address, adds observers to these sources to trigger generation of QR codes, payment requests, and Bitcoin URIs on changes, and sets up the ViewModel for dynamic updates.",
              "Property": {
                "pre-conditions": "The application parameter must not be null.",
                "post-conditions": "The ViewModel is set up with live data sources for generating QR codes, payment requests, and Bitcoin URIs based on changes in receive address, label, amount, and Bluetooth MAC address."
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsViewModel.maybeGenerateBitcoinUri()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsViewModel.maybeGenerateBitcoinUri()",
            "description": {
              "What": "Generates a Bitcoin URI based on the provided address, amount, and name.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to include in the URI."
                },
                {
                  "name": "amount",
                  "type": "double",
                  "description": "The amount of Bitcoin to include in the URI."
                },
                {
                  "name": "ownName",
                  "type": "String",
                  "description": "The name to include in the URI."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To generate a Bitcoin URI for requesting coins, which can be used for transactions or payments.",
              "How-to-use": "Call this method after setting the 'freshReceiveAddress', 'amount', and 'ownName' values, then observe the 'bitcoinUri' LiveData to get the generated Bitcoin URI.",
              "How-it-is-done": "The method checks if the 'freshReceiveAddress' is not null, then constructs a Bitcoin URI using the provided address, amount, and name, and sets it to the 'bitcoinUri' LiveData.",
              "Property": {
                "pre-conditions": "The 'freshReceiveAddress', 'amount', and 'ownName' values must be set before calling this method.",
                "post-conditions": "The 'bitcoinUri' LiveData will contain the generated Bitcoin URI based on the provided parameters."
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsViewModel.maybeGeneratePaymentRequest()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsViewModel.maybeGeneratePaymentRequest()",
            "description": {
              "What": "Generates a payment request using the provided address and optional Bluetooth MAC address.",
              "Parameters": [
                {
                  "name": "freshReceiveAddress",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The fresh receive address to use for the payment request."
                },
                {
                  "name": "bluetoothMac",
                  "type": "java.lang.String",
                  "description": "The Bluetooth MAC address to include in the payment URL, can be null."
                },
                {
                  "name": "amount",
                  "type": "unknown",
                  "description": "The amount for the payment request."
                },
                {
                  "name": "ownName",
                  "type": "unknown",
                  "description": "The name associated with the payment request."
                },
                {
                  "name": "paymentUrl",
                  "type": "java.lang.String",
                  "description": "The payment URL to include in the payment request, generated based on the Bluetooth MAC address."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To generate a payment request for a specified address and optional Bluetooth MAC address.",
              "How-to-use": "Call this method with the required parameters, such as freshReceiveAddress and amount, to generate a payment request with an optional Bluetooth MAC address.",
              "How-it-is-done": "The method checks if the freshReceiveAddress is not null, then constructs a payment URL based on the Bluetooth MAC address if provided. It then uses PaymentProtocol to create a payment request with the specified parameters and sets the generated payment request as the value.",
              "Property": {
                "pre-conditions": [
                  "The freshReceiveAddress must not be null."
                ],
                "post-conditions": [
                  "The paymentRequest LiveData will be updated with the generated payment request byte array."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsViewModel.maybeGenerateQrCode()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsViewModel.maybeGenerateQrCode()",
            "description": {
              "What": "Generates a QR code based on the fresh receive address, amount, own name, and Bluetooth MAC address.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The fresh receive address to generate the QR code for."
                },
                {
                  "name": "amount",
                  "type": "unknown",
                  "description": "The amount associated with the transaction."
                },
                {
                  "name": "ownName",
                  "type": "unknown",
                  "description": "The name of the owner of the wallet."
                },
                {
                  "name": "bluetoothMac",
                  "type": "unknown",
                  "description": "The Bluetooth MAC address for additional information in the QR code."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "Does not return anything."
              },
              "Why": "To dynamically generate a QR code for a specific transaction to be displayed in the UI.",
              "How-to-use": "Call maybeGenerateQrCode() when a fresh receive address is available, along with the amount, own name, and Bluetooth MAC address.",
              "How-it-is-done": "The method checks if the fresh receive address is not null, then asynchronously generates a QR code bitmap using the provided parameters.",
              "Property": {
                "pre-conditions": [
                  "The fresh receive address must not be null."
                ],
                "post-conditions": [
                  "A QR code bitmap is posted to the LiveData object qrCode."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsViewModel.uri(org.bitcoinj.core.Address,org.bitcoinj.core.Coin,java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsViewModel.uri(org.bitcoinj.core.Address,org.bitcoinj.core.Coin,java.lang.String,java.lang.String)",
            "description": {
              "What": "This method generates a Bitcoin URI with optional Bluetooth MAC address parameter.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to send coins to."
                },
                {
                  "name": "amount",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The amount of coins to send."
                },
                {
                  "name": "label",
                  "type": "java.lang.String",
                  "description": "A label for the transaction."
                },
                {
                  "name": "bluetoothMac",
                  "type": "java.lang.String",
                  "description": "Optional Bluetooth MAC address for communication."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The generated Bitcoin URI with optional Bluetooth MAC address parameter."
              },
              "Why": "To generate a Bitcoin URI for requesting coins with an optional Bluetooth MAC address parameter for communication.",
              "How-to-use": "Call the method with the Bitcoin address, amount, label, and optional Bluetooth MAC address to get the generated Bitcoin URI.",
              "How-it-is-done": "The method constructs a Bitcoin URI using the provided address, amount, and label. If a Bluetooth MAC address is provided, it appends it to the URI as a parameter.",
              "Property": {
                "pre-conditions": "The address parameter must not be null.",
                "post-conditions": "The returned Bitcoin URI will include the address, amount, label, and optional Bluetooth MAC address parameter."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData.de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData.de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a LiveData object for observing fresh receive addresses in the wallet application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The wallet application instance to be used."
                }
              ],
              "Returns": {
                "type": "FreshReceiveAddressLiveData",
                "description": "A LiveData object for observing fresh receive addresses."
              },
              "Why": "To provide a way to observe changes in fresh receive addresses within the wallet application.",
              "How-to-use": "Create an instance of FreshReceiveAddressLiveData by passing a WalletApplication instance as a parameter, then observe changes in fresh receive addresses using LiveData observers.",
              "How-it-is-done": "The constructor initializes the LiveData object with the provided WalletApplication instance, allowing it to observe changes in fresh receive addresses within the application.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "A FreshReceiveAddressLiveData object is successfully created for observing fresh receive addresses."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData.maybeLoad()": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData.maybeLoad()",
            "description": {
              "What": "This method checks if the current value is null and if so, it asynchronously fetches a fresh receive address from the wallet and updates the LiveData with the new value.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which to fetch the fresh receive address."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "The method is provided to lazily load a fresh receive address only when needed to improve performance and efficiency.",
              "How-to-use": "To use this method, create an instance of FreshReceiveAddressLiveData, set the wallet, and observe the LiveData to get the fresh receive address when it is loaded.",
              "How-it-is-done": "The method first checks if the current value is null. If it is, it asynchronously runs a task that fetches a fresh receive address from the wallet and updates the LiveData with the new value using postValue(). The Context is set to propagate the necessary context for the operation.",
              "Property": {
                "pre-conditions": "The LiveData instance must be initialized with a valid wallet object before calling this method.",
                "post-conditions": "The LiveData will be updated with a fresh receive address from the wallet if the current value is null."
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method triggers the loading of fresh receive addresses when the wallet becomes active.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that has become active."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To automatically load fresh receive addresses when the wallet is active without manual intervention.",
              "How-to-use": "Ensure that an instance of FreshReceiveAddressLiveData is created and observe changes in the wallet's activity to trigger the loading of fresh receive addresses.",
              "How-it-is-done": "When the wallet becomes active, the method calls maybeLoad() to initiate the loading of fresh receive addresses.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "The loading of fresh receive addresses may be triggered based on the wallet's activity."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData.setValue(org.bitcoinj.core.Address)": {
            "qualifiedName": "de.schildbach.wallet.ui.RequestCoinsViewModel$FreshReceiveAddressLiveData.setValue(org.bitcoinj.core.Address)",
            "description": {
              "What": "This method sets the value of the FreshReceiveAddressLiveData to the provided Bitcoin address.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to set as the value of the FreshReceiveAddressLiveData."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the LiveData with a new Bitcoin address for receiving coins.",
              "How-to-use": "Create an instance of FreshReceiveAddressLiveData, call setValue() method with the desired Bitcoin address as the parameter.",
              "How-it-is-done": "The method simply calls the super class's setValue() method with the provided Bitcoin address as the argument, updating the value of the LiveData.",
              "Property": {
                "pre-conditions": [
                  "The address parameter must not be null."
                ],
                "post-conditions": [
                  "The value of FreshReceiveAddressLiveData is updated to the provided Bitcoin address."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.SendCoinsQrActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.SendCoinsQrActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.SendCoinsQrActivity.de.schildbach.wallet.ui.SendCoinsQrActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.SendCoinsQrActivity.de.schildbach.wallet.ui.SendCoinsQrActivity()",
            "description": {
              "What": "Initialize a new instance of SendCoinsQrActivity class.",
              "Parameters": [
                {
                  "name": "",
                  "type": "",
                  "description": ""
                }
              ],
              "Returns": {
                "type": "SendCoinsQrActivity",
                "description": "A new instance of SendCoinsQrActivity class."
              },
              "Why": "To provide a constructor for initializing a new instance of SendCoinsQrActivity class.",
              "How-to-use": "Simply call the constructor to create a new instance of SendCoinsQrActivity class.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of SendCoinsQrActivity class.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new instance of SendCoinsQrActivity class is created."
              }
            }
          },
          "de.schildbach.wallet.ui.SendCoinsQrActivity.onActivityResult(int,int,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendCoinsQrActivity.onActivityResult(int,int,android.content.Intent)",
            "description": {
              "What": "This method handles the result of scanning a QR code for sending coins in a Bitcoin wallet application.",
              "Parameters": [
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code used to identify the type of request."
                },
                {
                  "name": "resultCode",
                  "type": "int",
                  "description": "The result code indicating the success or failure of the operation."
                },
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent containing the result data from the scanning operation."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the scanned data from a QR code and initiate the process of sending coins or sweeping a wallet.",
              "How-to-use": "Call this method with the appropriate parameters when receiving the result of a QR code scan operation in the SendCoinsQrActivity.",
              "How-it-is-done": "The method checks if the scan operation was successful, parses the scanned input, and based on the type of input (payment intent, private key, or direct transaction), it initiates the corresponding action such as sending coins, sweeping the wallet, or processing a direct transaction.",
              "Property": {
                "pre-conditions": [
                  "The requestCode must match the REQUEST_CODE_SCAN of SendCoinsQrActivity.",
                  "The resultCode must indicate success (RESULT_OK)."
                ],
                "post-conditions": [
                  "The appropriate action (sending coins, sweeping wallet, or processing direct transaction) is initiated based on the scanned input.",
                  "The SendCoinsQrActivity is finished after processing the result."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendCoinsQrActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendCoinsQrActivity.onCreate(android.os.Bundle)",
            "description": {
              "method": {
                "What": "Starts the ScanActivity for result when the activity is created.",
                "Parameters": [
                  {
                    "name": "savedInstanceState",
                    "type": "android.os.Bundle",
                    "description": "The saved instance state of the activity."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To initiate the scanning process for QR codes when the SendCoinsQrActivity is created.",
                "How-to-use": "Extend SendCoinsQrActivity and override the onCreate method, passing the saved instance state as a parameter.",
                "How-it-is-done": "Calls the super class onCreate method with the saved instance state. If the saved instance state is null, it starts the ScanActivity for result with the specified request code.",
                "Property": {
                  "pre-conditions": [
                    "The class de.schildbach.wallet.ui.SendCoinsQrActivity must be extended and this method must be overridden."
                  ],
                  "post-conditions": [
                    "The ScanActivity will be started for result if the saved instance state is null."
                  ]
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.SendingAddressesFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.SendingAddressesFragment.de.schildbach.wallet.ui.SendingAddressesFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.de.schildbach.wallet.ui.SendingAddressesFragment()",
            "description": {
              "What": "This method is a constructor for the SendingAddressesFragment class.",
              "Parameters": [],
              "Returns": "SendingAddressesFragment",
              "Why": "To initialize an instance of the SendingAddressesFragment class.",
              "How-to-use": "To create a new SendingAddressesFragment object, simply call the constructor SendingAddressesFragment().",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the SendingAddressesFragment class.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of SendingAddressesFragment is created."
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.getAddressFromPrimaryClip()": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.getAddressFromPrimaryClip()",
            "description": {
              "What": "This method retrieves an address from the primary clipboard content.",
              "Parameters": [
                {
                  "name": "clip",
                  "type": "android.content.ClipData",
                  "description": "The primary clipboard content."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.core.Address",
                "description": "The Bitcoin address extracted from the clipboard content."
              },
              "Why": "To allow users to easily paste Bitcoin addresses for sending transactions.",
              "How-to-use": "Call getAddressFromPrimaryClip() with the primary clipboard content as the 'clip' parameter to extract a Bitcoin address.",
              "How-it-is-done": "The method checks the MIME type of the clipboard content and extracts the Bitcoin address accordingly using BitcoinJ library.",
              "Property": {
                "pre-conditions": "The 'clip' parameter must not be null.",
                "post-conditions": "The method returns a valid Bitcoin address if found in the clipboard content, otherwise null."
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.handleCopyToClipboard(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.handleCopyToClipboard(java.lang.String)",
            "description": {
              "What": "Copy the given Bitcoin address to the clipboard and display a toast message.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The Bitcoin address to be copied to the clipboard."
                }
              ],
              "Returns": "void",
              "Why": "To provide a convenient way for users to copy Bitcoin addresses to the clipboard for easy sharing or pasting.",
              "How-to-use": "Call this method with the Bitcoin address as the parameter to copy it to the clipboard and display a toast message confirming the action.",
              "How-it-is-done": "The method sets the clip data with the Bitcoin address, logs the action, and displays a toast message using the activity context.",
              "Property": {
                "pre-conditions": [
                  "The 'address' parameter must not be null."
                ],
                "post-conditions": [
                  "The Bitcoin address is copied to the clipboard with the specified label.",
                  "A toast message is displayed to notify the user about the successful copy operation."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.handlePasteClipboard()": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.handlePasteClipboard()",
            "description": {
              "What": "Handles pasting an address from the clipboard and performs actions based on the address validity and ownership.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet instance."
                },
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The address obtained from the clipboard."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a functionality for pasting addresses from the clipboard and taking appropriate actions based on the address validity and ownership.",
              "How-to-use": "Call this method to handle pasting an address from the clipboard within the SendingAddressesFragment class.",
              "How-it-is-done": "The method first obtains the wallet instance and the address from the clipboard. It then checks if the address is valid and owned by the wallet, displaying appropriate dialogs based on the conditions.",
              "Property": {
                "pre-conditions": [
                  "The viewModel must contain a non-null wallet instance."
                ],
                "post-conditions": [
                  "Dialogs are displayed based on the validity and ownership of the pasted address."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.handleRemove(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.handleRemove(java.lang.String)",
            "description": {
              "What": "This method deletes a specified address from the address book.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The address to be removed from the address book."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow users to remove unwanted addresses from their address book.",
              "How-to-use": "Call this method with the address that needs to be removed from the address book as the parameter.",
              "How-it-is-done": "The method calls the 'delete' method of the 'addressBookDao' object, passing the specified address as the parameter to delete it from the address book.",
              "Property": {
                "pre-conditions": "The 'addressBookDao' object must be initialized and connected to the address book database.",
                "post-conditions": "The specified address is removed from the address book."
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.handleSend(java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.handleSend(java.lang.String,java.lang.String)",
            "description": {
              "What": "Starts the SendCoinsActivity with a PaymentIntent created from the provided address and label.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "String",
                  "description": "The address to send coins to."
                },
                {
                  "name": "label",
                  "type": "String",
                  "description": "The label associated with the address."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To initiate the sending process with the specified address and label.",
              "How-to-use": "Call handleSend method with the address and label as arguments to start the SendCoinsActivity.",
              "How-it-is-done": "The method creates a PaymentIntent object using the provided address and label, then starts the SendCoinsActivity with this PaymentIntent.",
              "Property": {
                "pre-conditions": "The activity parameter must be initialized and not null.",
                "post-conditions": "The SendCoinsActivity is started with the provided address and label."
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.handleShowQr(java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.handleShowQr(java.lang.String,java.lang.String)",
            "description": {
              "What": "Display a QR code for a Bitcoin address with an optional label.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "String",
                  "description": "The Bitcoin address to display in the QR code."
                },
                {
                  "name": "label",
                  "type": "String",
                  "description": "An optional label for the Bitcoin address."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way for users to display a QR code for a Bitcoin address with an optional label.",
              "How-to-use": "Call this method with the Bitcoin address and an optional label to display the corresponding QR code in the UI.",
              "How-it-is-done": "The method converts the Bitcoin address and label into a Bitcoin URI, then generates a QR code bitmap using the URI and displays it using a BitmapFragment.",
              "Property": {
                "pre-conditions": [
                  "The address parameter must be a valid Bitcoin address."
                ],
                "post-conditions": [
                  "A QR code representing the Bitcoin address with an optional label is displayed in the UI."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.onActivityResult(int,int,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.onActivityResult(int,int,android.content.Intent)",
            "description": {
              "What": "Handle the result of a scan operation and parse the input to either handle a payment intent, direct transaction, or display an error message.",
              "Parameters": [
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code passed to the activity for identification."
                },
                {
                  "name": "resultCode",
                  "type": "int",
                  "description": "The result code returned by the activity."
                },
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent containing the result data from the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the result of a scan operation and process the input data accordingly for payment intents or direct transactions.",
              "How-to-use": "Call this method with the appropriate parameters when receiving the result of a scan operation in the activity.",
              "How-it-is-done": "The method checks if the requestCode and resultCode match the scan operation, then parses the input to handle payment intents, direct transactions, or display error messages using a handler and dialog prompts.",
              "Property": {
                "pre-conditions": [
                  "The requestCode should match the scan operation request code.",
                  "The resultCode should indicate a successful result from the activity."
                ],
                "post-conditions": [
                  "The input data is parsed and processed based on payment intents, direct transactions, or error messages.",
                  "Dialog prompts may be displayed to interact with the user based on the input data."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.onAttach(android.content.Context)",
            "description": {
              "What": "This method is used to initialize the activity and address book DAO for the SendingAddressesFragment.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the calling activity."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up necessary dependencies and resources for the fragment.",
              "How-to-use": "Call this method in the onAttach() lifecycle method of the SendingAddressesFragment passing the context parameter.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then casts the context to AbstractWalletActivity and assigns it to the activity field. Finally, it initializes the addressBookDao by obtaining it from the AppDatabase using the context.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "The activity and addressBookDao fields of the SendingAddressesFragment are properly initialized."
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize the fragment by setting up options menu, observing changes in wallet, addresses to exclude, and clipboard data, and populating the address book list view.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the fragment with necessary data and functionality for displaying sending addresses.",
              "How-to-use": "Call this method in the onCreate() method of the fragment to initialize the fragment with necessary data and functionality.",
              "How-it-is-done": "The method sets up options menu, initializes ViewModel, observes changes in wallet, addresses to exclude, and clipboard data, populates the address book list view using an adapter, and sets the list adapter for the fragment.",
              "Property": {
                "pre-conditions": [
                  "The fragment must be created and attached to an activity."
                ],
                "post-conditions": [
                  "The fragment is initialized with options menu, ViewModel, observers for wallet, addresses to exclude, and clipboard data, and the address book list view is populated."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)",
            "description": {
              "What": "This method inflates a menu for the SendingAddressesFragment and sets the visibility of a menu item based on the presence of a camera feature on the device.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu to inflate with options."
                },
                {
                  "name": "inflater",
                  "type": "android.view.MenuInflater",
                  "description": "The inflater to use for inflating the menu."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically show or hide a menu item based on the availability of a camera feature on the device.",
              "How-to-use": "Override this method in a SendingAddressesFragment class, inflate the menu with options, and set the visibility of menu items based on camera features.",
              "How-it-is-done": "The method inflates the menu with options from a specified menu resource, retrieves the PackageManager from the activity, and sets the visibility of a specific menu item based on the presence of camera features.",
              "Property": {
                "pre-conditions": [
                  "The activity associated with the fragment must not be null."
                ],
                "post-conditions": [
                  "The menu will be inflated with options from the specified menu resource.",
                  "The visibility of the 'scan' menu item will be set based on the presence of camera features."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.onListItemClick(android.widget.ListView,android.view.View,int,long)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.onListItemClick(android.widget.ListView,android.view.View,int,long)",
            "description": {
              "What": "Starts an action mode when a list item is clicked in the sending addresses fragment, providing options to send, edit, remove, show QR code, copy to clipboard, etc.",
              "Parameters": [
                {
                  "name": "l",
                  "type": "android.widget.ListView",
                  "description": "The ListView where the item was clicked."
                },
                {
                  "name": "v",
                  "type": "android.view.View",
                  "description": "The View that was clicked."
                },
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the clicked item in the ListView."
                },
                {
                  "name": "id",
                  "type": "long",
                  "description": "The id of the clicked item."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide users with actions they can perform on a selected address in the sending addresses fragment.",
              "How-to-use": "Implement this method in a SendingAddressesFragment class to handle click events on list items and show corresponding action options.",
              "How-it-is-done": "When a list item is clicked, an action mode is started with options to send, edit, remove, show QR code, copy to clipboard based on the selected item's position.",
              "Property": {
                "pre-conditions": [
                  "The SendingAddressesFragment must be set up and displayed with a ListView containing items."
                ],
                "post-conditions": [
                  "An action mode is started with options based on the clicked item in the ListView."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.onOptionsItemSelected(android.view.MenuItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.onOptionsItemSelected(android.view.MenuItem)",
            "description": {
              "What": "Handles options menu item selection in the SendingAddressesFragment class.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "android.view.MenuItem",
                  "description": "The selected menu item."
                },
                "Returns"
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the item selection was handled, false otherwise."
              },
              "Why": "To provide functionality for handling options menu item selection in the SendingAddressesFragment class.",
              "How-to-use": "Override the onOptionsItemSelected method in the SendingAddressesFragment class and implement the desired functionality for each menu item case.",
              "How-it-is-done": "The method checks the ID of the selected menu item and performs corresponding actions such as handling clipboard paste or starting a scan activity.",
              "Property": {
                "pre-conditions": "The method should be overridden in a subclass of SendingAddressesFragment.",
                "post-conditions": "The selected menu item action is handled appropriately based on the item ID."
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesFragment.onPrepareOptionsMenu(android.view.Menu)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesFragment.onPrepareOptionsMenu(android.view.Menu)",
            "description": {
              "What": "Enables or disables the 'paste' option in the menu based on the availability of a wallet and an address in the clipboard.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu in which the 'paste' option is located."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically enable or disable the 'paste' option based on certain conditions to improve user experience.",
              "How-to-use": "Call this method when preparing the options menu in the SendingAddressesFragment to enable or disable the 'paste' option.",
              "How-it-is-done": "The method checks if the wallet is not null and if there is an address in the clipboard, then enables the 'paste' option in the menu.",
              "Property": {
                "pre-conditions": [
                  "The viewModel must have a non-null wallet value.",
                  "The getAddressFromPrimaryClip() method must return a non-null address."
                ],
                "post-conditions": [
                  "The 'paste' option in the menu will be enabled if both conditions are met."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.SendingAddressesViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.SendingAddressesViewModel.de.schildbach.wallet.ui.SendingAddressesViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel.de.schildbach.wallet.ui.SendingAddressesViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a SendingAddressesViewModel with necessary LiveData objects for sending addresses functionality.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to initialize the ViewModel."
                }
              ],
              "Returns": {
                "type": "SendingAddressesViewModel",
                "description": "A SendingAddressesViewModel instance with initialized LiveData objects."
              },
              "Why": "To provide a ViewModel that handles sending addresses functionality in the application.",
              "How-to-use": "Create a new instance of SendingAddressesViewModel by passing an Application context as a parameter.",
              "How-it-is-done": "The method initializes the ViewModel by creating instances of WalletLiveData, AddressesToExcludeLiveData, and ClipLiveData using the provided Application context.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The SendingAddressesViewModel instance is created with initialized LiveData objects."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.SendingAddressesViewModel$AddressesToExcludeLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel$AddressesToExcludeLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.SendingAddressesViewModel$AddressesToExcludeLiveData.de.schildbach.wallet.ui.SendingAddressesViewModel$AddressesToExcludeLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel$AddressesToExcludeLiveData.de.schildbach.wallet.ui.SendingAddressesViewModel$AddressesToExcludeLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Constructs a new instance of AddressesToExcludeLiveData for excluding addresses in sending transactions.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance used for creating the LiveData."
                }
              ],
              "Returns": {
                "type": "AddressesToExcludeLiveData",
                "description": "A new instance of AddressesToExcludeLiveData."
              },
              "Why": "To provide a LiveData object that can be observed for excluding addresses in sending transactions.",
              "How-to-use": "Create a new instance of WalletApplication and pass it as a parameter to the constructor of AddressesToExcludeLiveData.",
              "How-it-is-done": "The constructor initializes the AddressesToExcludeLiveData instance by calling the super constructor with the provided WalletApplication instance.",
              "Property": {
                "pre-conditions": [
                  "The WalletApplication instance must be non-null."
                ],
                "post-conditions": [
                  "A new instance of AddressesToExcludeLiveData is successfully created."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesViewModel$AddressesToExcludeLiveData.loadAddressesToExclude()": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel$AddressesToExcludeLiveData.loadAddressesToExclude()",
            "description": {
              "What": "This method loads addresses to exclude from the wallet for sending transactions.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which to retrieve the addresses to exclude."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to exclude certain addresses from being used for sending transactions, which can be useful for privacy or security reasons.",
              "How-to-use": "To use this method, create an instance of AddressesToExcludeLiveData, pass the wallet object as a parameter, and call the loadAddressesToExclude() method.",
              "How-it-is-done": "The method retrieves issued receive keys and imported keys from the wallet, converts them to addresses, and stores them in a set. It then posts the set of addresses as the value of the LiveData.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must not be null."
                ],
                "post-conditions": [
                  "The LiveData will contain a set of addresses to exclude from sending transactions."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesViewModel$AddressesToExcludeLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel$AddressesToExcludeLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method loads addresses to exclude when the wallet becomes active.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that becomes active."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that addresses to exclude are loaded whenever the wallet becomes active.",
              "How-to-use": "Call this method when the wallet becomes active to load addresses to exclude.",
              "How-it-is-done": "When the wallet becomes active, the method calls 'loadAddressesToExclude()' to load the addresses to exclude.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "Addresses to exclude are loaded after the method is called."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData.de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData.de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a ClipLiveData object with a ClipboardManager instance from the WalletApplication.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance used to retrieve the ClipboardManager."
                }
              ],
              "Returns": {
                "type": "ClipLiveData",
                "description": "A new instance of ClipLiveData initialized with the ClipboardManager."
              },
              "Why": "To provide access to the ClipboardManager for handling clipboard operations within the SendingAddressesViewModel.",
              "How-to-use": "Create a new instance of SendingAddressesViewModel$ClipLiveData by passing a WalletApplication instance as the parameter.",
              "How-it-is-done": "The method initializes the ClipLiveData object by retrieving the ClipboardManager from the WalletApplication using the getSystemService method with the CLIPBOARD_SERVICE constant.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The ClipLiveData object is successfully initialized with a valid ClipboardManager instance."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData.onActive()",
            "description": {
              "What": "This method adds a listener for changes in the primary clipboard and triggers an initial check for any changes.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "N/A",
                  "description": "Reference to the current instance of the ClipLiveData class."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To listen for changes in the primary clipboard and update the data accordingly.",
              "How-to-use": "Instantiate an object of the ClipLiveData class and call the onActive() method to start listening for clipboard changes.",
              "How-it-is-done": "The method adds a listener for primary clip changes using the clipboardManager and triggers an initial check for any changes by calling onPrimaryClipChanged().",
              "Property": {
                "pre-conditions": [
                  "The clipboardManager must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The listener for primary clip changes is successfully added."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData.onInactive()",
            "description": {
              "What": "Removes the primary clip changed listener when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "ClipboardManager.OnPrimaryClipChangedListener",
                  "description": "The listener to be removed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that the listener is removed when the LiveData is no longer active to prevent memory leaks or unnecessary callbacks.",
              "How-to-use": "Create an instance of SendingAddressesViewModel$ClipLiveData and override the onInactive() method to remove the primary clip changed listener.",
              "How-it-is-done": "When the LiveData becomes inactive, the onInactive() method is called which then removes the primary clip changed listener using the ClipboardManager instance.",
              "Property": {
                "pre-conditions": [
                  "The LiveData instance must be active before becoming inactive."
                ],
                "post-conditions": [
                  "The primary clip changed listener is successfully removed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData.onPrimaryClipChanged()": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData.onPrimaryClipChanged()",
            "description": {
              "What": "Updates the LiveData value with the primary clip content from the clipboard manager.",
              "Parameters": [
                {
                  "name": "clipboardManager",
                  "type": "ClipboardManager",
                  "description": "The ClipboardManager instance to retrieve the primary clip content from."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To keep the LiveData value synchronized with the primary clip content for observing changes in the clipboard.",
              "How-to-use": "Create an instance of SendingAddressesViewModel$ClipLiveData and pass the ClipboardManager instance to the constructor. Observe the LiveData value to get notified of changes in the primary clip content.",
              "How-it-is-done": "When onPrimaryClipChanged is called, it retrieves the primary clip content from the ClipboardManager and sets it as the new value of the LiveData.",
              "Property": {
                "pre-conditions": [
                  "The ClipboardManager instance must be initialized and accessible."
                ],
                "post-conditions": [
                  "The LiveData value is updated with the primary clip content from the clipboard manager."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData.setClipData(android.content.ClipData)": {
            "qualifiedName": "de.schildbach.wallet.ui.SendingAddressesViewModel$ClipLiveData.setClipData(android.content.ClipData)",
            "description": {
              "What": "Sets the given ClipData to the clipboard manager's primary clip.",
              "Parameters": [
                {
                  "name": "clipData",
                  "type": "android.content.ClipData",
                  "description": "The ClipData to set as the primary clip."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow setting ClipData to the clipboard manager for further use or sharing.",
              "How-to-use": "Create an instance of ClipLiveData, call setClipData() method with the desired ClipData as the parameter.",
              "How-it-is-done": "The method simply calls the setPrimaryClip() method of the clipboardManager instance with the provided clipData.",
              "Property": {
                "pre-conditions": [
                  "The clipboardManager instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The primary clip of the clipboard manager will be set to the provided ClipData."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.ShowPasswordCheckListener": {
        "qualifiedName": "de.schildbach.wallet.ui.ShowPasswordCheckListener",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.ShowPasswordCheckListener.de.schildbach.wallet.ui.ShowPasswordCheckListener(android.widget.EditText[])": {
            "qualifiedName": "de.schildbach.wallet.ui.ShowPasswordCheckListener.de.schildbach.wallet.ui.ShowPasswordCheckListener(android.widget.EditText[])",
            "description": {
              "What": "Initialize a ShowPasswordCheckListener with an array of EditText views for password input fields.",
              "Parameters": [
                {
                  "name": "passwordViews",
                  "type": "android.widget.EditText[]",
                  "description": "Array of EditText views for password input fields."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "Constructor method, does not return a value."
              },
              "Why": "To provide a listener for checking password input fields in a UI.",
              "How-to-use": "Create an instance of ShowPasswordCheckListener by passing an array of EditText views representing password input fields.",
              "How-it-is-done": "The constructor initializes the ShowPasswordCheckListener with the provided array of EditText views for password input fields.",
              "Property": {
                "pre-conditions": "The passwordViews array must not be null.",
                "post-conditions": "The ShowPasswordCheckListener object is initialized with the provided array of EditText views."
              }
            }
          },
          "de.schildbach.wallet.ui.ShowPasswordCheckListener.onCheckedChanged(android.widget.CompoundButton,boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.ShowPasswordCheckListener.onCheckedChanged(android.widget.CompoundButton,boolean)",
            "description": {
              "What": "Toggle the visibility of password fields by changing the transformation method of EditText views.",
              "Parameters": [
                {
                  "name": "buttonView",
                  "type": "android.widget.CompoundButton",
                  "description": "The CompoundButton triggering the change event."
                },
                {
                  "name": "isChecked",
                  "type": "boolean",
                  "description": "The new checked state of the CompoundButton."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to toggle the visibility of password fields for improved user experience.",
              "How-to-use": "Create an instance of ShowPasswordCheckListener and set it as the OnCheckedChangeListener for a CompoundButton. Define the EditText views to be affected by the visibility toggle in the passwordViews list.",
              "How-it-is-done": "Based on the isChecked parameter, the method determines whether to use PasswordTransformationMethod or null as the TransformationMethod. It then iterates over the passwordViews list and sets the chosen TransformationMethod to each EditText view.",
              "Property": {
                "pre-conditions": "The passwordViews list must be initialized with the EditText views to be affected.",
                "post-conditions": "The visibility of password fields in the specified EditText views will be toggled based on the state of the CompoundButton."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.StickToTopLinearLayoutManager": {
        "qualifiedName": "de.schildbach.wallet.ui.StickToTopLinearLayoutManager",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.StickToTopLinearLayoutManager.de.schildbach.wallet.ui.StickToTopLinearLayoutManager(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.StickToTopLinearLayoutManager.de.schildbach.wallet.ui.StickToTopLinearLayoutManager(android.content.Context)",
            "description": {
              "What": "Initializes a StickToTopLinearLayoutManager object with the given context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to initialize the StickToTopLinearLayoutManager."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.StickToTopLinearLayoutManager",
                "description": "A new StickToTopLinearLayoutManager object."
              },
              "Why": "To provide a custom LinearLayoutManager implementation that sticks the first item to the top of the RecyclerView.",
              "How-to-use": "Create a new StickToTopLinearLayoutManager object by passing a valid context as a parameter, then set it as the layout manager for a RecyclerView.",
              "How-it-is-done": "The constructor initializes the StickToTopLinearLayoutManager by calling the superclass constructor with the provided context.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "A new StickToTopLinearLayoutManager object is successfully created."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.StickToTopLinearLayoutManager.onItemsAdded(android.support.v7.widget.RecyclerView,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.StickToTopLinearLayoutManager.onItemsAdded(android.support.v7.widget.RecyclerView,int,int)",
            "description": {
              "What": "Scrolls to the top of the RecyclerView if items are added at position 0 and the first completely visible item position is less than or equal to the item count.",
              "Parameters": [
                {
                  "name": "recyclerView",
                  "type": "android.support.v7.widget.RecyclerView",
                  "description": "The RecyclerView where items are added."
                },
                {
                  "name": "positionStart",
                  "type": "int",
                  "description": "The starting position of the added items."
                },
                {
                  "name": "itemCount",
                  "type": "int",
                  "description": "The number of items added."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To automatically scroll to the top of the RecyclerView when new items are added at the top.",
              "How-to-use": "Create an instance of StickToTopLinearLayoutManager and set it as the LayoutManager for your RecyclerView to enable the automatic scrolling behavior when items are added at the top.",
              "How-it-is-done": "The method first calls the superclass method to handle the item addition. Then, it checks if items are added at position 0 and if the first completely visible item position is less than or equal to the item count. If both conditions are met, it scrolls the RecyclerView to position 0.",
              "Property": {
                "pre-conditions": [
                  "The RecyclerView must be using StickToTopLinearLayoutManager as its LayoutManager."
                ],
                "post-conditions": [
                  "If items are added at position 0 and the first completely visible item position is less than or equal to the item count, the RecyclerView will be scrolled to position 0."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.TransactionsAdapter": {
        "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.TransactionsAdapter.buildListItems(android.content.Context,java.util.List,de.schildbach.wallet.ui.TransactionsAdapter$WarningType,org.bitcoinj.wallet.Wallet,java.util.Map,org.bitcoinj.utils.MonetaryFormat,int,org.bitcoinj.core.Sha256Hash)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter.buildListItems(android.content.Context,java.util.List,de.schildbach.wallet.ui.TransactionsAdapter$WarningType,org.bitcoinj.wallet.Wallet,java.util.Map,org.bitcoinj.utils.MonetaryFormat,int,org.bitcoinj.core.Sha256Hash)",
            "description": {
              "What": "Builds a list of transaction items for display in a UI based on the provided transactions and other parameters.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the Android application."
                },
                {
                  "name": "transactions",
                  "type": "java.util.List<org.bitcoinj.core.Transaction>",
                  "description": "The list of transactions to be displayed."
                },
                {
                  "name": "warning",
                  "type": "de.schildbach.wallet.ui.TransactionsAdapter.WarningType",
                  "description": "The warning type to be displayed, if any."
                },
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet associated with the transactions."
                },
                {
                  "name": "addressBook",
                  "type": "java.util.Map<java.lang.String, de.schildbach.wallet.data.AddressBookEntry>",
                  "description": "A map of address book entries."
                },
                {
                  "name": "format",
                  "type": "org.bitcoinj.utils.MonetaryFormat",
                  "description": "The format for monetary values."
                },
                {
                  "name": "maxConnectedPeers",
                  "type": "int",
                  "description": "The maximum number of connected peers."
                },
                {
                  "name": "selectedTransaction",
                  "type": "org.bitcoinj.core.Sha256Hash",
                  "description": "The selected transaction to highlight, if any."
                }
              ],
              "Returns": {
                "type": "java.util.List<de.schildbach.wallet.ui.TransactionsAdapter.ListItem>",
                "description": "A list of transaction items for display in the UI."
              },
              "Why": "To provide a convenient way to build a list of transaction items for display in a UI based on the provided transactions and parameters.",
              "How-to-use": "Call this method with the required parameters to get a list of transaction items ready for display in a UI.",
              "How-it-is-done": "The method creates a new list of transaction items, adds a warning item if present, and then iterates over the transactions to create transaction items based on the context, wallet, address book, format, max connected peers, and selected transaction.",
              "Property": {
                "pre-conditions": [
                  "The 'transactions' list must not be null.",
                  "The 'format' must not be null."
                ],
                "post-conditions": [
                  "The returned list of transaction items will be non-null."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter.de.schildbach.wallet.ui.TransactionsAdapter(android.content.Context,int,de.schildbach.wallet.ui.TransactionsAdapter$OnClickListener)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter.de.schildbach.wallet.ui.TransactionsAdapter(android.content.Context,int,de.schildbach.wallet.ui.TransactionsAdapter$OnClickListener)",
            "description": {
              "What": "Constructs a TransactionsAdapter with a custom ItemCallback for calculating differences between lists of items.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the adapter will be used."
                },
                {
                  "name": "maxConnectedPeers",
                  "type": "int",
                  "description": "The maximum number of connected peers."
                },
                {
                  "name": "onClickListener",
                  "type": "de.schildbach.wallet.ui.TransactionsAdapter.OnClickListener",
                  "description": "Optional listener for handling item click events."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.TransactionsAdapter",
                "description": "A new instance of TransactionsAdapter with the provided parameters."
              },
              "Why": "To provide a custom adapter for handling transactions in a wallet UI with the ability to calculate differences between lists efficiently.",
              "How-to-use": "Create a new instance of TransactionsAdapter by passing the context, maxConnectedPeers, and an optional OnClickListener. Set this adapter to a RecyclerView to display transaction items.",
              "How-it-is-done": "The method initializes the adapter with a custom ItemCallback that defines how to compare and update items in the list efficiently. It sets the context, inflater, and onClickListener for handling item click events.",
              "Property": {
                "pre-conditions": [
                  "The context must not be null."
                ],
                "post-conditions": [
                  "A new instance of TransactionsAdapter is created with the provided parameters and callback."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter.getItemViewType(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter.getItemViewType(int)",
            "description": {
              "What": "This method returns the view type of the item at the specified position in the TransactionsAdapter list.",
              "Parameters": [
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item in the list for which the view type is to be determined."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The view type of the item at the specified position."
              },
              "Why": "To determine the view type of the item at a given position in the list for proper rendering in the UI.",
              "How-to-use": "Call this method with the position of the item in the list to get the view type for that item.",
              "How-it-is-done": "The method retrieves the ListItem at the specified position, checks if it is a WarningItem or TransactionItem, and returns the corresponding view type. If the ListItem is neither of these types, an IllegalStateException is thrown.",
              "Property": {
                "pre-conditions": "The TransactionsAdapter list must not be null.",
                "post-conditions": "The returned view type is either VIEW_TYPE_WARNING or VIEW_TYPE_TRANSACTION."
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter.onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter.onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)",
            "description": {
              "What": "Binds data to the views in the RecyclerView based on the position in the list.",
              "Parameters": [
                {
                  "name": "holder",
                  "type": "android.support.v7.widget.RecyclerView.ViewHolder",
                  "description": "The ViewHolder to bind the data to."
                },
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item in the list."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To populate the RecyclerView with data and handle click events on the items.",
              "How-to-use": "Create an instance of TransactionsAdapter and set it as the adapter for a RecyclerView. Implement the OnClickListener interface to handle click events on the items.",
              "How-it-is-done": "The method checks the type of ViewHolder and binds the data accordingly. It sets click listeners for the items and handles different types of warnings.",
              "Property": {
                "pre-conditions": [
                  "The RecyclerView.ViewHolder passed must be of type TransactionViewHolder or WarningViewHolder."
                ],
                "post-conditions": [
                  "The data is bound to the views in the RecyclerView at the specified position.",
                  "Click listeners are set for the items based on the type of ViewHolder."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter.onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int,java.util.List)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter.onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int,java.util.List)",
            "description": {
              "What": "Binds data to the RecyclerView ViewHolder based on the change types provided in the payloads list.",
              "Parameters": [
                {
                  "name": "holder",
                  "type": "android.support.v7.widget.RecyclerView.ViewHolder",
                  "description": "The ViewHolder to bind data to."
                },
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item in the RecyclerView."
                },
                {
                  "name": "payloads",
                  "type": "java.util.List<java.lang.Object>",
                  "description": "A list of payloads indicating the type of changes to be applied."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To efficiently update specific parts of the ViewHolder based on the type of changes without rebinding the entire view.",
              "How-to-use": "Override this method in a custom RecyclerView Adapter class and implement the logic to update specific parts of the ViewHolder based on the change types provided in the payloads list.",
              "How-it-is-done": "If the payloads list is empty, call the regular onBindViewHolder method with the holder and position. Otherwise, iterate through the payloads list, determine the type of change, and update the corresponding part of the ViewHolder.",
              "Property": {
                "pre-conditions": [
                  "The RecyclerView Adapter must extend RecyclerView.Adapter class.",
                  "The ViewHolder must be of type TransactionViewHolder."
                ],
                "post-conditions": [
                  "The ViewHolder is updated with the specific changes based on the payloads provided."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter.onCreateViewHolder(android.view.ViewGroup,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter.onCreateViewHolder(android.view.ViewGroup,int)",
            "description": {
              "What": "Creates and returns a ViewHolder based on the viewType provided.",
              "Parameters": [
                {
                  "name": "parent",
                  "type": "android.view.ViewGroup",
                  "description": "The parent ViewGroup that the ViewHolder will be attached to."
                },
                {
                  "name": "viewType",
                  "type": "int",
                  "description": "The type of view to be created (transaction or warning)."
                }
              ],
              "Returns": {
                "type": "android.support.v7.widget.RecyclerView.ViewHolder",
                "description": "A ViewHolder based on the viewType provided."
              },
              "Why": "To dynamically create different types of ViewHolders based on the viewType, allowing for flexible RecyclerView item handling.",
              "How-to-use": "Call this method passing the parent ViewGroup and viewType, then use the returned ViewHolder to bind data for the corresponding item in the RecyclerView.",
              "How-it-is-done": "Based on the viewType, the method inflates the appropriate layout for the ViewHolder (transaction or warning) and initializes it with necessary settings before returning the ViewHolder instance.",
              "Property": {
                "pre-conditions": "The viewType must be either VIEW_TYPE_TRANSACTION or VIEW_TYPE_WARNING.",
                "post-conditions": "A valid ViewHolder instance is returned based on the viewType provided."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.TransactionsAdapter$ChangeType": {
        "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$ChangeType",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.ui.TransactionsAdapter$ChangeType.de.schildbach.wallet.ui.TransactionsAdapter$ChangeType()": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$ChangeType.de.schildbach.wallet.ui.TransactionsAdapter$ChangeType()",
            "description": {
              "What": "This method is a constructor for the ChangeType enum.",
              "Parameters": [],
              "Returns": {
                "type": "ChangeType",
                "description": "The constructed ChangeType enum instance."
              },
              "Why": "To initialize instances of the ChangeType enum.",
              "How-to-use": "Simply call the ChangeType() constructor to create a new instance of the ChangeType enum.",
              "How-it-is-done": "The method does not take any parameters and simply initializes a new instance of the ChangeType enum.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new instance of the ChangeType enum is created."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.TransactionsAdapter$ItemAnimator": {
        "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$ItemAnimator",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.TransactionsAdapter$ItemAnimator.canReuseUpdatedViewHolder(android.support.v7.widget.RecyclerView.ViewHolder,java.util.List)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$ItemAnimator.canReuseUpdatedViewHolder(android.support.v7.widget.RecyclerView.ViewHolder,java.util.List)",
            "description": {
              "What": "This method checks if a ViewHolder can be reused after an update, based on the list of payloads provided.",
              "Parameters": [
                {
                  "name": "viewHolder",
                  "type": "android.support.v7.widget.RecyclerView.ViewHolder",
                  "description": "The ViewHolder to be checked for reuse."
                },
                {
                  "name": "payloads",
                  "type": "java.util.List<java.lang.Object>",
                  "description": "A list of payloads containing changes to the ViewHolder."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the ViewHolder can be reused, false otherwise."
              },
              "Why": "To determine if a ViewHolder can be reused after an update, excluding cases where the change type is 'IS_SELECTED'.",
              "How-to-use": "Call this method when implementing custom item animations in a RecyclerView adapter to decide if a ViewHolder can be reused after an update.",
              "How-it-is-done": "Iterate through the list of payloads, check for 'IS_SELECTED' change type, and return false if found. Otherwise, call the superclass method for further checks.",
              "Property": {
                "pre-conditions": [
                  "The ViewHolder and payloads should not be null."
                ],
                "post-conditions": [
                  "The method returns true if the ViewHolder can be reused, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$ItemAnimator.de.schildbach.wallet.ui.TransactionsAdapter$ItemAnimator()": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$ItemAnimator.de.schildbach.wallet.ui.TransactionsAdapter$ItemAnimator()",
            "description": {
              "What": "Initialize a new instance of the ItemAnimator class.",
              "Parameters": [],
              "Returns": "ItemAnimator instance",
              "Why": "To provide a default constructor for the ItemAnimator class.",
              "How-to-use": "Simply create a new instance of the ItemAnimator class using the constructor.",
              "How-it-is-done": "The method initializes a new instance of the ItemAnimator class without any parameters.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new ItemAnimator instance is created."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.TransactionsAdapter$ListItem": {
        "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$ListItem",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.TransactionsAdapter$ListItem.de.schildbach.wallet.ui.TransactionsAdapter$ListItem()": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$ListItem.de.schildbach.wallet.ui.TransactionsAdapter$ListItem()",
            "description": {
              "What": "This method is a constructor for the ListItem class.",
              "Parameters": [],
              "Returns": "ListItem",
              "Why": "To initialize a new instance of the ListItem class.",
              "How-to-use": "To create a new ListItem object, simply call the constructor without any parameters.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the ListItem class.",
              "Property": {
                "Pre-conditions": "No pre-conditions are required for calling this constructor.",
                "Post-conditions": "After calling this constructor, a new ListItem object is created and ready for use."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem": {
        "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem.de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem(android.content.Context,org.bitcoinj.core.Transaction,org.bitcoinj.wallet.Wallet,java.util.Map,org.bitcoinj.utils.MonetaryFormat,int,boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem.de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem(android.content.Context,org.bitcoinj.core.Transaction,org.bitcoinj.wallet.Wallet,java.util.Map,org.bitcoinj.utils.MonetaryFormat,int,boolean)",
            "description": {
              "What": "Constructs a TransactionItem object for displaying transaction details in a list view.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                },
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction object to display."
                },
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet associated with the transaction."
                },
                {
                  "name": "addressBook",
                  "type": "java.util.Map<String, de.schildbach.wallet.data.AddressBookEntry>",
                  "description": "A map of address book entries for displaying labels."
                },
                {
                  "name": "format",
                  "type": "org.bitcoinj.utils.MonetaryFormat",
                  "description": "The format for displaying monetary values."
                },
                {
                  "name": "maxConnectedPeers",
                  "type": "int",
                  "description": "The maximum number of connected peers."
                },
                {
                  "name": "isSelected",
                  "type": "boolean",
                  "description": "Flag indicating if the transaction is selected."
                }
              ],
              "Returns": {
                "type": "TransactionItem",
                "description": "A TransactionItem object representing the transaction details."
              },
              "Why": "To provide a structured way to display transaction details in a list view for better user experience.",
              "How-to-use": "Instantiate a TransactionItem object by passing the required parameters, then use the object to display transaction details in a list view.",
              "How-it-is-done": "The method calculates various properties of the transaction such as colors, confidence level, address labels, fees, and messages based on the transaction details and context.",
              "Property": {
                "pre-conditions": [
                  "The context, transaction, and format parameters must not be null."
                ],
                "post-conditions": [
                  "A TransactionItem object with all necessary details for displaying the transaction is constructed."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.TransactionsAdapter$ListItem$WarningItem": {
        "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$ListItem$WarningItem",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.TransactionsAdapter$ListItem$WarningItem.de.schildbach.wallet.ui.TransactionsAdapter$ListItem$WarningItem(de.schildbach.wallet.ui.TransactionsAdapter$WarningType)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$ListItem$WarningItem.de.schildbach.wallet.ui.TransactionsAdapter$ListItem$WarningItem(de.schildbach.wallet.ui.TransactionsAdapter$WarningType)",
            "description": {
              "What": "Initialize a WarningItem object with a specified WarningType.",
              "Parameters": [
                {
                  "name": "type",
                  "type": "de.schildbach.wallet.ui.TransactionsAdapter.WarningType",
                  "description": "The type of warning to be associated with the WarningItem."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.TransactionsAdapter$ListItem$WarningItem",
                "description": "A new WarningItem object initialized with the specified WarningType."
              },
              "Why": "To create a WarningItem object that represents a specific type of warning in the TransactionsAdapter.",
              "How-to-use": "Create a new WarningItem object by passing a WarningType as the parameter, then use the object as needed in the TransactionsAdapter.",
              "How-it-is-done": "The method initializes a new WarningItem object by assigning the provided WarningType to the 'type' field of the object.",
              "Property": {
                "pre-conditions": [
                  "The WarningType parameter must not be null."
                ],
                "post-conditions": [
                  "A new WarningItem object is created with the specified WarningType."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.TransactionsAdapter$OnClickListener": {
        "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$OnClickListener",
        "kind": "interface",
        "methods": {
          "de.schildbach.wallet.ui.TransactionsAdapter$OnClickListener.onTransactionClick(android.view.View,org.bitcoinj.core.Sha256Hash)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$OnClickListener.onTransactionClick(android.view.View,org.bitcoinj.core.Sha256Hash)",
            "description": {
              "What": "This method is called when a transaction is clicked in the UI, providing the view and the transaction hash as parameters.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view that was clicked."
                },
                {
                  "name": "transactionHash",
                  "type": "org.bitcoinj.core.Sha256Hash",
                  "description": "The hash of the transaction that was clicked."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to handle user interaction with transactions in the UI.",
              "How-to-use": "Implement this method in a class that implements TransactionsAdapter$OnClickListener interface to define the behavior when a transaction is clicked.",
              "How-it-is-done": "When a transaction is clicked in the UI, this method is called with the view and transaction hash as parameters, allowing the developer to define custom behavior for handling the click event.",
              "Property": {
                "pre-conditions": [
                  "The implementing class must implement TransactionsAdapter$OnClickListener interface."
                ],
                "post-conditions": [
                  "The behavior defined in this method will be executed when a transaction is clicked in the UI."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$OnClickListener.onTransactionMenuClick(android.view.View,org.bitcoinj.core.Sha256Hash)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$OnClickListener.onTransactionMenuClick(android.view.View,org.bitcoinj.core.Sha256Hash)",
            "description": {
              "What": "This method is called when a user clicks on a transaction menu in the UI, passing the view and the transaction hash as parameters.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view that was clicked by the user."
                },
                {
                  "name": "transactionHash",
                  "type": "org.bitcoinj.core.Sha256Hash",
                  "description": "The hash of the transaction associated with the clicked menu."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle user interactions with transaction menus and perform actions based on the clicked transaction.",
              "How-to-use": "Implement this method in a class that implements TransactionsAdapter$OnClickListener interface to handle transaction menu clicks in the UI.",
              "How-it-is-done": "When a user clicks on a transaction menu, this method is called with the clicked view and transaction hash as parameters to perform specific actions based on the transaction.",
              "Property": {
                "pre-conditions": [
                  "The implementing class must implement TransactionsAdapter$OnClickListener interface."
                ],
                "post-conditions": [
                  "Actions based on the clicked transaction menu are performed within this method."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$OnClickListener.onWarningClick(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$OnClickListener.onWarningClick(android.view.View)",
            "description": {
              "What": "This method handles the click event on a warning icon in the UI of a transactions adapter.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view representing the warning icon that was clicked."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow the user to interact with warning icons in the UI and trigger specific actions or behaviors.",
              "How-to-use": "Implement this method in a class that implements the TransactionsAdapter$OnClickListener interface to define the behavior when a warning icon is clicked.",
              "How-it-is-done": "When the warning icon is clicked, the onClick method of the OnClickListener interface is called, triggering the onWarningClick method with the clicked view as a parameter.",
              "Property": {
                "pre-conditions": [
                  "The TransactionsAdapter$OnClickListener interface must be implemented in a class."
                ],
                "post-conditions": [
                  "The specific behavior defined in the onWarningClick method will be executed when a warning icon is clicked."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder": {
        "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bind(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bind(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)",
            "description": {
              "What": "Binds data from a TransactionItem object to the TransactionViewHolder UI elements.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "de.schildbach.wallet.ui.TransactionsAdapter.ListItem.TransactionItem",
                  "description": "The TransactionItem object containing data to be bound to the UI elements."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the UI elements of the TransactionViewHolder with data from a TransactionItem object.",
              "How-to-use": "Create an instance of TransactionViewHolder and call bind method with a TransactionItem object as the parameter to update the UI elements.",
              "How-it-is-done": "The method calls other private bind methods within the TransactionViewHolder class to update specific UI elements with data from the TransactionItem object.",
              "Property": {
                "pre-conditions": [
                  "The item parameter must not be null."
                ],
                "post-conditions": [
                  "The UI elements in the TransactionViewHolder are updated with data from the TransactionItem object."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindAddress(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindAddress(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)",
            "description": {
              "method": {
                "What": "Binds address information to the view elements in the ViewHolder.",
                "Parameters": [
                  {
                    "name": "item",
                    "type": "de.schildbach.wallet.ui.TransactionsAdapter.ListItem.TransactionItem",
                    "description": "The transaction item containing address information."
                  },
                  "Returns"
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To update the address view with the corresponding information for a transaction item.",
                "How-to-use": "Call this method passing a TransactionItem object to update the address view in the ViewHolder.",
                "How-it-is-done": "The method sets the visibility of the address view based on the presence of an address and the selection status, then updates the text, color, typeface, and single line property of the address view.",
                "Property": {
                  "pre-conditions": [
                    "The item parameter must not be null."
                  ],
                  "post-conditions": [
                    "The address view in the ViewHolder is updated with the information from the TransactionItem."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindConfidence(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindConfidence(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)",
            "description": {
              "method": {
                "What": "This method binds confidence information to the UI elements based on the selected state of the transaction item.",
                "Parameters": [
                  {
                    "name": "item",
                    "type": "de.schildbach.wallet.ui.TransactionsAdapter.ListItem.TransactionItem",
                    "description": "The transaction item containing confidence information."
                  },
                  "Returns"
                ],
                "Returns": "void",
                "Why": "To update the UI elements with confidence information based on the selected state of the transaction item.",
                "How-to-use": "Call this method passing a TransactionItem object to update the UI elements with confidence information.",
                "How-it-is-done": "The method checks the selected state of the item to determine which UI elements to update with confidence information such as progress, size, colors, and textual content.",
                "Property": {
                  "pre-conditions": "The item parameter must not be null.",
                  "post-conditions": "The UI elements will be updated with confidence information based on the selected state of the transaction item."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindFee(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindFee(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)",
            "description": {
              "method": {
                "What": "Binds fee information to the fee view in the transaction item.",
                "Parameters": [
                  {
                    "name": "item",
                    "type": "de.schildbach.wallet.ui.TransactionsAdapter.ListItem.TransactionItem",
                    "description": "The transaction item containing fee information."
                  },
                  "Returns"
                ],
                "Returns": "void",
                "Why": "To display the fee information in the transaction item view.",
                "How-to-use": "Create an instance of TransactionViewHolder and call bindFee method with the TransactionItem object as a parameter.",
                "How-it-is-done": "Sets the visibility of the fee view based on the presence of fee information, sets the format and amount of the fee to be displayed in the view.",
                "Property": {
                  "pre-conditions": "The item parameter must not be null.",
                  "post-conditions": "The fee information is displayed in the fee view of the transaction item."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindFiat(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindFiat(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)",
            "description": {
              "What": "Binds fiat currency information to the transaction item in the view holder.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "de.schildbach.wallet.ui.TransactionsAdapter.ListItem.TransactionItem",
                  "description": "The transaction item containing fiat currency information."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To display the fiat currency information related to the transaction item in the UI.",
              "How-to-use": "Call this method in the onBindViewHolder method of TransactionsAdapter to bind the fiat currency information to the corresponding transaction item in the view holder.",
              "How-it-is-done": "The method sets the visibility of the fiat view based on the presence of fiat currency information, then sets the amount, format, and prefix color of the fiat view using the values from the transaction item.",
              "Property": {
                "pre-conditions": [
                  "The item parameter must not be null."
                ],
                "post-conditions": [
                  "The fiat currency information is displayed in the UI based on the values from the transaction item."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindIsSelected(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindIsSelected(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)",
            "description": {
              "method": {
                "What": "Sets the background color and visibility of the menu view based on the selection state of the transaction item, and binds confidence, time, and address information to the view.",
                "Parameters": [
                  {
                    "name": "item",
                    "type": "de.schildbach.wallet.ui.TransactionsAdapter.ListItem.TransactionItem",
                    "description": "The transaction item to bind data from."
                  },
                  "Returns"
                ],
                "Returns": "void",
                "Why": "To visually represent the selection state of a transaction item and display relevant information in the view.",
                "How-to-use": "Call this method passing a TransactionItem object to update the view with the corresponding data and visual representation of the selection state.",
                "How-it-is-done": "The method checks if the item view is an instance of CardView and sets the background color accordingly. It then sets the visibility of the menu view based on the selection state. Finally, it calls other bind methods to display confidence, time, and address information.",
                "Property": {
                  "pre-conditions": [
                    "The item parameter must not be null."
                  ],
                  "post-conditions": [
                    "The background color and visibility of the view are updated based on the selection state of the transaction item.",
                    "Confidence, time, and address information are displayed in the view."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindMessage(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindMessage(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)",
            "description": {
              "method": {
                "What": "Binds a message to the transaction item in the TransactionsAdapter.",
                "Parameters": [
                  {
                    "name": "item",
                    "type": "de.schildbach.wallet.ui.TransactionsAdapter.ListItem.TransactionItem",
                    "description": "The transaction item containing the message to be bound."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To display transaction messages in the UI for better user experience.",
                "How-to-use": "Call this method in the onBindViewHolder method of TransactionsAdapter passing the TransactionItem to bind the message to the corresponding view elements.",
                "How-it-is-done": "The method sets the visibility of the extendMessageView based on the presence of a message, sets the text and color of the messageView, and configures whether the message should be displayed in a single line.",
                "Property": {
                  "pre-conditions": "The item parameter must not be null.",
                  "post-conditions": "The message is displayed in the UI according to the properties of the TransactionItem."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindTime(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindTime(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)",
            "description": {
              "What": "This method binds the time information of a transaction item to the corresponding views in the ViewHolder.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "de.schildbach.wallet.ui.TransactionsAdapter.ListItem.TransactionItem",
                  "description": "The transaction item containing the time information to be bound."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the time information of a transaction item in the UI based on its selection state.",
              "How-to-use": "Call this method passing a TransactionItem object to update the time views in the ViewHolder accordingly.",
              "How-it-is-done": "The method first determines which time view to show based on the selection state of the item, sets the text and color of the time view, and updates the visibility of the views.",
              "Property": {
                "pre-conditions": [
                  "The item parameter must not be null."
                ],
                "post-conditions": [
                  "The time information of the transaction item is correctly displayed in the ViewHolder."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindValue(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.bindValue(de.schildbach.wallet.ui.TransactionsAdapter$ListItem$TransactionItem)",
            "description": {
              "method": {
                "What": "Binds the value of a transaction item to the corresponding view in the ViewHolder.",
                "Parameters": [
                  {
                    "name": "item",
                    "type": "de.schildbach.wallet.ui.TransactionsAdapter.ListItem.TransactionItem",
                    "description": "The transaction item containing the value information."
                  },
                  "Returns"
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To update the UI with the value information of a transaction item.",
                "How-to-use": "Create an instance of TransactionViewHolder and call bindValue() method with the TransactionItem as the parameter.",
                "How-it-is-done": "The method sets the visibility of the value view based on the presence of a value, sets the amount, format, and text color of the value view according to the item's properties.",
                "Property": {
                  "pre-conditions": "The item parameter must not be null.",
                  "post-conditions": "The value view in the ViewHolder is updated with the value information from the transaction item."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder.de.schildbach.wallet.ui.TransactionsAdapter$TransactionViewHolder(android.view.View)",
            "description": {
              "What": "Initialize the views and resources for displaying a transaction in the UI.",
              "Parameters": [
                {
                  "name": "itemView",
                  "type": "android.view.View",
                  "description": "The view representing a single transaction in the UI."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "Constructor method, no return value."
              },
              "Why": "To set up the necessary views and resources for displaying transaction information in the UI.",
              "How-to-use": "Create an instance of TransactionViewHolder by passing a View representing a transaction, typically used in a RecyclerView adapter for displaying a list of transactions.",
              "How-it-is-done": "The method initializes various views within the itemView by finding them using their respective IDs, setting up colors, and assigning them to class variables for later use in displaying transaction information.",
              "Property": {
                "pre-conditions": "The itemView must contain all the necessary views with the specified IDs.",
                "post-conditions": "The TransactionViewHolder object is initialized with all the required views and resources for displaying a transaction."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.TransactionsAdapter$WarningType": {
        "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$WarningType",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.ui.TransactionsAdapter$WarningType.de.schildbach.wallet.ui.TransactionsAdapter$WarningType()": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$WarningType.de.schildbach.wallet.ui.TransactionsAdapter$WarningType()",
            "description": {
              "What": "Initialize a new instance of the WarningType enum.",
              "Parameters": [],
              "Returns": {
                "type": "WarningType",
                "description": "A new instance of the WarningType enum."
              },
              "Why": "To provide a way to create instances of the WarningType enum.",
              "How-to-use": "Simply call the constructor to create a new instance of the WarningType enum.",
              "How-it-is-done": "The method initializes a new instance of the WarningType enum without any parameters.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the WarningType enum is created."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.TransactionsAdapter$WarningViewHolder": {
        "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$WarningViewHolder",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.TransactionsAdapter$WarningViewHolder.de.schildbach.wallet.ui.TransactionsAdapter$WarningViewHolder(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.ui.TransactionsAdapter$WarningViewHolder.de.schildbach.wallet.ui.TransactionsAdapter$WarningViewHolder(android.view.View)",
            "description": {
              "What": "Initialize a WarningViewHolder with a TextView for displaying warning messages.",
              "Parameters": [
                {
                  "name": "itemView",
                  "type": "android.view.View",
                  "description": "The view containing the warning message TextView."
                }
              ],
              "Returns": {
                "type": "WarningViewHolder",
                "description": "A new instance of WarningViewHolder initialized with the provided itemView."
              },
              "Why": "To set up the WarningViewHolder with the necessary view components for displaying warning messages.",
              "How-to-use": "Create a new WarningViewHolder object by passing a View containing the warning message TextView, then use the messageView field to set or display warning messages.",
              "How-it-is-done": "The method initializes the WarningViewHolder by calling the superclass constructor with the provided itemView, then assigns the TextView for warning messages by finding the view with the specified ID.",
              "Property": {
                "pre-conditions": [
                  "The itemView parameter must not be null."
                ],
                "post-conditions": [
                  "The WarningViewHolder is successfully initialized with the messageView field set to the TextView for warning messages."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletActionsFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletActionsFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletActionsFragment.de.schildbach.wallet.ui.WalletActionsFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActionsFragment.de.schildbach.wallet.ui.WalletActionsFragment()",
            "description": {
              "What": "This method is a constructor for the WalletActionsFragment class.",
              "Parameters": [],
              "Returns": "WalletActionsFragment",
              "Why": "To initialize a new instance of the WalletActionsFragment class.",
              "How-to-use": "Simply create a new instance of WalletActionsFragment using the constructor.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the WalletActionsFragment class.",
              "Property": {
                "Pre-conditions": "No specific pre-conditions for using the constructor.",
                "Post-conditions": "A new instance of WalletActionsFragment is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActionsFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActionsFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Assigns the context to the activity variable of the WalletActionsFragment class.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context to be assigned to the activity variable."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To link the context to the activity variable for further use within the fragment.",
              "How-to-use": "Call this method with a valid context parameter after the fragment is attached to the activity.",
              "How-it-is-done": "The method first calls the superclass method to handle the context attachment, then casts the context to WalletActivity and assigns it to the activity variable.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The activity variable is assigned with the context casted to WalletActivity."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActionsFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActionsFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "What": "This method inflates a layout file, sets up click listeners for buttons, and returns the inflated view.",
              "Parameters": [
                {
                  "name": "inflater",
                  "type": "android.view.LayoutInflater",
                  "description": "The LayoutInflater object that can be used to inflate any views in the fragment."
                },
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view that the fragment's UI should be attached to."
                },
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment, if available."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The inflated view of the fragment layout."
              },
              "Why": "To set up the UI of the fragment and handle button click events.",
              "How-to-use": "Call this method in the fragment's onCreateView() method to inflate the layout and set up button click listeners.",
              "How-it-is-done": "The method inflates the layout file 'wallet_actions_fragment', sets up click listeners for request, send, and sendQr buttons, and returns the inflated view. Each button click listener calls a corresponding method in the activity.",
              "Property": {
                "pre-conditions": [
                  "The layout file 'wallet_actions_fragment' must exist in the resources.",
                  "The activity must have methods handleRequestCoins(), handleSendCoins(), and handleScan(android.view.View) implemented."
                ],
                "post-conditions": [
                  "The inflated view with click listeners set up for buttons is returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActionsFragment.onResume()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActionsFragment.onResume()",
            "description": {
              "method": {
                "What": "Updates the view of the WalletActionsFragment when it resumes.",
                "Parameters": [
                  {
                    "name": "N/A",
                    "type": "N/A",
                    "description": "No parameters are passed to the method."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To ensure that the view is updated with the latest data when the fragment resumes.",
                "How-to-use": "Simply call this method within the onResume() method of the WalletActionsFragment class.",
                "How-it-is-done": "The method calls the superclass's onResume() method to handle any necessary operations, then it calls the updateView() method to refresh the view.",
                "Property": {
                  "pre-conditions": [
                    "The WalletActionsFragment instance must be active and visible on the screen."
                  ],
                  "post-conditions": [
                    "The view of the WalletActionsFragment is updated with the latest data."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActionsFragment.updateView()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActionsFragment.updateView()",
            "description": {
              "What": "This method updates the visibility of the fragment based on a boolean value retrieved from resources.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return any value."
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletActivity.buildEnterAnimation(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.buildEnterAnimation(android.view.View)",
            "description": {
              "What": "This method builds an enter animation for the content view of the WalletActivity.",
              "Parameters": [
                {
                  "name": "contentView",
                  "type": "android.view.View",
                  "description": "The content view to apply the enter animation to."
                }
              ],
              "Returns": {
                "type": "android.animation.AnimatorSet",
                "description": "AnimatorSet containing the enter animation for the content view."
              },
              "Why": "To provide a visually appealing animation when the content view is displayed.",
              "How-to-use": "Call this method passing the content view as a parameter to create an enter animation for the view.",
              "How-it-is-done": "The method creates various animations like fading, sliding, and elevating for different views within the content view based on their tags.",
              "Property": {
                "pre-conditions": [
                  "The content view must be initialized and set before calling this method."
                ],
                "post-conditions": [
                  "The content view will have an enter animation applied based on the views found within it."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.checkSavedCrashTrace()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.checkSavedCrashTrace()",
            "description": {
              "What": "This method checks if there is a saved crash trace and shows a dialog to report the issue if there is one.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "The method is provided to prompt the user to report a crash issue if there is a saved crash trace.",
              "How-to-use": "Simply call this method within the WalletActivity class to check for any saved crash trace and display the report issue dialog if found.",
              "How-it-is-done": "The method checks if there is a saved crash trace using CrashReporter.hasSavedCrashTrace() and then shows a dialog using ReportIssueDialogFragment.show() with the appropriate message and subject.",
              "Property": {
                "pre-conditions": [
                  "The CrashReporter class must have a method to check for saved crash traces."
                ],
                "post-conditions": [
                  "If there is a saved crash trace, a dialog prompting the user to report the issue will be displayed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.de.schildbach.wallet.ui.WalletActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.de.schildbach.wallet.ui.WalletActivity()",
            "description": {
              "What": "Initialize a new instance of WalletActivity class.",
              "Parameters": [],
              "Returns": "WalletActivity instance",
              "Why": "To create a new instance of WalletActivity class for further use.",
              "How-to-use": "Simply call this method to create a new WalletActivity instance.",
              "How-it-is-done": "The method initializes a new instance of WalletActivity class without any parameters.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of WalletActivity class is created."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.handleBackupWallet()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.handleBackupWallet()",
            "description": {
              "What": "This method shows a dialog fragment for backing up the wallet in the WalletActivity.",
              "Parameters": [
                {
                  "name": "getSupportFragmentManager",
                  "type": "FragmentManager",
                  "description": "The FragmentManager to show the dialog fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a user-friendly way for users to backup their wallet securely.",
              "How-to-use": "Call this method in the WalletActivity to display the backup wallet dialog fragment.",
              "How-it-is-done": "The method calls the static show() method of BackupWalletDialogFragment class passing the FragmentManager to display the dialog fragment.",
              "Property": {
                "pre-conditions": [
                  "The WalletActivity must be active and visible to show the dialog fragment."
                ],
                "post-conditions": [
                  "The backup wallet dialog fragment is displayed on top of the WalletActivity."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.handleEncryptKeys()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.handleEncryptKeys()",
            "description": {
              "What": "This method shows an encryption dialog fragment in the WalletActivity.",
              "Parameters": [
                {
                  "name": "getSupportFragmentManager",
                  "type": "FragmentManager",
                  "description": "The FragmentManager to show the dialog fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way for the user to encrypt keys in the wallet for security purposes.",
              "How-to-use": "Call this method in the WalletActivity to display the encryption dialog fragment for the user to encrypt keys.",
              "How-it-is-done": "The method calls the show() method of EncryptKeysDialogFragment passing the FragmentManager to display the dialog fragment.",
              "Property": {
                "pre-conditions": "The WalletActivity must be active and have a valid FragmentManager.",
                "post-conditions": "The encryption dialog fragment is displayed to the user for encrypting keys."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.handleIntent(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.handleIntent(android.content.Intent)",
            "description": {
              "What": "Handle NFC intents for NDEF_DISCOVERED action and parse the input data for payment intents.",
              "Parameters": [
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent received by the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To process NFC intents related to payment transactions and handle the input data accordingly.",
              "How-to-use": "Call this method with the intent received by the activity when an NFC NDEF_DISCOVERED action is detected.",
              "How-it-is-done": "The method checks if the action is NDEF_DISCOVERED, extracts the NDEF message, parses the input data using BinaryInputParser, and handles payment intents or errors accordingly.",
              "Property": {
                "pre-conditions": "The intent must be received by the activity.",
                "post-conditions": "The payment intent is handled or an error message is displayed based on the input data."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.handleReportIssue()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.handleReportIssue()",
            "description": {
              "What": "Displays a dialog for reporting an issue within the wallet application.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return any value."
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.handleRequestCoins()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.handleRequestCoins()",
            "description": {
              "What": "Starts the RequestCoinsActivity to handle requesting coins.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "android.content.Context",
                  "description": "The context of the current activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way for the user to request coins within the wallet application.",
              "How-to-use": "Call this method from an instance of WalletActivity to start the RequestCoinsActivity.",
              "How-it-is-done": "The method creates a new Intent with the current context and the RequestCoinsActivity class, then starts the activity.",
              "Property": {
                "pre-conditions": [
                  "The current activity must be an instance of WalletActivity."
                ],
                "post-conditions": [
                  "The RequestCoinsActivity is started to handle requesting coins."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.handleRestoreWallet()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.handleRestoreWallet()",
            "description": {
              "What": "This method shows a dialog fragment for restoring a wallet in the WalletActivity.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way for users to restore their wallet in the application.",
              "How-to-use": "Call this method in the WalletActivity to show the dialog for restoring a wallet.",
              "How-it-is-done": "The method calls the show() method of the RestoreWalletDialogFragment class with the FragmentManager from the WalletActivity.",
              "Property": {
                "pre-conditions": "The WalletActivity must be active and have a valid FragmentManager.",
                "post-conditions": "A dialog fragment for restoring a wallet is displayed to the user."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.handleScan(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.handleScan(android.view.View)",
            "description": {
              "What": "This method handles the scanning functionality in the WalletActivity class.",
              "Parameters": [
                {
                  "name": "clickView",
                  "type": "android.view.View",
                  "description": "The view that was clicked to trigger the scan action."
                }
              ],
              "Returns": "void",
              "Why": "To initiate the scanning process when a user clicks on a specific view.",
              "How-to-use": "Call this method when a user action triggers the need to scan something, passing the view that was clicked as the parameter.",
              "How-it-is-done": "The method first ends the enter animation, then starts the ScanActivity for result with the current WalletActivity instance, the clickView, and a request code for the scan activity.",
              "Property": {
                "pre-conditions": [
                  "The WalletActivity instance must be valid and initialized before calling this method."
                ],
                "post-conditions": [
                  "The scanning process is initiated and the ScanActivity is started for result."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.handleSendCoins()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.handleSendCoins()",
            "description": {
              "What": "Starts the SendCoinsActivity to send coins from the wallet.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "android.content.Context",
                  "description": "The context of the current activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to initiate the process of sending coins from their wallet.",
              "How-to-use": "Call this method when the user wants to send coins from the wallet, ensuring that the context of the current activity is passed as a parameter.",
              "How-it-is-done": "The method creates a new Intent to start the SendCoinsActivity class and launches it using the startActivity() method with the context of the current activity.",
              "Property": {
                "pre-conditions": [
                  "The WalletActivity class must be instantiated and active."
                ],
                "post-conditions": [
                  "The SendCoinsActivity is started and displayed to the user."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.onActivityResult(int,int,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.onActivityResult(int,int,android.content.Intent)",
            "description": {
              "What": "Handles the result of an activity, specifically for scanning QR codes and processing the scanned data.",
              "Parameters": [
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code that was used to start the activity."
                },
                {
                  "name": "resultCode",
                  "type": "int",
                  "description": "The result code returned by the activity."
                },
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The data associated with the result of the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the result of scanning QR codes and process the scanned data for further actions within the wallet application.",
              "How-to-use": "Override this method in a WalletActivity subclass to handle the result of scanning QR codes and process the scanned data for payment intents, private keys, or direct transactions.",
              "How-it-is-done": "The method checks if the requestCode matches the scan request code, then extracts the scanned data from the intent and processes it accordingly by parsing it using different handlers for payment intents, private keys, or direct transactions.",
              "Property": {
                "pre-conditions": [
                  "The WalletActivity subclass must override this method to handle the result of scanning QR codes."
                ],
                "post-conditions": [
                  "The scanned data is processed based on the type of data (payment intent, private key, or direct transaction) and appropriate actions are taken within the wallet application."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initializes the WalletActivity by setting up the view, animations, observers, and handling intents.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the WalletActivity with necessary components and functionalities for the application to run smoothly.",
              "How-to-use": "Call this method in the onCreate() method of a WalletActivity subclass passing the savedInstanceState parameter.",
              "How-it-is-done": "The method initializes the application, configuration, view model, sets content view, sets up animations, observes changes in wallet encryption and animation states, handles animations, checks for saved instance state, sets up exchange rates fragment visibility, performs maintenance checks, and adds necessary fragments to the fragment manager.",
              "Property": {
                "pre-conditions": [
                  "The WalletActivity subclass must extend WalletActivity.",
                  "The layout file 'wallet_content' must be defined in the resources."
                ],
                "post-conditions": [
                  "The WalletActivity is fully initialized and ready to interact with the user."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.onCreateOptionsMenu(android.view.Menu)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.onCreateOptionsMenu(android.view.Menu)",
            "description": {
              "What": "This method inflates a menu resource file into the options menu of the WalletActivity.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu in which the items are placed."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the menu is successfully inflated."
              },
              "Why": "To populate the options menu with items defined in the 'wallet_options' menu resource file.",
              "How-to-use": "Override the onCreateOptionsMenu method in a WalletActivity subclass and call super.onCreateOptionsMenu(menu) followed by getMenuInflater().inflate(R.menu.wallet_options, menu) to inflate the menu items.",
              "How-it-is-done": "The method first calls the superclass method to ensure any default menu items are added, then it inflates the menu resource file 'wallet_options' into the provided menu object.",
              "Property": {
                "pre-conditions": "The method should be called within a WalletActivity subclass.",
                "post-conditions": "The options menu of the WalletActivity will contain the items defined in the 'wallet_options' menu resource file."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.onNewIntent(android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.onNewIntent(android.content.Intent)",
            "description": {
              "method": {
                "What": "Handles the new intent received by the activity.",
                "Parameters": [
                  {
                    "name": "intent",
                    "type": "android.content.Intent",
                    "description": "The new intent received by the activity."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To allow the activity to react to new intents being sent to it.",
                "How-to-use": "Override this method in the WalletActivity class and call handleIntent(intent) to process the new intent.",
                "How-it-is-done": "The method simply calls the handleIntent() method with the received intent as a parameter.",
                "Property": {
                  "pre-conditions": "The method should be overridden in a subclass of WalletActivity.",
                  "post-conditions": "The new intent is processed by the handleIntent() method."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.onOptionsItemSelected(android.view.MenuItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.onOptionsItemSelected(android.view.MenuItem)",
            "description": {
              "What": "Handles the selection of options in the wallet activity menu and performs corresponding actions.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "android.view.MenuItem",
                  "description": "The selected menu item."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the menu item selection was handled, false otherwise."
              },
              "Why": "To provide functionality for handling menu item selections in the wallet activity.",
              "How-to-use": "Override this method in a WalletActivity subclass to define custom actions for menu item selections.",
              "How-it-is-done": "The method uses a switch statement to determine the action based on the selected menu item ID and calls corresponding methods to handle the actions.",
              "Property": {
                "pre-conditions": "The method should be overridden in a subclass of WalletActivity.",
                "post-conditions": "The selected menu item action is performed based on the item ID."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.onPause()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.onPause()",
            "description": {
              "What": "This method removes any pending callbacks and messages from the handler when the activity is paused.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to ensure that any pending callbacks or messages are removed from the handler when the activity is paused, preventing potential memory leaks or unwanted behavior.",
              "How-to-use": "Simply call this method within the onPause() method of a WalletActivity class to remove any pending callbacks and messages from the handler.",
              "How-it-is-done": "The method overrides the onPause() method of the superclass, removes any callbacks and messages associated with the handler by passing null as the argument to removeCallbacksAndMessages(), and then calls the superclass's onPause() method.",
              "Property": {
                "pre-conditions": [
                  "The class containing this method must extend WalletActivity or a superclass of WalletActivity."
                ],
                "post-conditions": [
                  "Any pending callbacks and messages associated with the handler are removed when the activity is paused."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.onPrepareOptionsMenu(android.view.Menu)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.onPrepareOptionsMenu(android.view.Menu)",
            "description": {
              "What": "This method prepares the options menu by setting visibility and enabling/disabling certain menu items based on various conditions.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu object to be prepared."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the menu is successfully prepared."
              },
              "Why": "To dynamically adjust the options menu based on the current state of the wallet and device.",
              "How-to-use": "Call this method in the WalletActivity class to dynamically update the options menu based on specific conditions.",
              "How-it-is-done": "The method first retrieves necessary resources and external storage state. It then sets the visibility and enables/disables menu items based on predefined constants and conditions. Finally, it updates the 'Encrypt Keys' option based on the encryption status of the wallet.",
              "Property": {
                "pre-conditions": [
                  "The method should be called within a WalletActivity class context."
                ],
                "post-conditions": [
                  "The options menu will be updated with the appropriate visibility and enabled/disabled status for each menu item."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletActivity.onResume()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletActivity.onResume()",
            "description": {
              "What": "Starts the BlockchainService after a delay of 1000 milliseconds when the activity resumes.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To ensure that the BlockchainService is started after a delay when the activity resumes.",
              "How-to-use": "Simply extend the WalletActivity class and override the onResume method to include the desired functionality.",
              "How-it-is-done": "The method calls the superclass onResume method, then uses a handler to post a delayed task that starts the BlockchainService with the current activity context after 1000 milliseconds.",
              "Property": {
                "pre-conditions": "The WalletActivity class must be extended and the onResume method must be overridden.",
                "post-conditions": "The BlockchainService will be started after a delay of 1000 milliseconds when the activity resumes."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletAddressDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletAddressDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletAddressDialogFragment.de.schildbach.wallet.ui.WalletAddressDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressDialogFragment.de.schildbach.wallet.ui.WalletAddressDialogFragment()",
            "description": {
              "What": "Initialize a new instance of WalletAddressDialogFragment.",
              "Parameters": [
                {
                  "name": "",
                  "type": "",
                  "description": ""
                }
              ],
              "Returns": {
                "type": "WalletAddressDialogFragment",
                "description": "A new instance of WalletAddressDialogFragment."
              },
              "Why": "To provide a way to create a new instance of WalletAddressDialogFragment.",
              "How-to-use": "Simply call the constructor WalletAddressDialogFragment() to create a new instance of WalletAddressDialogFragment.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of WalletAddressDialogFragment.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new instance of WalletAddressDialogFragment is created."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressDialogFragment.instance(org.bitcoinj.core.Address,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressDialogFragment.instance(org.bitcoinj.core.Address,java.lang.String)",
            "description": {
              "What": "Creates an instance of WalletAddressDialogFragment with the provided address and optional label.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to display in the dialog."
                },
                {
                  "name": "addressLabel",
                  "type": "java.lang.String",
                  "description": "Optional label for the address."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.WalletAddressDialogFragment",
                "description": "An instance of WalletAddressDialogFragment with the specified address and label."
              },
              "Why": "To create a dialog fragment for displaying a Bitcoin address with an optional label.",
              "How-to-use": "Call this static method with the Bitcoin address and optional label to create an instance of WalletAddressDialogFragment.",
              "How-it-is-done": "The method creates a new instance of WalletAddressDialogFragment, sets the address and label as arguments in a Bundle, and returns the fragment.",
              "Property": {
                "pre-conditions": [
                  "The address parameter must not be null."
                ],
                "post-conditions": [
                  "The returned WalletAddressDialogFragment instance will have the specified address and label set as arguments."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressDialogFragment.onAttach(android.content.Context)",
            "description": {
              "method": {
                "What": "Assign the context to the activity field of the WalletAddressDialogFragment class.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context to be assigned to the activity field."
                  }
                ],
                "Returns": "void",
                "Why": "To set the activity field of the class to the provided context for further use within the fragment.",
                "How-to-use": "Call this method with a valid context parameter before interacting with the WalletAddressDialogFragment instance.",
                "How-it-is-done": "The method calls the superclass method onAttach(context) and then assigns the context to the activity field of the class by casting it to AbstractWalletActivity.",
                "Property": {
                  "pre-conditions": [
                    "The context parameter must not be null."
                  ],
                  "post-conditions": [
                    "The activity field of the WalletAddressDialogFragment class is set to the provided context."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog displaying a Bitcoin address with a QR code and options to share the address.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                },
                {
                  "name": "args",
                  "type": "android.os.Bundle",
                  "description": "Arguments passed to the dialog."
                },
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to display."
                },
                {
                  "name": "addressStr",
                  "type": "java.lang.String",
                  "description": "The base58 representation of the Bitcoin address."
                },
                {
                  "name": "addressLabel",
                  "type": "java.lang.String",
                  "description": "The label associated with the Bitcoin address."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying the Bitcoin address with options to share."
              },
              "Why": "To provide a user-friendly way to display and share Bitcoin addresses.",
              "How-to-use": "Call onCreateDialog method with the saved instance state and arguments containing the Bitcoin address and label to display the dialog.",
              "How-it-is-done": "The method retrieves the Bitcoin address and label from arguments, creates a dialog with a QR code of the address, sets up a share button to share the address, and handles click events for dismissing the dialog.",
              "Property": {
                "pre-conditions": "The arguments must contain the Bitcoin address and label.",
                "post-conditions": "A dialog displaying the Bitcoin address with a QR code and share options is created."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressDialogFragment.show(android.support.v4.app.FragmentManager,org.bitcoinj.core.Address,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressDialogFragment.show(android.support.v4.app.FragmentManager,org.bitcoinj.core.Address,java.lang.String)",
            "description": {
              "What": "Show a dialog fragment displaying a Bitcoin address with an optional label.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to show the dialog fragment."
                },
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to display in the dialog fragment."
                },
                {
                  "name": "addressLabel",
                  "type": "java.lang.String",
                  "description": "Optional label for the Bitcoin address."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to display a Bitcoin address in a dialog fragment.",
              "How-to-use": "Call this static method with the FragmentManager, Bitcoin address, and optional label to display the address in a dialog fragment.",
              "How-it-is-done": "The method creates an instance of WalletAddressDialogFragment with the provided address and label, then shows the dialog fragment using the FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The Bitcoin address (address) must not be null."
                ],
                "post-conditions": [
                  "A dialog fragment displaying the Bitcoin address is shown on the screen."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletAddressFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletAddressFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletAddressFragment.createNdefMessage(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressFragment.createNdefMessage(java.lang.String)",
            "description": {
              "What": "Creates an NdefMessage containing a URI record for NFC communication.",
              "Parameters": [
                {
                  "name": "uri",
                  "type": "java.lang.String",
                  "description": "The URI to be included in the NdefMessage."
                }
              ],
              "Returns": {
                "type": "android.nfc.NdefMessage",
                "description": "An NdefMessage containing the URI record, or null if the input URI is null."
              },
              "Why": "To facilitate NFC communication by creating NdefMessages with URI records.",
              "How-to-use": "Call the method with a URI string as the parameter to create an NdefMessage for NFC communication.",
              "How-it-is-done": "The method checks if the input URI is not null, then creates an NdefMessage with a single NdefRecord containing the URI. If the URI is null, it returns null.",
              "Property": {
                "pre-conditions": "The input URI should not be null.",
                "post-conditions": "The method returns an NdefMessage with a URI record if the input URI is not null, otherwise it returns null."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressFragment.de.schildbach.wallet.ui.WalletAddressFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressFragment.de.schildbach.wallet.ui.WalletAddressFragment()",
            "description": {
              "What": "This method is a constructor for the WalletAddressFragment class.",
              "Parameters": [],
              "Returns": {
                "type": "WalletAddressFragment",
                "description": "A new instance of the WalletAddressFragment class."
              },
              "Why": "To initialize a new instance of the WalletAddressFragment class.",
              "How-to-use": "Simply call the constructor to create a new WalletAddressFragment object.",
              "How-it-is-done": "The constructor initializes a new instance of the WalletAddressFragment class without any parameters.",
              "Property": {
                "pre-conditions": "No specific pre-conditions for calling this constructor.",
                "post-conditions": "A new instance of the WalletAddressFragment class is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressFragment.onAttach(android.content.Context)",
            "description": {
              "What": "This method initializes the activity and NFC adapter for the WalletAddressFragment.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the fragment."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the necessary components for the WalletAddressFragment to function properly.",
              "How-to-use": "Call this method in the onAttach() lifecycle method of the WalletAddressFragment to initialize the activity and NFC adapter.",
              "How-it-is-done": "The method first calls the super.onAttach(context) to ensure proper initialization, then casts the context to WalletActivity and assigns it to the activity field, and finally gets the default NFC adapter for the activity.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The activity field is initialized with the WalletActivity context.",
                  "The nfcAdapter field is initialized with the default NFC adapter for the activity."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "This method initializes the WalletAddressFragment by setting up observers for QR code and Bitcoin URI changes.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle changes in QR code and Bitcoin URI data and update the UI accordingly.",
              "How-to-use": "Call this method in the onCreate() method of the WalletAddressFragment class passing the saved instance state as a parameter.",
              "How-it-is-done": "The method initializes the ViewModel, sets up observers for QR code and Bitcoin URI changes, and updates the UI components accordingly.",
              "Property": {
                "pre-conditions": [
                  "The WalletAddressFragment class must be properly set up and attached to an activity."
                ],
                "post-conditions": [
                  "The QR code and Bitcoin URI observers are set up and will react to changes in the ViewModel data."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "What": "This method inflates a layout file to create the view for the WalletAddressFragment and initializes some UI elements.",
              "Parameters": [
                {
                  "name": "inflater",
                  "type": "android.view.LayoutInflater",
                  "description": "The LayoutInflater object that can be used to inflate any views in the fragment."
                },
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view that the fragment's UI should be attached to."
                },
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment, if it is being re-created from a previous saved state."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The view created for the WalletAddressFragment."
              },
              "Why": "To set up the UI elements and layout for displaying the wallet address QR code in the fragment.",
              "How-to-use": "Call this method when creating the WalletAddressFragment to initialize the view and UI elements for displaying the wallet address QR code.",
              "How-it-is-done": "The method inflates the layout file 'wallet_address_fragment', finds the ImageView and CardView elements by their IDs, sets some properties for the CardView, and returns the inflated view.",
              "Property": {
                "pre-conditions": "The layout file 'wallet_address_fragment' must exist in the resources. The IDs 'bitcoin_address_qr' and 'bitcoin_address_qr_card' must be present in the layout file.",
                "post-conditions": "The view for the WalletAddressFragment is created with the initialized UI elements for displaying the wallet address QR code."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletAddressViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletAddressViewModel.de.schildbach.wallet.ui.WalletAddressViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel.de.schildbach.wallet.ui.WalletAddressViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for displaying wallet address information.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to create the ViewModel."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.WalletAddressViewModel",
                "description": "A ViewModel instance for managing wallet address information."
              },
              "Why": "To provide a ViewModel that can be used to display current wallet address and generate QR codes or Bitcoin URIs.",
              "How-to-use": "Create an instance of WalletAddressViewModel by passing an Application context, then observe the LiveData objects like currentAddress, ownName, qrCode, and bitcoinUri to update UI based on changes.",
              "How-it-is-done": "The method initializes LiveData objects for currentAddress, ownName, qrCode, and bitcoinUri, and adds observers to update QR codes and Bitcoin URIs when the current address or label changes.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The WalletAddressViewModel instance is created with LiveData objects for managing wallet address information."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel.maybeGenerateBitcoinUri()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel.maybeGenerateBitcoinUri()",
            "description": {
              "What": "Generates a Bitcoin URI based on the current address and owner's name.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The current Bitcoin address."
                },
                {
                  "name": "ownName",
                  "type": "String",
                  "description": "The owner's name associated with the address."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To generate a Bitcoin URI for the current address, which can be used for transactions or sharing payment information.",
              "How-to-use": "Call this method after setting the current address and owner's name values, then retrieve the generated Bitcoin URI from the 'bitcoinUri' LiveData.",
              "How-it-is-done": "The method checks if the current address is not null, then generates a Bitcoin URI using the 'uri' method with the address and owner's name, and sets it to the 'bitcoinUri' LiveData.",
              "Property": {
                "pre-conditions": "The 'currentAddress' and 'ownName' LiveData must be set before calling this method.",
                "post-conditions": "The 'bitcoinUri' LiveData will be updated with the generated Bitcoin URI if the current address is not null."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel.maybeGenerateQrCode()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel.maybeGenerateQrCode()",
            "description": {
              "What": "Generates a QR code bitmap for the current wallet address with an optional name.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The current wallet address."
                },
                {
                  "name": "ownName",
                  "type": "String",
                  "description": "An optional name to include in the QR code."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To asynchronously generate a QR code bitmap for the current wallet address with an optional name for display purposes.",
              "How-to-use": "Call this method to generate a QR code bitmap for the current wallet address with an optional name, which will be posted to the 'qrCode' live data.",
              "How-it-is-done": "The method checks if the current wallet address is not null, then asynchronously generates a QR code bitmap using the 'uri' method with the address and optional name, and posts the result to the 'qrCode' live data.",
              "Property": {
                "pre-conditions": [
                  "The 'currentAddress' live data must be set with a valid wallet address."
                ],
                "post-conditions": [
                  "The 'qrCode' live data will be updated with the generated QR code bitmap."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel.uri(org.bitcoinj.core.Address,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel.uri(org.bitcoinj.core.Address,java.lang.String)",
            "description": {
              "What": "This method converts a Bitcoin address and label into a Bitcoin URI.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to be converted."
                },
                {
                  "name": "label",
                  "type": "java.lang.String",
                  "description": "The label associated with the address."
                },
                "Returns"
              ],
              "type": "java.lang.String",
              "description": "A Bitcoin URI string representing the address and label."
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.addWalletListener(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.addWalletListener(org.bitcoinj.wallet.Wallet)",
            "description": {
              "method": "Add wallet listener to receive notifications for coins received, coins sent, reorganization events, and change events.",
              "parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet to add the listener to."
                }
              ],
              "returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "why": "To allow the ViewModel to react to changes in the wallet's state and update the UI accordingly.",
              "how-to-use": "Call this method with the wallet instance as the parameter to start receiving notifications for various wallet events.",
              "how-it-is-done": "The method adds a listener to the wallet for coins received, coins sent, reorganization events, and change events using the provided walletListener instance.",
              "property": {
                "pre-conditions": [
                  "The wallet instance must not be null."
                ],
                "post-conditions": [
                  "The wallet listener is successfully added to the wallet to receive notifications."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a new instance of CurrentAddressLiveData with a WalletApplication object.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication object to be used for initialization."
                }
              ],
              "Returns": {
                "type": "CurrentAddressLiveData",
                "description": "A new instance of CurrentAddressLiveData initialized with the provided WalletApplication object."
              },
              "Why": "To create a LiveData object that holds the current address of the wallet for observing changes.",
              "How-to-use": "Create a new instance of WalletAddressViewModel$CurrentAddressLiveData by passing a WalletApplication object as a parameter.",
              "How-it-is-done": "The constructor initializes the CurrentAddressLiveData object by calling the super constructor with the provided WalletApplication object.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "A new instance of CurrentAddressLiveData is created with the provided WalletApplication object."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.load()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.load()",
            "description": {
              "What": "Asynchronously loads the current receive address from the wallet and updates the LiveData with the new value.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which to retrieve the current receive address."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the UI with the current receive address without blocking the main thread.",
              "How-to-use": "Create an instance of WalletAddressViewModel$CurrentAddressLiveData, passing the wallet as a parameter, and observe the LiveData for changes in the current receive address.",
              "How-it-is-done": "The method retrieves the wallet instance, then executes a Runnable task asynchronously using AsyncTask. Within the task, it sets the Context and updates the LiveData with the current receive address from the wallet.",
              "Property": {
                "pre-conditions": [
                  "The wallet instance must be valid and initialized."
                ],
                "post-conditions": [
                  "The LiveData is updated with the current receive address from the wallet."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method adds a listener to a Bitcoin wallet and loads data related to the wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The Bitcoin wallet to be activated."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle wallet activation events and load necessary data for the wallet.",
              "How-to-use": "Call this method with a valid Bitcoin wallet object to activate the wallet and load data.",
              "How-it-is-done": "The method adds a listener to the wallet to listen for events and then calls the 'load' method to load necessary data for the wallet.",
              "Property": {
                "pre-conditions": [
                  "The 'wallet' parameter must not be null."
                ],
                "post-conditions": [
                  "A listener is added to the wallet.",
                  "Data related to the wallet is loaded."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method removes a wallet listener when the wallet becomes inactive.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that has become inactive."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and prevent memory leaks by removing the wallet listener when it is no longer needed.",
              "How-to-use": "Call this method when the wallet becomes inactive to ensure that the wallet listener is removed properly.",
              "How-it-is-done": "The method simply calls the 'removeWalletListener' method passing the inactive wallet as a parameter to remove the listener.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "The wallet listener for the inactive wallet is successfully removed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.removeWalletListener(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData.removeWalletListener(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method removes a listener from the specified wallet for change events, reorganization events, coins sent events, and coins received events.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which to remove the listener."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow for the removal of specific event listeners from a wallet object to manage resources efficiently.",
              "How-to-use": "Call this method with the wallet object from which you want to remove the listener to stop receiving notifications for change, reorganization, coins sent, and coins received events.",
              "How-it-is-done": "The method calls the remove methods on the wallet object for the specified listener for change events, reorganization events, coins sent events, and coins received events.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must not be null."
                ],
                "post-conditions": [
                  "The specified listener is successfully removed from the wallet object for change events, reorganization events, coins sent events, and coins received events."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener.de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener.de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener()",
            "description": {
              "method": {
                "What": "Initialize a new instance of WalletListener.",
                "Parameters": [
                  {
                    "name": "None",
                    "type": "None",
                    "description": "No parameters are required for this constructor."
                  }
                ],
                "Returns": {
                  "type": "WalletListener",
                  "description": "A new instance of WalletListener is returned."
                },
                "Why": "To provide a default constructor for initializing WalletListener instances.",
                "How-to-use": "Simply create a new instance of WalletListener by calling the constructor.",
                "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of WalletListener.",
                "Property": {
                  "pre-conditions": "No pre-conditions are required for this constructor.",
                  "post-conditions": "A new instance of WalletListener is successfully created."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener.onCoinsReceived(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener.onCoinsReceived(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)",
            "description": {
              "What": "Triggers a load operation when coins are received in the wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet receiving the coins."
                },
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction containing the received coins."
                },
                {
                  "name": "prevBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The previous balance of the wallet before receiving the coins."
                },
                {
                  "name": "newBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The new balance of the wallet after receiving the coins."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the event of receiving coins in the wallet and trigger a load operation.",
              "How-to-use": "Create an instance of WalletAddressViewModel$CurrentAddressLiveData$WalletListener and register it as a listener to a wallet object. When coins are received in the wallet, the onCoinsReceived method will be automatically called.",
              "How-it-is-done": "The method simply calls the triggerLoad() method to initiate a load operation when coins are received in the wallet.",
              "Property": {
                "pre-conditions": "The wallet object, transaction object, previous balance, and new balance must be valid and not null.",
                "post-conditions": "After the method is executed, a load operation will be triggered to handle the received coins."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener.onCoinsSent(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener.onCoinsSent(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)",
            "description": {
              "What": "Triggers a load operation when coins are sent from the wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which coins are sent."
                },
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction that sent the coins."
                },
                {
                  "name": "prevBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The previous balance of the wallet before the coins were sent."
                },
                {
                  "name": "newBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The new balance of the wallet after the coins were sent."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the event of coins being sent from the wallet and trigger a load operation.",
              "How-to-use": "Create an instance of WalletAddressViewModel$CurrentAddressLiveData$WalletListener and register it as a listener to a Wallet object. When coins are sent from the wallet, the onCoinsSent method will be called automatically.",
              "How-it-is-done": "The method simply calls the triggerLoad() method, which presumably initiates a load operation to update the UI or perform other necessary actions in response to coins being sent.",
              "Property": {
                "pre-conditions": "The wallet, transaction, previous balance, and new balance parameters must not be null.",
                "post-conditions": "After the method is called, a load operation should be triggered to update the UI or perform other necessary actions."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener.onReorganize(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener.onReorganize(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Triggers a load operation when the wallet undergoes a reorganization.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that undergoes a reorganization."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle reorganization events in the wallet and trigger necessary actions.",
              "How-to-use": "Create an instance of WalletAddressViewModel$CurrentAddressLiveData$WalletListener and override the onReorganize method to define custom behavior when the wallet undergoes a reorganization.",
              "How-it-is-done": "When the onReorganize method is called with a wallet parameter, it simply calls the triggerLoad method to initiate a load operation.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "A load operation is triggered in response to the wallet reorganization."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener.onWalletChanged(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressViewModel$CurrentAddressLiveData$WalletListener.onWalletChanged(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Triggers a load operation when the wallet is changed.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet object that has been changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the event of a wallet being changed and trigger a load operation accordingly.",
              "How-to-use": "Create an instance of WalletAddressViewModel$CurrentAddressLiveData$WalletListener and pass it the wallet object to monitor changes.",
              "How-it-is-done": "When the onWalletChanged method is called with a new wallet object, it simply calls the triggerLoad method to initiate a load operation.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "A load operation is triggered after the wallet is changed."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletAddressesAdapter": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletAddressesAdapter.de.schildbach.wallet.ui.WalletAddressesAdapter(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.de.schildbach.wallet.ui.WalletAddressesAdapter(android.content.Context)",
            "description": {
              "What": "Initialize a WalletAddressesAdapter object with colors and layout inflater.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to access resources and create layout inflater."
                }
              ],
              "Returns": {
                "type": "WalletAddressesAdapter",
                "description": "A new instance of WalletAddressesAdapter initialized with colors and layout inflater."
              },
              "Why": "To set up the necessary colors and layout inflater for displaying wallet addresses in a list.",
              "How-to-use": "Create a new instance of WalletAddressesAdapter by passing a valid context as a parameter.",
              "How-it-is-done": "The method initializes the color variables by retrieving them from the context's resources and sets up the layout inflater using the context.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The WalletAddressesAdapter object is initialized with colors and layout inflater."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.getCount()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.getCount()",
            "description": {
              "What": "This method returns the total count of wallet addresses, including both derived keys and random keys.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The total count of wallet addresses, including both derived keys and random keys."
              },
              "Why": "To provide the total count of wallet addresses displayed in the adapter for UI purposes.",
              "How-to-use": "Simply call the getCount() method on an instance of WalletAddressesAdapter to get the total count of wallet addresses.",
              "How-it-is-done": "The method calculates the count by adding the size of derivedKeys list to the size of randomKeys list plus 1 if randomKeys is not empty.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The returned count is the sum of derivedKeys size and randomKeys size plus 1 if randomKeys is not empty."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.getItem(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.getItem(int)",
            "description": {
              "What": "This method returns an item at a specific position in the list of derived keys and random keys.",
              "Parameters": [
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item to retrieve in the list."
                }
              ],
              "Returns": {
                "type": "Object",
                "description": "The item at the specified position in the list."
              },
              "Why": "To provide a way to retrieve items from the list of derived keys and random keys in the adapter.",
              "How-to-use": "Call this method with the position of the item to retrieve in the list.",
              "How-it-is-done": "The method first checks if the position is within the range of derived keys, then returns the item from derivedKeys list. If the position is at the end of derivedKeys list, it returns null. Otherwise, it returns the item from randomKeys list.",
              "Property": {
                "pre-conditions": "The derivedKeys and randomKeys lists must be initialized before calling this method.",
                "post-conditions": "The returned item may be null if the position is at the end of derivedKeys list."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.getItemId(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.getItemId(int)",
            "description": {
              "What": "Returns the item ID for the specified position in the adapter.",
              "Parameters": [
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item in the adapter."
                }
              ],
              "Returns": {
                "type": "long",
                "description": "The item ID for the specified position, or 0 if the key is null."
              },
              "Why": "To provide a way to retrieve the item ID for a specific position in the adapter.",
              "How-to-use": "Create an instance of WalletAddressesAdapter and call getItemId(int) with the desired position as the argument to get the item ID.",
              "How-it-is-done": "The method retrieves the item at the specified position using getItem(position) and returns its hash code as the item ID, or 0 if the item is null.",
              "Property": {
                "pre-conditions": "The adapter must contain valid items.",
                "post-conditions": "The method will return a unique item ID for each position in the adapter."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.getItemViewType(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.getItemViewType(int)",
            "description": {
              "What": "This method determines the type of view for a specific item in the WalletAddressesAdapter based on its position in the list of derived keys.",
              "Parameters": [
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item in the list."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "An integer representing the type of view for the item at the given position."
              },
              "Why": "To differentiate between different types of views in the adapter based on the position of the item.",
              "How-to-use": "Call this method with the position of the item in the list to determine the type of view to be used for that item in the adapter.",
              "How-it-is-done": "The method first checks if the position is less than the number of derived keys, then returns 0. If the position is equal to the number of derived keys, it returns 1. Otherwise, it returns 0.",
              "Property": {
                "pre-conditions": "The derivedKeys list must be initialized before calling this method.",
                "post-conditions": "The method will return an integer value representing the type of view for the item at the given position."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.getView(int,android.view.View,android.view.ViewGroup)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.getView(int,android.view.View,android.view.ViewGroup)",
            "description": {
              "What": "The method returns a view based on the position in the adapter, either a row key or a row separator.",
              "Parameters": [
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item in the adapter."
                },
                {
                  "name": "convertView",
                  "type": "android.view.View",
                  "description": "The old view to reuse, if possible."
                },
                {
                  "name": "parent",
                  "type": "android.view.ViewGroup",
                  "description": "The parent that this view will eventually be attached to."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The view to be displayed at the specified position."
              },
              "Why": "To provide custom views for different positions in the adapter, such as keys and separators.",
              "How-to-use": "Create an instance of WalletAddressesAdapter and set it as the adapter for a ListView or GridView to display addresses with keys and separators.",
              "How-it-is-done": "The method checks the type of item at the given position and returns a view accordingly, either by reusing the old view or creating a new one.",
              "Property": {
                "pre-conditions": "The adapter must be set with valid data before calling this method.",
                "post-conditions": "The returned view will be displayed at the specified position in the parent view group."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.getViewTypeCount()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.getViewTypeCount()",
            "description": {
              "What": "This method returns the number of view types that the adapter will create.",
              "Parameters": [],
              "Returns": {
                "Type": "int",
                "Description": "The number of view types, which is 2 in this case."
              },
              "Why": "To specify the number of different view types that the adapter will handle.",
              "How-to-use": "Simply call getViewTypeCount() on an instance of WalletAddressesAdapter to get the number of view types.",
              "How-it-is-done": "The method overrides the getViewTypeCount() method from the base class and returns a hardcoded value of 2.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.hasStableIds()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.hasStableIds()",
            "description": {
              "method": {
                "What": "This method indicates whether the adapter has stable IDs for its items.",
                "Parameters": [
                  {
                    "name": "None",
                    "type": "None",
                    "description": "This method does not take any parameters."
                  }
                ],
                "Returns": {
                  "type": "boolean",
                  "description": "Returns a boolean value indicating whether the adapter has stable IDs."
                },
                "Why": "This method is provided to inform the system whether the adapter has stable IDs for its items.",
                "How-to-use": "Simply call this method on an instance of WalletAddressesAdapter to check if it has stable IDs.",
                "How-it-is-done": "The method simply returns a boolean value of true, indicating that the adapter has stable IDs for its items.",
                "Property": {
                  "pre-conditions": "None",
                  "post-conditions": "The method always returns true, indicating that the adapter has stable IDs."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.replaceDerivedKeys(java.util.Collection)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.replaceDerivedKeys(java.util.Collection)",
            "description": {
              "What": "Replaces the current list of derived keys with a new collection of ECKey objects and notifies the adapter of the data set change.",
              "Parameters": [
                {
                  "name": "keys",
                  "type": "java.util.Collection<org.bitcoinj.core.ECKey>",
                  "description": "The new collection of ECKey objects to replace the current list of derived keys."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the list of derived keys in the adapter with a new set of keys and trigger a UI update.",
              "How-to-use": "Create a collection of ECKey objects, call replaceDerivedKeys() method on the WalletAddressesAdapter instance passing the collection as the parameter.",
              "How-it-is-done": "The method clears the current list of derived keys, adds all keys from the provided collection, and notifies the adapter of the data set change.",
              "Property": {
                "pre-conditions": [
                  "The keys parameter must not be null."
                ],
                "post-conditions": [
                  "The derivedKeys list in the adapter is updated with the keys from the provided collection.",
                  "The adapter's UI is notified of the data set change."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.replaceRandomKeys(java.util.Collection)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.replaceRandomKeys(java.util.Collection)",
            "description": {
              "What": "This method replaces the existing random keys in the adapter with a new collection of ECKey objects and notifies the adapter of the data set change.",
              "Parameters": [
                {
                  "name": "keys",
                  "type": "java.util.Collection<org.bitcoinj.core.ECKey>",
                  "description": "The new collection of ECKey objects to replace the existing random keys in the adapter."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the random keys in the adapter with a new set of keys and trigger a UI update to reflect the changes.",
              "How-to-use": "Create a collection of ECKey objects, call the replaceRandomKeys method on an instance of WalletAddressesAdapter with the collection as the parameter, and the adapter will update its random keys with the new collection.",
              "How-it-is-done": "The method first clears the existing randomKeys list in the adapter, then adds all the keys from the input collection to the randomKeys list, and finally calls notifyDataSetChanged() to notify any attached observers of the data set change.",
              "Property": {
                "pre-conditions": [
                  "The keys parameter must not be null."
                ],
                "post-conditions": [
                  "The randomKeys list in the adapter will be replaced with the keys from the input collection.",
                  "Any attached observers of the adapter will be notified of the data set change."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.rowKey(int,android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.rowKey(int,android.view.View)",
            "description": {
              "What": "This method populates a row in a wallet addresses adapter with information about a Bitcoin key and its associated address.",
              "Parameters": [
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item in the adapter."
                },
                {
                  "name": "row",
                  "type": "android.view.View",
                  "description": "The view representing the row to be populated."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The populated view representing the row."
              },
              "Why": "To display Bitcoin key information and associated address in a wallet addresses adapter.",
              "How-to-use": "Call this method passing the position of the item and the row view to be populated.",
              "How-it-is-done": "The method retrieves the ECKey and address from the adapter, sets the address and label views, changes text colors based on key rotation status, and shows or hides a message view accordingly.",
              "Property": {
                "pre-conditions": [
                  "The adapter must contain valid ECKey objects."
                ],
                "post-conditions": [
                  "The row view is populated with the key's address and label information."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.rowSeparator(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.rowSeparator(android.view.View)",
            "description": {
              "What": "This method creates or updates a row view for a separator in the wallet addresses adapter.",
              "Parameters": [
                {
                  "name": "row",
                  "type": "android.view.View",
                  "description": "The row view to be updated or created for the separator."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The updated or created row view for the separator."
              },
              "Why": "To provide a visual separation between different sections of addresses in the wallet addresses adapter.",
              "How-to-use": "Call this method passing the row view to be updated or created for the separator, and it will set the text to indicate a random receiving address.",
              "How-it-is-done": "The method first checks if the row view is null, then inflates the layout for the separator if needed. It then finds the text view within the row view and sets the text to indicate a random receiving address.",
              "Property": {
                "pre-conditions": "The inflater must be initialized before calling this method.",
                "post-conditions": "The row view passed as a parameter will be updated or created with the separator text."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.setAddressBook(java.util.Map)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.setAddressBook(java.util.Map)",
            "description": {
              "What": "This method sets the address book data for the WalletAddressesAdapter and notifies any registered observers of the data set change.",
              "Parameters": [
                {
                  "name": "addressBook",
                  "type": "java.util.Map<java.lang.String, de.schildbach.wallet.data.AddressBookEntry>",
                  "description": "A map containing address book entries with String keys and AddressBookEntry values."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the address book data in the adapter and trigger a UI update when the address book changes.",
              "How-to-use": "Create a Map<String, AddressBookEntry> object with the address book data, then call setAddressBook() on an instance of WalletAddressesAdapter with the created map as the parameter.",
              "How-it-is-done": "The method simply assigns the provided address book map to the adapter's addressBook field and calls notifyDataSetChanged() to inform any observers of the data set change.",
              "Property": {
                "pre-conditions": [
                  "The addressBook parameter must not be null."
                ],
                "post-conditions": [
                  "The address book data in the adapter is updated with the provided map.",
                  "Any registered observers of the adapter are notified of the data set change."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesAdapter.setWallet(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesAdapter.setWallet(org.bitcoinj.wallet.Wallet)",
            "description": {
              "method": {
                "What": "Sets the wallet for the adapter and notifies any registered observers of the data set change.",
                "Parameters": [
                  {
                    "name": "wallet",
                    "type": "org.bitcoinj.wallet.Wallet",
                    "description": "The wallet to set for the adapter."
                  }
                ],
                "Returns": "void",
                "Why": "To update the wallet data in the adapter and trigger UI updates.",
                "How-to-use": "Create an instance of WalletAddressesAdapter and call setWallet with the desired Wallet object to update the data in the adapter.",
                "How-it-is-done": "Assign the provided wallet parameter to the class variable 'wallet' and call notifyDataSetChanged() to notify any observers of the data set change.",
                "Property": {
                  "pre-conditions": [
                    "The wallet parameter must not be null."
                  ],
                  "post-conditions": [
                    "The wallet variable in the adapter is updated with the provided wallet object.",
                    "Any registered observers are notified of the data set change."
                  ]
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletAddressesFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletAddressesFragment.de.schildbach.wallet.ui.WalletAddressesFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesFragment.de.schildbach.wallet.ui.WalletAddressesFragment()",
            "description": {
              "What": "This method is a constructor for the WalletAddressesFragment class.",
              "Parameters": [],
              "Returns": "WalletAddressesFragment",
              "Why": "To initialize a new instance of the WalletAddressesFragment class.",
              "How-to-use": "Simply call the constructor to create a new WalletAddressesFragment object.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the WalletAddressesFragment class.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new WalletAddressesFragment object is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Initialize various fields of the WalletAddressesFragment class when it is attached to a context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context to which the fragment is attached."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up necessary dependencies and references for the fragment to function properly when attached to a context.",
              "How-to-use": "Override this method in a WalletAddressesFragment subclass and provide the necessary initialization logic for the fragment.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then assigns the context to the activity field, retrieves the WalletApplication from the activity, gets the AddressBookDao from the AppDatabase, and obtains the ClipboardManager service from the activity.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "The activity, application, addressBookDao, and clipboardManager fields of the WalletAddressesFragment are properly initialized."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initializes the WalletAddressesFragment by setting up observers for various data sources and creating an adapter for displaying wallet addresses.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the fragment with necessary data sources and adapters for displaying wallet addresses.",
              "How-to-use": "Call this method in the onCreate() method of a WalletAddressesFragment subclass, passing the savedInstanceState parameter.",
              "How-it-is-done": "The method first calls the super.onCreate() method, sets up observers for various data sources using ViewModelProviders, creates an adapter for displaying wallet addresses, and sets the adapter to the fragment's list.",
              "Property": {
                "pre-conditions": [
                  "The fragment must be a subclass of WalletAddressesFragment.",
                  "The savedInstanceState parameter must not be null."
                ],
                "post-conditions": [
                  "The fragment is set up with observers for data sources and an adapter for displaying wallet addresses."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)",
            "description": {
              "What": "Inflates the menu for the WalletAddressesFragment with options from R.menu.wallet_addresses_fragment_options.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu in which the options will be inflated."
                },
                {
                  "name": "inflater",
                  "type": "android.view.MenuInflater",
                  "description": "The MenuInflater used to inflate the menu options."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide options for the WalletAddressesFragment menu and allow users to interact with the fragment.",
              "How-to-use": "Override this method in WalletAddressesFragment class, call inflater.inflate() with the desired menu resource ID, and call super.onCreateOptionsMenu(menu, inflater) to ensure proper menu creation.",
              "How-it-is-done": "The method calls inflater.inflate() with the menu resource ID R.menu.wallet_addresses_fragment_options to inflate the menu options defined in the XML file. It then calls super.onCreateOptionsMenu(menu, inflater) to handle any additional menu creation logic.",
              "Property": {
                "pre-conditions": [
                  "The method must be overridden in a class that extends WalletAddressesFragment."
                ],
                "post-conditions": [
                  "The menu for WalletAddressesFragment will be inflated with options from R.menu.wallet_addresses_fragment_options."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesFragment.onListItemClick(android.widget.ListView,android.view.View,int,long)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesFragment.onListItemClick(android.widget.ListView,android.view.View,int,long)",
            "description": {
              "What": "Starts an action mode when a list item is clicked in the WalletAddressesFragment.",
              "Parameters": [
                {
                  "name": "l",
                  "type": "android.widget.ListView",
                  "description": "The ListView where the click happened."
                },
                {
                  "name": "v",
                  "type": "android.view.View",
                  "description": "The view that was clicked."
                },
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item clicked."
                },
                {
                  "name": "id",
                  "type": "long",
                  "description": "The id of the item clicked."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle actions when a list item is clicked in the WalletAddressesFragment.",
              "How-to-use": "Override this method in WalletAddressesFragment class and implement the desired actions for different menu items when a list item is clicked.",
              "How-it-is-done": "When a list item is clicked, an action mode is started with options to edit, show QR code, copy to clipboard, or browse the address. Each option triggers a specific action.",
              "Property": {
                "pre-conditions": "The WalletAddressesFragment must be set up with a list of addresses to display.",
                "post-conditions": "An action mode is started with options to interact with the clicked list item."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesFragment.onViewCreated(android.view.View,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesFragment.onViewCreated(android.view.View,android.os.Bundle)",
            "description": {
              "method": {
                "What": "Set the empty text of the view to a bolded string resource for the address book.",
                "Parameters": [
                  {
                    "name": "view",
                    "type": "android.view.View",
                    "description": "The view to set the empty text on."
                  },
                  {
                    "name": "savedInstanceState",
                    "type": "android.os.Bundle",
                    "description": "The saved instance state of the fragment."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To provide a visually appealing and informative message when the address book is empty.",
                "How-to-use": "Call this method in the onViewCreated() method of WalletAddressesFragment passing the view and savedInstanceState as parameters.",
                "How-it-is-done": "The method calls setEmptyText() with a bolded string resource obtained using getString() method.",
                "Property": {
                  "pre-conditions": [
                    "The view parameter must not be null."
                  ],
                  "post-conditions": [
                    "The empty text of the view is set to a bolded string resource."
                  ]
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletAddressesViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletAddressesViewModel.de.schildbach.wallet.ui.WalletAddressesViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel.de.schildbach.wallet.ui.WalletAddressesViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for managing wallet addresses in the application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used for initializing the ViewModel."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.WalletAddressesViewModel",
                "description": "A ViewModel instance for managing wallet addresses."
              },
              "Why": "To provide a centralized way of managing wallet addresses within the application.",
              "How-to-use": "Create an instance of WalletAddressesViewModel by passing the application context as a parameter, then access the different LiveData objects for issued receive keys, imported keys, address book, wallet, and own name.",
              "How-it-is-done": "The method initializes various LiveData objects for different aspects of wallet addresses management, such as issued receive keys, imported keys, address book, wallet data, and own name configuration.",
              "Property": {
                "pre-conditions": "The application context must be a valid instance of android.app.Application.",
                "post-conditions": "The WalletAddressesViewModel instance is initialized with all necessary LiveData objects for managing wallet addresses."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData.de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData.de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a new instance of ImportedKeysLiveData with a WalletApplication object.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication object used to initialize the ImportedKeysLiveData."
                }
              ],
              "Returns": {
                "type": "ImportedKeysLiveData",
                "description": "A new instance of ImportedKeysLiveData initialized with the provided WalletApplication."
              },
              "Why": "To create a LiveData object that holds imported keys for the WalletAddressesViewModel.",
              "How-to-use": "Create a new ImportedKeysLiveData object by passing a WalletApplication instance as the parameter.",
              "How-it-is-done": "The constructor initializes the ImportedKeysLiveData by calling the super constructor with the provided WalletApplication object.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "A new ImportedKeysLiveData object is created with the provided WalletApplication."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData.loadKeys()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData.loadKeys()",
            "description": {
              "What": "This method loads imported keys from a Bitcoin wallet and sorts them based on certain criteria before posting the sorted list as a LiveData value.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The Bitcoin wallet from which imported keys are retrieved."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way to asynchronously load and sort imported keys from a Bitcoin wallet for display purposes.",
              "How-to-use": "To use this method, an instance of ImportedKeysLiveData needs to be created, and the loadKeys() method should be called on that instance after setting the wallet object.",
              "How-it-is-done": "The method uses an AsyncTask to execute the key loading and sorting process in the background. It retrieves imported keys from the wallet, sorts them based on key rotation status and creation time, and then posts the sorted list as a LiveData value.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must be set before calling this method."
                ],
                "post-conditions": [
                  "The LiveData value will be updated with the sorted list of imported keys."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData.onKeysAdded(java.util.List)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData.onKeysAdded(java.util.List)",
            "description": {
              "What": "The method triggers the loading of keys when new keys are added to the list.",
              "Parameters": [
                {
                  "name": "keys",
                  "type": "List<ECKey>",
                  "description": "A list of ECKey objects representing the keys that were added."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the list of keys and ensure consistency when new keys are added.",
              "How-to-use": "Call this method whenever new keys are added to the list to trigger the loading of keys.",
              "How-it-is-done": "The method simply calls the 'loadKeys()' method to reload the keys from the source.",
              "Property": {
                "pre-conditions": [
                  "The 'loadKeys()' method must be implemented and accessible within the class."
                ],
                "post-conditions": [
                  "The keys list will be updated with the newly added keys."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method adds a key chain event listener to the provided wallet and loads keys.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet to which the key chain event listener will be added."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To listen for key chain events and load keys when the wallet becomes active.",
              "How-to-use": "Call this method with a valid Wallet object to set up key chain event listening and key loading for the wallet.",
              "How-it-is-done": "The method adds a key chain event listener to the wallet using the SAME_THREAD threading model and then calls the loadKeys method.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "A key chain event listener is added to the wallet.",
                  "Keys are loaded after the method is called."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$ImportedKeysLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method removes a key chain event listener from the provided wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which the key chain event listener should be removed."
                }
              ],
              "Returns": "void",
              "Why": "To ensure proper cleanup and prevent memory leaks by removing the key chain event listener when the wallet becomes inactive.",
              "How-to-use": "Call this method passing the wallet instance as the parameter when the wallet is no longer active or needed.",
              "How-it-is-done": "The method overrides the onWalletInactive method from the superclass and calls the removeKeyChainEventListener method on the wallet instance with 'this' as the listener to be removed.",
              "Property": {
                "pre-conditions": "The wallet parameter must not be null.",
                "post-conditions": "The key chain event listener is successfully removed from the wallet."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData.de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData.de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a LiveData object for observing issued receive keys in the wallet application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The wallet application instance to be used for creating the LiveData object."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData",
                "description": "An instance of IssuedReceiveKeysLiveData for observing issued receive keys."
              },
              "Why": "To provide a LiveData object for observing issued receive keys in the wallet application.",
              "How-to-use": "Create an instance of WalletAddressesViewModel$IssuedReceiveKeysLiveData by passing a WalletApplication instance as a parameter, then observe the LiveData object to receive updates on issued receive keys.",
              "How-it-is-done": "The constructor initializes the LiveData object by calling the super constructor with the provided WalletApplication instance.",
              "Property": {
                "pre-conditions": [
                  "The WalletApplication instance must not be null."
                ],
                "post-conditions": [
                  "An instance of IssuedReceiveKeysLiveData is created and ready to be observed for updates."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData.loadKeys()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData.loadKeys()",
            "description": {
              "What": "This method loads issued receive keys from the wallet and posts the result to the LiveData.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which to retrieve the issued receive keys."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To asynchronously load issued receive keys from the wallet and update the LiveData with the result.",
              "How-to-use": "Call this method after setting up the WalletAddressesViewModel$IssuedReceiveKeysLiveData instance with the required wallet.",
              "How-it-is-done": "The method retrieves the wallet instance, then executes an AsyncTask to fetch the issued receive keys from the wallet and post the result to the LiveData.",
              "Property": {
                "pre-conditions": [
                  "The WalletAddressesViewModel$IssuedReceiveKeysLiveData instance must be properly initialized with a valid wallet."
                ],
                "post-conditions": [
                  "The LiveData will be updated with the issued receive keys from the wallet."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData.onKeysAdded(java.util.List)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData.onKeysAdded(java.util.List)",
            "description": {
              "What": "This method triggers the loading of keys when new keys are added to the list.",
              "Parameters": [
                {
                  "name": "keys",
                  "type": "List<ECKey>",
                  "description": "A list of ECKey objects representing the keys that were added."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the list of keys and trigger the necessary actions when new keys are added.",
              "How-to-use": "Call this method whenever new keys are added to the list to ensure that the keys are loaded and processed accordingly.",
              "How-it-is-done": "When new keys are added, the method simply calls the 'loadKeys()' method to handle the loading and processing of the keys.",
              "Property": {
                "pre-conditions": [
                  "The 'loadKeys()' method must be properly implemented and functional."
                ],
                "post-conditions": [
                  "The keys added to the list will be loaded and processed as needed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method adds a key chain event listener to the wallet and loads keys for the wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet for which the key chain event listener is added and keys are loaded."
                }
              ],
              "Returns": "void",
              "Why": "To ensure that the wallet has a key chain event listener and keys are loaded when the wallet becomes active.",
              "How-to-use": "Call this method with the active wallet as the parameter to set up key chain event listener and load keys for the wallet.",
              "How-it-is-done": "The method adds a key chain event listener to the wallet using the Threading.SAME_THREAD executor and then calls the loadKeys() method to load keys for the wallet.",
              "Property": {
                "pre-conditions": "The wallet parameter must not be null.",
                "post-conditions": "The wallet will have a key chain event listener added and keys will be loaded for the wallet."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletAddressesViewModel$IssuedReceiveKeysLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method removes a key chain event listener from the provided wallet when the wallet becomes inactive.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which the key chain event listener needs to be removed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure proper cleanup and prevent memory leaks by removing the key chain event listener when the wallet is no longer active.",
              "How-to-use": "Call this method passing the wallet instance as the parameter when the wallet becomes inactive to remove the key chain event listener.",
              "How-it-is-done": "The method overrides the onWalletInactive method from its superclass and calls the removeKeyChainEventListener method on the provided wallet instance to remove the key chain event listener.",
              "Property": {
                "pre-conditions": [
                  "The wallet instance provided must not be null."
                ],
                "post-conditions": [
                  "The key chain event listener is successfully removed from the wallet."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletBalanceFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletBalanceFragment.de.schildbach.wallet.ui.WalletBalanceFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment.de.schildbach.wallet.ui.WalletBalanceFragment()",
            "description": {
              "What": "This method is a constructor for the WalletBalanceFragment class.",
              "Parameters": [],
              "Returns": {
                "type": "WalletBalanceFragment",
                "description": "The constructed WalletBalanceFragment object."
              },
              "Why": "To initialize a new instance of the WalletBalanceFragment class.",
              "How-to-use": "To create a new WalletBalanceFragment object, simply call the constructor like 'new WalletBalanceFragment()'.",
              "How-it-is-done": "The constructor initializes a new instance of the WalletBalanceFragment class without any parameters.",
              "Property": {
                "pre-conditions": "No specific pre-conditions for calling this constructor.",
                "post-conditions": "A new WalletBalanceFragment object is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment.handleDonate()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment.handleDonate()",
            "description": {
              "What": "Starts the donation process in the wallet app with default settings.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "Activity",
                  "description": "The current activity context."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way for users to donate within the wallet app.",
              "How-to-use": "Call this method passing the current activity context to start the donation process.",
              "How-it-is-done": "The method calls the static method startDonate() of SendCoinsActivity class with the activity context, null as the recipient, FeeCategory.ECONOMIC as the fee category, and 0 as the amount.",
              "Property": {
                "pre-conditions": [
                  "The activity context must be valid and not null."
                ],
                "post-conditions": [
                  "The donation process is started in the wallet app."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment.onAttach(android.content.Context)",
            "description": {
              "What": "This method initializes various variables related to the wallet balance fragment.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the fragment."
                }
              ],
              "Returns": "void",
              "Why": "To set up necessary variables and configurations for displaying wallet balance.",
              "How-to-use": "Call this method with the context of the fragment as the parameter when attaching the fragment to an activity.",
              "How-it-is-done": "The method first calls the superclass method to attach the context, then initializes activity, application, config, showLocalBalance, and installedFromGooglePlay variables based on the context and application information.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "The activity, application, config, showLocalBalance, and installedFromGooglePlay variables are initialized with the appropriate values."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "This method initializes the WalletBalanceFragment by setting up observers for blockchain state, balance, and exchange rates, and updating the view accordingly.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the necessary observers for blockchain state, balance, and exchange rates, and update the view when changes occur.",
              "How-to-use": "Call this method in the onCreate() method of the WalletBalanceFragment class passing the saved instance state as a parameter.",
              "How-it-is-done": "The method sets up observers for blockchain state, balance, and exchange rates using ViewModelProviders, and updates the view when changes occur by calling the updateView() method.",
              "Property": {
                "pre-conditions": [
                  "The WalletBalanceFragment class must extend android.support.v4.app.Fragment."
                ],
                "post-conditions": [
                  "Observers for blockchain state, balance, and exchange rates are set up and the view is updated accordingly."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)",
            "description": {
              "What": "Inflates the menu layout for the WalletBalanceFragment with options menu items.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu in which the items are placed."
                },
                {
                  "name": "inflater",
                  "type": "android.view.MenuInflater",
                  "description": "The inflater used to inflate the menu layout."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide options menu items for the WalletBalanceFragment.",
              "How-to-use": "Override this method in a WalletBalanceFragment class to inflate the menu layout with options menu items.",
              "How-it-is-done": "The method calls inflater.inflate() with the menu layout resource ID and the menu object, then calls super.onCreateOptionsMenu() to handle any additional menu creation.",
              "Property": {
                "pre-conditions": [
                  "The method must be overridden in a class that extends WalletBalanceFragment."
                ],
                "post-conditions": [
                  "The menu layout is inflated with options menu items for the WalletBalanceFragment."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "method": {
                "What": "This method inflates the layout file 'wallet_balance_fragment' and returns the corresponding view.",
                "Parameters": [
                  {
                    "name": "inflater",
                    "type": "android.view.LayoutInflater",
                    "description": "The LayoutInflater object that can be used to inflate any views in the fragment."
                  },
                  {
                    "name": "container",
                    "type": "android.view.ViewGroup",
                    "description": "The parent view that the fragment's UI should be attached to."
                  },
                  {
                    "name": "savedInstanceState",
                    "type": "android.os.Bundle",
                    "description": "The previously saved state of the fragment."
                  },
                  "Returns"
                ]
              },
              "Returns": {
                "type": "android.view.View",
                "description": "The inflated view of the 'wallet_balance_fragment' layout file."
              },
              "Why": "To provide the UI for displaying the wallet balance in the fragment.",
              "How-to-use": "Override this method in a WalletBalanceFragment subclass and return the inflated view of the 'wallet_balance_fragment' layout file.",
              "How-it-is-done": "The method uses the LayoutInflater object to inflate the layout file 'wallet_balance_fragment' and attaches it to the specified container ViewGroup.",
              "Property": {
                "pre-conditions": [
                  "The layout file 'wallet_balance_fragment' must be defined in the project's resources (res/layout folder)."
                ],
                "post-conditions": [
                  "The fragment's UI is displayed with the inflated view of the 'wallet_balance_fragment' layout file."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment.onOptionsItemSelected(android.view.MenuItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment.onOptionsItemSelected(android.view.MenuItem)",
            "description": {
              "What": "Handles the selection of menu items in the wallet balance fragment, specifically for the donate option.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "android.view.MenuItem",
                  "description": "The selected menu item to be processed."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the menu item selection was handled, false otherwise."
              },
              "Why": "To provide functionality for handling menu item selections in the wallet balance fragment, specifically for the donate option.",
              "How-to-use": "Override this method in a WalletBalanceFragment subclass to handle the selection of menu items, such as donating, by calling the handleDonate method.",
              "How-it-is-done": "The method checks the ID of the selected menu item and calls the handleDonate method if it matches the donate option ID, returning true. Otherwise, it delegates to the superclass implementation.",
              "Property": {
                "pre-conditions": "The method should be overridden in a subclass of WalletBalanceFragment.",
                "post-conditions": "The handleDonate method is called when the donate menu item is selected."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment.onPrepareOptionsMenu(android.view.Menu)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment.onPrepareOptionsMenu(android.view.Menu)",
            "description": {
              "What": "This method prepares the options menu by setting the visibility of the donate option based on the balance and donation address availability.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu to be prepared."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return anything."
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment.onViewCreated(android.view.View,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment.onViewCreated(android.view.View,android.os.Bundle)",
            "description": {
              "What": "This method sets up the view for displaying wallet balance and handles click events for showing exchange rates.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view on which the wallet balance will be displayed."
                },
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a user interface for displaying wallet balance and optionally showing exchange rates.",
              "How-to-use": "Call this method after the fragment view is created to set up the wallet balance display and handle exchange rates click events.",
              "How-it-is-done": "The method checks if exchange rates option is enabled, sets up click listener for exchange rates, disables balance view if option is not enabled, and initializes various views for displaying balance information.",
              "Property": {
                "pre-conditions": [
                  "The fragment view must be created before calling this method."
                ],
                "post-conditions": [
                  "The wallet balance view will be set up with appropriate click listeners and display settings."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment.updateView()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment.updateView()",
            "description": {
              "What": "Updates the view with the current blockchain state, balance, and exchange rate information.",
              "Parameters": [
                {
                  "name": "blockchainState",
                  "type": "de.schildbach.wallet.service.BlockchainState",
                  "description": "The current blockchain state."
                },
                {
                  "name": "balance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The current balance of the wallet."
                },
                {
                  "name": "exchangeRate",
                  "type": "de.schildbach.wallet.data.ExchangeRate",
                  "description": "The current exchange rate information."
                }
              ],
              "Returns": "void",
              "Why": "To update the UI with the latest blockchain state, balance, and exchange rate information for the wallet.",
              "How-to-use": "Call this method to update the view with the latest wallet information.",
              "How-it-is-done": "The method checks the blockchain state to determine if the information is up to date, calculates the blockchain lag, and updates the UI components accordingly.",
              "Property": {
                "Pre-conditions": "The method requires valid blockchain state, balance, and exchange rate information.",
                "Post-conditions": "The view is updated with the latest wallet information based on the blockchain state, balance, and exchange rate."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel.de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel.de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for the WalletBalanceFragment with the application context.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to create the ViewModel."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel",
                "description": "A ViewModel instance for the WalletBalanceFragment."
              },
              "Why": "To provide a ViewModel for the WalletBalanceFragment that can access the application context.",
              "How-to-use": "Create a new instance of ViewModel by passing the application context as a parameter.",
              "How-it-is-done": "The ViewModel constructor initializes the ViewModel with the provided application context, casting it to WalletApplication for specific functionality.",
              "Property": {
                "pre-conditions": [
                  "The application context must be a valid instance of android.app.Application."
                ],
                "post-conditions": [
                  "The ViewModel is successfully initialized with the application context."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel.getBalance()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel.getBalance()",
            "description": {
              "What": "This method returns a LiveData object that holds the wallet balance data.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the WalletBalanceLiveData object."
                }
              ],
              "Returns": {
                "type": "WalletBalanceLiveData",
                "description": "A LiveData object that holds the wallet balance data."
              },
              "Why": "To provide a convenient way to observe and access the wallet balance data in a reactive manner.",
              "How-to-use": "Call this method to get a LiveData object that represents the wallet balance data, then observe changes in the balance using LiveData's observer pattern.",
              "How-it-is-done": "The method checks if the balance LiveData object is null, and if so, creates a new WalletBalanceLiveData object with the provided application context.",
              "Property": {
                "pre-conditions": [
                  "The 'application' parameter must not be null."
                ],
                "post-conditions": [
                  "The method always returns a non-null WalletBalanceLiveData object."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel.getBlockchainState()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel.getBlockchainState()",
            "description": {
              "What": "This method returns a LiveData object that provides the current blockchain state for the wallet balance fragment.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the BlockchainStateLiveData object."
                }
              ],
              "Returns": {
                "type": "BlockchainStateLiveData",
                "description": "A LiveData object that represents the current blockchain state."
              },
              "Why": "To provide real-time updates on the blockchain state for the wallet balance fragment.",
              "How-to-use": "Call this method to get a LiveData object that can be observed for changes in the blockchain state.",
              "How-it-is-done": "The method checks if the blockchainState object is null, and if so, creates a new BlockchainStateLiveData object with the provided application context.",
              "Property": {
                "pre-conditions": [
                  "The application context must be valid and not null."
                ],
                "post-conditions": [
                  "The method returns a non-null BlockchainStateLiveData object."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel.getExchangeRate()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletBalanceFragment$ViewModel.getExchangeRate()",
            "description": {
              "What": "This method returns an instance of SelectedExchangeRateLiveData if it is not already initialized, otherwise it returns the existing instance.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the SelectedExchangeRateLiveData instance."
                }
              ],
              "Returns": {
                "type": "SelectedExchangeRateLiveData",
                "description": "An instance of SelectedExchangeRateLiveData that provides exchange rate data."
              },
              "Why": "To provide access to exchange rate data in the ViewModel and ensure that only one instance of SelectedExchangeRateLiveData is created.",
              "How-to-use": "Call this method to get the exchange rate LiveData instance in the ViewModel. Make sure to pass the application context as a parameter.",
              "How-it-is-done": "The method checks if the exchangeRate instance is null, and if so, it creates a new SelectedExchangeRateLiveData instance using the application context. It then returns the exchangeRate instance.",
              "Property": {
                "pre-conditions": "The application context must be provided as a parameter.",
                "post-conditions": "The method returns an instance of SelectedExchangeRateLiveData, either newly created or existing."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletDisclaimerFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletDisclaimerFragment.de.schildbach.wallet.ui.WalletDisclaimerFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment.de.schildbach.wallet.ui.WalletDisclaimerFragment()",
            "description": {
              "What": "This method is a constructor for the WalletDisclaimerFragment class.",
              "Parameters": [],
              "Returns": "WalletDisclaimerFragment",
              "Why": "To initialize a new instance of the WalletDisclaimerFragment class.",
              "How-to-use": "Simply call the constructor to create a new WalletDisclaimerFragment object.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the WalletDisclaimerFragment class.",
              "Property": {
                "Pre-conditions": "No pre-conditions are required for calling this constructor.",
                "Post-conditions": "After calling this constructor, a new WalletDisclaimerFragment object is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletDisclaimerFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment.onCreate(android.os.Bundle)",
            "description": {
              "method": {
                "What": "This method initializes the ViewModel and observes changes in blockchain state and disclaimer enabled status to update the view accordingly.",
                "Parameters": [
                  {
                    "name": "savedInstanceState",
                    "type": "android.os.Bundle",
                    "description": "The saved instance state of the fragment."
                  }
                ],
                "Returns": "void",
                "Why": "To set up the ViewModel and observe changes in blockchain state and disclaimer enabled status for updating the view dynamically.",
                "How-to-use": "Call this method in the onCreate() method of a Fragment to initialize the ViewModel and observe changes in blockchain state and disclaimer enabled status.",
                "How-it-is-done": "The method initializes the ViewModel using ViewModelProviders.of(this) and observes changes in blockchain state and disclaimer enabled status using LiveData. When changes occur, the updateView() method is called to update the view.",
                "Property": {
                  "pre-conditions": [
                    "The Fragment must have a valid savedInstanceState parameter."
                  ],
                  "post-conditions": [
                    "The ViewModel is initialized and set up to observe changes in blockchain state and disclaimer enabled status.",
                    "The view is updated based on changes in blockchain state and disclaimer enabled status."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.WalletDisclaimerFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "What": "This method inflates a layout file into a view, sets an onClickListener on the view, and returns the view.",
              "Parameters": [
                {
                  "name": "inflater",
                  "type": "android.view.LayoutInflater",
                  "description": "The LayoutInflater object to inflate the layout file."
                },
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view that the inflated layout will be attached to."
                },
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The inflated view with an onClickListener set."
              },
              "Why": "To display a disclaimer message with a link to safety information and handle user interaction with the message.",
              "How-to-use": "Call this method in the onCreateView() method of a Fragment to display a disclaimer message with a safety link that triggers an action when clicked.",
              "How-it-is-done": "The method inflates the layout file 'wallet_disclaimer_fragment' into a TextView, sets an onClickListener on the TextView to open a HelpDialogFragment with safety information when clicked, and returns the TextView.",
              "Property": {
                "pre-conditions": [
                  "The layout file 'wallet_disclaimer_fragment' must exist in the resources."
                ],
                "post-conditions": [
                  "The inflated view will have an onClickListener set to open a HelpDialogFragment with safety information when clicked."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletDisclaimerFragment.updateView()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment.updateView()",
            "description": {
              "What": "Updates the view of the Wallet Disclaimer Fragment based on blockchain state and disclaimer settings.",
              "Parameters": [
                {
                  "name": "blockchainState",
                  "type": "de.schildbach.wallet.service.BlockchainState",
                  "description": "The blockchain state object containing impediments."
                },
                {
                  "name": "showDisclaimer",
                  "type": "boolean",
                  "description": "Flag indicating whether the disclaimer should be shown."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To dynamically update the view of the Wallet Disclaimer Fragment based on blockchain state and disclaimer settings.",
              "How-to-use": "Call this method whenever the blockchain state or disclaimer settings change to update the view accordingly.",
              "How-it-is-done": "The method retrieves the blockchain state and disclaimer settings from the view model, determines the appropriate progress message based on impediments, constructs a SpannableStringBuilder with the message, and sets the text of the message view. It then adjusts the visibility of the fragment based on the message length.",
              "Property": {
                "pre-conditions": [
                  "The view model must be properly initialized and set with the required data."
                ],
                "post-conditions": [
                  "The view of the Wallet Disclaimer Fragment is updated with the relevant information based on the blockchain state and disclaimer settings."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData.de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData.de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a LiveData object with the enabled/disabled status of the disclaimer in the wallet application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The wallet application instance."
                },
                "Returns"
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData",
                "description": "A LiveData object for tracking the enabled/disabled status of the disclaimer."
              },
              "Why": "To provide a LiveData object that can be observed to track changes in the enabled/disabled status of the disclaimer.",
              "How-to-use": "Create an instance of WalletDisclaimerFragment$DisclaimerEnabledLiveData by passing a WalletApplication instance as a parameter, then observe changes in the enabled/disabled status using LiveData's observe() method.",
              "How-it-is-done": "The method initializes the LiveData object by obtaining the configuration from the WalletApplication instance.",
              "Property": {
                "pre-conditions": "The WalletApplication instance must be initialized and not null.",
                "post-conditions": "The LiveData object is initialized with the enabled/disabled status of the disclaimer."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData.onActive()",
            "description": {
              "What": "Registers a shared preference change listener and sets the initial value of the disclaimer enabled status.",
              "Parameters": [
                {
                  "name": "config",
                  "type": "SharedPreference",
                  "description": "The shared preference object to register the listener with."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To listen for changes in the shared preferences related to the disclaimer enabled status and update the LiveData accordingly.",
              "How-to-use": "Create an instance of DisclaimerEnabledLiveData and pass the shared preference object to the constructor. Observe the LiveData object to get updates on the disclaimer enabled status.",
              "How-it-is-done": "The method registers a shared preference change listener with the provided shared preference object and sets the initial value of the disclaimer enabled status by calling config.getDisclaimerEnabled().",
              "Property": {
                "pre-conditions": [
                  "The config parameter must not be null."
                ],
                "post-conditions": [
                  "A shared preference change listener is registered with the config object.",
                  "The initial value of the disclaimer enabled status is set in the LiveData object."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData.onInactive()",
            "description": {
              "What": "Unregisters a shared preference change listener when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData",
                  "description": "The instance of the DisclaimerEnabledLiveData class."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and prevent memory leaks by unregistering the shared preference change listener when the LiveData is no longer active.",
              "How-to-use": "Ensure that an instance of DisclaimerEnabledLiveData is created and properly initialized, then call onInactive() method when the LiveData is no longer needed.",
              "How-it-is-done": "The method calls the unregisterOnSharedPreferenceChangeListener() method on the config object, passing 'this' as the listener to be unregistered.",
              "Property": {
                "pre-conditions": [
                  "The config object must be properly initialized and have a valid shared preference change listener registered."
                ],
                "post-conditions": [
                  "The shared preference change listener is unregistered from the config object."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment$DisclaimerEnabledLiveData.onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)",
            "description": {
              "What": "Updates the value of the LiveData when the shared preference for disclaimer is changed.",
              "Parameters": [
                {
                  "name": "sharedPreferences",
                  "type": "android.content.SharedPreferences",
                  "description": "The shared preferences object."
                },
                {
                  "name": "key",
                  "type": "java.lang.String",
                  "description": "The key of the preference that was changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the LiveData value based on changes in the shared preferences for the disclaimer setting.",
              "How-to-use": "Create an instance of WalletDisclaimerFragment$DisclaimerEnabledLiveData and observe its value to get updates when the disclaimer preference changes.",
              "How-it-is-done": "When the shared preference for disclaimer changes, the method checks if the key matches the disclaimer key and updates the LiveData value accordingly using the config object.",
              "Property": {
                "pre-conditions": "The config object must be initialized before using this method.",
                "post-conditions": "The value of the LiveData will be updated based on the changes in the shared preferences for the disclaimer setting."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletDisclaimerFragment$ViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment$ViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletDisclaimerFragment$ViewModel.de.schildbach.wallet.ui.WalletDisclaimerFragment$ViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment$ViewModel.de.schildbach.wallet.ui.WalletDisclaimerFragment$ViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for the WalletDisclaimerFragment with the application context.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to create the ViewModel."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.WalletDisclaimerFragment$ViewModel",
                "description": "A ViewModel instance for the WalletDisclaimerFragment."
              },
              "Why": "To provide a ViewModel that can be used to manage data and UI-related logic for the WalletDisclaimerFragment.",
              "How-to-use": "Create a new instance of ViewModel by passing the application context as a parameter.",
              "How-it-is-done": "The constructor initializes the ViewModel by casting the application context to WalletApplication and storing it for later use.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The ViewModel is successfully initialized with the application context."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletDisclaimerFragment$ViewModel.getBlockchainState()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment$ViewModel.getBlockchainState()",
            "description": {
              "What": "This method returns a LiveData object that provides the current state of the blockchain for the wallet application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the BlockchainStateLiveData object."
                }
              ],
              "Returns": {
                "type": "BlockchainStateLiveData",
                "description": "A LiveData object that represents the current state of the blockchain."
              },
              "Why": "To allow the UI to observe and react to changes in the blockchain state in real-time.",
              "How-to-use": "Create an instance of WalletDisclaimerFragment$ViewModel and call getBlockchainState() method to obtain the LiveData object for observing blockchain state changes.",
              "How-it-is-done": "The method checks if the blockchainState object is null, and if so, it creates a new BlockchainStateLiveData object with the application context. It then returns the blockchainState object.",
              "Property": {
                "pre-conditions": [
                  "The application context must be provided as a parameter."
                ],
                "post-conditions": [
                  "The method returns a non-null BlockchainStateLiveData object."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletDisclaimerFragment$ViewModel.getDisclaimerEnabled()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletDisclaimerFragment$ViewModel.getDisclaimerEnabled()",
            "description": {
              "What": "This method returns a LiveData object that represents whether the disclaimer is enabled or not in the WalletDisclaimerFragment.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the DisclaimerEnabledLiveData object."
                }
              ],
              "Returns": {
                "type": "WalletDisclaimerFragment.DisclaimerEnabledLiveData",
                "description": "A LiveData object representing whether the disclaimer is enabled or not."
              },
              "Why": "To provide a way to observe changes in the disclaimer enabled status within the WalletDisclaimerFragment.",
              "How-to-use": "Call this method to get a LiveData object that can be observed to track changes in the disclaimer enabled status within the WalletDisclaimerFragment.",
              "How-it-is-done": "The method checks if the disclaimerEnabled object is null, and if so, it creates a new DisclaimerEnabledLiveData object with the provided application context. It then returns the disclaimerEnabled object.",
              "Property": {
                "pre-conditions": [
                  "The application context must be valid and not null."
                ],
                "post-conditions": [
                  "The method returns a non-null DisclaimerEnabledLiveData object."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletTransactionsFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletTransactionsFragment.de.schildbach.wallet.ui.WalletTransactionsFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.de.schildbach.wallet.ui.WalletTransactionsFragment()",
            "description": {
              "What": "This method is a constructor for the WalletTransactionsFragment class.",
              "Parameters": [],
              "Returns": "WalletTransactionsFragment",
              "Why": "To initialize an instance of the WalletTransactionsFragment class.",
              "How-to-use": "Simply call the constructor to create a new instance of WalletTransactionsFragment.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the WalletTransactionsFragment class.",
              "Property": {
                "Pre-conditions": "No pre-conditions are required for calling this constructor.",
                "Post-conditions": "After calling this constructor, a new instance of WalletTransactionsFragment is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.maybeSetFilterMenuItemIcon(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.maybeSetFilterMenuItemIcon(int)",
            "description": {
              "What": "Sets the icon of the filter menu item if the device's SDK version is at least Marshmallow (API level 23).",
              "Parameters": [
                {
                  "name": "iconResId",
                  "type": "int",
                  "description": "The resource ID of the icon to set for the filter menu item."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically set the icon of the filter menu item based on the device's SDK version.",
              "How-to-use": "Call maybeSetFilterMenuItemIcon(int) with the resource ID of the desired icon to set it for the filter menu item.",
              "How-it-is-done": "The method checks if the device's SDK version is at least Marshmallow, then sets the icon of the filter menu item using the provided icon resource ID.",
              "Property": {
                "pre-conditions": "The filterMenuItem field must be initialized before calling this method.",
                "post-conditions": "The icon of the filter menu item is set to the specified icon resource ID if the device's SDK version is at least Marshmallow."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.onAttach(android.content.Context)",
            "description": {
              "method": "Initialize the WalletTransactionsFragment by setting up necessary variables and dependencies.",
              "parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the fragment."
                },
                "returns"
              ]
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "This method initializes the WalletTransactionsFragment by setting up observers for transactions and list items, updating the UI based on the observed data, and creating an adapter for displaying transactions.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the fragment."
                }
              ],
              "Returns": "void",
              "Why": "To set up the fragment's UI and data observers for displaying wallet transactions.",
              "How-to-use": "Call this method in the onCreate() lifecycle method of a WalletTransactionsFragment instance, passing the saved instance state as a parameter.",
              "How-it-is-done": "The method sets up observers for transactions and list items using ViewModelProviders, updates the UI based on the observed data, and creates an adapter for displaying transactions.",
              "Property": {
                "pre-conditions": [
                  "The fragment instance must be created and attached to an activity.",
                  "The ViewModel classes WalletTransactionsViewModel and WalletViewModel must be defined."
                ],
                "post-conditions": [
                  "The fragment's UI will be updated based on observed transaction data.",
                  "The adapter will be created and set up for displaying transactions."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)",
            "description": {
              "What": "This method inflates a menu resource for the WalletTransactionsFragment and finds a specific menu item for filtering transactions.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu to inflate with options for the fragment."
                },
                {
                  "name": "inflater",
                  "type": "android.view.MenuInflater",
                  "description": "The MenuInflater to inflate the menu resource."
                },
                "Returns"
              ]
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "What": "Creates the view for displaying wallet transactions with a RecyclerView and adapter.",
              "Parameters": [
                {
                  "name": "inflater",
                  "type": "android.view.LayoutInflater",
                  "description": "The LayoutInflater object that can be used to inflate any views in the fragment."
                },
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view that the fragment's UI should be attached to."
                },
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment, if available."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The created view for the fragment."
              },
              "Why": "To set up the UI for displaying wallet transactions efficiently using RecyclerView.",
              "How-to-use": "Call this method in the fragment's onCreateView() to create the view for displaying wallet transactions.",
              "How-it-is-done": "The method inflates the layout, initializes views, sets up RecyclerView with an adapter, and adds item decoration for spacing.",
              "Property": {
                "pre-conditions": [
                  "The layout file 'wallet_transactions_fragment' must be defined in the resources.",
                  "The RecyclerView with id 'wallet_transactions_list' must be present in the layout."
                ],
                "post-conditions": [
                  "The view for displaying wallet transactions is created and returned successfully."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.onOptionsItemSelected(android.view.MenuItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.onOptionsItemSelected(android.view.MenuItem)",
            "description": {
              "What": "This method handles the selection of filter options in the wallet transactions fragment and updates the view model accordingly.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "android.view.MenuItem",
                  "description": "The selected menu item that triggered the method."
                },
                {
                  "name": "itemId",
                  "type": "int",
                  "description": "The ID of the selected menu item."
                },
                {
                  "name": "direction",
                  "type": "de.schildbach.wallet.ui.WalletTransactionsViewModel.Direction",
                  "description": "The direction of transactions to filter by."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the menu item selection was handled successfully, false otherwise."
              },
              "Why": "To allow users to filter transactions based on different criteria and update the view accordingly.",
              "How-to-use": "Call this method when a menu item in the wallet transactions fragment is selected to apply the corresponding filter.",
              "How-it-is-done": "The method checks the ID of the selected menu item and sets the filter direction accordingly, updating the view model and menu item icon.",
              "Property": {
                "pre-conditions": "The method is called with a valid menu item as a parameter.",
                "post-conditions": "The view model direction is updated based on the selected filter option, and the menu item icon is set accordingly."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.onPrepareOptionsMenu(android.view.Menu)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.onPrepareOptionsMenu(android.view.Menu)",
            "description": {
              "What": "This method prepares the options menu for the WalletTransactionsFragment based on the direction of transactions.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu to be prepared with options for filtering transactions."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To dynamically set the checked state and icon of filter options in the menu based on the direction of transactions.",
              "How-to-use": "Override the onPrepareOptionsMenu method in a WalletTransactionsFragment subclass, passing the menu parameter received by the method.",
              "How-it-is-done": "The method retrieves the current direction of transactions from the view model, checks the direction, sets the corresponding menu item as checked, and updates the icon accordingly.",
              "Property": {
                "pre-conditions": [
                  "The WalletTransactionsViewModel instance associated with the fragment must be initialized and set up properly."
                ],
                "post-conditions": [
                  "The options menu of the fragment will be prepared with the correct filter options checked based on the direction of transactions."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.onResume()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.onResume()",
            "description": {
              "What": "Sets a warning message in the view model when the fragment resumes.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the warning message displayed in the view model when the fragment is resumed.",
              "How-to-use": "Simply call the onResume() method of the WalletTransactionsFragment instance to update the warning message in the view model.",
              "How-it-is-done": "The method calls the super.onResume() to ensure any necessary parent class behavior is executed, then it sets the warning message in the view model by calling the warning() method of the view model.",
              "Property": {
                "pre-conditions": [
                  "The view model instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The warning message in the view model is updated based on the current state of the fragment."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.onTransactionClick(android.view.View,org.bitcoinj.core.Sha256Hash)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.onTransactionClick(android.view.View,org.bitcoinj.core.Sha256Hash)",
            "description": {
              "method": "This method sets the selected transaction in the view model when a transaction is clicked.",
              "parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view that was clicked."
                },
                {
                  "name": "transactionHash",
                  "type": "org.bitcoinj.core.Sha256Hash",
                  "description": "The hash of the transaction that was clicked."
                }
              ],
              "returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "why": "To handle the event of a transaction being clicked and update the selected transaction in the view model.",
              "how-to-use": "Call this method when a transaction is clicked, passing the clicked view and the transaction hash as parameters.",
              "how-it-is-done": "The method simply sets the selected transaction in the view model by calling the setSelectedTransaction method of the view model with the transaction hash parameter.",
              "property": {
                "pre-conditions": "The view model instance must be initialized before calling this method.",
                "post-conditions": "The selected transaction in the view model will be updated to the transaction corresponding to the provided transaction hash."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.onTransactionMenuClick(android.view.View,org.bitcoinj.core.Sha256Hash)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.onTransactionMenuClick(android.view.View,org.bitcoinj.core.Sha256Hash)",
            "description": {
              "What": "This method handles the click event on a transaction menu in the wallet transactions fragment.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view that was clicked to trigger the menu."
                },
                {
                  "name": "transactionHash",
                  "type": "org.bitcoinj.core.Sha256Hash",
                  "description": "The hash of the transaction associated with the menu."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide users with options to interact with a specific transaction in the wallet transactions fragment.",
              "How-to-use": "Call this method when a transaction menu is clicked in the wallet transactions fragment, passing the view that was clicked and the hash of the transaction.",
              "How-it-is-done": "The method retrieves transaction details, determines menu options based on transaction properties, sets up a popup menu with relevant actions, and handles the click events for each menu item.",
              "Property": {
                "pre-conditions": [
                  "The wallet object in the view model must be initialized and accessible."
                ],
                "post-conditions": [
                  "A popup menu with transaction-specific actions is displayed for the user to interact with."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.onWarningClick(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.onWarningClick(android.view.View)",
            "description": {
              "What": "Handles the click event on a warning view by performing specific actions based on the type of warning.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view that was clicked to trigger the event."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide functionality for handling warning clicks and directing users to appropriate actions based on the warning type.",
              "How-to-use": "Call this method when a warning view is clicked, passing the clicked view as the parameter.",
              "How-it-is-done": "The method checks the type of warning using the 'warning()' method, then performs specific actions based on the warning type by either calling 'handleBackupWallet()' on the WalletActivity or starting a new activity to open the security settings.",
              "Property": {
                "pre-conditions": "The 'activity' field must be initialized with a valid WalletActivity instance.",
                "post-conditions": "The method triggers actions based on the type of warning, such as initiating a backup process or opening the device's security settings."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsFragment.warning()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsFragment.warning()",
            "description": {
              "What": "This method determines the type of warning to display based on the storage encryption status and backup reminder configuration.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.TransactionsAdapter.WarningType",
                "description": "Returns the type of warning to display, which can be BACKUP, STORAGE_ENCRYPTION, or null."
              },
              "Why": "To provide a way to determine the appropriate warning type to display based on certain conditions in the WalletTransactionsFragment.",
              "How-to-use": "Call this method to get the type of warning to display in the UI based on the storage encryption status and backup reminder configuration.",
              "How-it-is-done": "The method first checks if a backup reminder is set, then checks the storage encryption status using the DevicePolicyManager. It returns the appropriate warning type based on these conditions.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method will return a valid WarningType or null based on the storage encryption status and backup reminder configuration."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletTransactionsViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletTransactionsViewModel.de.schildbach.wallet.ui.WalletTransactionsViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel.de.schildbach.wallet.ui.WalletTransactionsViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for displaying wallet transactions in the UI.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used for initializing the ViewModel."
                }
              ],
              "Returns": {
                "type": "WalletTransactionsViewModel",
                "description": "A ViewModel instance for managing and displaying wallet transactions."
              },
              "Why": "To provide a ViewModel that handles the logic for displaying wallet transactions in the UI and interacts with the underlying data sources.",
              "How-to-use": "Create an instance of WalletTransactionsViewModel by passing an Application context, then observe the LiveData objects to update the UI based on changes in transactions, wallet, confidence, address book, direction, selected transaction, and configuration format.",
              "How-it-is-done": "The method initializes LiveData objects for transactions, wallet, confidence, address book, direction, selected transaction, and configuration format. It observes changes in these data sources and triggers updates to the UI by calling 'maybePostList()' when changes occur.",
              "Property": {
                "pre-conditions": "The 'application' parameter must not be null.",
                "post-conditions": "The ViewModel is initialized with LiveData objects for managing and displaying wallet transactions, and observers are set up to update the UI based on changes in the underlying data sources."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel.getSelectedTransaction()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel.getSelectedTransaction()",
            "description": {
              "What": "This method returns the selected transaction in the WalletTransactionsViewModel class.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.core.Sha256Hash",
                "description": "The selected transaction as a Sha256Hash object."
              },
              "Why": "To provide access to the selected transaction within the WalletTransactionsViewModel class.",
              "How-to-use": "Call this method to retrieve the selected transaction stored in the WalletTransactionsViewModel instance.",
              "How-it-is-done": "The method simply returns the value of the selectedTransaction property, which is a LiveData object containing the selected transaction.",
              "Property": {
                "pre-conditions": "The selectedTransaction property must be initialized with a valid transaction value.",
                "post-conditions": "The method returns the selected transaction stored in the WalletTransactionsViewModel."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel.maybePostList()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel.maybePostList()",
            "description": {
              "What": "This method filters and sorts a list of transactions based on direction, sender/receiver status, and internal status.",
              "Parameters": [
                {
                  "name": "transactions",
                  "type": "Set<Transaction>",
                  "description": "Set of transactions to filter and sort."
                },
                {
                  "name": "format",
                  "type": "MonetaryFormat",
                  "description": "Monetary format configuration."
                },
                {
                  "name": "addressBook",
                  "type": "Map<String, AddressBookEntry>",
                  "description": "Address book entries for transactions."
                },
                {
                  "name": "direction",
                  "type": "Direction",
                  "description": "Direction of transactions to filter (RECEIVED, SENT, or null)."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "Does not return any value."
              },
              "Why": "To filter and sort transactions based on specified criteria for display in the UI.",
              "How-to-use": "Call maybePostList() with the required parameters set to filter and sort transactions for display in the UI.",
              "How-it-is-done": "The method uses an AsyncTask to perform the filtering and sorting operations on the list of transactions based on direction, sender/receiver status, and internal status.",
              "Property": {
                "pre-conditions": [
                  "transactions, format, and addressBook must not be null."
                ],
                "post-conditions": [
                  "The list of transactions is filtered and sorted based on the specified criteria."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel.setDirection(de.schildbach.wallet.ui.WalletTransactionsViewModel$Direction)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel.setDirection(de.schildbach.wallet.ui.WalletTransactionsViewModel$Direction)",
            "description": {
              "What": "Sets the direction of wallet transactions in the view model.",
              "Parameters": [
                {
                  "name": "direction",
                  "type": "de.schildbach.wallet.ui.WalletTransactionsViewModel.Direction",
                  "description": "The direction of wallet transactions to be set."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow the user to specify the direction of wallet transactions displayed in the view model.",
              "How-to-use": "Create an instance of WalletTransactionsViewModel and call setDirection() with the desired direction as the parameter.",
              "How-it-is-done": "The method simply sets the value of the direction property in the view model to the provided direction parameter.",
              "Property": {
                "pre-conditions": [
                  "The WalletTransactionsViewModel instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The direction of wallet transactions in the view model will be updated to the specified direction."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel.setSelectedTransaction(org.bitcoinj.core.Sha256Hash)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel.setSelectedTransaction(org.bitcoinj.core.Sha256Hash)",
            "description": {
              "What": "Sets the selected transaction in the WalletTransactionsViewModel.",
              "Parameters": [
                {
                  "name": "selectedTransaction",
                  "type": "org.bitcoinj.core.Sha256Hash",
                  "description": "The SHA-256 hash of the selected transaction."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return anything."
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel.setWarning(de.schildbach.wallet.ui.TransactionsAdapter$WarningType)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel.setWarning(de.schildbach.wallet.ui.TransactionsAdapter$WarningType)",
            "description": {
              "What": "Sets a warning value in the WalletTransactionsViewModel.",
              "Parameters": [
                {
                  "name": "warning",
                  "type": "de.schildbach.wallet.ui.TransactionsAdapter.WarningType",
                  "description": "The warning type to be set."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow setting a warning value in the ViewModel for displaying warnings in the UI.",
              "How-to-use": "Create an instance of WalletTransactionsViewModel and call setWarning method with the desired warning type as the parameter.",
              "How-it-is-done": "The method simply sets the value of the 'warning' LiveData object in the ViewModel to the provided warning type.",
              "Property": {
                "pre-conditions": "The ViewModel instance must be initialized before calling this method.",
                "post-conditions": "The 'warning' LiveData object in the ViewModel will be updated with the provided warning type."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletTransactionsViewModel$Direction": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$Direction",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$Direction.de.schildbach.wallet.ui.WalletTransactionsViewModel$Direction()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$Direction.de.schildbach.wallet.ui.WalletTransactionsViewModel$Direction()",
            "description": {
              "What": "This method is a constructor for the enum class Direction in the WalletTransactionsViewModel, used to create instances of the enum values.",
              "Parameters": [],
              "Returns": {
                "Type": "Direction",
                "Description": "An instance of the Direction enum class."
              },
              "Why": "The constructor is provided to initialize instances of the Direction enum values.",
              "How-to-use": "To create instances of the Direction enum values, simply call the constructor without any parameters.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes an instance of the Direction enum class.",
              "Property": {
                "Pre-conditions": "No pre-conditions are required for calling this constructor.",
                "Post-conditions": "After calling this constructor, an instance of the Direction enum class will be created."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData.de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData.de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "method": {
                "What": "Initialize a LiveData object for observing transaction confidence in a wallet application.",
                "Parameters": [
                  {
                    "name": "application",
                    "type": "de.schildbach.wallet.WalletApplication",
                    "description": "The wallet application instance."
                  },
                  "Returns"
                ],
                "Returns": {
                  "type": "TransactionsConfidenceLiveData",
                  "description": "A LiveData object for observing transaction confidence in the wallet application."
                },
                "Why": "To provide a way to observe changes in transaction confidence within the wallet application.",
                "How-to-use": "Create an instance of WalletTransactionsViewModel$TransactionsConfidenceLiveData by passing a WalletApplication instance as a parameter.",
                "How-it-is-done": "The method simply calls the constructor of the superclass LiveData with the provided WalletApplication instance.",
                "Property": {
                  "pre-conditions": [
                    "The WalletApplication instance must not be null."
                  ],
                  "post-conditions": [
                    "A TransactionsConfidenceLiveData object is created for observing transaction confidence."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData.load()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData.load()",
            "description": {
              "What": "This method sets the value of the LiveData to null.",
              "Parameters": [],
              "Returns": {
                "Type": "void",
                "Description": "This method does not return any value."
              },
              "Why": "This method is provided to initialize the LiveData with a null value.",
              "How-to-use": "Simply call the load() method on an instance of TransactionsConfidenceLiveData to set the value to null.",
              "How-it-is-done": "The method overrides the load() method from the base class and calls postValue(null) to set the LiveData value to null.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "The value of the LiveData is set to null after calling this method."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData.onTransactionConfidenceChanged(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData.onTransactionConfidenceChanged(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction)",
            "description": {
              "What": "Triggers a load operation when the confidence of a transaction changes in the wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet associated with the transaction."
                },
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction whose confidence has changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the UI or perform actions based on changes in transaction confidence.",
              "How-to-use": "Create an instance of TransactionsConfidenceLiveData and register it as a listener for transaction confidence changes in the wallet.",
              "How-it-is-done": "When the confidence of a transaction changes in the wallet, the method triggers a load operation to update the UI or perform other necessary actions.",
              "Property": {
                "pre-conditions": [
                  "The wallet and transaction parameters must not be null."
                ],
                "post-conditions": [
                  "A load operation is triggered to handle the change in transaction confidence."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method adds a transaction confidence event listener to the provided wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet to add the transaction confidence event listener to."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow the ViewModel to listen for changes in transaction confidence in the wallet.",
              "How-to-use": "Call this method with the wallet object as the parameter to start listening for transaction confidence events.",
              "How-it-is-done": "The method simply adds the ViewModel as a transaction confidence event listener to the provided wallet using the Threading.SAME_THREAD executor.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must not be null."
                ],
                "post-conditions": [
                  "The ViewModel is successfully added as a transaction confidence event listener to the wallet."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsConfidenceLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method removes a transaction confidence event listener from the provided wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which the transaction confidence event listener needs to be removed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure proper cleanup and prevent memory leaks by removing the transaction confidence event listener when the wallet becomes inactive.",
              "How-to-use": "Call this method passing the wallet instance as the parameter when the wallet is no longer active or needed.",
              "How-it-is-done": "The method simply calls the 'removeTransactionConfidenceEventListener' method on the provided wallet instance, passing 'this' (referring to the current TransactionsConfidenceLiveData instance) as the listener to be removed.",
              "Property": {
                "pre-conditions": [
                  "The wallet instance provided must not be null."
                ],
                "post-conditions": [
                  "The transaction confidence event listener is successfully removed from the wallet."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.addWalletListener(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.addWalletListener(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Adds event listeners to the provided Bitcoin wallet for various types of events.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The Bitcoin wallet to add event listeners to."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow the UI to react to changes in the Bitcoin wallet, such as receiving or sending coins.",
              "How-to-use": "Call this method with a valid Bitcoin wallet object to start listening for events related to coin transactions.",
              "How-it-is-done": "The method adds event listeners for coins received, coins sent, reorganization, and change events to the provided wallet using the SAME_THREAD threading model.",
              "Property": {
                "pre-conditions": [
                  "The 'wallet' parameter must not be null."
                ],
                "post-conditions": [
                  "The provided wallet will have event listeners added for coins received, coins sent, reorganization, and change events."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "method": "Initialize a new instance of TransactionsLiveData for handling wallet transactions in the UI.",
              "parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance used for initializing the TransactionsLiveData."
                }
              ],
              "returns": {
                "type": "TransactionsLiveData",
                "description": "A new instance of TransactionsLiveData initialized with the provided WalletApplication."
              },
              "why": "To provide a way to handle and display wallet transactions in the UI.",
              "how-to-use": "Create a new instance of WalletTransactionsViewModel and pass a WalletApplication instance as the parameter to the TransactionsLiveData constructor.",
              "how-it-is-done": "The constructor initializes the TransactionsLiveData with the provided WalletApplication instance and a predefined throttle time for handling updates.",
              "property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "A new instance of TransactionsLiveData is successfully initialized."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.load()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.load()",
            "description": {
              "What": "Asynchronously loads transactions from the wallet and updates the LiveData with the retrieved transactions.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which transactions are to be retrieved."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the LiveData with the latest transactions from the wallet in an asynchronous manner.",
              "How-to-use": "Create an instance of TransactionsLiveData, set the wallet using setWallet() method, and observe the LiveData to get the updated transactions.",
              "How-it-is-done": "The method uses an AsyncTask to run the transaction retrieval process in the background. It sets the Context to propagate the necessary context and then retrieves transactions from the wallet using getTransactions(true) method. The retrieved transactions are then posted to the LiveData.",
              "Property": {
                "pre-conditions": [
                  "The wallet instance must be set using setWallet() method before calling load()."
                ],
                "post-conditions": [
                  "The LiveData will be updated with the latest transactions from the wallet after the method execution."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method adds a listener to a Bitcoin wallet and loads transactions associated with the wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The Bitcoin wallet to be activated."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that the ViewModel is updated with the latest wallet transactions when the wallet becomes active.",
              "How-to-use": "Call this method with the Bitcoin wallet as the parameter to activate the wallet and load transactions for display in the ViewModel.",
              "How-it-is-done": "The method first adds a listener to the provided wallet to listen for changes, then triggers the loading of transactions associated with the wallet.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "The ViewModel will be updated with the latest transactions from the activated wallet."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.onWalletInactive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method removes a wallet listener from the specified wallet when the wallet becomes inactive.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which the listener needs to be removed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and prevent memory leaks by removing the wallet listener when the wallet is no longer active.",
              "How-to-use": "Call this method passing the wallet object as the parameter when the wallet becomes inactive to remove the wallet listener.",
              "How-it-is-done": "The method calls the 'removeWalletListener' method passing the wallet object to remove the listener associated with that wallet.",
              "Property": {
                "pre-conditions": [
                  "The wallet object passed as a parameter must not be null."
                ],
                "post-conditions": [
                  "The wallet listener associated with the specified wallet is successfully removed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.removeWalletListener(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData.removeWalletListener(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method removes a listener from the specified wallet for various events such as change, reorganization, coins sent, and coins received.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which the listener needs to be removed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow for the removal of specific event listeners from a wallet object, providing flexibility in managing event notifications.",
              "How-to-use": "Call this method with the wallet object from which you want to remove the listener for change, reorganization, coins sent, and coins received events.",
              "How-it-is-done": "The method calls the corresponding remove methods on the wallet object for the change, reorganization, coins sent, and coins received event listeners that were previously added.",
              "Property": {
                "pre-conditions": "The wallet object must not be null.",
                "post-conditions": "The specified listener is successfully removed from the wallet object for the specified events."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener.de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener.de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener()",
            "description": {
              "method": {
                "What": "Initialize a new instance of WalletListener.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "WalletListener",
                  "description": "A new instance of WalletListener."
                },
                "Why": "To provide a constructor for initializing a WalletListener instance.",
                "How-to-use": "Simply call the constructor to create a new WalletListener instance.",
                "How-it-is-done": "The method initializes a new instance of WalletListener without any parameters.",
                "Property": {
                  "pre-conditions": "No specific pre-conditions for calling the constructor.",
                  "post-conditions": "A new WalletListener instance is created and ready for use."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener.onCoinsReceived(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener.onCoinsReceived(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)",
            "description": {
              "What": "Triggers a load operation when coins are received in the wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet receiving the coins."
                },
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction containing the received coins."
                },
                {
                  "name": "prevBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The previous balance of the wallet before receiving the coins."
                },
                {
                  "name": "newBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The new balance of the wallet after receiving the coins."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the UI or perform any necessary actions when coins are received in the wallet.",
              "How-to-use": "Create an instance of WalletTransactionsViewModel$TransactionsLiveData$WalletListener and register it as a listener for coin received events in the wallet.",
              "How-it-is-done": "When coins are received in the wallet, the method triggerLoad() is called to initiate a load operation, which may involve updating the UI or performing other related tasks.",
              "Property": {
                "pre-conditions": [
                  "The wallet, transaction, previous balance, and new balance parameters must not be null."
                ],
                "post-conditions": [
                  "A load operation is triggered to handle the received coins."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener.onCoinsSent(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener.onCoinsSent(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin,org.bitcoinj.core.Coin)",
            "description": {
              "What": "Triggers a load operation when coins are sent from the wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which coins are sent."
                },
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction that sent the coins."
                },
                {
                  "name": "prevBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The previous balance of the wallet before the coins were sent."
                },
                {
                  "name": "newBalance",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The new balance of the wallet after the coins were sent."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To notify the UI to trigger a load operation when coins are sent from the wallet.",
              "How-to-use": "Create an instance of WalletTransactionsViewModel$TransactionsLiveData$WalletListener and register it as a listener to the wallet. When coins are sent from the wallet, the onCoinsSent method will be called automatically.",
              "How-it-is-done": "The method simply calls the triggerLoad() method to initiate a load operation in response to coins being sent from the wallet.",
              "Property": {
                "pre-conditions": [
                  "The wallet, transaction, previous balance, and new balance parameters must not be null."
                ],
                "post-conditions": [
                  "A load operation is triggered in response to coins being sent from the wallet."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener.onReorganize(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener.onReorganize(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Triggers a load operation when the wallet undergoes a reorganization.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that has undergone a reorganization."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle reorganizations in the wallet and update the UI accordingly.",
              "How-to-use": "Create an instance of WalletTransactionsViewModel$TransactionsLiveData$WalletListener and pass it to the WalletTransactionsViewModel. When the wallet undergoes a reorganization, the onReorganize method will be automatically called.",
              "How-it-is-done": "When the onReorganize method is called, it simply triggers a load operation by calling the triggerLoad method.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "After calling this method, a load operation will be triggered to update the UI."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener.onWalletChanged(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletTransactionsViewModel$TransactionsLiveData$WalletListener.onWalletChanged(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Triggers a load operation when the wallet is changed.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet object that has been changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the UI or perform any necessary actions when the wallet is modified.",
              "How-to-use": "Create an instance of WalletTransactionsViewModel$TransactionsLiveData$WalletListener and pass it the wallet object to monitor changes.",
              "How-it-is-done": "When the wallet is changed, the method calls triggerLoad() to initiate a load operation.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must not be null."
                ],
                "post-conditions": [
                  "A load operation is triggered to update the UI or perform any necessary actions."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletViewModel.addressLoadingFinished()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel.addressLoadingFinished()",
            "description": {
              "What": "This method sets a boolean flag to indicate that the address loading has finished and calls another method to potentially toggle the state.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the completion of address loading and potentially update the state accordingly.",
              "How-to-use": "Simply call this method when the address loading has finished to update the flag and potentially toggle the state.",
              "How-it-is-done": "The method sets the 'addressLoadingFinished' boolean flag to true and then calls the 'maybeToggleState()' method to handle any state changes.",
              "Property": {
                "pre-conditions": "N/A",
                "post-conditions": "The 'addressLoadingFinished' flag is set to true after calling this method."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletViewModel.animateWhenLoadingFinished()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel.animateWhenLoadingFinished()",
            "description": {
              "What": "This method sets a flag to indicate that an animation should be performed when loading is finished.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow triggering an animation when loading is finished in the wallet view model.",
              "How-to-use": "Simply call this method on an instance of WalletViewModel to enable the animation when loading is finished.",
              "How-it-is-done": "The method sets a boolean flag 'doAnimation' to true and then calls the 'maybeToggleState()' method to handle the animation logic.",
              "Property": {
                "pre-conditions": [
                  "An instance of WalletViewModel must be available."
                ],
                "post-conditions": [
                  "The 'doAnimation' flag is set to true."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletViewModel.animationFinished()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel.animationFinished()",
            "description": {
              "What": "Sets the value of enterAnimation to FINISHED state.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To indicate that the animation has finished and trigger any necessary actions or UI updates.",
              "How-to-use": "Simply call the animationFinished() method when the animation has completed to update the enterAnimation state.",
              "How-it-is-done": "The method sets the value of enterAnimation to the FINISHED state by calling setValue() method with EnterAnimationState.FINISHED as the argument.",
              "Property": {
                "pre-conditions": [
                  "The enterAnimation variable must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The enterAnimation state will be set to FINISHED after calling this method."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletViewModel.balanceLoadingFinished()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel.balanceLoadingFinished()",
            "description": {
              "What": "This method sets a boolean flag to indicate that the balance loading has finished and calls another method to potentially toggle the state of the view model.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to handle the completion of the balance loading process and update the view model accordingly.",
              "How-to-use": "Simply call this method after the balance loading process has finished to update the view model state.",
              "How-it-is-done": "The method sets the 'balanceLoadingFinished' boolean flag to true and then calls the 'maybeToggleState()' method to potentially update the view model state.",
              "Property": {
                "pre-conditions": [
                  "The balance loading process must have been completed before calling this method."
                ],
                "post-conditions": [
                  "The 'balanceLoadingFinished' flag is set to true."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletViewModel.de.schildbach.wallet.ui.WalletViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel.de.schildbach.wallet.ui.WalletViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a WalletViewModel object with the application context and create a WalletEncryptedLiveData object.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to initialize the WalletViewModel."
                }
              ],
              "Returns": {
                "type": "WalletViewModel",
                "description": "A WalletViewModel object initialized with the provided application context."
              },
              "Why": "To create a ViewModel for the wallet functionality within the application.",
              "How-to-use": "Create a new instance of WalletViewModel by passing the application context as a parameter.",
              "How-it-is-done": "The method initializes the WalletViewModel object by setting the application context and creating a new WalletEncryptedLiveData object using the application context.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "A WalletViewModel object is successfully initialized with the provided application context."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletViewModel.maybeToggleState()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel.maybeToggleState()",
            "description": {
              "What": "This method toggles the state of the enter animation based on certain conditions.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to manage the state of the enter animation based on specific criteria.",
              "How-to-use": "Call this method within the WalletViewModel class to handle the state transition of the enter animation.",
              "How-it-is-done": "The method checks if the enterAnimation state is null and sets it to WAITING if certain conditions are met. It then transitions the state to ANIMATING based on the completion of loading tasks.",
              "Property": {
                "pre-conditions": [
                  "The doAnimation and globalLayoutFinished flags must be set appropriately for the method to function correctly."
                ],
                "post-conditions": [
                  "The enterAnimation state will be updated based on the completion of loading tasks."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletViewModel.onFirstPreDraw()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel.onFirstPreDraw()",
            "description": {
              "What": "This method sets a boolean flag to indicate that the global layout has finished and then calls another method to toggle the state.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "Returns true after setting the globalLayoutFinished flag and calling maybeToggleState()."
              },
              "Why": "This method is provided to handle the first pre-draw event and perform necessary actions once the global layout has finished.",
              "How-to-use": "Simply call this method within the appropriate lifecycle callback or event listener to handle the first pre-draw event.",
              "How-it-is-done": "The method sets the globalLayoutFinished flag to true, then calls maybeToggleState() to perform any necessary state toggling.",
              "Property": {
                "pre-conditions": "This method should be called within the appropriate lifecycle callback or event listener to handle the first pre-draw event.",
                "post-conditions": "After calling this method, the globalLayoutFinished flag will be set to true and any necessary state toggling will be performed."
              }
            }
          },
          "de.schildbach.wallet.ui.WalletViewModel.transactionsLoadingFinished()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel.transactionsLoadingFinished()",
            "description": {
              "What": "Marks the completion of loading transactions and triggers a state toggle.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the completion of loading transactions and update the state accordingly.",
              "How-to-use": "Call this method after the transactions loading process is finished to trigger the state toggle.",
              "How-it-is-done": "The method sets the 'transactionsLoadingFinished' flag to true and then calls 'maybeToggleState()' to handle the state update.",
              "Property": {
                "pre-conditions": "None.",
                "post-conditions": "The 'transactionsLoadingFinished' flag is set to true, and the 'maybeToggleState()' method is called."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletViewModel$EnterAnimationState": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel$EnterAnimationState",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.ui.WalletViewModel$EnterAnimationState.de.schildbach.wallet.ui.WalletViewModel$EnterAnimationState()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel$EnterAnimationState.de.schildbach.wallet.ui.WalletViewModel$EnterAnimationState()",
            "description": {
              "What": "The method initializes a new instance of EnterAnimationState enum.",
              "Parameters": [],
              "Returns": {
                "Type": "EnterAnimationState",
                "Description": "A new instance of EnterAnimationState enum."
              },
              "Why": "To provide a way to create instances of the EnterAnimationState enum.",
              "How-to-use": "Simply call the constructor to create a new instance of EnterAnimationState enum.",
              "How-it-is-done": "The method is a constructor that does not take any parameters and simply initializes a new instance of EnterAnimationState enum.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "A new instance of EnterAnimationState enum is created."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.WalletViewModel$WalletEncryptedLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel$WalletEncryptedLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.WalletViewModel$WalletEncryptedLiveData.de.schildbach.wallet.ui.WalletViewModel$WalletEncryptedLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel$WalletEncryptedLiveData.de.schildbach.wallet.ui.WalletViewModel$WalletEncryptedLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initializes a new instance of WalletEncryptedLiveData with the provided WalletApplication.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance to be used for initialization."
                }
              ],
              "Returns": {
                "type": "WalletEncryptedLiveData",
                "description": "A new instance of WalletEncryptedLiveData."
              },
              "Why": "To provide a constructor for initializing WalletEncryptedLiveData with a WalletApplication instance.",
              "How-to-use": "Create a new instance of WalletEncryptedLiveData by passing a WalletApplication instance as the parameter.",
              "How-it-is-done": "The constructor simply calls the superclass constructor passing the provided WalletApplication instance for initialization.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "A new instance of WalletEncryptedLiveData is successfully initialized."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletViewModel$WalletEncryptedLiveData.load()": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel$WalletEncryptedLiveData.load()",
            "description": {
              "What": "This method asynchronously checks if the wallet is encrypted and posts the result to the LiveData object.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet object to check for encryption status."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way to check the encryption status of the wallet in an asynchronous manner.",
              "How-to-use": "Create an instance of WalletEncryptedLiveData, pass the wallet object to the constructor, and observe the LiveData object for the encryption status.",
              "How-it-is-done": "The method uses an AsyncTask to run the encryption check in a background thread, propagates the BitcoinJ context, and then posts the encryption status to the LiveData object.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must not be null."
                ],
                "post-conditions": [
                  "The LiveData object will be updated with the encryption status of the wallet."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.WalletViewModel$WalletEncryptedLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.WalletViewModel$WalletEncryptedLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method triggers the loading of data when a wallet becomes active.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that becomes active."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To automatically load data when a wallet is activated without manual intervention.",
              "How-to-use": "Call this method when a wallet becomes active to initiate the loading process.",
              "How-it-is-done": "The method simply calls the 'load()' method to start loading data for the active wallet.",
              "Property": {
                "pre-conditions": "The wallet parameter must not be null.",
                "post-conditions": "Data loading process is initiated for the active wallet."
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.ui.backup": {
    "qualifiedName": "de.schildbach.wallet.ui.backup",
    "classes": {
      "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.backupWallet()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.backupWallet()",
            "description": {
              "What": "This method initiates the process of backing up the wallet by disabling password views, creating a filename with the current date, and starting an intent to create a document for wallet backup.",
              "Parameters": [
                {
                  "name": "passwordView",
                  "type": "View",
                  "description": "The view for entering the password."
                },
                {
                  "name": "passwordAgainView",
                  "type": "View",
                  "description": "The view for entering the password again."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way for users to backup their wallet securely and easily within the application.",
              "How-to-use": "Call this method when the user initiates the backup process, passing the password views as parameters to disable them and start the backup intent.",
              "How-it-is-done": "The method first disables the password views, creates a filename with the current date using ISO 8601 format, then starts an intent to create a document for wallet backup with the specified filename and MIME type. Finally, it initiates the document creation process by starting the intent with the appropriate request code.",
              "Property": {
                "pre-conditions": [
                  "The password views (passwordView and passwordAgainView) must be initialized and accessible."
                ],
                "post-conditions": [
                  "The password views are disabled to prevent user input during the backup process.",
                  "An intent is started to create a document for wallet backup with the specified filename and MIME type."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.de.schildbach.wallet.ui.backup.BackupWalletDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.de.schildbach.wallet.ui.backup.BackupWalletDialogFragment()",
            "description": {
              "What": "Creates a new instance of BackupWalletDialogFragment.",
              "Parameters": [],
              "Returns": {
                "type": "BackupWalletDialogFragment",
                "description": "A new instance of BackupWalletDialogFragment."
              },
              "Why": "To provide a way to create instances of BackupWalletDialogFragment for backup functionality.",
              "How-to-use": "Simply call the constructor BackupWalletDialogFragment() to create a new instance of BackupWalletDialogFragment.",
              "How-it-is-done": "The method initializes a new instance of BackupWalletDialogFragment without any parameters or specific initialization logic.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new instance of BackupWalletDialogFragment is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.handleGo()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.handleGo()",
            "description": {
              "What": "Handles the action when the user clicks on the 'Go' button in the backup wallet dialog.",
              "Parameters": [
                {
                  "name": "password",
                  "type": "String",
                  "description": "The password entered by the user."
                },
                {
                  "name": "passwordAgain",
                  "type": "String",
                  "description": "The password entered again by the user for confirmation."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To verify if the entered passwords match before proceeding with the backup process.",
              "How-to-use": "Call this method when the user clicks on the 'Go' button in the backup wallet dialog after entering the passwords.",
              "How-it-is-done": "The method retrieves the entered passwords, checks if they match, and either proceeds with the backup process or displays a password mismatch message.",
              "Property": {
                "pre-conditions": [
                  "Both password and passwordAgain must be non-null and trimmed strings."
                ],
                "post-conditions": [
                  "If passwordAgain matches password, the backupWallet() method is called.",
                  "If passwordAgain does not match password, the passwordMismatchView is set to visible."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.onActivityResult(int,int,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.onActivityResult(int,int,android.content.Intent)",
            "description": {
              "What": "This method handles the result of an activity for backing up a wallet by encrypting the wallet data and saving it to a specified location.",
              "Parameters": [
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code that was used to start the activity."
                },
                {
                  "name": "resultCode",
                  "type": "int",
                  "description": "The result code returned by the activity."
                },
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent containing the result data from the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the result of the activity for backing up a wallet and encrypting the wallet data for secure storage.",
              "How-to-use": "Call this method when receiving the result of an activity for backing up a wallet, passing the request code, result code, and intent containing the data.",
              "How-it-is-done": "If the result is successful, the method retrieves the target URI, encrypts the wallet data with a password, saves it to the target location, and dismisses the dialog. If the result is canceled, it enables the password fields for retry.",
              "Property": {
                "pre-conditions": [
                  "The request code must match REQUEST_CODE_CREATE_DOCUMENT."
                ],
                "post-conditions": [
                  "If the result is successful, the wallet data is encrypted and saved to the specified location.",
                  "If the result is canceled, the password fields are enabled for retry."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.onAttach(android.content.Context)",
            "description": {
              "What": "This method assigns the activity and application variables of the BackupWalletDialogFragment class based on the provided context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to initialize the activity and application variables."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to set up the necessary activity and application variables for the BackupWalletDialogFragment class.",
              "How-to-use": "When creating an instance of BackupWalletDialogFragment, call the onAttach method with the context parameter to initialize the activity and application variables.",
              "How-it-is-done": "The method first calls the superclass method onAttach with the provided context. Then, it casts the context to AbstractWalletActivity and assigns it to the activity variable. Finally, it retrieves the WalletApplication from the activity and assigns it to the application variable.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "The activity and application variables of the BackupWalletDialogFragment class are initialized with valid values."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize the viewModel variable with an instance of BackupWalletViewModel class using ViewModelProviders.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the ViewModel for the BackupWalletDialogFragment class.",
              "How-to-use": "Call this method in the onCreate() method of a BackupWalletDialogFragment instance to initialize the viewModel variable.",
              "How-it-is-done": "The method calls the super class's onCreate() method to handle any saved instance state, then uses ViewModelProviders to get an instance of BackupWalletViewModel and assigns it to the viewModel variable.",
              "Property": {
                "pre-conditions": "The method should be called within the onCreate() method of a BackupWalletDialogFragment instance.",
                "post-conditions": "The viewModel variable is initialized with an instance of BackupWalletViewModel."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "This method creates a dialog for backing up a wallet with password protection.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog for backing up a wallet."
              },
              "Why": "To provide a user interface for securely backing up a wallet with password protection.",
              "How-to-use": "Call onCreateDialog method with the saved instance state as a parameter to create a dialog for backing up a wallet.",
              "How-it-is-done": "The method inflates a layout for the dialog, sets up various views and listeners, and handles user interactions to enable password protection for wallet backup.",
              "Property": {
                "pre-conditions": "The activity context must be set before calling this method.",
                "post-conditions": "A dialog for backing up a wallet with password protection is created and displayed."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.onDismiss(android.content.DialogInterface)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.onDismiss(android.content.DialogInterface)",
            "description": {
              "What": "Removes text change listeners, sets checked change listener to null, and wipes passwords when the dialog is dismissed.",
              "Parameters": [
                {
                  "name": "dialog",
                  "type": "android.content.DialogInterface",
                  "description": "The dialog that is being dismissed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and reset states when the dialog is dismissed.",
              "How-to-use": "Override this method in a subclass of BackupWalletDialogFragment to perform cleanup actions when the dialog is dismissed.",
              "How-it-is-done": "The method first removes text change listeners from passwordView and passwordAgainView, sets the checked change listener of showView to null, calls wipePasswords method to clear passwords, and finally calls the super class's onDismiss method.",
              "Property": {
                "pre-conditions": "The dialog instance must not be null.",
                "post-conditions": "Text change listeners are removed, checked change listener is set to null, and passwords are wiped."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.show(android.support.v4.app.FragmentManager)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.show(android.support.v4.app.FragmentManager)",
            "description": {
              "What": "Show the BackupWalletDialogFragment dialog to the user.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for managing the dialog fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way for developers to display the backup wallet dialog fragment.",
              "How-to-use": "Call this static method passing the FragmentManager instance as the parameter to display the backup wallet dialog fragment.",
              "How-it-is-done": "The method creates a new instance of BackupWalletDialogFragment, then shows it using the provided FragmentManager with a specific tag.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager instance (fm) must not be null."
                ],
                "post-conditions": [
                  "The BackupWalletDialogFragment dialog will be displayed to the user using the provided FragmentManager."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.uriToTarget(android.net.Uri)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.uriToTarget(android.net.Uri)",
            "description": {
              "What": "This method converts a given URI to a target location string based on the URI scheme and host.",
              "Parameters": [
                {
                  "name": "uri",
                  "type": "android.net.Uri",
                  "description": "The URI to be converted to a target location string."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The target location string corresponding to the URI, or null if the URI scheme is not 'content'."
              },
              "Why": "To determine the target location of a given URI for backup purposes.",
              "How-to-use": "Call this method with a URI as the parameter to get the target location string, which can be 'Google Drive', 'internal storage', or null.",
              "How-it-is-done": "The method first checks if the URI scheme is 'content', then determines the target location based on the host of the URI (Google Drive or internal storage).",
              "Property": {
                "pre-conditions": "The URI parameter must not be null.",
                "post-conditions": "The method returns a target location string or null based on the URI provided."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.wipePasswords()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment.wipePasswords()",
            "description": {
              "What": "This method clears the text in two password input fields.",
              "Parameters": [
                {
                  "name": "passwordView",
                  "type": "TextView",
                  "description": "The first password input field."
                },
                {
                  "name": "passwordAgainView",
                  "type": "TextView",
                  "description": "The second password input field for confirming the password."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to clear the password input fields when needed.",
              "How-to-use": "Call this method when you want to clear the password input fields, such as when resetting the password or canceling the input process.",
              "How-it-is-done": "The method sets the text of both password input fields to null, effectively clearing any previously entered passwords.",
              "Property": {
                "pre-conditions": [
                  "The passwordView and passwordAgainView must be initialized and reference the password input fields."
                ],
                "post-conditions": [
                  "The text in both password input fields will be cleared."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$ErrorDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$ErrorDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$ErrorDialogFragment.de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$ErrorDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$ErrorDialogFragment.de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$ErrorDialogFragment()",
            "description": {
              "method": {
                "What": "Initialize an instance of ErrorDialogFragment.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "ErrorDialogFragment",
                  "description": "An instance of ErrorDialogFragment."
                },
                "Why": "To provide a default constructor for ErrorDialogFragment.",
                "How-to-use": "Simply instantiate a new ErrorDialogFragment object.",
                "How-it-is-done": "The method creates a new instance of ErrorDialogFragment without any parameters.",
                "Property": {
                  "pre-conditions": "None.",
                  "post-conditions": "An instance of ErrorDialogFragment is created."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$ErrorDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$ErrorDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog to display an error message for backup wallet functionality.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying the error message for backup wallet functionality."
              },
              "Why": "To provide a user-friendly way to inform the user about errors during the backup wallet process.",
              "How-to-use": "Call onCreateDialog method with the saved instance state as a parameter to create a dialog displaying the error message for backup wallet functionality.",
              "How-it-is-done": "The method retrieves the exception message from the arguments, creates a dialog with a warning message and a single dismiss button, and returns the created dialog.",
              "Property": {
                "pre-conditions": [
                  "The saved instance state must not be null."
                ],
                "post-conditions": [
                  "A dialog displaying the error message for backup wallet functionality is created and returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$ErrorDialogFragment.showDialog(android.support.v4.app.FragmentManager,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$ErrorDialogFragment.showDialog(android.support.v4.app.FragmentManager,java.lang.String)",
            "description": {
              "What": "Show a dialog with an error message for backup wallet functionality.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to show the dialog."
                },
                {
                  "name": "exceptionMessage",
                  "type": "java.lang.String",
                  "description": "The error message to display in the dialog."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to display error messages related to backup wallet functionality in a dialog.",
              "How-to-use": "Call this method with the FragmentManager and the exception message to show the error dialog with the specified message.",
              "How-it-is-done": "Create a new instance of ErrorDialogFragment, set the exception message as an argument, and show the dialog using the FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The exceptionMessage must not be null."
                ],
                "post-conditions": [
                  "An error dialog with the specified exception message is displayed."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$SuccessDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$SuccessDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$SuccessDialogFragment.de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$SuccessDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$SuccessDialogFragment.de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$SuccessDialogFragment()",
            "description": {
              "method": {
                "What": "Initialize a new instance of SuccessDialogFragment.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "SuccessDialogFragment",
                  "description": "A new instance of SuccessDialogFragment."
                },
                "Why": "To provide a way to create an instance of SuccessDialogFragment for displaying success messages.",
                "How-to-use": "To use this method, simply call it to create a new instance of SuccessDialogFragment.",
                "How-it-is-done": "The method initializes a new instance of SuccessDialogFragment without any parameters.",
                "Property": {
                  "pre-conditions": "None.",
                  "post-conditions": "A new instance of SuccessDialogFragment is created."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$SuccessDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$SuccessDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog to display a success message for backing up a wallet.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying the success message for backing up a wallet."
              },
              "Why": "To provide a user-friendly way to inform the user about the successful backup of their wallet.",
              "How-to-use": "Call onCreateDialog method passing the saved instance state as a parameter to create a dialog with the success message for backing up a wallet.",
              "How-it-is-done": "The method retrieves the target string from the arguments, creates a DialogBuilder instance with the context, sets the title and message of the dialog, and returns the created dialog.",
              "Property": {
                "pre-conditions": [
                  "The getArguments() method should return a non-null Bundle containing the target string."
                ],
                "post-conditions": [
                  "A dialog displaying the success message for backing up a wallet is created and returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$SuccessDialogFragment.showDialog(android.support.v4.app.FragmentManager,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletDialogFragment$SuccessDialogFragment.showDialog(android.support.v4.app.FragmentManager,java.lang.String)",
            "description": {
              "What": "Show a success dialog fragment with a target string.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for managing the dialog fragment."
                },
                {
                  "name": "target",
                  "type": "java.lang.String",
                  "description": "The target string to display in the dialog."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To display a success dialog with a specific target string after a backup operation.",
              "How-to-use": "Call this method with the FragmentManager and the target string to display the success dialog.",
              "How-it-is-done": "Create a new instance of SuccessDialogFragment, set the target string as an argument, and show the dialog using the FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The target string (target) must not be null."
                ],
                "post-conditions": [
                  "A success dialog fragment is displayed with the specified target string."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.BackupWalletViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.BackupWalletViewModel.de.schildbach.wallet.ui.backup.BackupWalletViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.BackupWalletViewModel.de.schildbach.wallet.ui.backup.BackupWalletViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for backing up a wallet in the application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to create the ViewModel."
                }
              ],
              "Returns": {
                "type": "BackupWalletViewModel",
                "description": "A ViewModel instance for backing up a wallet."
              },
              "Why": "To provide a ViewModel specifically designed for handling backup operations of a wallet within the application.",
              "How-to-use": "Create an instance of BackupWalletViewModel by passing an android.app.Application context to the constructor.",
              "How-it-is-done": "The method initializes the ViewModel by setting the application context and creating a new WalletLiveData instance for the wallet.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "A BackupWalletViewModel instance is successfully created with the specified application context."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.FileAdapter": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.FileAdapter",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.backup.FileAdapter.de.schildbach.wallet.ui.backup.FileAdapter(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.FileAdapter.de.schildbach.wallet.ui.backup.FileAdapter(android.content.Context)",
            "description": {
              "What": "Initialize a FileAdapter object with the given context and layout inflater.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to initialize the FileAdapter."
                },
                "Returns"
              ],
              "type": "de.schildbach.wallet.ui.backup.FileAdapter",
              "description": "A new instance of FileAdapter initialized with the provided context.",
              "Why": "To set up the FileAdapter with the necessary context and inflater for displaying files.",
              "How-to-use": "Create a new instance of FileAdapter by passing a valid context as a parameter.",
              "How-it-is-done": "The constructor initializes the FileAdapter by setting the context and layout inflater using the provided context parameter.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "A new instance of FileAdapter is created with the specified context and layout inflater."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.FileAdapter.getView(int,android.view.View,android.view.ViewGroup)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.FileAdapter.getView(int,android.view.View,android.view.ViewGroup)",
            "description": {
              "What": "This method is responsible for creating a view for a specific file in a list view.",
              "Parameters": [
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the file in the list."
                },
                {
                  "name": "row",
                  "type": "android.view.View",
                  "description": "The view to be reused or inflated for the file."
                },
                {
                  "name": "parent",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view group of the row."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The view representing the file at the specified position."
              },
              "Why": "To provide a custom view for each file in a list view.",
              "How-to-use": "Create an instance of FileAdapter and set it as the adapter for a list view to display files with custom views.",
              "How-it-is-done": "The method first retrieves the file at the specified position, then inflates a new view if the row is null, sets the file name as text in a TextView, and finally returns the row view.",
              "Property": {
                "pre-conditions": "The inflater and R.layout.spinner_item must be properly initialized.",
                "post-conditions": "A view representing the file at the specified position is returned."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.FileAdapter.setFiles(java.util.List)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.FileAdapter.setFiles(java.util.List)",
            "description": {
              "What": "This method sets the list of files to be displayed in the adapter, replacing any existing files.",
              "Parameters": [
                {
                  "name": "files",
                  "type": "java.util.List<java.io.File>",
                  "description": "The list of files to be set in the adapter."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to easily update the list of files displayed in the adapter without having to manually add or remove files.",
              "How-to-use": "Create a List<java.io.File> containing the files to be displayed, then call setFiles(List<java.io.File>) on an instance of FileAdapter to update the displayed files.",
              "How-it-is-done": "The method first clears the existing list of files in the adapter, then iterates through the input list of files and adds each file to the adapter.",
              "Property": {
                "pre-conditions": "The input list of files must not be null.",
                "post-conditions": "The adapter will contain only the files from the input list, replacing any existing files."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.afterTextChanged(android.text.Editable)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.afterTextChanged(android.text.Editable)",
            "description": {
              "What": "This method triggers a handle function after the text has been changed in an editable text field.",
              "Parameters": [
                {
                  "name": "s",
                  "type": "android.text.Editable",
                  "description": "The editable text field that has been changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle actions that need to be taken after text has been changed in an editable text field.",
              "How-to-use": "Create an instance of ImportDialogButtonEnablerListener and set it as a text watcher for an editable text field to trigger the handle function after text changes.",
              "How-it-is-done": "The method simply calls the handle function, which contains the logic to be executed after the text has been changed in the editable text field.",
              "Property": {
                "pre-conditions": [
                  "The method should be set as a text watcher for an editable text field."
                ],
                "post-conditions": [
                  "The handle function is triggered after the text has been changed in the editable text field."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.beforeTextChanged(java.lang.CharSequence,int,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.beforeTextChanged(java.lang.CharSequence,int,int,int)",
            "description": {
              "What": "This method is called before the text is changed in an input field, allowing for any necessary actions or validations to be performed.",
              "Parameters": [
                {
                  "name": "s",
                  "type": "java.lang.CharSequence",
                  "description": "The text content before the change."
                },
                {
                  "name": "start",
                  "type": "int",
                  "description": "The starting index of the change."
                },
                {
                  "name": "count",
                  "type": "int",
                  "description": "The number of characters that are going to be replaced."
                },
                {
                  "name": "after",
                  "type": "int",
                  "description": "The length of the new text that will replace the old text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow for actions or validations to be performed before the text is changed in an input field.",
              "How-to-use": "Implement this method in a class that implements the ImportDialogButtonEnablerListener interface to handle actions before text changes in an input field.",
              "How-it-is-done": "The method does not contain any implementation details as it is an abstract method that needs to be overridden in a subclass.",
              "Property": {
                "pre-conditions": [
                  "The class implementing this method must implement the ImportDialogButtonEnablerListener interface."
                ],
                "post-conditions": [
                  "Any necessary actions or validations before text changes in an input field can be performed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener(android.widget.TextView,android.app.AlertDialog)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener(android.widget.TextView,android.app.AlertDialog)",
            "description": {
              "What": "Initialize an ImportDialogButtonEnablerListener object with a TextView and AlertDialog to enable/disable buttons based on the TextView input.",
              "Parameters": [
                {
                  "name": "passwordView",
                  "type": "android.widget.TextView",
                  "description": "The TextView input for password."
                },
                {
                  "name": "dialog",
                  "type": "android.app.AlertDialog",
                  "description": "The AlertDialog to enable/disable buttons."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "Constructor method, no return type."
              },
              "Why": "To dynamically enable/disable buttons based on the input in the TextView.",
              "How-to-use": "Create an instance of ImportDialogButtonEnablerListener by passing a TextView and an AlertDialog, then the buttons in the dialog will be automatically enabled/disabled based on the input in the TextView.",
              "How-it-is-done": "The constructor initializes the passwordView and dialog fields with the provided parameters, then calls the handle() method to enable/disable buttons based on the input in the TextView.",
              "Property": {
                "pre-conditions": [
                  "The passwordView and dialog parameters must not be null."
                ],
                "post-conditions": [
                  "The ImportDialogButtonEnablerListener object is initialized with the provided TextView and AlertDialog."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.handle()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.handle()",
            "description": {
              "What": "Enables or disables a button based on the presence of a password, file, and the need for a password.",
              "Parameters": [
                {
                  "name": "passwordView",
                  "type": "android.widget.EditText",
                  "description": "The EditText view containing the password input."
                },
                {
                  "name": "dialog",
                  "type": "android.app.AlertDialog",
                  "description": "The AlertDialog containing the button to be enabled or disabled."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To dynamically enable or disable a button based on user input and requirements.",
              "How-to-use": "Call this method whenever the password input or file selection changes to update the state of the button in the dialog.",
              "How-it-is-done": "The method checks if a password is needed, if a password is provided, and if a file is selected to determine if the button should be enabled or disabled.",
              "Property": {
                "pre-conditions": [
                  "The passwordView and dialog parameters must not be null."
                ],
                "post-conditions": [
                  "The button in the dialog will be enabled if a file is selected and either a password is not needed or a password is provided."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.hasFile()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.hasFile()",
            "description": {
              "What": "This method checks if a file exists.",
              "Parameters": [],
              "Returns": {
                "Type": "boolean",
                "Description": "True if a file exists, false otherwise."
              },
              "Why": "To determine if a file is available for processing.",
              "How-to-use": "Call this method to check if a file exists before performing any file-related operations.",
              "How-it-is-done": "The method simply returns a hardcoded value of true, indicating that a file exists.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.needsPassword()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.needsPassword()",
            "description": {
              "What": "This method determines if a password is needed for a specific action.",
              "Parameters": [],
              "Returns": {
                "Type": "boolean",
                "Description": "True if a password is needed, false otherwise."
              },
              "Why": "To check if a password is required before performing certain actions.",
              "How-to-use": "Call this method to determine if a password is needed before proceeding with a specific action.",
              "How-it-is-done": "The method simply returns a boolean value indicating whether a password is needed or not.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.onItemSelected(android.widget.AdapterView,android.view.View,int,long)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.onItemSelected(android.widget.AdapterView,android.view.View,int,long)",
            "description": {
              "What": "Handles the selection of an item in an AdapterView by calling the handle method.",
              "Parameters": [
                {
                  "name": "parent",
                  "type": "android.widget.AdapterView<?>",
                  "description": "The AdapterView where the selection happened."
                },
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view within the AdapterView that was selected."
                },
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the selected item in the AdapterView."
                },
                {
                  "name": "id",
                  "type": "long",
                  "description": "The row id of the selected item."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the selection event of an item in an AdapterView.",
              "How-to-use": "Create an instance of ImportDialogButtonEnablerListener and set it as the listener for an AdapterView to handle item selection events.",
              "How-it-is-done": "When an item is selected in the AdapterView, the onItemSelected method is called, which then calls the handle method to perform the necessary actions.",
              "Property": {
                "pre-conditions": "The listener must be set on an AdapterView to receive item selection events.",
                "post-conditions": "The handle method is called to process the selection event."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.onNothingSelected(android.widget.AdapterView)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.onNothingSelected(android.widget.AdapterView)",
            "description": {
              "What": "Handles the event when nothing is selected in an AdapterView.",
              "Parameters": [
                {
                  "name": "parent",
                  "type": "android.widget.AdapterView<?>",
                  "description": "The AdapterView where the selection event occurred."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To trigger a specific action when no item is selected in the AdapterView.",
              "How-to-use": "Create an instance of ImportDialogButtonEnablerListener and set it as the listener for an AdapterView. When no item is selected in the AdapterView, the handle() method will be called.",
              "How-it-is-done": "The method simply calls the handle() method, which contains the logic to be executed when nothing is selected in the AdapterView.",
              "Property": {
                "pre-conditions": [
                  "An instance of ImportDialogButtonEnablerListener must be set as the listener for an AdapterView."
                ],
                "post-conditions": [
                  "The handle() method will be called when nothing is selected in the AdapterView."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.onTextChanged(java.lang.CharSequence,int,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.ImportDialogButtonEnablerListener.onTextChanged(java.lang.CharSequence,int,int,int)",
            "description": {
              "What": "This method is called when the text in an input field is changed.",
              "Parameters": [
                {
                  "name": "s",
                  "type": "java.lang.CharSequence",
                  "description": "The new text in the input field."
                },
                {
                  "name": "start",
                  "type": "int",
                  "description": "The index at which the change started."
                },
                {
                  "name": "before",
                  "type": "int",
                  "description": "The length of the text that was removed."
                },
                {
                  "name": "count",
                  "type": "int",
                  "description": "The length of the new text that was added."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To enable actions based on the text input changes in the UI.",
              "How-to-use": "Implement this method in a class that implements ImportDialogButtonEnablerListener interface to handle text input changes.",
              "How-it-is-done": "The method receives the new text, start index, length of removed text, and length of added text as parameters, but does not perform any specific action within the method.",
              "Property": {
                "pre-conditions": "The class implementing this method should be properly set up to handle text input changes in the UI.",
                "post-conditions": "The method should be called whenever the text in the input field is changed, allowing for actions to be triggered based on the new text."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment()",
            "description": {
              "method": {
                "What": "Initialize a new instance of RestoreWalletDialogFragment.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "RestoreWalletDialogFragment",
                  "description": "A new instance of RestoreWalletDialogFragment."
                },
                "Why": "To provide a way to create a new instance of RestoreWalletDialogFragment.",
                "How-to-use": "To use this method, simply call it to create a new instance of RestoreWalletDialogFragment.",
                "How-it-is-done": "The method does not take any parameters and simply initializes a new instance of RestoreWalletDialogFragment.",
                "Property": {
                  "pre-conditions": "None",
                  "post-conditions": "A new instance of RestoreWalletDialogFragment is created."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.onAttach(android.content.Context)",
            "description": {
              "What": "This method initializes the activity, application, and configuration variables of the RestoreWalletDialogFragment class.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the calling activity."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up necessary variables for the dialog fragment to interact with the wallet application.",
              "How-to-use": "Call this method when attaching the dialog fragment to an activity to initialize the necessary variables for the fragment.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then casts the context to AbstractWalletActivity to access the wallet application and configuration.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "The activity, application, and configuration variables are initialized for further use within the dialog fragment."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize the ViewModel for restoring a wallet and request permission to read external storage if not granted.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the fragment."
                }
              ],
              "Returns": "void",
              "Why": "To set up the ViewModel for restoring a wallet and handle permission requests for reading external storage.",
              "How-to-use": "Call this method in the onCreate() method of a Fragment to initialize the ViewModel and request permission for reading external storage.",
              "How-it-is-done": "The method first calls the super.onCreate() method to handle any saved instance state. It then initializes the ViewModel using ViewModelProviders.of(this) and requests permission to read external storage if not already granted.",
              "Property": {
                "pre-conditions": "The method should be called within the onCreate() method of a Fragment.",
                "post-conditions": "The ViewModel for restoring a wallet is initialized and permission to read external storage may have been requested."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog for restoring a wallet from a backup file or private keys.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog for restoring a wallet."
              },
              "Why": "To provide a user interface for restoring a wallet from a backup file or private keys.",
              "How-to-use": "Call onCreateDialog method with the saved instance state as a parameter to create a dialog for restoring a wallet.",
              "How-it-is-done": "The method inflates a layout for the dialog, sets up views for file selection, password input, and import button click listener. It also handles different types of files for restoration and enables/disables dialog buttons based on user input.",
              "Property": {
                "pre-conditions": [
                  "The layout file 'restore_wallet_dialog' must be available.",
                  "The resource IDs 'restore_wallet_dialog_message', 'import_keys_from_storage_file', 'import_keys_from_storage_password', 'import_keys_from_storage_show', 'restore_wallet_from_storage_dialog_replace_warning' must be defined in the layout file."
                ],
                "post-conditions": [
                  "A dialog for restoring a wallet is created with file selection, password input, and import functionality."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.onRequestPermissionsResult(int,java.lang.String[],int[])": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.onRequestPermissionsResult(int,java.lang.String[],int[])",
            "description": {
              "What": "Handles the result of a permission request for restoring a wallet.",
              "Parameters": [
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code for the permission request."
                },
                {
                  "name": "permissions",
                  "type": "String[]",
                  "description": "The requested permissions."
                },
                {
                  "name": "grantResults",
                  "type": "int[]",
                  "description": "The results of the permission request for each permission."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the result of a permission request for restoring a wallet and show a dialog if permission is denied.",
              "How-to-use": "Call this method when receiving the result of a permission request for restoring a wallet, passing the request code, permissions, and grant results.",
              "How-it-is-done": "Checks if the request code is for restoring a wallet, then checks if the permission was granted, and shows a dialog if permission was denied.",
              "Property": {
                "pre-conditions": "The method is typically called after requesting permissions for restoring a wallet.",
                "post-conditions": "If the permission is denied, a dialog is shown to inform the user."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.onResume()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.onResume()",
            "description": {
              "What": "Updates the view when the dialog fragment is resumed.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To ensure that the view is updated with the latest data when the dialog fragment is resumed.",
              "How-to-use": "Simply call the onResume() method on an instance of RestoreWalletDialogFragment to update the view.",
              "How-it-is-done": "The method calls the super.onResume() to handle any necessary operations, then calls the updateView() method to update the view with the latest data.",
              "Property": {
                "pre-conditions": "The dialog fragment must be in a resumed state.",
                "post-conditions": "The view is updated with the latest data."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.restorePrivateKeysFromBase58(java.io.File)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.restorePrivateKeysFromBase58(java.io.File)",
            "description": {
              "What": "This method restores private keys from a Base58 encoded file and logs the success or failure of the operation.",
              "Parameters": [
                {
                  "name": "file",
                  "type": "java.io.File",
                  "description": "The file containing the Base58 encoded private keys to be restored."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow users to restore private keys from a file in Base58 format, which can be useful for wallet backup and recovery purposes.",
              "How-to-use": "Call this method with a File object pointing to the Base58 encoded private keys file to initiate the restoration process. Handle any exceptions that may occur during the process.",
              "How-it-is-done": "The method reads the contents of the file using a FileInputStream, then calls a utility method to restore the private keys from the Base58 encoded data. It logs the success or failure of the restoration process.",
              "Property": {
                "pre-conditions": "The file parameter must point to a valid file containing Base58 encoded private keys.",
                "post-conditions": "The private keys are either successfully restored and logged as such, or an IOException is caught and a failure dialog is shown."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.restoreWallet(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.restoreWallet(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method restores a wallet by replacing the current wallet with the restored wallet, disarming the backup reminder, and showing a success dialog.",
              "Parameters": [
                {
                  "name": "restoredWallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet to be restored."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way to restore a wallet and handle the necessary actions after restoration.",
              "How-to-use": "Call this method with the restored wallet as the parameter to replace the current wallet with the restored one and show a success dialog.",
              "How-it-is-done": "The method first replaces the current wallet with the restored wallet using the application's replaceWallet method. It then disarms the backup reminder using the config's disarmBackupReminder method. Finally, it shows a success dialog using the SuccessDialogFragment class.",
              "Property": {
                "pre-conditions": "The restoredWallet parameter must not be null.",
                "post-conditions": "The current wallet is replaced with the restored wallet, the backup reminder is disarmed, and a success dialog is shown."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.restoreWalletFromEncrypted(java.io.File,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.restoreWalletFromEncrypted(java.io.File,java.lang.String)",
            "description": {
              "What": "This method restores a wallet from an encrypted file using a provided password.",
              "Parameters": [
                {
                  "name": "file",
                  "type": "java.io.File",
                  "description": "The encrypted file containing the wallet data."
                },
                {
                  "name": "password",
                  "type": "java.lang.String",
                  "description": "The password used to decrypt the wallet data."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow users to restore their wallet from an encrypted backup file for data recovery purposes.",
              "How-to-use": "Call this method with the encrypted file and the password as parameters to restore the wallet data.",
              "How-it-is-done": "The method reads the encrypted file, decrypts the data using the provided password, and then restores the wallet from the decrypted data.",
              "Property": {
                "pre-conditions": [
                  "The file parameter must point to a valid encrypted wallet file.",
                  "The password must be the correct one used to encrypt the wallet data."
                ],
                "post-conditions": [
                  "The wallet is successfully restored from the encrypted file if the decryption process is successful."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.restoreWalletFromProtobuf(java.io.File)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.restoreWalletFromProtobuf(java.io.File)",
            "description": {
              "What": "This method restores a wallet from a Protobuf file.",
              "Parameters": [
                {
                  "name": "file",
                  "type": "java.io.File",
                  "description": "The Protobuf file containing the wallet data to be restored."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to restore their wallet from a Protobuf file in the application.",
              "How-to-use": "Call this method with the Protobuf file as the parameter to restore the wallet data from the file.",
              "How-it-is-done": "The method reads the data from the Protobuf file using a FileInputStream, then calls a utility method to restore the wallet from the Protobuf data. It logs success or failure messages accordingly.",
              "Property": {
                "pre-conditions": "The file parameter must point to a valid Protobuf file containing wallet data.",
                "post-conditions": "The wallet data from the Protobuf file is successfully restored in the application."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.show(android.support.v4.app.FragmentManager)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.show(android.support.v4.app.FragmentManager)",
            "description": {
              "What": "Show a dialog fragment for restoring a wallet.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for managing the dialog fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to display a dialog for restoring a wallet.",
              "How-to-use": "Call this static method passing in the FragmentManager instance to show the restore wallet dialog.",
              "How-it-is-done": "Create a new instance of RestoreWalletDialogFragment, show it using the FragmentManager provided, and assign a tag to the dialog fragment.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager instance (fm) should not be null."
                ],
                "post-conditions": [
                  "The restore wallet dialog fragment is displayed on the screen."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.updateView()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment.updateView()",
            "description": {
              "What": "Updates the view of the RestoreWalletDialogFragment with backup files and related information.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To dynamically update the view of the dialog fragment based on available backup files and related information.",
              "How-to-use": "Call this method when the view of the RestoreWalletDialogFragment needs to be updated with backup files and information.",
              "How-it-is-done": "The method retrieves backup files from external storage and app-private storage, sorts them, updates the message view, sets visibility of views based on file availability, and sets up a listener for password view.",
              "Property": {
                "pre-conditions": [
                  "The Constants.Files.EXTERNAL_WALLET_BACKUP_DIR and Constants.Files.EXTERNAL_STORAGE_DIR must be properly defined.",
                  "The activity must be set before calling this method."
                ],
                "post-conditions": [
                  "The view of the RestoreWalletDialogFragment is updated with backup files and related information."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$FailureDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$FailureDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$FailureDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$FailureDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$FailureDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$FailureDialogFragment()",
            "description": {
              "method": "This method initializes a new instance of the FailureDialogFragment class.",
              "parameters": [],
              "returns": {
                "type": "FailureDialogFragment",
                "description": "A new instance of the FailureDialogFragment class."
              },
              "why": "This method is provided to allow the creation of a FailureDialogFragment object for displaying failure messages during wallet restoration.",
              "how-to-use": "To use this method, simply call it to create a new instance of FailureDialogFragment.",
              "how-it-is-done": "The method does not take any parameters and simply creates a new instance of the FailureDialogFragment class.",
              "property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of FailureDialogFragment is successfully created."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$FailureDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$FailureDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog to display a failure message when restoring a wallet.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying the failure message."
              },
              "Why": "To inform the user about the failure during the wallet restoration process and provide options to dismiss or retry.",
              "How-to-use": "Call onCreateDialog method with the saved instance state as a parameter to create a dialog displaying the failure message with dismiss and retry options.",
              "How-it-is-done": "The method retrieves the exception message from the arguments, creates a dialog with the message, sets positive and negative buttons for dismiss and retry actions, and returns the created dialog.",
              "Property": {
                "pre-conditions": [
                  "The getArguments() method should return a non-null Bundle containing the exception message."
                ],
                "post-conditions": [
                  "A dialog displaying the failure message with dismiss and retry options is created and returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$FailureDialogFragment.showDialog(android.support.v4.app.FragmentManager,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$FailureDialogFragment.showDialog(android.support.v4.app.FragmentManager,java.lang.String)",
            "description": {
              "What": "Show a dialog with a failure message for restoring a wallet.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to show the dialog."
                },
                {
                  "name": "exceptionMessage",
                  "type": "java.lang.String",
                  "description": "The message describing the exception or failure."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to inform the user about a failure during the wallet restoration process.",
              "How-to-use": "Call this method with the FragmentManager and the exception message to display a dialog with the failure message.",
              "How-it-is-done": "The method creates a new instance of FailureDialogFragment, sets the exception message as an argument, and shows the dialog using the FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The exceptionMessage must not be null."
                ],
                "post-conditions": [
                  "A dialog displaying the failure message will be shown to the user."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$PermissionDeniedDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$PermissionDeniedDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$PermissionDeniedDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$PermissionDeniedDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$PermissionDeniedDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$PermissionDeniedDialogFragment()",
            "description": {
              "method": "Creates a new instance of PermissionDeniedDialogFragment.",
              "parameters": [],
              "returns": "PermissionDeniedDialogFragment",
              "why": "To provide a way to handle permission denial within the RestoreWalletDialogFragment.",
              "how-to-use": "Simply instantiate a new PermissionDeniedDialogFragment object.",
              "how-it-is-done": "The method initializes a new instance of PermissionDeniedDialogFragment without any parameters.",
              "property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of PermissionDeniedDialogFragment is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$PermissionDeniedDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$PermissionDeniedDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog for displaying a permission denied message when restoring a wallet.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying the permission denied message for restoring a wallet."
              },
              "Why": "To inform the user about the permission denial when attempting to restore a wallet.",
              "How-to-use": "Call onCreateDialog(android.os.Bundle) method passing the saved instance state to get a dialog displaying the permission denied message for restoring a wallet.",
              "How-it-is-done": "The method creates a DialogBuilder instance, sets the title and message for the dialog, adds a single dismiss button with an OnClickListener to dismiss the dialog, and returns the created dialog.",
              "Property": {
                "pre-conditions": [
                  "The getContext() method should return a valid context."
                ],
                "post-conditions": [
                  "A dialog displaying the permission denied message for restoring a wallet is created and returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$PermissionDeniedDialogFragment.showDialog(android.support.v4.app.FragmentManager)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$PermissionDeniedDialogFragment.showDialog(android.support.v4.app.FragmentManager)",
            "description": {
              "What": "Show a permission denied dialog fragment for restoring a wallet.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to show the dialog."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to display a dialog informing the user of permission denial during wallet restoration.",
              "How-to-use": "Call this method with the FragmentManager instance as the parameter to display the permission denied dialog fragment for wallet restoration.",
              "How-it-is-done": "The method creates a new instance of PermissionDeniedDialogFragment, which is a subclass of DialogFragment, and shows it using the provided FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager instance (fm) should not be null."
                ],
                "post-conditions": [
                  "The permission denied dialog fragment is displayed on the screen."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment()",
            "description": {
              "method": {
                "What": "Initialize a new instance of SuccessDialogFragment.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "SuccessDialogFragment",
                  "description": "A new instance of SuccessDialogFragment."
                },
                "Why": "To provide a way to create and show a success dialog fragment.",
                "How-to-use": "Simply create a new instance of SuccessDialogFragment to display a success dialog in the UI.",
                "How-it-is-done": "The method initializes a new instance of SuccessDialogFragment without any parameters.",
                "Property": {
                  "pre-conditions": "None",
                  "post-conditions": "A new instance of SuccessDialogFragment is created and can be used to display a success dialog."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment.onAttach(android.content.Context)",
            "description": {
              "method": {
                "What": "Assigns the passed context to the activity field of the class.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context to be assigned to the activity field."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To initialize the activity field with the context passed to the fragment.",
                "How-to-use": "Call this method with the context parameter when attaching the fragment to an activity.",
                "How-it-is-done": "The method calls the superclass method onAttach(context) and then assigns the context to the activity field of the class.",
                "Property": {
                  "pre-conditions": "The context parameter must not be null.",
                  "post-conditions": "The activity field of the class will be initialized with the passed context."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog to display a success message for restoring a wallet with an option to reset the blockchain.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying the success message for restoring a wallet."
              },
              "Why": "To inform the user about the successful restoration of a wallet and provide an option to reset the blockchain if needed.",
              "How-to-use": "Call onCreateDialog method passing the saved instance state as a parameter to create a dialog with a success message for restoring a wallet.",
              "How-it-is-done": "The method retrieves a boolean flag to determine if an encrypted message should be shown, constructs the message content, sets up the dialog with the message and a neutral button to reset the blockchain and finish the activity.",
              "Property": {
                "pre-conditions": [
                  "The method should be called within a Fragment context."
                ],
                "post-conditions": [
                  "A dialog displaying the success message for restoring a wallet is created and returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment.showDialog(android.support.v4.app.FragmentManager,boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletDialogFragment$SuccessDialogFragment.showDialog(android.support.v4.app.FragmentManager,boolean)",
            "description": {
              "What": "Show a dialog fragment for successful wallet restoration with an option to show an encrypted message.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for managing the dialog fragment."
                },
                {
                  "name": "showEncryptedMessage",
                  "type": "boolean",
                  "description": "A flag indicating whether to show an encrypted message in the dialog."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to display a success dialog for wallet restoration with an option to show an encrypted message.",
              "How-to-use": "Call this static method with the FragmentManager instance and a boolean flag to show or hide the encrypted message in the dialog.",
              "How-it-is-done": "The method creates a new instance of SuccessDialogFragment, sets arguments including the showEncryptedMessage flag, and shows the dialog using the provided FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null."
                ],
                "post-conditions": [
                  "A dialog fragment for successful wallet restoration is displayed with the specified showEncryptedMessage option."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalActivity.de.schildbach.wallet.ui.backup.RestoreWalletFromExternalActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalActivity.de.schildbach.wallet.ui.backup.RestoreWalletFromExternalActivity()",
            "description": {
              "What": "This method is a constructor for the RestoreWalletFromExternalActivity class.",
              "Parameters": [],
              "Returns": "RestoreWalletFromExternalActivity",
              "Why": "To initialize an instance of the RestoreWalletFromExternalActivity class.",
              "How-to-use": "Simply create a new instance of the RestoreWalletFromExternalActivity class.",
              "How-it-is-done": "The method does not take any parameters and simply initializes a new instance of the RestoreWalletFromExternalActivity class.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "A new instance of RestoreWalletFromExternalActivity is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalActivity.onCreate(android.os.Bundle)",
            "description": {
              "What": "Show a dialog fragment to restore a wallet from an external source.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a user interface for restoring a wallet from an external source.",
              "How-to-use": "Call this method in the onCreate() method of an activity to display a dialog fragment for restoring a wallet from an external source.",
              "How-it-is-done": "The method calls the show() method of the RestoreWalletFromExternalDialogFragment class, passing the FragmentManager and the data from the intent as parameters.",
              "Property": {
                "pre-conditions": [
                  "The activity must have a valid FragmentManager."
                ],
                "post-conditions": [
                  "A dialog fragment for restoring a wallet from an external source is displayed."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment()",
            "description": {
              "What": "Initialize a new instance of RestoreWalletFromExternalDialogFragment.",
              "Parameters": [
                {
                  "name": "",
                  "type": "",
                  "description": ""
                }
              ],
              "Returns": {
                "type": "RestoreWalletFromExternalDialogFragment",
                "description": "A new instance of RestoreWalletFromExternalDialogFragment."
              },
              "Why": "To provide a way to create an instance of RestoreWalletFromExternalDialogFragment.",
              "How-to-use": "Simply create a new instance of RestoreWalletFromExternalDialogFragment using the default constructor.",
              "How-it-is-done": "The method initializes a new instance of RestoreWalletFromExternalDialogFragment without any parameters.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new instance of RestoreWalletFromExternalDialogFragment is created."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.handleRestore(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.handleRestore(java.lang.String)",
            "description": {
              "What": "Handles the restoration of a wallet from an external source with a provided password.",
              "Parameters": [
                {
                  "name": "password",
                  "type": "String",
                  "description": "The password used to decrypt the wallet backup."
                },
                {
                  "name": "is",
                  "type": "InputStream",
                  "description": "The input stream of the wallet backup file."
                },
                {
                  "name": "restoredWallet",
                  "type": "Wallet",
                  "description": "The restored wallet from the backup file."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To allow users to restore their encrypted wallet from an external source with a provided password.",
              "How-to-use": "Call handleRestore method with the password as a parameter to restore the wallet from an external source.",
              "How-it-is-done": "The method opens an input stream to the backup file, restores the wallet from the encrypted file using the provided password, replaces the current wallet with the restored one, and shows success or failure dialogs accordingly.",
              "Property": {
                "pre-conditions": "The backupUri must be set and accessible. The password must be provided.",
                "post-conditions": "The wallet is successfully restored and replaced in the application. The backup reminder is disarmed."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Initialize the activity, application, content resolver, and configuration variables of the RestoreWalletFromExternalDialogFragment class.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the calling activity."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up necessary variables for the dialog fragment to interact with the wallet application.",
              "How-to-use": "Call this method in the onAttach() lifecycle method of the dialog fragment, passing the context of the calling activity as the parameter.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then assigns the activity, application, content resolver, and configuration variables based on the context provided.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "The activity, application, content resolver, and configuration variables of the dialog fragment are properly initialized."
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.onCreate(android.os.Bundle)",
            "description": {
              "method": {
                "What": "Initialize the backupUri and viewModel variables in the onCreate method of RestoreWalletFromExternalDialogFragment class.",
                "Parameters": [
                  {
                    "name": "savedInstanceState",
                    "type": "android.os.Bundle",
                    "description": "The saved instance state of the fragment."
                  }
                ],
                "Returns": "void",
                "Why": "To set up the initial state of the fragment and initialize necessary variables for further operations.",
                "How-to-use": "Extend the RestoreWalletFromExternalDialogFragment class and override the onCreate method, passing the saved instance state as a parameter.",
                "How-it-is-done": "The method calls the superclass onCreate method, retrieves the backupUri from the arguments bundle, and initializes the viewModel using ViewModelProviders.",
                "Property": {
                  "pre-conditions": [
                    "The class RestoreWalletFromExternalDialogFragment must be extended to override the onCreate method."
                  ],
                  "post-conditions": [
                    "The backupUri and viewModel variables are initialized for further use within the fragment."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog for restoring a wallet from an external source with user input for password and import options.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog for restoring a wallet from an external source."
              },
              "Why": "To provide a user interface for restoring a wallet from an external source with necessary input fields and options.",
              "How-to-use": "Call onCreateDialog method with the saved instance state as a parameter to create a dialog for restoring a wallet from an external source.",
              "How-it-is-done": "The method inflates a layout for the dialog, sets up input fields for password and import options, handles button clicks for import and cancel actions, and updates UI elements based on user input.",
              "Property": {
                "pre-conditions": [
                  "The activity context must be set before calling this method."
                ],
                "post-conditions": [
                  "A dialog for restoring a wallet from an external source is created and displayed to the user."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.restoreWalletFromEncrypted(java.io.InputStream,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.restoreWalletFromEncrypted(java.io.InputStream,java.lang.String)",
            "description": {
              "What": "This method restores a wallet from an encrypted input stream using a password.",
              "Parameters": [
                {
                  "name": "cipher",
                  "type": "java.io.InputStream",
                  "description": "The input stream containing the encrypted wallet data."
                },
                {
                  "name": "password",
                  "type": "java.lang.String",
                  "description": "The password used to decrypt the wallet data."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.wallet.Wallet",
                "description": "The restored wallet object."
              },
              "Why": "To provide a way to restore a wallet from encrypted data for the user.",
              "How-to-use": "Call this method with an encrypted input stream and the password to decrypt the wallet data and get back the restored wallet object.",
              "How-it-is-done": "The method reads the encrypted data from the input stream, decrypts it using the provided password, and then restores the wallet from the decrypted data using the WalletUtils class.",
              "Property": {
                "pre-conditions": [
                  "The input stream 'cipher' must contain valid encrypted wallet data.",
                  "The 'password' must be the correct password used to encrypt the wallet data."
                ],
                "post-conditions": [
                  "The method returns a valid Wallet object representing the restored wallet."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.show(android.support.v4.app.FragmentManager,android.net.Uri)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment.show(android.support.v4.app.FragmentManager,android.net.Uri)",
            "description": {
              "What": "Show a dialog fragment for restoring a wallet from an external backup file.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for managing the dialog fragment."
                },
                {
                  "name": "backupUri",
                  "type": "android.net.Uri",
                  "description": "The URI of the backup file to restore the wallet from."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way for users to restore their wallet from an external backup file.",
              "How-to-use": "Call this static method with the FragmentManager and the backup URI to display the restore wallet dialog fragment.",
              "How-it-is-done": "Create a new instance of RestoreWalletFromExternalDialogFragment, set the backup URI as arguments, and show the dialog fragment using the FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The backupUri must not be null."
                ],
                "post-conditions": [
                  "The dialog fragment for restoring the wallet from the external backup file is displayed."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment()",
            "description": {
              "What": "Initialize a new instance of FailureDialogFragment.",
              "Parameters": [
                {
                  "name": "",
                  "type": "",
                  "description": ""
                }
              ],
              "Returns": {
                "type": "FailureDialogFragment",
                "description": "A new instance of FailureDialogFragment."
              },
              "Why": "To provide a way to create an instance of FailureDialogFragment for displaying failure messages during wallet restoration.",
              "How-to-use": "Simply instantiate a new FailureDialogFragment object to display a failure message during wallet restoration.",
              "How-it-is-done": "The method initializes a new instance of FailureDialogFragment without any parameters or specific initialization logic.",
              "Property": {
                "pre-conditions": [
                  "No specific pre-conditions for instantiating a new FailureDialogFragment object."
                ],
                "post-conditions": [
                  "A new instance of FailureDialogFragment is created and can be used for displaying failure messages during wallet restoration."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Assign the passed context to the activity field of the class.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context to be assigned to the activity field."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To initialize the activity field with the context passed to the fragment.",
              "How-to-use": "Call this method with the context parameter when attaching the fragment to an activity.",
              "How-it-is-done": "The method calls the superclass method to properly attach the context, then assigns the context to the activity field of the class.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The activity field of the class will be initialized with the passed context."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog to display a failure message when restoring a wallet from an external source.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying the failure message with options to dismiss, retry, or cancel."
              },
              "Why": "To inform the user about the failure in restoring the wallet and provide options to handle the situation.",
              "How-to-use": "Call this method passing the saved instance state to create a dialog with the failure message and options for the user to dismiss, retry, or cancel.",
              "How-it-is-done": "The method retrieves the exception message and backup URI from the arguments, creates a dialog with the failure message, sets positive, negative, and cancel button actions, and returns the created dialog.",
              "Property": {
                "pre-conditions": [
                  "The method should be called within a Fragment context."
                ],
                "post-conditions": [
                  "A dialog is created and displayed to the user with the failure message and options to handle the failure."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment.showDialog(android.support.v4.app.FragmentManager,java.lang.String,android.net.Uri)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$FailureDialogFragment.showDialog(android.support.v4.app.FragmentManager,java.lang.String,android.net.Uri)",
            "description": {
              "What": "Show a dialog fragment with failure message and backup URI for restoring wallet from external source.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to handle the dialog fragment."
                },
                {
                  "name": "exceptionMessage",
                  "type": "java.lang.String",
                  "description": "The exception message to display in the dialog."
                },
                {
                  "name": "backupUri",
                  "type": "android.net.Uri",
                  "description": "The URI of the backup file for the wallet."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a user-friendly way to display error messages and backup information during the wallet restoration process.",
              "How-to-use": "Call this static method with the FragmentManager, exception message, and backup URI to show a dialog fragment with the provided information.",
              "How-it-is-done": "Create a new instance of FailureDialogFragment, set arguments for exception message and backup URI, and show the dialog fragment using the FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The exceptionMessage should not be null or empty.",
                  "The backupUri should not be null."
                ],
                "post-conditions": [
                  "A dialog fragment is displayed with the provided exception message and backup URI."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment.de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment()",
            "description": {
              "method": {
                "What": "Initialize a new instance of SuccessDialogFragment.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "SuccessDialogFragment",
                  "description": "A new instance of SuccessDialogFragment."
                },
                "Why": "To provide a default constructor for creating instances of SuccessDialogFragment.",
                "How-to-use": "Simply call new SuccessDialogFragment() to create a new instance of SuccessDialogFragment.",
                "How-it-is-done": "The method initializes a new instance of SuccessDialogFragment without any parameters or additional logic.",
                "Property": {
                  "pre-conditions": [],
                  "post-conditions": [
                    "A new instance of SuccessDialogFragment is successfully created."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Assigns the passed context to the activity field of the class.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context to be assigned to the activity field."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To initialize the activity field with the context passed to the fragment.",
              "How-to-use": "Call this method with a valid context parameter after the fragment is attached to the activity.",
              "How-it-is-done": "The method calls the superclass method to ensure proper initialization and then assigns the passed context to the activity field of the class.",
              "Property": {
                "pre-conditions": [
                  "The fragment must be attached to an activity.",
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The activity field of the class will be initialized with the passed context."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog to display a success message for restoring a wallet from an external source.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying the success message for restoring a wallet."
              },
              "Why": "To provide feedback to the user after successfully restoring a wallet from an external source.",
              "How-to-use": "Call onCreateDialog method passing the saved instance state as a parameter to create a dialog with a success message for restoring a wallet.",
              "How-it-is-done": "The method retrieves a boolean flag to determine if an encrypted message should be shown, constructs a message with success and optional encrypted information, sets up a dialog with the message and a neutral button to reset blockchain and finish the activity.",
              "Property": {
                "pre-conditions": [
                  "The savedInstanceState parameter must not be null."
                ],
                "post-conditions": [
                  "A dialog displaying the success message for restoring a wallet is created and returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment.showDialog(android.support.v4.app.FragmentManager,boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletFromExternalDialogFragment$SuccessDialogFragment.showDialog(android.support.v4.app.FragmentManager,boolean)",
            "description": {
              "What": "This method shows a dialog fragment for successful wallet restoration from an external source, with an option to display an encrypted message.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for managing the dialog fragment."
                },
                {
                  "name": "showEncryptedMessage",
                  "type": "boolean",
                  "description": "A flag indicating whether to show an encrypted message in the dialog fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to display a success dialog after restoring a wallet from an external source.",
              "How-to-use": "Call this static method with the FragmentManager instance and a boolean flag to show or hide the encrypted message in the dialog.",
              "How-it-is-done": "The method creates a new instance of SuccessDialogFragment, sets arguments for showing the encrypted message, and then displays the dialog using the provided FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null."
                ],
                "post-conditions": [
                  "A dialog fragment is displayed with the specified parameters."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.backup.RestoreWalletViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.backup.RestoreWalletViewModel.de.schildbach.wallet.ui.backup.RestoreWalletViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.backup.RestoreWalletViewModel.de.schildbach.wallet.ui.backup.RestoreWalletViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for restoring a wallet with the application context and wallet balance data.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to initialize the ViewModel."
                }
              ],
              "Returns": {
                "type": "RestoreWalletViewModel",
                "description": "A ViewModel instance for restoring a wallet."
              },
              "Why": "To provide a ViewModel for handling the restoration of a wallet and displaying wallet balance data.",
              "How-to-use": "Create an instance of RestoreWalletViewModel by passing the application context as a parameter.",
              "How-it-is-done": "The method initializes the ViewModel with the application context and creates a LiveData object for wallet balance data.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "A new instance of RestoreWalletViewModel is created with the provided application context."
                ]
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.ui.monitor": {
    "qualifiedName": "de.schildbach.wallet.ui.monitor",
    "classes": {
      "de.schildbach.wallet.ui.monitor.BlockListAdapter": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.BlockListAdapter.bindTransactionView(android.view.View,org.bitcoinj.utils.MonetaryFormat,de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem$ListTransaction)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter.bindTransactionView(android.view.View,org.bitcoinj.utils.MonetaryFormat,de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem$ListTransaction)",
            "description": {
              "What": "Binds transaction data to the corresponding views in a row of a block list adapter.",
              "Parameters": [
                {
                  "name": "row",
                  "type": "android.view.View",
                  "description": "The row view to bind the transaction data to."
                },
                {
                  "name": "format",
                  "type": "org.bitcoinj.utils.MonetaryFormat",
                  "description": "The format for displaying monetary values."
                },
                {
                  "name": "tx",
                  "type": "de.schildbach.wallet.ui.monitor.BlockListAdapter.ListItem.ListTransaction",
                  "description": "The transaction data to bind to the views."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To display transaction data in a user-friendly format within a block list adapter.",
              "How-to-use": "Call this method with the row view, monetary format, and transaction data to display the transaction details in the corresponding views.",
              "How-it-is-done": "The method finds the relevant views within the row view and sets the transaction data values to these views, formatting the monetary value according to the provided format.",
              "Property": {
                "pre-conditions": [
                  "The row view must contain the necessary TextViews with the specified IDs (block_row_transaction_fromto, block_row_transaction_address, block_row_transaction_value)."
                ],
                "post-conditions": [
                  "The transaction data is displayed correctly in the row view with the specified formatting."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListAdapter.buildListItems(android.content.Context,java.util.List,java.util.Date,org.bitcoinj.utils.MonetaryFormat,java.util.Set,org.bitcoinj.wallet.Wallet,java.util.Map)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter.buildListItems(android.content.Context,java.util.List,java.util.Date,org.bitcoinj.utils.MonetaryFormat,java.util.Set,org.bitcoinj.wallet.Wallet,java.util.Map)",
            "description": {
              "What": "Builds a list of ListItem objects based on the provided blocks, time, format, transactions, wallet, and address book entries.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                },
                {
                  "name": "blocks",
                  "type": "java.util.List<org.bitcoinj.core.StoredBlock>",
                  "description": "The list of stored blocks to build the items from."
                },
                {
                  "name": "time",
                  "type": "java.util.Date",
                  "description": "The date and time to be used in the items."
                },
                {
                  "name": "format",
                  "type": "org.bitcoinj.utils.MonetaryFormat",
                  "description": "The format for displaying monetary values."
                },
                {
                  "name": "transactions",
                  "type": "java.util.Set<org.bitcoinj.core.Transaction>",
                  "description": "Optional set of transactions related to the blocks."
                },
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "Optional wallet object."
                },
                {
                  "name": "addressBook",
                  "type": "java.util.Map<java.lang.String, de.schildbach.wallet.data.AddressBookEntry>",
                  "description": "Optional map of address book entries."
                }
              ],
              "Returns": {
                "type": "java.util.List<de.schildbach.wallet.ui.monitor.BlockListAdapter.ListItem>",
                "description": "A list of ListItem objects built from the provided blocks."
              },
              "Why": "To generate a list of items for displaying block information in a user interface.",
              "How-to-use": "Call this method with the required parameters to get a list of ListItem objects for displaying block information.",
              "How-it-is-done": "Iterates over the provided blocks, creating a ListItem object for each block using the context, time, format, transactions, wallet, and address book entries.",
              "Property": {
                "pre-conditions": [
                  "The blocks list must not be null."
                ],
                "post-conditions": [
                  "The returned list will contain ListItem objects corresponding to the provided blocks."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListAdapter.de.schildbach.wallet.ui.monitor.BlockListAdapter(android.content.Context,de.schildbach.wallet.ui.monitor.BlockListAdapter$OnClickListener)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter.de.schildbach.wallet.ui.monitor.BlockListAdapter(android.content.Context,de.schildbach.wallet.ui.monitor.BlockListAdapter$OnClickListener)",
            "description": {
              "What": "Initialize a BlockListAdapter with a context and an OnClickListener for handling item clicks.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used for inflating layout resources."
                },
                {
                  "name": "onClickListener",
                  "type": "de.schildbach.wallet.ui.monitor.BlockListAdapter.OnClickListener",
                  "description": "The OnClickListener for handling item clicks."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.monitor.BlockListAdapter",
                "description": "A new instance of BlockListAdapter initialized with the provided context and OnClickListener."
              },
              "Why": "To create an adapter for displaying blocks in a list view with the ability to handle item clicks.",
              "How-to-use": "Create a new instance of BlockListAdapter by passing a context and an OnClickListener, then set this adapter to a RecyclerView or ListView to display block items.",
              "How-it-is-done": "The method initializes the BlockListAdapter by setting up a DiffUtil.ItemCallback for efficient updates, inflating layout resources, and storing the OnClickListener for item clicks.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "A new BlockListAdapter instance is created with the provided context and OnClickListener."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListAdapter.onBindViewHolder(de.schildbach.wallet.ui.monitor.BlockListAdapter$ViewHolder,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter.onBindViewHolder(de.schildbach.wallet.ui.monitor.BlockListAdapter$ViewHolder,int)",
            "description": {
              "What": "Binds data to the views in the ViewHolder for a specific position in the BlockListAdapter.",
              "Parameters": [
                {
                  "name": "holder",
                  "type": "de.schildbach.wallet.ui.monitor.BlockListAdapter.ViewHolder",
                  "description": "The ViewHolder containing views to be updated with data."
                },
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item within the adapter's data set."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the views in the ViewHolder with data specific to the item at the given position in the adapter.",
              "How-to-use": "Call this method from the onBindViewHolder method of a RecyclerView adapter passing in the ViewHolder and position parameters.",
              "How-it-is-done": "The method retrieves the ListItem at the specified position, updates the views in the ViewHolder with data from the ListItem, inflates transaction views if needed, and sets an OnClickListener for the menu view.",
              "Property": {
                "pre-conditions": [
                  "The ViewHolder must not be null.",
                  "The position must be within the bounds of the adapter's data set."
                ],
                "post-conditions": [
                  "The views in the ViewHolder are updated with data from the ListItem at the specified position.",
                  "Transaction views are inflated or removed based on the number of transactions in the ListItem."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListAdapter.onCreateViewHolder(android.view.ViewGroup,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter.onCreateViewHolder(android.view.ViewGroup,int)",
            "description": {
              "method": {
                "What": "Creates a ViewHolder object for the BlockListAdapter.",
                "Parameters": [
                  {
                    "name": "parent",
                    "type": "android.view.ViewGroup",
                    "description": "The parent ViewGroup in which the ViewHolder will be inflated."
                  },
                  {
                    "name": "viewType",
                    "type": "int",
                    "description": "The type of view to be created, not used in this method."
                  }
                ],
                "Returns": {
                  "type": "de.schildbach.wallet.ui.monitor.BlockListAdapter.ViewHolder",
                  "description": "A new ViewHolder object for the BlockListAdapter."
                },
                "Why": "To provide a way to create ViewHolder objects for the BlockListAdapter when needed.",
                "How-to-use": "Call this method passing a ViewGroup as the parent parameter to create a new ViewHolder object for the BlockListAdapter.",
                "How-it-is-done": "The method inflates the 'block_row' layout using the inflater and parent ViewGroup, then creates a new ViewHolder object with the inflated view.",
                "Property": {
                  "pre-conditions": [
                    "The inflater must be initialized before calling this method."
                  ],
                  "post-conditions": [
                    "A new ViewHolder object is returned for the BlockListAdapter."
                  ]
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem.de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem(android.content.Context,org.bitcoinj.core.StoredBlock,java.util.Date,org.bitcoinj.utils.MonetaryFormat,java.util.Set,org.bitcoinj.wallet.Wallet,java.util.Map)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem.de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem(android.content.Context,org.bitcoinj.core.StoredBlock,java.util.Date,org.bitcoinj.utils.MonetaryFormat,java.util.Set,org.bitcoinj.wallet.Wallet,java.util.Map)",
            "description": {
              "What": "Constructs a ListItem object representing a block with associated transactions and metadata for display in a list view.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the Android application."
                },
                {
                  "name": "block",
                  "type": "org.bitcoinj.core.StoredBlock",
                  "description": "The stored block object representing a block in the blockchain."
                },
                {
                  "name": "time",
                  "type": "java.util.Date",
                  "description": "The timestamp of the block."
                },
                {
                  "name": "format",
                  "type": "org.bitcoinj.utils.MonetaryFormat",
                  "description": "The format for displaying monetary values."
                },
                {
                  "name": "transactions",
                  "type": "java.util.Set<org.bitcoinj.core.Transaction>",
                  "description": "Set of transactions associated with the block."
                },
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet object associated with the transactions."
                },
                {
                  "name": "addressBook",
                  "type": "java.util.Map<java.lang.String, de.schildbach.wallet.data.AddressBookEntry>",
                  "description": "Map of address book entries for looking up transaction addresses."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem",
                "description": "A ListItem object representing the block with associated transactions and metadata."
              },
              "Why": "To provide a convenient way to display block information and associated transactions in a list view.",
              "How-to-use": "Create a new ListItem object by passing the required parameters, then use the object to display block information in a list view.",
              "How-it-is-done": "The method initializes the ListItem object with block metadata such as hash, height, time, and flags for reward halving and difficulty transition. It then filters and adds transactions associated with the block to the ListItem object.",
              "Property": {
                "pre-conditions": [
                  "The block, time, format, and context parameters must not be null."
                ],
                "post-conditions": [
                  "The ListItem object is constructed with the specified block information and associated transactions."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem.isDifficultyTransitionPoint(org.bitcoinj.core.StoredBlock)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem.isDifficultyTransitionPoint(org.bitcoinj.core.StoredBlock)",
            "description": {
              "What": "Checks if the given stored block is a difficulty transition point based on the network parameters interval.",
              "Parameters": [
                {
                  "name": "storedPrev",
                  "type": "org.bitcoinj.core.StoredBlock",
                  "description": "The previous stored block to check for difficulty transition point."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the stored block is a difficulty transition point, false otherwise."
              },
              "Why": "To determine if a stored block is at a point where the difficulty should be recalculated based on the network parameters.",
              "How-to-use": "Call the method with a stored block as the parameter to check if it is a difficulty transition point.",
              "How-it-is-done": "The method calculates the height of the previous stored block and checks if it is at a multiple of the network parameters interval.",
              "Property": {
                "pre-conditions": [
                  "The storedPrev parameter must not be null."
                ],
                "post-conditions": [
                  "The method returns true if the stored block is a difficulty transition point, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem.isMiningRewardHalvingPoint(org.bitcoinj.core.StoredBlock)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem.isMiningRewardHalvingPoint(org.bitcoinj.core.StoredBlock)",
            "description": {
              "What": "Checks if the given stored block is a mining reward halving point in the Bitcoin blockchain.",
              "Parameters": [
                {
                  "name": "storedPrev",
                  "type": "org.bitcoinj.core.StoredBlock",
                  "description": "The previous stored block to check for mining reward halving."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the stored block is a mining reward halving point, false otherwise."
              },
              "Why": "To determine if a specific block height is a mining reward halving point in the Bitcoin blockchain.",
              "How-to-use": "Call this method with the previous stored block as the parameter to check if it represents a mining reward halving point.",
              "How-it-is-done": "The method calculates the block height of the previous stored block, adds 1 to it, and checks if it is divisible by 210000 (the interval at which mining rewards halve in Bitcoin). If the result is 0, it returns true indicating a halving point.",
              "Property": {
                "pre-conditions": "The storedPrev parameter must not be null.",
                "post-conditions": "The method does not modify any state and only returns a boolean value based on the calculation."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem$ListTransaction": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem$ListTransaction",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem$ListTransaction.de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem$ListTransaction(android.content.Context,org.bitcoinj.core.Transaction,org.bitcoinj.wallet.Wallet,java.util.Map)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem$ListTransaction.de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem$ListTransaction(android.content.Context,org.bitcoinj.core.Transaction,org.bitcoinj.wallet.Wallet,java.util.Map)",
            "description": {
              "What": "Constructs a ListTransaction object to represent a transaction in a block list view.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                },
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction to represent."
                },
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet associated with the transaction."
                },
                {
                  "name": "addressBook",
                  "type": "java.util.Map<String, de.schildbach.wallet.data.AddressBookEntry>",
                  "description": "A map of address book entries for labeling addresses."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.monitor.BlockListAdapter$ListItem$ListTransaction",
                "description": "A ListTransaction object representing the transaction."
              },
              "Why": "To provide a way to display transaction details in a block list view.",
              "How-to-use": "Create a new ListTransaction object by passing the required parameters, then access its properties like 'value', 'address', 'fromTo', and 'label'.",
              "How-it-is-done": "The method determines transaction details such as value, address, fromTo label, and label based on the transaction type, purpose, and address book entries. It constructs a ListTransaction object with these details.",
              "Property": {
                "preconditions": [
                  "The 'context', 'tx', and 'wallet' parameters must not be null."
                ],
                "postconditions": [
                  "A ListTransaction object is created with the specified transaction details."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.BlockListAdapter$OnClickListener": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter$OnClickListener",
        "kind": "interface",
        "methods": {
          "de.schildbach.wallet.ui.monitor.BlockListAdapter$OnClickListener.onBlockMenuClick(android.view.View,org.bitcoinj.core.Sha256Hash)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter$OnClickListener.onBlockMenuClick(android.view.View,org.bitcoinj.core.Sha256Hash)",
            "description": {
              "What": "This method is called when a user clicks on a block menu item in the UI, passing the clicked view and the hash of the block as parameters.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view that was clicked by the user."
                },
                {
                  "name": "blockHash",
                  "type": "org.bitcoinj.core.Sha256Hash",
                  "description": "The hash of the block associated with the clicked menu item."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle user interactions with block menu items in the UI and perform actions based on the clicked block.",
              "How-to-use": "Implement this method in a class that implements the BlockListAdapter$OnClickListener interface to define the behavior when a block menu item is clicked.",
              "How-it-is-done": "When the method is called, it should handle the user interaction by performing actions based on the blockHash parameter, such as displaying information or initiating transactions related to the block.",
              "Property": {
                "pre-conditions": "The implementing class must be set as the OnClickListener for the block menu items in the UI.",
                "post-conditions": "After this method is called, the appropriate actions based on the blockHash should be executed."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.BlockListAdapter$ViewHolder": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter$ViewHolder",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.BlockListAdapter$ViewHolder.de.schildbach.wallet.ui.monitor.BlockListAdapter$ViewHolder(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListAdapter$ViewHolder.de.schildbach.wallet.ui.monitor.BlockListAdapter$ViewHolder(android.view.View)",
            "description": {
              "What": "Initialize the ViewHolder for the BlockListAdapter with references to various views in the layout.",
              "Parameters": [
                {
                  "name": "itemView",
                  "type": "android.view.View",
                  "description": "The view representing a single item in the list."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.monitor.BlockListAdapter$ViewHolder",
                "description": "A ViewHolder object with references to different views in the layout."
              },
              "Why": "To set up the ViewHolder with references to specific views for efficient item rendering in the list.",
              "How-to-use": "Create a new ViewHolder object by passing the item view layout, then use the ViewHolder to access and update the views within the layout.",
              "How-it-is-done": "The method initializes the ViewHolder by finding and assigning references to various views within the item view layout using their respective IDs.",
              "Property": {
                "pre-conditions": "The itemView parameter must not be null.",
                "post-conditions": "The ViewHolder object is successfully initialized with references to the specified views."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.BlockListFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.BlockListFragment.de.schildbach.wallet.ui.monitor.BlockListFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment.de.schildbach.wallet.ui.monitor.BlockListFragment()",
            "description": {
              "What": "Creates a new instance of BlockListFragment.",
              "Parameters": [],
              "Returns": "BlockListFragment",
              "Why": "To initialize a new BlockListFragment object.",
              "How-to-use": "Simply call the constructor BlockListFragment() to create a new instance of BlockListFragment.",
              "How-it-is-done": "The method initializes a new BlockListFragment object without any parameters.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of BlockListFragment is created."
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment.maybeSubmitList()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment.maybeSubmitList()",
            "description": {
              "What": "This method submits a list of block items to the adapter for display in the UI.",
              "Parameters": [
                {
                  "name": "blocks",
                  "type": "List<StoredBlock>",
                  "description": "List of stored blocks to display."
                },
                {
                  "name": "addressBook",
                  "type": "Map<String, AddressBookEntry>",
                  "description": "Map of address book entries for displaying additional information."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the UI with the latest block information and address book entries.",
              "How-to-use": "Call this method when there are new blocks or address book entries to display in the UI.",
              "How-it-is-done": "The method retrieves the list of blocks and address book entries from the view model, then uses a custom adapter to build a list of block items with additional information from the address book. Finally, it submits this list to the adapter for display.",
              "Property": {
                "pre-conditions": [
                  "The view model must have valid block and address book data."
                ],
                "post-conditions": [
                  "The UI will be updated with the latest block information and address book entries."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Initialize activity, application, and configuration variables of the BlockListFragment.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the calling component."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up necessary variables for the BlockListFragment to interact with the wallet application.",
              "How-to-use": "Call this method when attaching the BlockListFragment to a context, typically in the onAttach method of a Fragment.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then casts the context to AbstractWalletActivity to access the wallet application and configuration.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The activity, application, and configuration variables of the BlockListFragment are initialized and ready for use."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment.onBlockMenuClick(android.view.View,org.bitcoinj.core.Sha256Hash)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment.onBlockMenuClick(android.view.View,org.bitcoinj.core.Sha256Hash)",
            "description": {
              "What": "Display a popup menu with options related to a specific block in a Bitcoin wallet monitoring screen.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view that triggered the menu click event."
                },
                {
                  "name": "blockHash",
                  "type": "org.bitcoinj.core.Sha256Hash",
                  "description": "The hash of the block for which the menu is being displayed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide users with options to interact with specific blocks in the Bitcoin wallet monitoring screen.",
              "How-to-use": "Call this method when a user clicks on a block in the monitoring screen to display a popup menu with relevant options.",
              "How-it-is-done": "The method creates a PopupMenu, inflates a menu layout, sets visibility based on a constant, handles menu item clicks, and launches an intent to view the block on a block explorer.",
              "Property": {
                "pre-conditions": [
                  "The 'activity' field must be initialized with a valid activity context."
                ],
                "post-conditions": [
                  "A popup menu is displayed with options related to the selected block.",
                  "The user can choose to view the block on a block explorer."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "This method initializes the BlockListFragment by setting up observers for block, transaction, wallet, and time data changes, and creating a BlockListAdapter.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the necessary data observers and adapters for displaying block information in the fragment.",
              "How-to-use": "Call this method in the onCreate() method of a Fragment to initialize the BlockListFragment with necessary data observers and adapters.",
              "How-it-is-done": "The method initializes the ViewModel for the fragment, sets up observers for block, transaction, wallet, and time data changes, and creates a BlockListAdapter for displaying block information.",
              "Property": {
                "pre-conditions": [
                  "The Fragment must be created and attached to an activity."
                ],
                "post-conditions": [
                  "The BlockListFragment is initialized with necessary data observers and adapters."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "What": "Creates and initializes the view for the BlockListFragment with a RecyclerView and necessary layout manager and adapter.",
              "Parameters": [
                {
                  "name": "inflater",
                  "type": "android.view.LayoutInflater",
                  "description": "The LayoutInflater object that can be used to inflate any views in the fragment."
                },
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view that the fragment's UI should be attached to."
                },
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The view created for the BlockListFragment."
              },
              "Why": "To set up the UI components and layout for displaying a list of blocks in the fragment.",
              "How-to-use": "Call this method when creating the BlockListFragment to initialize the view with a RecyclerView and necessary components.",
              "How-it-is-done": "The method inflates the layout from 'R.layout.block_list_fragment', initializes the RecyclerView with a custom layout manager and adapter, adds a divider decoration, and returns the created view.",
              "Property": {
                "pre-conditions": [
                  "The layout 'R.layout.block_list_fragment' must be defined in the resources.",
                  "The RecyclerView with id 'block_list' must be present in the inflated layout."
                ],
                "post-conditions": [
                  "The view returned contains a RecyclerView with the necessary layout manager and adapter set up."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData.de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData.de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a BlocksLiveData object with the WalletApplication and LocalBroadcastManager instance.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance to be used for initialization."
                }
              ],
              "Returns": {
                "type": "BlocksLiveData",
                "description": "A new BlocksLiveData object initialized with the provided WalletApplication instance."
              },
              "Why": "To set up the BlocksLiveData object with the necessary dependencies for monitoring blocks.",
              "How-to-use": "Create a new BlocksLiveData object by passing a WalletApplication instance as the parameter.",
              "How-it-is-done": "The method assigns the provided WalletApplication instance to the application field and initializes the broadcastManager with the LocalBroadcastManager instance of the application.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The BlocksLiveData object is initialized with the provided WalletApplication instance and LocalBroadcastManager."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData.onActive()",
            "description": {
              "What": "Registers a broadcast receiver and binds to a service related to blockchain state changes.",
              "Parameters": [
                {
                  "name": "broadcastReceiver",
                  "type": "BroadcastReceiver",
                  "description": "The broadcast receiver to handle blockchain state changes."
                },
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context to bind the service."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To listen for blockchain state changes and interact with the blockchain service.",
              "How-to-use": "Create an instance of BlocksLiveData and pass a broadcast receiver and the application context, then observe the LiveData for block updates.",
              "How-it-is-done": "The method registers a broadcast receiver to listen for blockchain state changes and binds to the BlockchainService to interact with the blockchain functionality.",
              "Property": {
                "pre-conditions": [
                  "The broadcastReceiver and application parameters must not be null."
                ],
                "post-conditions": [
                  "The broadcast receiver is registered to listen for blockchain state changes.",
                  "The service is bound to interact with blockchain functionality."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData.onInactive()",
            "description": {
              "What": "Unbinds a service and unregisters a broadcast receiver when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "ServiceConnection",
                  "description": "The service connection to unbind."
                },
                {
                  "name": "broadcastReceiver",
                  "type": "BroadcastReceiver",
                  "description": "The broadcast receiver to unregister."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and prevent memory leaks when the LiveData is no longer active.",
              "How-to-use": "Extend the BlocksLiveData class and override the onInactive method to unbind a service and unregister a broadcast receiver.",
              "How-it-is-done": "The method calls the unbindService method on the application with the provided service connection and unregisters the broadcast receiver using the broadcast manager.",
              "Property": {
                "pre-conditions": "The LiveData must be active before becoming inactive.",
                "post-conditions": "The service is unbound and the broadcast receiver is unregistered when the LiveData becomes inactive."
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData.onServiceConnected(android.content.ComponentName,android.os.IBinder)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData.onServiceConnected(android.content.ComponentName,android.os.IBinder)",
            "description": {
              "What": "Connects to a blockchain service and retrieves recent blocks to set as the value of the LiveData.",
              "Parameters": [
                {
                  "name": "name",
                  "type": "android.content.ComponentName",
                  "description": "The name of the connected service."
                },
                {
                  "name": "service",
                  "type": "android.os.IBinder",
                  "description": "The binder interface for the connected service."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To establish a connection with the blockchain service and update the LiveData with recent blocks for monitoring purposes.",
              "How-to-use": "Ensure the BlockListFragment$BlocksLiveData is initialized and observe the LiveData to receive updates on recent blocks.",
              "How-it-is-done": "The method casts the IBinder service to a LocalBinder of the BlockchainService to access the service instance, then retrieves recent blocks from the service and sets them as the value of the LiveData.",
              "Property": {
                "pre-conditions": [
                  "The service connection must be established before calling this method."
                ],
                "post-conditions": [
                  "The LiveData will be updated with recent blocks from the blockchain service."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData.onServiceDisconnected(android.content.ComponentName)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$BlocksLiveData.onServiceDisconnected(android.content.ComponentName)",
            "description": {
              "What": "Set the blockchainService variable to null when the service is disconnected.",
              "Parameters": [
                {
                  "name": "name",
                  "type": "android.content.ComponentName",
                  "description": "The name of the component that was disconnected."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To reset the blockchainService variable when the service is disconnected to prevent any potential issues.",
              "How-to-use": "Override this method in a BlocksLiveData class to handle the disconnection of the blockchain service.",
              "How-it-is-done": "When the service is disconnected, the blockchainService variable is set to null.",
              "Property": {
                "pre-conditions": [
                  "The blockchainService variable should be initialized before calling this method."
                ],
                "post-conditions": [
                  "The blockchainService variable is set to null after the method is executed."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.BlockListFragment$TransactionsLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$TransactionsLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.BlockListFragment$TransactionsLiveData.de.schildbach.wallet.ui.monitor.BlockListFragment$TransactionsLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$TransactionsLiveData.de.schildbach.wallet.ui.monitor.BlockListFragment$TransactionsLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "method": {
                "What": "Initialize a LiveData object for monitoring transactions in a wallet application.",
                "Parameters": [
                  {
                    "name": "application",
                    "type": "de.schildbach.wallet.WalletApplication",
                    "description": "The wallet application instance."
                  },
                  "Returns"
                ],
                "Returns": "TransactionsLiveData",
                "Why": "To provide a LiveData object for observing transactions in the wallet application.",
                "How-to-use": "Create an instance of TransactionsLiveData by passing a WalletApplication instance as a parameter.",
                "How-it-is-done": "The method initializes a TransactionsLiveData object by calling the super constructor with the provided WalletApplication instance.",
                "Property": {
                  "pre-conditions": "The application parameter must not be null.",
                  "post-conditions": "A TransactionsLiveData object is created and ready to be used for monitoring transactions."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment$TransactionsLiveData.loadTransactions()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$TransactionsLiveData.loadTransactions()",
            "description": {
              "What": "This method loads transactions from a wallet and filters out transactions that have no appearance in any block.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which transactions are loaded."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "The method is provided to filter out transactions that have not been included in any block, providing a more relevant list of transactions for monitoring purposes.",
              "How-to-use": "Call this method with a valid wallet object to load and filter transactions, then observe the LiveData object to get the filtered transactions.",
              "How-it-is-done": "The method first checks if the wallet is not null, then asynchronously loads all transactions from the wallet. It filters out transactions that have no appearance in any block and posts the filtered transactions to the LiveData object.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must not be null."
                ],
                "post-conditions": [
                  "The LiveData object will contain a set of filtered transactions that have appeared in at least one block."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment$TransactionsLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$TransactionsLiveData.onWalletActive(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method loads transactions when the wallet becomes active.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet that becomes active."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To automatically load transactions when the wallet is activated.",
              "How-to-use": "Call this method when the wallet becomes active to load transactions associated with it.",
              "How-it-is-done": "When the wallet becomes active, the method calls 'loadTransactions()' to fetch and display the transactions.",
              "Property": {
                "pre-conditions": [
                  "The wallet parameter must not be null."
                ],
                "post-conditions": [
                  "Transactions associated with the active wallet are loaded."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel.de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel.de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel(android.app.Application)",
            "description": {
              "What": "Initialize the ViewModel for BlockListFragment with application context and address book data.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to initialize the ViewModel."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel",
                "description": "The ViewModel instance for BlockListFragment."
              },
              "Why": "To provide the necessary data and functionality for the BlockListFragment UI component.",
              "How-to-use": "Create a new instance of ViewModel by passing the application context as a parameter.",
              "How-it-is-done": "The method assigns the application context to the ViewModel, casts it to WalletApplication, and retrieves the address book data from the database using AppDatabase.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The ViewModel is initialized with the application context and address book data."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel.getBlocks()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel.getBlocks()",
            "description": {
              "What": "This method returns a LiveData object containing blocks for monitoring purposes.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the BlocksLiveData object."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.monitor.BlockListFragment.BlocksLiveData",
                "description": "A LiveData object containing blocks for monitoring."
              },
              "Why": "To provide a way to access a LiveData object containing blocks for monitoring in the ViewModel.",
              "How-to-use": "To use this method, create an instance of ViewModel and call getBlocks() to obtain the BlocksLiveData object for monitoring blocks.",
              "How-it-is-done": "The method checks if the BlocksLiveData object is null, and if so, creates a new instance using the application context. It then returns the BlocksLiveData object.",
              "Property": {
                "pre-conditions": "The application context must be provided as a parameter.",
                "post-conditions": "The method returns a non-null BlocksLiveData object."
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel.getTime()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel.getTime()",
            "description": {
              "What": "This method returns a TimeLiveData object that provides live data of the current time.",
              "Parameters": [],
              "Returns": {
                "Type": "de.schildbach.wallet.data.TimeLiveData",
                "Description": "A LiveData object that holds the current time."
              },
              "Why": "To provide a convenient way for accessing live data of the current time within the ViewModel.",
              "How-to-use": "Call this method to get a TimeLiveData object that can be observed for changes in the current time.",
              "How-it-is-done": "If the 'time' object is null, a new TimeLiveData object is created with the application context and returned. Otherwise, the existing 'time' object is returned.",
              "Property": {
                "Pre-conditions": "None.",
                "Post-conditions": "The returned TimeLiveData object is not null and can be observed for changes in the current time."
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel.getTransactions()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel.getTransactions()",
            "description": {
              "What": "This method returns an instance of TransactionsLiveData if it is not already initialized.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create TransactionsLiveData."
                }
              ],
              "Returns": {
                "type": "TransactionsLiveData",
                "description": "An instance of TransactionsLiveData."
              },
              "Why": "To provide access to TransactionsLiveData for monitoring block transactions in the UI.",
              "How-to-use": "Call getTransactions() on an instance of BlockListFragment$ViewModel to get the TransactionsLiveData object for monitoring block transactions.",
              "How-it-is-done": "The method checks if the transactions object is null, and if so, it initializes a new TransactionsLiveData object with the application context. It then returns the transactions object.",
              "Property": {
                "pre-conditions": "The application context must be provided as a parameter.",
                "post-conditions": "The method returns an instance of TransactionsLiveData, which can be used for monitoring block transactions."
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel.getWallet()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.BlockListFragment$ViewModel.getWallet()",
            "description": {
              "What": "This method returns a WalletLiveData object representing the wallet associated with the application.",
              "Parameters": [],
              "Returns": {
                "Type": "de.schildbach.wallet.data.WalletLiveData",
                "Description": "The WalletLiveData object representing the wallet."
              },
              "Why": "To provide access to the wallet data within the ViewModel of the BlockListFragment.",
              "How-to-use": "Call this method to retrieve the WalletLiveData object representing the wallet associated with the application.",
              "How-it-is-done": "If the wallet object is null, a new WalletLiveData object is created using the application context and returned. Otherwise, the existing wallet object is returned.",
              "Property": {
                "Pre-conditions": "None.",
                "Post-conditions": "The method always returns a non-null WalletLiveData object."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity.de.schildbach.wallet.ui.monitor.NetworkMonitorActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity.de.schildbach.wallet.ui.monitor.NetworkMonitorActivity()",
            "description": {
              "What": "Initialize a new instance of NetworkMonitorActivity.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this constructor."
                }
              ],
              "Returns": {
                "type": "NetworkMonitorActivity",
                "description": "A new instance of NetworkMonitorActivity is returned."
              },
              "Why": "This constructor is provided to create a new instance of NetworkMonitorActivity class.",
              "How-to-use": "Simply call this constructor to create a new instance of NetworkMonitorActivity.",
              "How-it-is-done": "The constructor initializes a new instance of NetworkMonitorActivity without any parameters.",
              "Property": {
                "pre-conditions": [
                  "No specific pre-conditions are required for calling this constructor."
                ],
                "post-conditions": [
                  "A new instance of NetworkMonitorActivity is successfully created."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize the NetworkMonitorActivity layout with ViewPager and fragments for peer list and block list.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the layout of the NetworkMonitorActivity with ViewPager and fragments for displaying peer list and block list.",
              "How-to-use": "Call this method in the onCreate() method of the NetworkMonitorActivity class to initialize the layout with ViewPager and fragments.",
              "How-it-is-done": "The method first sets the content view to network_monitor_content layout, initializes ViewPager and FragmentManager, adds tab labels for peer list and block list, sets up PagerAdapter, sets listeners, and initializes PeerListFragment and BlockListFragment.",
              "Property": {
                "pre-conditions": [
                  "The layout file network_monitor_content must be defined.",
                  "The ViewPager with id network_monitor_pager must be present in the layout."
                ],
                "post-conditions": [
                  "The NetworkMonitorActivity layout is initialized with ViewPager and fragments for peer list and block list."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity$PagerAdapter": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity$PagerAdapter",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity$PagerAdapter.de.schildbach.wallet.ui.monitor.NetworkMonitorActivity$PagerAdapter(android.support.v4.app.FragmentManager)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity$PagerAdapter.de.schildbach.wallet.ui.monitor.NetworkMonitorActivity$PagerAdapter(android.support.v4.app.FragmentManager)",
            "description": {
              "What": "Constructs a PagerAdapter object for managing fragments within a ViewPager in the NetworkMonitorActivity.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for managing fragments."
                }
              ],
              "Returns": {
                "type": "PagerAdapter",
                "description": "A new instance of PagerAdapter for managing fragments within a ViewPager."
              },
              "Why": "To provide a way to manage fragments within a ViewPager in the NetworkMonitorActivity.",
              "How-to-use": "Create a new instance of NetworkMonitorActivity$PagerAdapter by passing a FragmentManager as the parameter, then set this PagerAdapter to a ViewPager to manage fragments.",
              "How-it-is-done": "The constructor initializes the PagerAdapter by calling the superclass constructor with the provided FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager instance must not be null."
                ],
                "post-conditions": [
                  "A new instance of PagerAdapter is created and ready to be used for managing fragments within a ViewPager."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity$PagerAdapter.getCount()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity$PagerAdapter.getCount()",
            "description": {
              "What": "This method returns the total number of pages in the PagerAdapter, which is hardcoded to 2.",
              "Parameters": [],
              "Returns": {
                "type": "int",
                "description": "The total number of pages in the PagerAdapter."
              },
              "Why": "The method is provided to specify the total number of pages in the PagerAdapter, which is a fixed value in this case.",
              "How-to-use": "Simply call getCount() on an instance of the PagerAdapter to retrieve the total number of pages, which is always 2 in this implementation.",
              "How-it-is-done": "The method overrides the getCount() method from the PagerAdapter class and returns a hardcoded value of 2.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "The method always returns the value 2, regardless of any external factors."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity$PagerAdapter.getItem(int)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.NetworkMonitorActivity$PagerAdapter.getItem(int)",
            "description": {
              "What": "This method returns a Fragment based on the position parameter, either a peerListFragment or a blockListFragment.",
              "Parameters": [
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position parameter to determine which Fragment to return."
                }
              ],
              "Returns": {
                "type": "Fragment",
                "description": "Either a peerListFragment or a blockListFragment based on the position parameter."
              },
              "Why": "To provide the appropriate Fragment based on the position in the ViewPager.",
              "How-to-use": "Call this method with the position parameter to get the corresponding Fragment for the ViewPager setup.",
              "How-it-is-done": "The method checks if the position is 0, then returns the peerListFragment, otherwise returns the blockListFragment.",
              "Property": {
                "pre-conditions": "The peerListFragment and blockListFragment must be initialized before calling this method.",
                "post-conditions": "The method will always return a valid Fragment based on the position parameter."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.PeerListAdapter": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListAdapter",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.PeerListAdapter.buildListItems(android.content.Context,java.util.List,java.util.Map)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListAdapter.buildListItems(android.content.Context,java.util.List,java.util.Map)",
            "description": {
              "What": "Builds a list of PeerListAdapter.ListItem objects based on a list of Peer objects and a map of hostnames.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used for creating ListItem objects."
                },
                {
                  "name": "peers",
                  "type": "java.util.List<org.bitcoinj.core.Peer>",
                  "description": "The list of Peer objects to build ListItem objects from."
                },
                {
                  "name": "hostnames",
                  "type": "java.util.Map<java.net.InetAddress, java.lang.String>",
                  "description": "A map of hostnames associated with InetAddress objects."
                }
              ],
              "Returns": {
                "type": "java.util.List<de.schildbach.wallet.ui.monitor.PeerListAdapter.ListItem>",
                "description": "A list of PeerListAdapter.ListItem objects built from the provided Peer objects and hostnames."
              },
              "Why": "To generate a list of ListItem objects for displaying peer information in a UI component.",
              "How-to-use": "Call this method with a valid context, list of Peer objects, and a map of hostnames to get a list of ListItem objects ready for display.",
              "How-it-is-done": "Iterates over the list of Peer objects, creates a new ListItem object for each Peer using the provided context and hostnames map, and adds it to the list of items to be returned.",
              "Property": {
                "pre-conditions": [
                  "The context must not be null.",
                  "The list of Peer objects must not be null.",
                  "The map of hostnames must not be null."
                ],
                "post-conditions": [
                  "A list of ListItem objects is returned with the same size as the input list of Peer objects."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListAdapter.de.schildbach.wallet.ui.monitor.PeerListAdapter(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListAdapter.de.schildbach.wallet.ui.monitor.PeerListAdapter(android.content.Context)",
            "description": {
              "What": "Constructs a PeerListAdapter for displaying peer information in a list view.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used for inflating layout resources."
                }
              ],
              "Returns": {
                "type": "PeerListAdapter",
                "description": "A PeerListAdapter instance for displaying peer information."
              },
              "Why": "To provide a custom adapter for displaying peer information in a list view with specific item comparison logic.",
              "How-to-use": "Create an instance of PeerListAdapter by passing a valid context, then set this adapter to a RecyclerView or ListView to display peer information.",
              "How-it-is-done": "The method initializes the PeerListAdapter with custom item comparison logic using DiffUtil.ItemCallback, and sets the layout inflater for inflating views.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "A PeerListAdapter instance is created with custom item comparison logic and layout inflater set."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListAdapter.onBindViewHolder(de.schildbach.wallet.ui.monitor.PeerListAdapter$ViewHolder,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListAdapter.onBindViewHolder(de.schildbach.wallet.ui.monitor.PeerListAdapter$ViewHolder,int)",
            "description": {
              "What": "Updates the view with the data at the specified position in the list.",
              "Parameters": [
                {
                  "name": "holder",
                  "type": "de.schildbach.wallet.ui.monitor.PeerListAdapter.ViewHolder",
                  "description": "The ViewHolder to bind the data to."
                },
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item within the adapter's data set."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the UI with the data at the specified position in the list of peers.",
              "How-to-use": "Call this method when you need to update the view with the data of a specific peer in the list.",
              "How-it-is-done": "The method gets the ListItem at the specified position, sets the text and typeface of various TextViews in the ViewHolder based on the ListItem's data.",
              "Property": {
                "pre-conditions": [
                  "The ViewHolder must not be null.",
                  "The position must be a valid index within the adapter's data set."
                ],
                "post-conditions": [
                  "The view is updated with the data of the peer at the specified position."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListAdapter.onCreateViewHolder(android.view.ViewGroup,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListAdapter.onCreateViewHolder(android.view.ViewGroup,int)",
            "description": {
              "What": "Creates a ViewHolder object for a peer list row layout.",
              "Parameters": [
                {
                  "name": "parent",
                  "type": "android.view.ViewGroup",
                  "description": "The parent ViewGroup in which the ViewHolder will be created."
                },
                {
                  "name": "viewType",
                  "type": "int",
                  "description": "The type of view for which the ViewHolder is being created."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.monitor.PeerListAdapter.ViewHolder",
                "description": "A new ViewHolder object for the peer list row layout."
              },
              "Why": "To provide a way to create ViewHolder objects for displaying peer list rows efficiently.",
              "How-to-use": "Call this method passing the parent ViewGroup and view type to get a ViewHolder object for a peer list row.",
              "How-it-is-done": "The method inflates the peer list row layout using the LayoutInflater and returns a new ViewHolder object initialized with the inflated layout.",
              "Property": {
                "pre-conditions": "The inflater and R.layout.peer_list_row must be properly initialized.",
                "post-conditions": "A new ViewHolder object is returned for the peer list row layout."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.PeerListAdapter$ListItem": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListAdapter$ListItem",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.PeerListAdapter$ListItem.de.schildbach.wallet.ui.monitor.PeerListAdapter$ListItem(android.content.Context,org.bitcoinj.core.Peer,java.util.Map)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListAdapter$ListItem.de.schildbach.wallet.ui.monitor.PeerListAdapter$ListItem(android.content.Context,org.bitcoinj.core.Peer,java.util.Map)",
            "description": {
              "What": "Initialize a ListItem object with information about a Peer in a Bitcoin network.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                },
                {
                  "name": "peer",
                  "type": "org.bitcoinj.core.Peer",
                  "description": "The Peer object containing information about a peer in the Bitcoin network."
                },
                {
                  "name": "hostnames",
                  "type": "java.util.Map<java.net.InetAddress, java.lang.String>",
                  "description": "A map of IP addresses to hostnames for resolving hostnames of peers."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.monitor.PeerListAdapter$ListItem",
                "description": "A ListItem object initialized with information about the Peer."
              },
              "Why": "To provide a convenient way to display information about Peers in a Bitcoin network in a list view.",
              "How-to-use": "Create a new ListItem object by passing the context, a Peer object, and a map of hostnames, then use the object to display peer information in a list view.",
              "How-it-is-done": "The method initializes the ListItem object by extracting information such as IP address, hostname, height, version, protocol, ping time, and download status from the Peer object and the provided map of hostnames.",
              "Property": {
                "pre-conditions": [
                  "The Peer object and the map of hostnames must not be null."
                ],
                "post-conditions": [
                  "The ListItem object is initialized with information about the Peer."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.PeerListAdapter$ViewHolder": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListAdapter$ViewHolder",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.PeerListAdapter$ViewHolder.de.schildbach.wallet.ui.monitor.PeerListAdapter$ViewHolder(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListAdapter$ViewHolder.de.schildbach.wallet.ui.monitor.PeerListAdapter$ViewHolder(android.view.View)",
            "description": {
              "method": {
                "What": "Initialize a ViewHolder for displaying peer information in a list view.",
                "Parameters": [
                  {
                    "name": "itemView",
                    "type": "android.view.View",
                    "description": "The view containing the peer information."
                  },
                  "Returns"
                ],
                "Returns": {
                  "type": "de.schildbach.wallet.ui.monitor.PeerListAdapter$ViewHolder",
                  "description": "A ViewHolder object for displaying peer information."
                },
                "Why": "To set up the ViewHolder with the necessary views for displaying peer information in a list view.",
                "How-to-use": "Create a new instance of PeerListAdapter$ViewHolder by passing in the view containing the peer information.",
                "How-it-is-done": "The method initializes the ViewHolder by finding and assigning TextViews for IP, height, version, protocol, and ping from the itemView.",
                "Property": {
                  "pre-conditions": [
                    "The itemView must contain TextViews with the IDs 'peer_list_row_ip', 'peer_list_row_height', 'peer_list_row_version', 'peer_list_row_protocol', and 'peer_list_row_ping'."
                  ],
                  "post-conditions": [
                    "The ViewHolder is set up with TextViews for displaying peer information."
                  ]
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.PeerListFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.PeerListFragment.de.schildbach.wallet.ui.monitor.PeerListFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment.de.schildbach.wallet.ui.monitor.PeerListFragment()",
            "description": {
              "What": "Initialize a new instance of PeerListFragment.",
              "Parameters": [],
              "Returns": "PeerListFragment",
              "Why": "To provide a way to create a new instance of PeerListFragment.",
              "How-to-use": "Simply call the PeerListFragment() constructor to create a new instance of PeerListFragment.",
              "How-it-is-done": "The PeerListFragment() constructor initializes a new instance of PeerListFragment without any parameters.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "A new instance of PeerListFragment is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListFragment.maybeSubmitList()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment.maybeSubmitList()",
            "description": {
              "What": "Submit a list of peers to the adapter for display in the UI.",
              "Parameters": [
                {
                  "name": "peers",
                  "type": "java.util.List<org.bitcoinj.core.Peer>",
                  "description": "List of peers to display in the UI."
                },
                {
                  "name": "adapter",
                  "type": "de.schildbach.wallet.ui.monitor.PeerListAdapter",
                  "description": "Adapter for displaying peers in the UI."
                },
                {
                  "name": "activity",
                  "type": "Activity",
                  "description": "Current activity for context."
                },
                {
                  "name": "viewModel",
                  "type": "ViewModel",
                  "description": "View model containing peer data."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To update the list of peers displayed in the UI based on the data from the view model.",
              "How-to-use": "Call maybeSubmitList() when there is a change in the list of peers to update the UI with the latest data.",
              "How-it-is-done": "The method retrieves the list of peers from the view model, checks if it is not null, and then submits the list to the adapter for display in the UI.",
              "Property": {
                "pre-conditions": [
                  "The view model must contain the list of peers."
                ],
                "post-conditions": [
                  "The UI will be updated with the latest list of peers."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment.onAttach(android.content.Context)",
            "description": {
              "method": {
                "What": "Assigns the activity context to the activity field of the PeerListFragment.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context of the activity."
                  },
                  "Returns"
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To set the activity context for later use within the fragment.",
                "How-to-use": "Call this method with the context of the activity as the parameter when attaching the fragment to the activity.",
                "How-it-is-done": "The method calls the superclass method onAttach() passing the context, then assigns the context to the activity field of the fragment.",
                "Property": {
                  "pre-conditions": [
                    "The context parameter must not be null."
                  ],
                  "post-conditions": [
                    "The activity field of the fragment is set to the context of the activity."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment.onCreate(android.os.Bundle)",
            "description": {
              "method": {
                "What": "This method observes changes in the list of peers and hostnames, updates the displayed child view based on the presence of peers, and performs reverse lookup for each peer's address.",
                "Parameters": [
                  {
                    "name": "savedInstanceState",
                    "type": "android.os.Bundle",
                    "description": "The saved instance state of the fragment."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To dynamically update the UI based on changes in the list of peers and hostnames.",
                "How-to-use": "Call this method in the onCreate() method of a Fragment to set up observers for peer and hostname changes.",
                "How-it-is-done": "The method initializes the ViewModel, observes changes in the list of peers and hostnames, updates the displayed child view, and performs reverse lookup for each peer's address.",
                "Property": {
                  "pre-conditions": [
                    "The Fragment must have a valid savedInstanceState."
                  ],
                  "post-conditions": [
                    "The ViewModel is initialized.",
                    "Observers are set up for peer and hostname changes.",
                    "The displayed child view is updated based on the presence of peers."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "What": "Creates and initializes the view for the PeerListFragment with a RecyclerView and adapter.",
              "Parameters": [
                {
                  "name": "inflater",
                  "type": "android.view.LayoutInflater",
                  "description": "The LayoutInflater object that can be used to inflate any views in the fragment."
                },
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view that the fragment's UI should be attached to."
                },
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The previously saved state of the fragment, if available."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The created view for the PeerListFragment."
              },
              "Why": "To set up the UI components for displaying a list of peers in the fragment.",
              "How-to-use": "Call this method when creating the PeerListFragment to initialize the view with a RecyclerView and adapter.",
              "How-it-is-done": "The method inflates the layout for the fragment, initializes the RecyclerView with a LinearLayoutManager, sets the adapter, adds item decoration for dividing list items, and returns the created view.",
              "Property": {
                "pre-conditions": [
                  "The layout file 'peer_list_fragment.xml' must be defined with the necessary RecyclerView and ViewAnimator elements."
                ],
                "post-conditions": [
                  "The PeerListFragment will have a fully initialized view with a RecyclerView displaying a list of peers."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.PeerListFragment$HostnamesLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$HostnamesLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.PeerListFragment$HostnamesLiveData.de.schildbach.wallet.ui.monitor.PeerListFragment$HostnamesLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$HostnamesLiveData.de.schildbach.wallet.ui.monitor.PeerListFragment$HostnamesLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a LiveData object with an empty HashMap of InetAddress to String mappings.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "de.schildbach.wallet.WalletApplication",
                  "description": "The WalletApplication instance used to initialize the LiveData object."
                }
              ],
              "Returns": {
                "type": "HostnamesLiveData",
                "description": "A LiveData object containing an empty HashMap of InetAddress to String mappings."
              },
              "Why": "To provide a LiveData object for monitoring peer hostnames in the WalletApplication.",
              "How-to-use": "Create a new instance of HostnamesLiveData by passing a WalletApplication instance as a parameter.",
              "How-it-is-done": "The method initializes the LiveData object by setting its value to a new HashMap with InetAddress keys and String values.",
              "Property": {
                "pre-conditions": [
                  "The WalletApplication instance must not be null."
                ],
                "post-conditions": [
                  "The HostnamesLiveData object is initialized with an empty HashMap."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListFragment$HostnamesLiveData.reverseLookup(java.net.InetAddress)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$HostnamesLiveData.reverseLookup(java.net.InetAddress)",
            "description": {
              "What": "This method performs a reverse DNS lookup to get the hostname of a given InetAddress if it is not already stored in the map.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "java.net.InetAddress",
                  "description": "The InetAddress for which the hostname needs to be looked up."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically fetch and store hostnames for InetAddresses to display in the UI without blocking the main thread.",
              "How-to-use": "Call this method with the InetAddress for which you want to perform a reverse lookup. The result will be stored in the map and can be accessed later.",
              "How-it-is-done": "The method first checks if the hostname for the given InetAddress is already stored in the map. If not, it uses an AsyncTask to perform the reverse lookup in a background thread. Once the hostname is obtained, it is stored in the map and the LiveData value is updated.",
              "Property": {
                "pre-conditions": "The map of hostnames should not be null.",
                "post-conditions": "The map of hostnames will be updated with the hostname for the given InetAddress if it was not already present."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData.de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData(de.schildbach.wallet.WalletApplication)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData.de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData(de.schildbach.wallet.WalletApplication)",
            "description": {
              "What": "Initialize a PeersLiveData object with the WalletApplication and LocalBroadcastManager instance.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "WalletApplication",
                  "description": "The WalletApplication instance to be used for initialization."
                }
              ],
              "Returns": {
                "type": "PeersLiveData",
                "description": "A new instance of PeersLiveData initialized with the provided WalletApplication."
              },
              "Why": "To set up the necessary components for monitoring peers in the wallet application.",
              "How-to-use": "Create a new PeersLiveData object by passing a WalletApplication instance as a parameter.",
              "How-it-is-done": "The method assigns the provided WalletApplication instance to the 'application' field and initializes the 'broadcastManager' field with the LocalBroadcastManager instance of the application.",
              "Property": {
                "pre-conditions": [
                  "The 'application' parameter must not be null."
                ],
                "post-conditions": [
                  "The 'application' field is set to the provided WalletApplication instance.",
                  "The 'broadcastManager' field is initialized with the LocalBroadcastManager instance of the application."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData.onActive()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData.onActive()",
            "description": {
              "What": "Registers a broadcast receiver for peer state updates and binds to the BlockchainService.",
              "Parameters": [
                {
                  "name": "broadcastManager",
                  "type": "android.content.BroadcastReceiver",
                  "description": "The broadcast manager to register the receiver with."
                },
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context to bind the service with."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To listen for peer state updates and interact with the BlockchainService.",
              "How-to-use": "Create an instance of PeersLiveData and pass the broadcast manager and application context to the constructor, then observe the LiveData for peer state updates.",
              "How-it-is-done": "The method registers a broadcast receiver for ACTION_PEER_STATE updates and binds to the BlockchainService using the application context.",
              "Property": {
                "pre-conditions": [
                  "The broadcastManager and application parameters must not be null."
                ],
                "post-conditions": [
                  "The broadcast receiver is registered for peer state updates.",
                  "The service is bound to the BlockchainService."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData.onInactive()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData.onInactive()",
            "description": {
              "What": "Unbinds a service and unregisters a broadcast receiver when the LiveData becomes inactive.",
              "Parameters": [
                {
                  "name": "this",
                  "type": "ServiceConnection",
                  "description": "The service connection to unbind."
                },
                {
                  "name": "broadcastReceiver",
                  "type": "BroadcastReceiver",
                  "description": "The broadcast receiver to unregister."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and prevent memory leaks when the LiveData is no longer active.",
              "How-to-use": "Call this method when the LiveData object is no longer needed or is being destroyed.",
              "How-it-is-done": "The method calls the unbindService() method on the provided service connection and then unregisters the broadcast receiver using the unregisterReceiver() method of the broadcast manager.",
              "Property": {
                "pre-conditions": [
                  "The service connection and broadcast receiver must be initialized and valid."
                ],
                "post-conditions": [
                  "The service is unbound and the broadcast receiver is unregistered."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData.onServiceConnected(android.content.ComponentName,android.os.IBinder)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData.onServiceConnected(android.content.ComponentName,android.os.IBinder)",
            "description": {
              "What": "Sets the blockchain service and updates the connected peers list when the service is connected.",
              "Parameters": [
                {
                  "name": "name",
                  "type": "android.content.ComponentName",
                  "description": "The name of the connected service."
                },
                {
                  "name": "service",
                  "type": "android.os.IBinder",
                  "description": "The service binder used to access the blockchain service."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To initialize the blockchain service and update the connected peers list when the service is connected.",
              "How-to-use": "Implement this method in a class that extends PeersLiveData to handle the service connection and update the connected peers list.",
              "How-it-is-done": "The method casts the service binder to a LocalBinder of BlockchainService to access the service, then sets the blockchainService property and updates the connected peers list using the setValue method.",
              "Property": {
                "pre-conditions": [
                  "The service parameter must be a valid IBinder instance."
                ],
                "post-conditions": [
                  "The blockchainService property is set to the connected BlockchainService instance.",
                  "The connected peers list is updated with the current list of connected peers."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData.onServiceDisconnected(android.content.ComponentName)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$PeersLiveData.onServiceDisconnected(android.content.ComponentName)",
            "description": {
              "method": {
                "What": "Set the blockchainService variable to null when the service is disconnected.",
                "Parameters": [
                  {
                    "name": "name",
                    "type": "android.content.ComponentName",
                    "description": "The name of the component that is being disconnected."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return anything."
                },
                "Why": "To reset the blockchainService variable when the service is disconnected.",
                "How-to-use": "This method is automatically called when the service is disconnected, so there is no need to manually call it.",
                "How-it-is-done": "The method simply sets the blockchainService variable to null.",
                "Property": {
                  "pre-conditions": [
                    "The blockchainService variable should be initialized before calling this method."
                  ],
                  "post-conditions": [
                    "The blockchainService variable will be set to null after this method is called."
                  ]
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.monitor.PeerListFragment$ViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$ViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.monitor.PeerListFragment$ViewModel.de.schildbach.wallet.ui.monitor.PeerListFragment$ViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$ViewModel.de.schildbach.wallet.ui.monitor.PeerListFragment$ViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for the PeerListFragment with the application context.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to create the ViewModel."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.monitor.PeerListFragment$ViewModel",
                "description": "The ViewModel instance for the PeerListFragment."
              },
              "Why": "To provide a ViewModel for the PeerListFragment that can access the application context.",
              "How-to-use": "Create a new instance of PeerListFragment$ViewModel by passing the application context as a parameter.",
              "How-it-is-done": "The constructor initializes the ViewModel by casting the application context to WalletApplication and storing it in the application field.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The ViewModel is successfully initialized with the application context."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListFragment$ViewModel.getHostnames()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$ViewModel.getHostnames()",
            "description": {
              "What": "This method returns a LiveData object containing hostnames for the PeerListFragment.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the HostnamesLiveData object."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.monitor.PeerListFragment.HostnamesLiveData",
                "description": "A LiveData object containing hostnames for the PeerListFragment."
              },
              "Why": "To provide a way to access hostnames data for the PeerListFragment in a LiveData format.",
              "How-to-use": "Call this method to get a LiveData object containing hostnames data for the PeerListFragment.",
              "How-it-is-done": "The method checks if the hostnames LiveData object is null, and if so, creates a new HostnamesLiveData object using the provided application context.",
              "Property": {
                "pre-conditions": "The application context must be provided as a parameter.",
                "post-conditions": "The method returns a LiveData object containing hostnames data for the PeerListFragment."
              }
            }
          },
          "de.schildbach.wallet.ui.monitor.PeerListFragment$ViewModel.getPeers()": {
            "qualifiedName": "de.schildbach.wallet.ui.monitor.PeerListFragment$ViewModel.getPeers()",
            "description": {
              "What": "This method returns an instance of PeersLiveData if it is not already initialized, creating a new instance if necessary.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the PeersLiveData instance."
                }
              ],
              "Returns": {
                "type": "PeersLiveData",
                "description": "An instance of PeersLiveData that provides live data of peers."
              },
              "Why": "To provide a way to access live data of peers in the PeerListFragment ViewModel.",
              "How-to-use": "Call getPeers() on an instance of ViewModel to get the PeersLiveData instance, which can then be observed for changes in peer data.",
              "How-it-is-done": "The method checks if the peers instance is null, and if so, it creates a new PeersLiveData instance using the provided application context.",
              "Property": {
                "pre-conditions": "The application context must be non-null.",
                "post-conditions": "The method will always return a non-null instance of PeersLiveData."
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.ui.preference": {
    "qualifiedName": "de.schildbach.wallet.ui.preference",
    "classes": {
      "de.schildbach.wallet.ui.preference.AboutFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.preference.AboutFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.preference.AboutFragment.de.schildbach.wallet.ui.preference.AboutFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.AboutFragment.de.schildbach.wallet.ui.preference.AboutFragment()",
            "description": {
              "method": {
                "What": "This method is a constructor for the AboutFragment class.",
                "Parameters": [],
                "Returns": "AboutFragment class instance.",
                "Why": "To initialize an instance of the AboutFragment class.",
                "How-to-use": "Simply call the constructor to create a new instance of the AboutFragment class.",
                "How-it-is-done": "The constructor does not take any parameters and simply initializes an instance of the AboutFragment class.",
                "Property": {
                  "pre-conditions": [],
                  "post-conditions": [
                    "An instance of the AboutFragment class is created."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.preference.AboutFragment.onAttach(android.app.Activity)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.AboutFragment.onAttach(android.app.Activity)",
            "description": {
              "What": "This method initializes the application and package manager variables of the AboutFragment class.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity to attach to."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up necessary variables for the AboutFragment class to interact with the application and package manager.",
              "How-to-use": "Call this method when attaching the AboutFragment to an activity to initialize the application and package manager variables.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then assigns the application variable by casting the activity's application to WalletApplication, and finally assigns the packageManager variable by getting the package manager from the activity.",
              "Property": {
                "pre-conditions": [
                  "The activity parameter must not be null."
                ],
                "post-conditions": [
                  "The application and packageManager variables of the AboutFragment class are initialized."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.preference.AboutFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.AboutFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "This method initializes the AboutFragment by setting preferences from a resource file, displaying version information, and setting intents for market links.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide functionality for displaying version information and linking to the app market, enhancing user experience and information accessibility.",
              "How-to-use": "Call this method in the onCreate() method of the AboutFragment class to initialize the fragment with version information and market links.",
              "How-it-is-done": "The method first calls the superclass method, adds preferences from a resource file, retrieves package information, sets summary and intents for market links, and updates the title for credits using BitcoinJ version.",
              "Property": {
                "pre-conditions": [
                  "The AboutFragment class must be properly set up and extended.",
                  "The R.xml.preference_about resource file must contain the necessary preferences."
                ],
                "post-conditions": [
                  "The AboutFragment will be initialized with version information and market links displayed."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.preference.DiagnosticsFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.preference.DiagnosticsFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.preference.DiagnosticsFragment.de.schildbach.wallet.ui.preference.DiagnosticsFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.DiagnosticsFragment.de.schildbach.wallet.ui.preference.DiagnosticsFragment()",
            "description": {
              "What": "This method is a constructor for the DiagnosticsFragment class.",
              "Parameters": [],
              "Returns": "DiagnosticsFragment",
              "Why": "To initialize a new instance of the DiagnosticsFragment class.",
              "How-to-use": "To create a new DiagnosticsFragment object, simply call the constructor DiagnosticsFragment().",
              "How-it-is-done": "The constructor initializes a new instance of the DiagnosticsFragment class without any parameters.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new DiagnosticsFragment object is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.DiagnosticsFragment.handleExtendedPublicKey()": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.DiagnosticsFragment.handleExtendedPublicKey()",
            "description": {
              "What": "This method generates an extended public key (xpub) from the watching key of the wallet and displays it in a fragment.",
              "Parameters": [
                {
                  "name": "extendedKey",
                  "type": "org.bitcoinj.crypto.DeterministicKey",
                  "description": "The watching key of the wallet."
                },
                {
                  "name": "xpub",
                  "type": "String",
                  "description": "The extended public key to be displayed in the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide users with a way to view the extended public key of their wallet for diagnostic purposes.",
              "How-to-use": "Call this method to generate and display the extended public key in a fragment within the application.",
              "How-it-is-done": "The method retrieves the watching key from the wallet, formats it as an extended public key (xpub) with creation time, and then displays it in a fragment using ExtendedPublicKeyFragment.",
              "Property": {
                "pre-conditions": [
                  "The wallet in the application must be initialized and have a watching key set."
                ],
                "post-conditions": [
                  "The extended public key is displayed in a fragment for the user to view."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.preference.DiagnosticsFragment.handleInitiateReset()": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.DiagnosticsFragment.handleInitiateReset()",
            "description": {
              "What": "Initiates a manual blockchain reset in the DiagnosticsFragment preferences.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "Activity",
                  "description": "The current activity where the reset is initiated."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide users with the option to manually reset the blockchain in case of issues or troubleshooting needs.",
              "How-to-use": "Call this method passing the current activity as a parameter to display a dialog prompting the user to confirm the blockchain reset.",
              "How-it-is-done": "The method creates a DialogBuilder instance with a title, message, and positive/negative buttons. When the positive button is clicked, it logs the reset action, resets the blockchain service, and finishes the activity.",
              "Property": {
                "pre-conditions": [
                  "The activity parameter must not be null."
                ],
                "post-conditions": [
                  "The blockchain service is reset upon user confirmation."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.preference.DiagnosticsFragment.onAttach(android.app.Activity)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.DiagnosticsFragment.onAttach(android.app.Activity)",
            "description": {
              "method": {
                "What": "Assigns the activity and application instance to the corresponding fields in the DiagnosticsFragment class.",
                "Parameters": [
                  {
                    "name": "activity",
                    "type": "android.app.Activity",
                    "description": "The activity to be assigned."
                  },
                  {
                    "Returns": "void",
                    "description": "This method does not return anything."
                  }
                ],
                "Why": "To initialize the activity and application fields of the DiagnosticsFragment class.",
                "How-to-use": "Call this method when attaching the DiagnosticsFragment to an activity to set the activity and application fields.",
                "How-it-is-done": "The method first calls the superclass method to attach the activity, then assigns the activity and application instance from the activity's application context to the corresponding fields in the DiagnosticsFragment class.",
                "Property": {
                  "pre-conditions": [
                    "The activity parameter must not be null."
                  ],
                  "post-conditions": [
                    "The activity and application fields of the DiagnosticsFragment class are initialized with the provided activity and application instance."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.preference.DiagnosticsFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.DiagnosticsFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "This method adds preferences from a specified XML resource to the DiagnosticsFragment.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To initialize the preferences for the DiagnosticsFragment based on the specified XML resource.",
              "How-to-use": "Call this method in the onCreate() method of the DiagnosticsFragment class, passing the saved instance state as a parameter.",
              "How-it-is-done": "The method first calls the superclass method onCreate() with the saved instance state. Then, it adds preferences to the fragment from the specified XML resource using addPreferencesFromResource() method.",
              "Property": {
                "pre-conditions": [
                  "The DiagnosticsFragment class must extend PreferenceFragmentCompat."
                ],
                "post-conditions": [
                  "The preferences from the specified XML resource are added to the DiagnosticsFragment."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.preference.DiagnosticsFragment.onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.DiagnosticsFragment.onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)",
            "description": {
              "What": "Handles click events on preference items in the DiagnosticsFragment.",
              "Parameters": [
                {
                  "name": "preferenceScreen",
                  "type": "android.preference.PreferenceScreen",
                  "description": "The preference screen that contains the clicked preference item."
                },
                {
                  "name": "preference",
                  "type": "android.preference.Preference",
                  "description": "The preference item that was clicked."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the click event was handled, false otherwise."
              },
              "Why": "To provide functionality for handling click events on specific preference items within the DiagnosticsFragment.",
              "How-to-use": "Override this method in a DiagnosticsFragment subclass to handle click events on preference items. Implement specific actions for each preference item by checking the key of the clicked preference.",
              "How-it-is-done": "The method checks the key of the clicked preference item and calls corresponding handler methods for specific actions. It returns true if the click event was handled, false otherwise.",
              "Property": {
                "pre-conditions": "The preferenceScreen and preference parameters must not be null.",
                "post-conditions": "The method returns true if the click event was handled for a specific preference item, false otherwise."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment.de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment.de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment()",
            "description": {
              "What": "Initialize a new instance of ExtendedPublicKeyFragment.",
              "Parameters": [],
              "Returns": {
                "Type": "ExtendedPublicKeyFragment",
                "Description": "A new instance of ExtendedPublicKeyFragment."
              },
              "Why": "To provide a way to create an instance of ExtendedPublicKeyFragment for use in the application.",
              "How-to-use": "Simply instantiate a new ExtendedPublicKeyFragment object using the constructor.",
              "How-it-is-done": "The method creates a new instance of ExtendedPublicKeyFragment without any parameters or initialization logic.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new ExtendedPublicKeyFragment object is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment.instance(java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment.instance(java.lang.CharSequence)",
            "description": {
              "What": "Creates an instance of ExtendedPublicKeyFragment with the provided xpub value as an argument.",
              "Parameters": [
                {
                  "name": "xpub",
                  "type": "java.lang.CharSequence",
                  "description": "The extended public key (xpub) to be passed as an argument."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment",
                "description": "An instance of ExtendedPublicKeyFragment with the xpub value set as an argument."
              },
              "Why": "To create an instance of ExtendedPublicKeyFragment with the xpub value set as an argument for further use.",
              "How-to-use": "Call the 'instance' method with the xpub value as the parameter to get an instance of ExtendedPublicKeyFragment with the xpub value set.",
              "How-it-is-done": "The method creates a new instance of ExtendedPublicKeyFragment, creates a Bundle to store the xpub value, sets the xpub value in the arguments, and returns the fragment.",
              "Property": {
                "pre-conditions": "The xpub value must not be null.",
                "post-conditions": "The returned ExtendedPublicKeyFragment instance will have the xpub value set in its arguments."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment.onAttach(android.app.Activity)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment.onAttach(android.app.Activity)",
            "description": {
              "What": "Assign the activity parameter to the activity field of the class.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity to be assigned to the class field."
                }
              ],
              "Returns": "void",
              "Why": "To set the activity field of the class to the provided activity parameter.",
              "How-to-use": "Call this method with the activity instance as the parameter to assign it to the class field for further use.",
              "How-it-is-done": "The method calls the superclass method to ensure proper initialization and then assigns the activity parameter to the activity field of the class.",
              "Property": {
                "pre-conditions": "The activity parameter must not be null.",
                "post-conditions": "The activity field of the class will be set to the provided activity parameter."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog displaying a QR code of an extended public key and allows the user to share it.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog displaying the QR code of the extended public key."
              },
              "Why": "To provide a user-friendly way for users to view and share their extended public key.",
              "How-to-use": "Call onCreateDialog method passing the saved instance state as a parameter to display a dialog with the QR code of the extended public key and share options.",
              "How-it-is-done": "The method retrieves the extended public key, inflates the dialog layout, creates a QR code bitmap, sets it to an ImageView, and adds dismiss and share button functionality.",
              "Property": {
                "pre-conditions": [
                  "The extended public key must be passed as an argument to the fragment."
                ],
                "post-conditions": [
                  "A dialog displaying the QR code of the extended public key with dismiss and share options is shown."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment.show(android.app.FragmentManager,java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.ExtendedPublicKeyFragment.show(android.app.FragmentManager,java.lang.CharSequence)",
            "description": {
              "What": "Show the ExtendedPublicKeyFragment with the given xpub in the specified FragmentManager.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.app.FragmentManager",
                  "description": "The FragmentManager to show the ExtendedPublicKeyFragment."
                },
                {
                  "name": "xpub",
                  "type": "java.lang.CharSequence",
                  "description": "The extended public key to display in the ExtendedPublicKeyFragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to display the ExtendedPublicKeyFragment with a specific xpub.",
              "How-to-use": "Call the static method show(android.app.FragmentManager, java.lang.CharSequence) with the FragmentManager instance and the xpub to display.",
              "How-it-is-done": "The method creates an instance of ExtendedPublicKeyFragment with the given xpub and then shows it in the specified FragmentManager using the fragment tag.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The xpub must not be null."
                ],
                "post-conditions": [
                  "The ExtendedPublicKeyFragment is displayed in the specified FragmentManager."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.preference.PreferenceActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.preference.PreferenceActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.preference.PreferenceActivity.de.schildbach.wallet.ui.preference.PreferenceActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.PreferenceActivity.de.schildbach.wallet.ui.preference.PreferenceActivity()",
            "description": {
              "What": "Initialize a new instance of PreferenceActivity.",
              "Parameters": [],
              "Returns": "PreferenceActivity instance",
              "Why": "To provide a constructor for initializing PreferenceActivity instances.",
              "How-to-use": "Simply call PreferenceActivity() to create a new instance of PreferenceActivity.",
              "How-it-is-done": "The method initializes a new instance of PreferenceActivity without any parameters.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of PreferenceActivity is created."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.PreferenceActivity.isValidFragment(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.PreferenceActivity.isValidFragment(java.lang.String)",
            "description": {
              "What": "This method checks if the given fragment name is valid for use in the PreferenceActivity.",
              "Parameters": [
                {
                  "name": "fragmentName",
                  "type": "java.lang.String",
                  "description": "The name of the fragment to be validated."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "Returns true if the fragment name is valid, false otherwise."
              },
              "Why": "To ensure that only specific fragments are allowed to be used within the PreferenceActivity.",
              "How-to-use": "Call this method with the name of the fragment to be validated to check if it is allowed to be used in the PreferenceActivity.",
              "How-it-is-done": "The method compares the given fragment name with the names of allowed fragments (SettingsFragment, DiagnosticsFragment, AboutFragment) and returns true if it matches any of them.",
              "Property": {
                "pre-conditions": "None.",
                "post-conditions": "The method returns true if the fragment name is one of the allowed fragments, false otherwise."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.PreferenceActivity.onBuildHeaders(java.util.List)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.PreferenceActivity.onBuildHeaders(java.util.List)",
            "description": {
              "What": "Loads headers from a specified XML resource file and adds them to the target list.",
              "Parameters": [
                {
                  "name": "target",
                  "type": "List<Header>",
                  "description": "The list to which the headers will be added."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically populate the headers in the preference activity from an XML resource file.",
              "How-to-use": "Override this method in a PreferenceActivity subclass and call loadHeadersFromResource with the desired XML resource file containing the headers.",
              "How-it-is-done": "The method simply delegates the loading of headers to the loadHeadersFromResource method by passing the specified XML resource file and the target list.",
              "Property": {
                "pre-conditions": [
                  "The target list must not be null."
                ],
                "post-conditions": [
                  "The target list will contain the headers loaded from the specified XML resource file."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.preference.PreferenceActivity.onOptionsItemSelected(android.view.MenuItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.PreferenceActivity.onOptionsItemSelected(android.view.MenuItem)",
            "description": {
              "What": "Handles the selection of menu items in the preference activity, specifically the home button.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "android.view.MenuItem",
                  "description": "The menu item that was selected."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the item selection was handled, false otherwise."
              },
              "Why": "To provide a way to handle the selection of menu items, in this case, the home button, in the preference activity.",
              "How-to-use": "Override this method in a PreferenceActivity subclass to handle menu item selections, specifically for the home button, by calling onBackPressed() when the home button is selected.",
              "How-it-is-done": "The method checks the ID of the selected menu item, and if it matches android.R.id.home, it calls onBackPressed() and returns true. Otherwise, it delegates to the superclass implementation.",
              "Property": {
                "pre-conditions": "The method should be overridden in a subclass of PreferenceActivity.",
                "post-conditions": "The method handles the selection of the home button menu item by calling onBackPressed()."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.preference.ResolveDnsTask": {
        "qualifiedName": "de.schildbach.wallet.ui.preference.ResolveDnsTask",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.preference.ResolveDnsTask.de.schildbach.wallet.ui.preference.ResolveDnsTask(android.os.Handler)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.ResolveDnsTask.de.schildbach.wallet.ui.preference.ResolveDnsTask(android.os.Handler)",
            "description": {
              "What": "Initialize a ResolveDnsTask object with a background handler and a callback handler.",
              "Parameters": [
                {
                  "name": "backgroundHandler",
                  "type": "android.os.Handler",
                  "description": "Handler for background tasks."
                }
              ],
              "Returns": "N/A (Constructor)",
              "Why": "To set up the ResolveDnsTask object with the necessary handlers for background and callback operations.",
              "How-to-use": "Create a new ResolveDnsTask object by passing a background handler to the constructor.",
              "How-it-is-done": "The constructor initializes the backgroundHandler with the provided parameter and creates a new Handler for the callbackHandler using the current Looper.",
              "Property": {
                "pre-conditions": "The backgroundHandler parameter must not be null.",
                "post-conditions": "The ResolveDnsTask object is initialized with the provided background handler and a new callback handler."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.ResolveDnsTask.onSuccess(java.net.InetAddress)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.ResolveDnsTask.onSuccess(java.net.InetAddress)",
            "description": {
              "What": "This method is called when the DNS resolution is successful and returns the resolved InetAddress.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "java.net.InetAddress",
                  "description": "The resolved InetAddress from the DNS resolution."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to handle the successful resolution of a DNS query and allow for further processing of the resolved InetAddress.",
              "How-to-use": "Extend the ResolveDnsTask class and implement the onSuccess method to define the behavior when the DNS resolution is successful.",
              "How-it-is-done": "When the DNS resolution is successful, this method is called with the resolved InetAddress as the parameter, allowing the implementation to handle the resolved address as needed.",
              "Property": {
                "pre-conditions": "The DNS resolution must be successful for this method to be called.",
                "post-conditions": "The implementation of this method should handle the resolved InetAddress appropriately."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.ResolveDnsTask.onUnknownHost()": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.ResolveDnsTask.onUnknownHost()",
            "description": {
              "What": "This method is called when the host is unknown during DNS resolution.",
              "Parameters": [
                {
                  "name": "",
                  "type": "",
                  "description": ""
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle the scenario when the host is unknown and perform necessary actions.",
              "How-to-use": "Subclasses of ResolveDnsTask should implement this method to define the behavior when the host is unknown.",
              "How-it-is-done": "Subclasses will override this method and provide the specific implementation to handle the unknown host scenario, such as displaying an error message or retrying the DNS resolution.",
              "Property": {
                "pre-conditions": "This method should be implemented by subclasses of ResolveDnsTask.",
                "post-conditions": "After calling this method, the necessary actions for handling an unknown host should be performed."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.ResolveDnsTask.resolve(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.ResolveDnsTask.resolve(java.lang.String)",
            "description": {
              "What": "This method resolves a hostname to an InetAddress in a background thread and notifies the caller on success or failure.",
              "Parameters": [
                {
                  "name": "hostname",
                  "type": "java.lang.String",
                  "description": "The hostname to resolve to an InetAddress."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to resolve hostnames to IP addresses asynchronously to prevent blocking the main thread.",
              "How-to-use": "Call this method with the hostname to resolve, and implement the onSuccess and onUnknownHost methods to handle the results.",
              "How-it-is-done": "The method uses a backgroundHandler to perform the DNS resolution in a separate thread, then posts the result to the callbackHandler to notify the caller.",
              "Property": {
                "pre-conditions": "The backgroundHandler and callbackHandler must be properly initialized before calling this method.",
                "post-conditions": "The onSuccess method will be called with the resolved InetAddress if the hostname is successfully resolved, or the onUnknownHost method will be called if the hostname cannot be resolved."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.preference.SettingsFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.preference.SettingsFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.preference.SettingsFragment.de.schildbach.wallet.ui.preference.SettingsFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.SettingsFragment.de.schildbach.wallet.ui.preference.SettingsFragment()",
            "description": {
              "What": "Initialize a new instance of SettingsFragment.",
              "Parameters": [],
              "Returns": {
                "Type": "SettingsFragment",
                "Description": "A new instance of SettingsFragment."
              },
              "Why": "To provide a default constructor for initializing SettingsFragment.",
              "How-to-use": "Simply create a new instance of SettingsFragment by calling the constructor.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of SettingsFragment.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of SettingsFragment is created."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.SettingsFragment.onAttach(android.app.Activity)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.SettingsFragment.onAttach(android.app.Activity)",
            "description": {
              "What": "Initialize activity, application, configuration, and package manager variables in the SettingsFragment class.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity to attach to."
                },
                "Returns"
              ]
            }
          },
          "de.schildbach.wallet.ui.preference.SettingsFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.SettingsFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "This method initializes the settings fragment by setting up preferences and handlers.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the preferences and handlers required for the settings fragment.",
              "How-to-use": "Call this method in the onCreate() method of a SettingsFragment to initialize the preferences and handlers for the fragment.",
              "How-it-is-done": "The method first calls the super class onCreate() method, then adds preferences from a resource file, initializes background thread and handler, sets up preferences for trusted peers, and enables data usage preference based on availability.",
              "Property": {
                "pre-conditions": [
                  "The method should be called within the onCreate() method of a SettingsFragment."
                ],
                "post-conditions": [
                  "The settings fragment will be initialized with preferences and handlers set up."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.preference.SettingsFragment.onDestroy()": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.SettingsFragment.onDestroy()",
            "description": {
              "What": "This method is used to clean up resources and listeners before the fragment is destroyed.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To release resources and listeners associated with the fragment to prevent memory leaks.",
              "How-to-use": "Simply call this method when the fragment is being destroyed to clean up resources and listeners.",
              "How-it-is-done": "The method first removes the preference change listeners from two preferences, then quits the background thread's looper, and finally calls the superclass's onDestroy method.",
              "Property": {
                "pre-conditions": "The fragment must be in the process of being destroyed.",
                "post-conditions": "Resources and listeners associated with the fragment are cleaned up."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.SettingsFragment.onPreferenceChange(android.preference.Preference,java.lang.Object)": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.SettingsFragment.onPreferenceChange(android.preference.Preference,java.lang.Object)",
            "description": {
              "What": "This method handles changes in preferences in the SettingsFragment class.",
              "Parameters": [
                {
                  "name": "preference",
                  "type": "android.preference.Preference",
                  "description": "The preference that triggered the change."
                },
                {
                  "name": "newValue",
                  "type": "java.lang.Object",
                  "description": "The new value of the preference."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the change was handled successfully."
              },
              "Why": "To respond to changes in preferences and update the trusted peer settings accordingly.",
              "How-to-use": "Override this method in a SettingsFragment subclass to handle preference changes. Check the preference parameter to determine the type of change and take appropriate actions.",
              "How-it-is-done": "The method posts a Runnable to the handler to handle the preference change asynchronously. It then checks the type of preference that changed and calls the necessary methods to update the trusted peer settings.",
              "Property": {
                "pre-conditions": "The SettingsFragment class must be properly set up with the desired preferences and handlers.",
                "post-conditions": "The trusted peer settings may be updated based on the user's preference changes."
              }
            }
          },
          "de.schildbach.wallet.ui.preference.SettingsFragment.updateTrustedPeer()": {
            "qualifiedName": "de.schildbach.wallet.ui.preference.SettingsFragment.updateTrustedPeer()",
            "description": {
              "What": "Updates the display of the trusted peer preference based on the configured trusted peer host.",
              "Parameters": [
                {
                  "name": "trustedPeer",
                  "type": "String",
                  "description": "The configured trusted peer host."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically update the UI based on the configured trusted peer host and provide feedback on resolving the host address.",
              "How-to-use": "Call this method to update the display of the trusted peer preference in the settings fragment based on the configured trusted peer host.",
              "How-it-is-done": "The method checks if a trusted peer host is configured, updates the summary of the preference accordingly, enables/disables related preferences, and resolves the host address asynchronously using a ResolveDnsTask.",
              "Property": {
                "pre-conditions": "The 'config' object must be initialized with the configuration settings.",
                "post-conditions": "The UI display of the trusted peer preference is updated based on the configured trusted peer host."
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.ui.scan": {
    "qualifiedName": "de.schildbach.wallet.ui.scan",
    "classes": {
      "de.schildbach.wallet.ui.scan.CameraManager": {
        "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.scan.CameraManager.buildLuminanceSource(byte[])": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.buildLuminanceSource(byte[])",
            "description": {
              "What": "Builds a PlanarYUVLuminanceSource object using the provided byte array data.",
              "Parameters": [
                {
                  "name": "data",
                  "type": "byte[]",
                  "description": "The byte array data containing the image information."
                },
                "Returns"
              ],
              "Returns": {
                "type": "PlanarYUVLuminanceSource",
                "description": "A PlanarYUVLuminanceSource object representing the image data."
              },
              "Why": "To create a PlanarYUVLuminanceSource object for processing image data in the context of camera management.",
              "How-to-use": "Call this method with the byte array data obtained from the camera to create a PlanarYUVLuminanceSource object for further processing.",
              "How-it-is-done": "The method instantiates a new PlanarYUVLuminanceSource object using the provided data, camera resolution, frame preview dimensions, and a flag indicating whether to invert the image.",
              "Property": {
                "pre-conditions": "The cameraResolution and framePreview must be properly initialized before calling this method.",
                "post-conditions": "A PlanarYUVLuminanceSource object is returned based on the provided data and parameters."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.close()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.close()",
            "description": {
              "What": "This method closes the camera by stopping the preview and releasing it.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to properly close the camera resources and prevent memory leaks.",
              "How-to-use": "Simply call the close() method on an instance of CameraManager to close the camera.",
              "How-it-is-done": "The method first checks if the camera instance is not null, then stops the preview and releases the camera resources. If an exception occurs during stopping the preview, it is logged as a warning.",
              "Property": {
                "pre-conditions": "The camera instance must not be null.",
                "post-conditions": "The camera resources are properly closed and released."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.de.schildbach.wallet.ui.scan.CameraManager()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.de.schildbach.wallet.ui.scan.CameraManager()",
            "description": {
              "What": "Initialize a new instance of the CameraManager class.",
              "Parameters": [],
              "Returns": "CameraManager instance",
              "Why": "To provide a way to manage the camera functionality within the application.",
              "How-to-use": "Simply create a new instance of CameraManager by calling the constructor.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the CameraManager class.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new CameraManager instance is created and ready to be used."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.determineCameraId()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.determineCameraId()",
            "description": {
              "What": "This method determines the camera ID of the back or front camera on the device.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                },
                "Returns"
              ],
              "type": "int",
              "description": "The camera ID of the back or front camera, or -1 if no suitable camera is found."
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.findBestPreviewSizeValue(android.hardware.Camera$Parameters,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.findBestPreviewSizeValue(android.hardware.Camera$Parameters,int,int)",
            "description": {
              "What": "Find the best preview size value based on the given width and height for the camera parameters.",
              "Parameters": [
                {
                  "name": "parameters",
                  "type": "android.hardware.Camera.Parameters",
                  "description": "The camera parameters to search for the best preview size."
                },
                {
                  "name": "width",
                  "type": "int",
                  "description": "The width of the preview size."
                },
                {
                  "name": "height",
                  "type": "int",
                  "description": "The height of the preview size."
                }
              ],
              "Returns": {
                "type": "android.hardware.Camera.Size",
                "description": "The best preview size value based on the given width and height."
              },
              "Why": "To determine the optimal preview size for the camera based on the provided width and height.",
              "How-to-use": "Call this method with the camera parameters and the desired width and height to get the best preview size value.",
              "How-it-is-done": "The method calculates the screen aspect ratio, sorts the supported preview sizes, and iterates through them to find the best match based on aspect ratio and size constraints.",
              "Property": {
                "pre-conditions": [
                  "The camera parameters must not be null."
                ],
                "post-conditions": [
                  "The returned preview size value will be the best match based on the provided width and height."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.findValue(java.util.Collection,java.lang.String[])": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.findValue(java.util.Collection,java.lang.String[])",
            "description": {
              "What": "This method finds a specific value from a collection of values based on a given array of values to find.",
              "Parameters": [
                {
                  "name": "values",
                  "type": "java.util.Collection<String>",
                  "description": "The collection of values to search within."
                },
                {
                  "name": "valuesToFind",
                  "type": "java.lang.String[]",
                  "description": "An array of values to find within the collection."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The value found from the collection, or null if none of the values to find are present."
              },
              "Why": "To efficiently search for specific values within a collection without the need for manual iteration.",
              "How-to-use": "Call the method with a collection of values and an array of values to find, and it will return the first matching value found in the collection.",
              "How-it-is-done": "The method iterates through the values to find array and checks if each value is present in the collection using the contains method, returning the first match found or null if none are found.",
              "Property": {
                "pre-conditions": [
                  "The 'values' collection must not be null."
                ],
                "post-conditions": [
                  "The method returns null if none of the values to find are present in the collection."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.getFacing()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.getFacing()",
            "description": {
              "What": "This method returns the facing of the camera being used.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The facing of the camera (front or back)."
              },
              "Why": "To provide information about the orientation of the camera being used.",
              "How-to-use": "Simply call the getFacing() method on an instance of CameraManager to retrieve the facing of the camera.",
              "How-it-is-done": "The method accesses the 'facing' field of the cameraInfo object and returns its value.",
              "Property": {
                "pre-conditions": "The cameraInfo object must be properly initialized before calling this method.",
                "post-conditions": "The method will return the facing of the camera without modifying any state."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.getFrame()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.getFrame()",
            "description": {
              "What": "This method returns the frame used for scanning in the camera manager.",
              "Parameters": [],
              "Returns": {
                "Type": "android.graphics.Rect",
                "Description": "The frame used for scanning."
              },
              "Why": "To provide access to the frame used for scanning in the camera manager.",
              "How-to-use": "Call this method on an instance of CameraManager to retrieve the frame used for scanning.",
              "How-it-is-done": "The method simply returns the 'frame' instance variable which holds the rectangle used for scanning.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": []
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.getFramePreview()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.getFramePreview()",
            "description": {
              "What": "This method returns the frame preview rectangle for the camera manager.",
              "Parameters": [],
              "Returns": {
                "Type": "android.graphics.RectF",
                "Description": "The frame preview rectangle for the camera manager."
              },
              "Why": "To provide access to the frame preview rectangle for external use or manipulation.",
              "How-to-use": "Call getFramePreview() on an instance of CameraManager to retrieve the frame preview rectangle.",
              "How-it-is-done": "The method simply returns the framePreview instance variable, which is of type android.graphics.RectF.",
              "Property": {
                "Pre-conditions": "The CameraManager instance must be properly initialized.",
                "Post-conditions": "The returned RectF object may be used for displaying or processing the frame preview."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.getOrientation()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.getOrientation()",
            "description": {
              "What": "This method returns the orientation of the camera.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The orientation of the camera."
              },
              "Why": "To provide access to the orientation of the camera for further processing or adjustments in the application.",
              "How-to-use": "Simply call the getOrientation() method on an instance of CameraManager to retrieve the orientation of the camera.",
              "How-it-is-done": "The method accesses the orientation property of the cameraInfo object and returns its value.",
              "Property": {
                "pre-conditions": [
                  "The cameraInfo object must be properly initialized."
                ],
                "post-conditions": [
                  "The method returns the orientation of the camera."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.getTorchEnabled(android.hardware.Camera)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.getTorchEnabled(android.hardware.Camera)",
            "description": {
              "What": "This method checks if the torch (flashlight) is enabled on the given camera.",
              "Parameters": [
                {
                  "name": "camera",
                  "type": "android.hardware.Camera",
                  "description": "The camera object to check for torch status."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the torch is enabled, false otherwise."
              },
              "Why": "To determine if the torch is currently turned on for the camera.",
              "How-to-use": "Pass an instance of android.hardware.Camera to the method to check if the torch is enabled.",
              "How-it-is-done": "The method retrieves the camera parameters and checks the flash mode to see if it is set to either FLASH_MODE_ON or FLASH_MODE_TORCH.",
              "Property": {
                "pre-conditions": "The camera object passed to the method must not be null.",
                "post-conditions": "The method returns true if the torch is enabled, false otherwise."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.open(android.view.TextureView,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.open(android.view.TextureView,int)",
            "description": {
              "What": "This method opens the camera with the specified display orientation and sets up the preview on the given TextureView.",
              "Parameters": [
                {
                  "name": "textureView",
                  "type": "android.view.TextureView",
                  "description": "The TextureView on which the camera preview will be displayed."
                },
                {
                  "name": "displayOrientation",
                  "type": "int",
                  "description": "The display orientation of the camera preview."
                }
              ],
              "Returns": {
                "type": "android.hardware.Camera",
                "description": "The opened camera instance."
              },
              "Why": "To provide functionality for opening the camera and setting up the preview for scanning purposes.",
              "How-to-use": "Call this method with a valid TextureView and display orientation to open the camera and set up the preview for scanning operations.",
              "How-it-is-done": "The method determines the camera ID, opens the camera, sets the display orientation based on camera and display orientation, sets the preview texture, finds the best preview size, and starts the camera preview.",
              "Property": {
                "Pre-conditions": [
                  "Valid TextureView instance must be provided.",
                  "Valid display orientation value must be provided."
                ],
                "Post-conditions": [
                  "Camera is successfully opened and preview is set on the provided TextureView.",
                  "Camera preview is started."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.requestPreviewFrame(android.hardware.Camera.PreviewCallback)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.requestPreviewFrame(android.hardware.Camera.PreviewCallback)",
            "description": {
              "What": "Requests a single preview frame from the camera and sets a callback to be called when the frame is available.",
              "Parameters": [
                {
                  "name": "callback",
                  "type": "android.hardware.Camera.PreviewCallback",
                  "description": "The callback to be called when the preview frame is available."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow the application to request a single preview frame from the camera for processing.",
              "How-to-use": "To use this method, create an instance of CameraManager and call requestPreviewFrame with a PreviewCallback implementation to handle the preview frame data.",
              "How-it-is-done": "The method calls setOneShotPreviewCallback on the camera object with the provided callback. If a RuntimeException occurs, it is caught and logged as a warning.",
              "Property": {
                "pre-conditions": [
                  "The CameraManager instance must be properly initialized with a valid camera object."
                ],
                "post-conditions": [
                  "The callback provided will be called when a preview frame is available from the camera."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.setDesiredCameraParameters(android.hardware.Camera,android.hardware.Camera$Size)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.setDesiredCameraParameters(android.hardware.Camera,android.hardware.Camera$Size)",
            "description": {
              "What": "Set the desired camera parameters including focus mode and preview size for the given camera.",
              "Parameters": [
                {
                  "name": "camera",
                  "type": "android.hardware.Camera",
                  "description": "The camera object to set parameters for."
                },
                {
                  "name": "cameraResolution",
                  "type": "android.hardware.Camera$Size",
                  "description": "The desired camera resolution to set for preview size."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To configure the camera parameters for optimal scanning performance and image quality.",
              "How-to-use": "Call this method with the camera object and the desired camera resolution to set the focus mode and preview size.",
              "How-it-is-done": "The method first retrieves the camera parameters, then sets the focus mode to one of the supported modes, sets the preview size to the desired resolution, and finally applies the updated parameters to the camera.",
              "Property": {
                "pre-conditions": "The camera object and camera resolution should not be null.",
                "post-conditions": "The camera parameters are updated with the desired focus mode and preview size."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.setTorch(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.setTorch(boolean)",
            "description": {
              "What": "Toggle the torch (flashlight) on the camera on or off.",
              "Parameters": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "description": "Flag to indicate if the torch should be turned on (true) or off (false)."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to control the torch functionality of the camera within the CameraManager class.",
              "How-to-use": "Call setTorch(true) to turn on the torch or setTorch(false) to turn it off.",
              "How-it-is-done": "The method checks if the current torch state is different from the desired state, and if so, it calls the setTorchEnabled method of the CameraManager class to update the torch state.",
              "Property": {
                "pre-conditions": "The camera instance must be initialized and available for use.",
                "post-conditions": "The torch state of the camera is updated according to the provided 'enabled' parameter."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.CameraManager.setTorchEnabled(android.hardware.Camera,boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.CameraManager.setTorchEnabled(android.hardware.Camera,boolean)",
            "description": {
              "What": "This method sets the torch (flashlight) of the camera to be enabled or disabled.",
              "Parameters": [
                {
                  "name": "camera",
                  "type": "android.hardware.Camera",
                  "description": "The camera object to control the torch."
                },
                {
                  "name": "enabled",
                  "type": "boolean",
                  "description": "A boolean value indicating whether the torch should be enabled (true) or disabled (false)."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide functionality for enabling or disabling the torch of the camera for scanning purposes.",
              "How-to-use": "Call this method with the camera object and a boolean value to enable or disable the torch.",
              "How-it-is-done": "The method first retrieves the camera parameters, checks for supported flash modes, determines the appropriate flash mode based on the enabled parameter, cancels auto-focus, sets the flash mode in the parameters, and applies the updated parameters to the camera.",
              "Property": {
                "pre-conditions": [
                  "The camera object must be initialized and opened before calling this method."
                ],
                "post-conditions": [
                  "The torch of the camera will be set to the specified enabled state."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.scan.ScanActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.scan.ScanActivity.de.schildbach.wallet.ui.scan.ScanActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.de.schildbach.wallet.ui.scan.ScanActivity()",
            "description": {
              "method": {
                "What": "Initialize a new instance of ScanActivity class.",
                "Parameters": [
                  {
                    "name": "None",
                    "type": "N/A",
                    "description": "No parameters are required for this constructor."
                  }
                ],
                "Returns": {
                  "type": "ScanActivity",
                  "description": "A new instance of ScanActivity class is returned."
                },
                "Why": "To provide a way to create a new instance of ScanActivity class.",
                "How-to-use": "Simply call the constructor ScanActivity() to create a new instance of ScanActivity class.",
                "How-it-is-done": "The constructor initializes a new instance of ScanActivity class without any parameters.",
                "Property": {
                  "pre-conditions": "No specific pre-conditions are required for calling this constructor.",
                  "post-conditions": "A new instance of ScanActivity class is successfully created after calling this constructor."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.handleResult(com.google.zxing.Result)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.handleResult(com.google.zxing.Result)",
            "description": {
              "method": {
                "What": "Handle the result of a barcode scan by vibrating, setting the result in the intent, and finishing the activity.",
                "Parameters": [
                  {
                    "name": "scanResult",
                    "type": "com.google.zxing.Result",
                    "description": "The result of the barcode scan."
                  },
                  {
                    "name": "result",
                    "type": "android.content.Intent",
                    "description": "The intent to hold the scan result."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To process the result of a barcode scan and provide it to the calling activity.",
                "How-to-use": "Call this method with the scan result as the parameter to handle the result of a barcode scan and finish the scanning activity.",
                "How-it-is-done": "The method triggers the device's vibrator, sets the scan result in an intent, sets the result code to RESULT_OK, and finishes the activity.",
                "Property": {
                  "pre-conditions": "The scanResult parameter must not be null.",
                  "post-conditions": "The intent returned by the activity will contain the scan result."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.maybeOpenCamera()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.maybeOpenCamera()",
            "description": {
              "What": "This method checks if the camera permission is granted and if the surface is created before opening the camera.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To ensure that the camera is only opened when the necessary conditions are met.",
              "How-to-use": "Call this method when you want to open the camera in the ScanActivity class.",
              "How-it-is-done": "The method checks if the surface is created and if the camera permission is granted using ContextCompat.checkSelfPermission. If both conditions are met, it posts a runnable to open the camera using a cameraHandler.",
              "Property": {
                "pre-conditions": [
                  "The surface must be created.",
                  "The camera permission must be granted."
                ],
                "post-conditions": [
                  "If the conditions are met, the camera will be opened."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.maybeTriggerSceneTransition()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.maybeTriggerSceneTransition()",
            "description": {
              "What": "Triggers a scene transition animation by setting the content view alpha to 1 and changing the window background color to black.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a smooth transition effect when switching scenes in the ScanActivity.",
              "How-to-use": "Call this method when a scene transition animation needs to be triggered in the ScanActivity.",
              "How-it-is-done": "If the sceneTransition object is not null, set the content view alpha to 1, add an animation listener to change the window background color to black when the animation ends, start the scene transition animation, and set the sceneTransition object to null.",
              "Property": {
                "pre-conditions": [
                  "The sceneTransition object must not be null."
                ],
                "post-conditions": [
                  "The content view alpha is set to 1.",
                  "The window background color is changed to black.",
                  "The sceneTransition object is set to null."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onAttachedToWindow()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onAttachedToWindow()",
            "description": {
              "What": "Sets the activity to be shown when the device is locked.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that the activity is displayed even when the device is locked.",
              "How-to-use": "Simply call this method within the ScanActivity class to set the activity to be shown when the device is locked.",
              "How-it-is-done": "The method overrides the onAttachedToWindow() method of the superclass and sets the activity to be shown when the device is locked by calling setShowWhenLocked(true).",
              "Property": {
                "pre-conditions": [
                  "The method should be called within the ScanActivity class."
                ],
                "post-conditions": [
                  "The activity will be displayed even when the device is locked."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onBackPressed()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onBackPressed()",
            "description": {
              "method": {
                "What": "Hide the scanner view, set result as canceled, and finish the activity when the back button is pressed.",
                "Parameters": [
                  {
                    "name": "N/A",
                    "type": "N/A",
                    "description": "No parameters are passed to this method."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To handle the back button press event and close the scanner activity.",
                "How-to-use": "Simply override the onBackPressed() method in the ScanActivity class and implement the desired behavior within it.",
                "How-it-is-done": "The method sets the visibility of the scanner view to GONE, sets the result as canceled, and finishes the activity.",
                "Property": {
                  "pre-conditions": [
                    "The ScanActivity class must be extended and the onBackPressed() method must be overridden."
                  ],
                  "post-conditions": [
                    "The scanner view will be hidden, the result will be set as canceled, and the activity will be finished when the back button is pressed."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize the ScanActivity by setting up the UI elements, camera preview, and handling camera permissions.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the ScanActivity for scanning QR codes or barcodes.",
              "How-to-use": "Call onCreate method with the savedInstanceState parameter when initializing the ScanActivity.",
              "How-it-is-done": "The method initializes the vibrator, ViewModel, sets the orientation, sets up camera preview, requests camera permission if needed, and handles scene transition animation.",
              "Property": {
                "pre-conditions": [
                  "The activity context must be valid.",
                  "The layout resources (R.layout.scan_activity) must be available."
                ],
                "post-conditions": [
                  "The ScanActivity is set up with camera preview and necessary permissions."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onDestroy()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onDestroy()",
            "description": {
              "What": "This method is responsible for cleaning up resources and resetting the orientation of the activity when it is destroyed.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To release resources and perform necessary clean-up tasks when the activity is being destroyed.",
              "How-to-use": "Simply call this method within the onDestroy() lifecycle method of the ScanActivity class to ensure proper resource release and orientation reset.",
              "How-it-is-done": "The method first removes callbacks and messages from the cameraHandler, quits the cameraThread, and sets the SurfaceTextureListener of the previewView to null. It then sets the orientation of the activity to SCREEN_ORIENTATION_UNSPECIFIED and calls the super.onDestroy() method.",
              "Property": {
                "pre-conditions": [
                  "The activity must be in the process of being destroyed."
                ],
                "post-conditions": [
                  "Resources related to the camera and preview must be released.",
                  "The orientation of the activity should be reset to unspecified."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onKeyDown(int,android.view.KeyEvent)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onKeyDown(int,android.view.KeyEvent)",
            "description": {
              "What": "This method handles key events for controlling the camera's torch functionality in the ScanActivity class.",
              "Parameters": [
                {
                  "name": "keyCode",
                  "type": "int",
                  "description": "The code of the key event."
                },
                {
                  "name": "event",
                  "type": "android.view.KeyEvent",
                  "description": "The KeyEvent object representing the key event."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the key event is handled by the method, false otherwise."
              },
              "Why": "To allow users to control the torch functionality of the camera using specific key events.",
              "How-to-use": "Override this method in the ScanActivity class and implement the desired functionality for handling key events related to camera control.",
              "How-it-is-done": "The method checks the keyCode of the key event and performs different actions based on the key pressed, such as toggling the torch on/off using volume keys.",
              "Property": {
                "pre-conditions": "The ScanActivity class must extend the android.app.Activity class.",
                "post-conditions": "The torch functionality of the camera may be controlled using specific key events."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onPause()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onPause()",
            "description": {
              "What": "This method closes the camera handler when the activity is paused.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To ensure that the camera handler is properly closed when the activity is paused to prevent memory leaks or resource issues.",
              "How-to-use": "Simply override the onPause() method in your ScanActivity class and call super.onPause() to ensure proper handling of camera resources.",
              "How-it-is-done": "The method uses a cameraHandler object to post a closeRunnable, which is responsible for closing the camera handler. It then calls the super.onPause() method to handle any additional onPause() functionality.",
              "Property": {
                "pre-conditions": [
                  "The cameraHandler object must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The camera handler is closed when the activity is paused."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onRequestPermissionsResult(int,java.lang.String[],int[])": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onRequestPermissionsResult(int,java.lang.String[],int[])",
            "description": {
              "What": "Handles the result of a permission request for camera access in the ScanActivity class.",
              "Parameters": [
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code passed to requestPermissions."
                },
                {
                  "name": "permissions",
                  "type": "String[]",
                  "description": "The requested permissions."
                },
                {
                  "name": "grantResults",
                  "type": "int[]",
                  "description": "The grant results for the corresponding permissions."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the user's response to the camera permission request and take appropriate action.",
              "How-to-use": "Call this method when receiving the result of a permission request for camera access in the ScanActivity class.",
              "How-it-is-done": "Checks if the permission was granted, then either proceeds to open the camera or shows a permission warning dialog using the view model.",
              "Property": {
                "pre-conditions": [
                  "The requestCode, permissions, and grantResults parameters must not be null."
                ],
                "post-conditions": [
                  "The camera may be opened if the permission is granted.",
                  "A permission warning dialog may be shown if the permission is not granted."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onResume()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onResume()",
            "description": {
              "What": "The method maybeOpenCamera() is called when the activity resumes to potentially open the camera for scanning.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To ensure that the camera is opened when the activity resumes, allowing for scanning functionality.",
              "How-to-use": "Simply extend the ScanActivity class and override the onResume() method to include the maybeOpenCamera() call.",
              "How-it-is-done": "The method onResume() is overridden in the ScanActivity class to call maybeOpenCamera(), which internally handles the logic to potentially open the camera for scanning.",
              "Property": {
                "pre-conditions": [
                  "The activity must be in the resumed state."
                ],
                "post-conditions": [
                  "The camera may be opened for scanning if conditions are met."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)",
            "description": {
              "What": "This method sets a flag to indicate that the surface has been created and then attempts to open the camera.",
              "Parameters": [
                {
                  "name": "surface",
                  "type": "android.graphics.SurfaceTexture",
                  "description": "The SurfaceTexture object that has become available."
                },
                {
                  "name": "width",
                  "type": "int",
                  "description": "The width of the available surface."
                },
                {
                  "name": "height",
                  "type": "int",
                  "description": "The height of the available surface."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the case when the SurfaceTexture becomes available and prepare to open the camera for scanning purposes.",
              "How-to-use": "Override this method in a class that extends ScanActivity to handle the SurfaceTexture becoming available and trigger the camera opening process.",
              "How-it-is-done": "The method sets a flag 'surfaceCreated' to true to indicate that the surface has been created, and then calls the 'maybeOpenCamera()' method to attempt to open the camera for scanning.",
              "Property": {
                "pre-conditions": [
                  "The method should be overridden in a class that extends ScanActivity."
                ],
                "post-conditions": [
                  "The 'surfaceCreated' flag is set to true.",
                  "The 'maybeOpenCamera()' method is called to potentially open the camera."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)",
            "description": {
              "What": "This method is called when the SurfaceTexture associated with the SurfaceView is destroyed, setting a flag to indicate that the surface has been destroyed.",
              "Parameters": [
                {
                  "name": "surface",
                  "type": "android.graphics.SurfaceTexture",
                  "description": "The SurfaceTexture that is being destroyed."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "Returns true to indicate that the SurfaceTexture has been destroyed."
              },
              "Why": "This method is provided to handle the cleanup when the SurfaceTexture is destroyed in order to manage the state of the SurfaceView.",
              "How-to-use": "Override this method in a custom ScanActivity class to perform any necessary actions when the SurfaceTexture is destroyed, such as releasing resources or updating UI elements.",
              "How-it-is-done": "The method simply sets the 'surfaceCreated' flag to false to indicate that the SurfaceTexture has been destroyed, and then returns true.",
              "Property": {
                "pre-conditions": "The 'surfaceCreated' flag should be initially set to true before the SurfaceTexture is destroyed.",
                "post-conditions": "After calling this method, the 'surfaceCreated' flag will be set to false to indicate that the SurfaceTexture has been destroyed."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)",
            "description": {
              "What": "This method is called when the size of the SurfaceTexture is changed.",
              "Parameters": [
                {
                  "name": "surface",
                  "type": "android.graphics.SurfaceTexture",
                  "description": "The SurfaceTexture whose size has changed."
                },
                {
                  "name": "width",
                  "type": "int",
                  "description": "The new width of the SurfaceTexture."
                },
                {
                  "name": "height",
                  "type": "int",
                  "description": "The new height of the SurfaceTexture."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle changes in the size of the SurfaceTexture and perform any necessary actions based on the new dimensions.",
              "How-to-use": "Override this method in a class that extends ScanActivity to customize behavior when the size of the SurfaceTexture changes.",
              "How-it-is-done": "The method does not have any implementation provided in the code snippet, so the developer needs to add the necessary logic to handle the size change of the SurfaceTexture.",
              "Property": {
                "pre-conditions": [
                  "The class containing this method must extend ScanActivity."
                ],
                "post-conditions": [
                  "The developer can implement custom behavior based on the new size of the SurfaceTexture."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.onSurfaceTextureUpdated(android.graphics.SurfaceTexture)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.onSurfaceTextureUpdated(android.graphics.SurfaceTexture)",
            "description": {
              "method": {
                "What": "This method is called when the SurfaceTexture is updated.",
                "Parameters": [
                  {
                    "name": "surface",
                    "type": "android.graphics.SurfaceTexture",
                    "description": "The updated SurfaceTexture."
                  },
                  {
                    "Returns": {
                      "type": "void",
                      "description": "This method does not return anything."
                    }
                  },
                  "Why"
                ],
                "Why": "This method is provided to allow the class to react to updates in the SurfaceTexture.",
                "How-to-use": "Override this method in a subclass of ScanActivity to perform actions when the SurfaceTexture is updated.",
                "How-it-is-done": "The method is empty as it is meant to be overridden in subclasses to define specific behavior when the SurfaceTexture is updated.",
                "Property": {
                  "pre-conditions": [
                    "The class containing this method must extend ScanActivity."
                  ],
                  "post-conditions": [
                    "The subclass implementing this method will have custom behavior for handling SurfaceTexture updates."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.postFinish()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.postFinish()",
            "description": {
              "What": "This method posts a delayed finish action for the ScanActivity.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to delay the finish action of the ScanActivity for a short period.",
              "How-to-use": "Simply call postFinish() within the ScanActivity to delay its finish action by 50 milliseconds.",
              "How-it-is-done": "The method creates a new Handler and posts a delayed Runnable that calls the finish() method of the ScanActivity after 50 milliseconds.",
              "Property": {
                "pre-conditions": [
                  "The method should be called within the ScanActivity class."
                ],
                "post-conditions": [
                  "The ScanActivity will finish after a delay of 50 milliseconds."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.startForResult(android.app.Activity,android.view.View,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.startForResult(android.app.Activity,android.view.View,int)",
            "description": {
              "What": "Starts the ScanActivity for result with scene transition animation if supported.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity from which the ScanActivity is started."
                },
                {
                  "name": "clickView",
                  "type": "android.view.View",
                  "description": "The view that was clicked to trigger the scan activity, can be null."
                },
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code to identify the result."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to start the ScanActivity for result with scene transition animation if supported.",
              "How-to-use": "Call this method passing the activity, the view that was clicked (if available), and the request code to start the ScanActivity for result.",
              "How-it-is-done": "If the clickView is not null and the device supports Lollipop or higher, the method calculates the location of the clickView, creates an intent with scene transition coordinates, and starts the ScanActivity for result with animation. Otherwise, it falls back to starting the ScanActivity without animation.",
              "Property": {
                "pre-conditions": [
                  "The activity parameter must not be null.",
                  "The requestCode must be a valid integer."
                ],
                "post-conditions": [
                  "The ScanActivity is started for result with or without scene transition animation based on device support and clickView availability."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.startForResult(android.app.Activity,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.startForResult(android.app.Activity,int)",
            "description": {
              "What": "Starts the ScanActivity for result in the given activity.",
              "Parameters": [
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity in which the ScanActivity will be started."
                },
                {
                  "name": "resultCode",
                  "type": "int",
                  "description": "The result code to be returned when the ScanActivity finishes."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to start the ScanActivity and receive a result in the calling activity.",
              "How-to-use": "Simply call this method with the activity in which you want to start the ScanActivity and the result code to be returned.",
              "How-it-is-done": "The method creates a new Intent for the ScanActivity class and starts it using startActivityForResult with the provided result code.",
              "Property": {
                "pre-conditions": [
                  "The activity parameter must not be null."
                ],
                "post-conditions": [
                  "The ScanActivity will be started in the given activity and will return the result with the specified result code."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity.startForResult(android.support.v4.app.Fragment,android.app.Activity,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity.startForResult(android.support.v4.app.Fragment,android.app.Activity,int)",
            "description": {
              "What": "Starts the ScanActivity from a fragment for result with a specified result code.",
              "Parameters": [
                {
                  "name": "fragment",
                  "type": "android.support.v4.app.Fragment",
                  "description": "The fragment from which the ScanActivity is started."
                },
                {
                  "name": "activity",
                  "type": "android.app.Activity",
                  "description": "The activity context used to start the ScanActivity."
                },
                {
                  "name": "resultCode",
                  "type": "int",
                  "description": "The result code to be returned when the ScanActivity finishes."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to start the ScanActivity from a fragment and receive a result.",
              "How-to-use": "Call this method with the fragment, activity, and result code parameters to start the ScanActivity and handle the result in the fragment.",
              "How-it-is-done": "The method uses the fragment's startActivityForResult method to start the ScanActivity with the specified result code.",
              "Property": {
                "pre-conditions": [
                  "The fragment and activity parameters must not be null."
                ],
                "post-conditions": [
                  "The ScanActivity is started from the fragment with the specified result code."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.scan.ScanActivity$AutoFocusRunnable": {
        "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity$AutoFocusRunnable",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.scan.ScanActivity$AutoFocusRunnable.de.schildbach.wallet.ui.scan.ScanActivity$AutoFocusRunnable(android.hardware.Camera)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity$AutoFocusRunnable.de.schildbach.wallet.ui.scan.ScanActivity$AutoFocusRunnable(android.hardware.Camera)",
            "description": {
              "What": "Initialize an AutoFocusRunnable object with a camera instance.",
              "Parameters": [
                {
                  "name": "camera",
                  "type": "android.hardware.Camera",
                  "description": "The camera instance to be used for auto-focus."
                }
              ],
              "Returns": {
                "type": "AutoFocusRunnable",
                "description": "A new instance of AutoFocusRunnable initialized with the provided camera."
              },
              "Why": "To set up the AutoFocusRunnable object with the necessary camera instance for auto-focus functionality.",
              "How-to-use": "Create a new AutoFocusRunnable object by passing a camera instance as a parameter, then use this object for auto-focus operations within the ScanActivity.",
              "How-it-is-done": "The constructor takes a camera instance as a parameter and assigns it to the 'camera' field of the AutoFocusRunnable object for later use in auto-focus operations.",
              "Property": {
                "pre-conditions": [
                  "The 'camera' parameter must not be null."
                ],
                "post-conditions": [
                  "The AutoFocusRunnable object is initialized with the provided camera instance."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity$AutoFocusRunnable.run()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity$AutoFocusRunnable.run()",
            "description": {
              "What": "This method runs the auto-focus functionality of the camera in the ScanActivity.",
              "Parameters": [
                {
                  "name": "camera",
                  "type": "Camera",
                  "description": "The camera object to perform auto-focus on."
                },
                {
                  "name": "autoFocusCallback",
                  "type": "Camera.AutoFocusCallback",
                  "description": "The callback to handle the auto-focus result."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to handle the auto-focus functionality of the camera in the ScanActivity.",
              "How-to-use": "Create an instance of AutoFocusRunnable with the required parameters and call the run() method to initiate the auto-focus process.",
              "How-it-is-done": "The method simply calls the autoFocus() method of the camera object with the provided autoFocusCallback. It catches any exceptions that may occur during the auto-focus process and logs them.",
              "Property": {
                "pre-conditions": [
                  "The camera object must be initialized and valid.",
                  "The autoFocusCallback must be implemented and provided."
                ],
                "post-conditions": [
                  "The auto-focus process may succeed or fail based on the camera and environment conditions."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment.de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment.de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment()",
            "description": {
              "method": {
                "What": "Initialize a new instance of WarnDialogFragment.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "WarnDialogFragment",
                  "description": "A new instance of WarnDialogFragment."
                },
                "Why": "To provide a way to create instances of WarnDialogFragment for displaying warning messages.",
                "How-to-use": "To create a new instance of WarnDialogFragment, simply call the constructor WarnDialogFragment().",
                "How-it-is-done": "The constructor initializes a new instance of WarnDialogFragment without any parameters.",
                "Property": {
                  "pre-conditions": "None.",
                  "post-conditions": "A new instance of WarnDialogFragment is created and ready to be used."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment.onCancel(android.content.DialogInterface)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment.onCancel(android.content.DialogInterface)",
            "description": {
              "What": "Finish the current activity when the dialog is canceled.",
              "Parameters": [
                {
                  "name": "dialog",
                  "type": "android.content.DialogInterface",
                  "description": "The dialog that was canceled."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the event when the dialog is canceled and perform a specific action, in this case, finishing the activity.",
              "How-to-use": "Override the onCancel method in a custom DialogFragment class and implement the desired action to be taken when the dialog is canceled, such as finishing the activity.",
              "How-it-is-done": "The method calls getActivity() to get the current activity associated with the fragment and then calls finish() on the activity to close it.",
              "Property": {
                "pre-conditions": [
                  "The dialog must be shown and then canceled for this method to be triggered."
                ],
                "post-conditions": [
                  "The current activity will be finished when the dialog is canceled."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a warning dialog with a message and a single dismiss button that finishes the activity when clicked.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A warning dialog with the specified message and dismiss button."
              },
              "Why": "To display a warning message to the user and allow them to dismiss the dialog and finish the activity.",
              "How-to-use": "Call this method passing the saved instance state as a parameter to create a warning dialog with the specified message and dismiss button.",
              "How-it-is-done": "The method retrieves the arguments passed to the dialog, creates a DialogBuilder with a warning message, sets the message, adds a single dismiss button that finishes the activity when clicked, and returns the created dialog.",
              "Property": {
                "pre-conditions": "The method requires a valid saved instance state to be passed as a parameter.",
                "post-conditions": "The method returns a warning dialog with the specified message and dismiss button."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment.show(android.support.v4.app.FragmentManager,int,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanActivity$WarnDialogFragment.show(android.support.v4.app.FragmentManager,int,java.lang.String)",
            "description": {
              "What": "Show a warning dialog fragment with a specified title and message.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to use for managing the fragment."
                },
                {
                  "name": "titleResId",
                  "type": "int",
                  "description": "Resource ID of the title for the dialog."
                },
                {
                  "name": "message",
                  "type": "String",
                  "description": "The message to display in the dialog."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to show a warning dialog fragment with customizable title and message.",
              "How-to-use": "Call this method with the FragmentManager, title resource ID, and message to display in the dialog to show the warning dialog fragment.",
              "How-it-is-done": "Create a new instance of WarnDialogFragment, set arguments for title and message, and show the fragment using the provided FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The titleResId should refer to a valid resource ID for the title."
                ],
                "post-conditions": [
                  "A warning dialog fragment is displayed with the specified title and message."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.scan.ScanViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.scan.ScanViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.scan.ScanViewModel.de.schildbach.wallet.ui.scan.ScanViewModel()": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScanViewModel.de.schildbach.wallet.ui.scan.ScanViewModel()",
            "description": {
              "method": {
                "What": "Initialize a new instance of ScanViewModel.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "ScanViewModel",
                  "description": "A new instance of ScanViewModel."
                },
                "Why": "To provide a constructor for creating instances of ScanViewModel.",
                "How-to-use": "Simply call the constructor to create a new instance of ScanViewModel.",
                "How-it-is-done": "The method initializes a new instance of ScanViewModel without any parameters.",
                "Property": {
                  "pre-conditions": "None",
                  "post-conditions": "A new instance of ScanViewModel is created."
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.scan.ScannerView": {
        "qualifiedName": "de.schildbach.wallet.ui.scan.ScannerView",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.scan.ScannerView.addDot(com.google.zxing.ResultPoint)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScannerView.addDot(com.google.zxing.ResultPoint)",
            "description": {
              "What": "Adds a dot to the scanner view at the specified ResultPoint coordinates.",
              "Parameters": [
                {
                  "name": "dot",
                  "type": "com.google.zxing.ResultPoint",
                  "description": "The ResultPoint object representing the coordinates of the dot to be added."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To visually represent detected points on the scanner view.",
              "How-to-use": "Call this method with a ResultPoint object representing the coordinates of the dot to be added to the scanner view.",
              "How-it-is-done": "The method adds the coordinates of the dot along with the current timestamp to a map, then invalidates the view to trigger a redraw.",
              "Property": {
                "pre-conditions": [
                  "The dot parameter must not be null."
                ],
                "post-conditions": [
                  "The dot will be visually represented on the scanner view."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScannerView.de.schildbach.wallet.ui.scan.ScannerView(android.content.Context,android.util.AttributeSet)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScannerView.de.schildbach.wallet.ui.scan.ScannerView(android.content.Context,android.util.AttributeSet)",
            "description": {
              "method": {
                "What": "Initialize the ScannerView with colors and paints for scanning functionality.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context of the ScannerView."
                  },
                  {
                    "name": "attrs",
                    "type": "android.util.AttributeSet",
                    "description": "The attributes of the ScannerView."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "Constructor method, no explicit return type."
                },
                "Why": "To set up the necessary colors and paints for the ScannerView to be used in scanning operations.",
                "How-to-use": "Create a new instance of ScannerView by passing the context and attributes to the constructor.",
                "How-it-is-done": "The method retrieves colors and dimensions from resources, initializes paint objects with specific styles and properties for scanning functionality.",
                "Property": {
                  "pre-conditions": "The resources R.color.scan_mask, R.color.scan_result_view, R.color.scan_laser, R.color.scan_dot, R.color.scan_result_dots, R.dimen.scan_laser_width, and R.dimen.scan_dot_size must be defined in the resources.",
                  "post-conditions": "The ScannerView is initialized with the specified colors and paints for scanning operations."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScannerView.onDraw(android.graphics.Canvas)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScannerView.onDraw(android.graphics.Canvas)",
            "description": {
              "What": "Draws the scanner view on the canvas with a frame, mask, laser, and dots.",
              "Parameters": [
                {
                  "name": "canvas",
                  "type": "android.graphics.Canvas",
                  "description": "The canvas on which to draw the scanner view."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To visually represent the scanner view with a frame, mask, laser, and dots for scanning purposes.",
              "How-to-use": "Call this method passing a Canvas object to draw the scanner view on the canvas.",
              "How-it-is-done": "The method first checks if a frame is available, then draws the mask, laser, and dots based on the current state and time.",
              "Property": {
                "pre-conditions": "The 'frame' variable must not be null.",
                "post-conditions": "The scanner view is drawn on the canvas with the specified frame, mask, laser, and dots."
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScannerView.setFraming(android.graphics.Rect,android.graphics.RectF,int,int,boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScannerView.setFraming(android.graphics.Rect,android.graphics.RectF,int,int,boolean)",
            "description": {
              "What": "Sets the framing of the scanner view based on the provided parameters.",
              "Parameters": [
                {
                  "name": "frame",
                  "type": "android.graphics.Rect",
                  "description": "The frame rectangle to set for the scanner view."
                },
                {
                  "name": "framePreview",
                  "type": "android.graphics.RectF",
                  "description": "The preview frame rectangle to set for the scanner view."
                },
                {
                  "name": "displayRotation",
                  "type": "int",
                  "description": "The display rotation value."
                },
                {
                  "name": "cameraRotation",
                  "type": "int",
                  "description": "The camera rotation value."
                },
                {
                  "name": "cameraFlip",
                  "type": "boolean",
                  "description": "A flag indicating whether the camera is flipped."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically adjust the framing of the scanner view based on the device's orientation and camera settings.",
              "How-to-use": "Call this method with the necessary parameters to set the framing of the scanner view according to the device's display and camera settings.",
              "How-it-is-done": "The method sets the frame and matrix based on the provided parameters, adjusting for display and camera rotations, and flipping if necessary.",
              "Property": {
                "pre-conditions": [
                  "The frame and framePreview parameters must not be null."
                ],
                "post-conditions": [
                  "The framing of the scanner view is updated according to the provided parameters."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.scan.ScannerView.setIsResult(boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.scan.ScannerView.setIsResult(boolean)",
            "description": {
              "What": "Sets a boolean flag to indicate if the result is a valid result or not.",
              "Parameters": [
                {
                  "name": "isResult",
                  "type": "boolean",
                  "description": "Flag to indicate if the result is a valid result or not."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow the class to differentiate between a valid result and other states.",
              "How-to-use": "Call setIsResult(true) when a valid result is obtained, and setIsResult(false) when the result is not valid.",
              "How-it-is-done": "The method simply assigns the provided boolean value to the 'isResult' field of the class and then calls 'invalidate()' to trigger a redraw.",
              "Property": {
                "pre-conditions": [
                  "The class instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The 'isResult' flag of the class will be set to the provided boolean value."
                ]
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.ui.send": {
    "qualifiedName": "de.schildbach.wallet.ui.send",
    "classes": {
      "de.schildbach.wallet.ui.send.DecodePrivateKeyTask": {
        "qualifiedName": "de.schildbach.wallet.ui.send.DecodePrivateKeyTask",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.send.DecodePrivateKeyTask.de.schildbach.wallet.ui.send.DecodePrivateKeyTask(android.os.Handler)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.DecodePrivateKeyTask.de.schildbach.wallet.ui.send.DecodePrivateKeyTask(android.os.Handler)",
            "description": {
              "What": "Initialize a DecodePrivateKeyTask object with a background handler and a callback handler.",
              "Parameters": [
                {
                  "name": "backgroundHandler",
                  "type": "android.os.Handler",
                  "description": "Handler for background operations."
                }
              ],
              "Returns": "N/A (Constructor)",
              "Why": "To set up the background and callback handlers for the DecodePrivateKeyTask object.",
              "How-to-use": "Create a new instance of DecodePrivateKeyTask by passing a background handler to the constructor.",
              "How-it-is-done": "The constructor initializes the backgroundHandler with the provided parameter and creates a new Handler with the current Looper for the callbackHandler.",
              "Property": {
                "pre-conditions": [
                  "The backgroundHandler parameter must not be null."
                ],
                "post-conditions": [
                  "The backgroundHandler and callbackHandler fields of the DecodePrivateKeyTask object are set to the provided values."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.DecodePrivateKeyTask.decodePrivateKey(org.bitcoinj.crypto.BIP38PrivateKey,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.DecodePrivateKeyTask.decodePrivateKey(org.bitcoinj.crypto.BIP38PrivateKey,java.lang.String)",
            "description": {
              "What": "Decode a BIP38 encrypted private key using a passphrase.",
              "Parameters": [
                {
                  "name": "encryptedKey",
                  "type": "org.bitcoinj.crypto.BIP38PrivateKey",
                  "description": "The BIP38 encrypted private key to decode."
                },
                {
                  "name": "passphrase",
                  "type": "java.lang.String",
                  "description": "The passphrase used to decrypt the encrypted private key."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to decrypt BIP38 encrypted private keys with a passphrase.",
              "How-to-use": "Create an instance of DecodePrivateKeyTask, then call decodePrivateKey method with the encrypted private key and passphrase as parameters. Implement the onSuccess and onBadPassphrase methods to handle the decryption result.",
              "How-it-is-done": "The method runs decryption in a background thread using backgroundHandler. It decrypts the encrypted key with the provided passphrase and posts the result to the callbackHandler. If the passphrase is incorrect, it handles the BadPassphraseException.",
              "Property": {
                "pre-conditions": "The encryptedKey must be a valid BIP38 encrypted private key. The passphrase must be the correct passphrase used to encrypt the private key.",
                "post-conditions": "The onSuccess method is called with the decrypted private key if decryption is successful. The onBadPassphrase method is called if the passphrase is incorrect."
              }
            }
          },
          "de.schildbach.wallet.ui.send.DecodePrivateKeyTask.onBadPassphrase()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.DecodePrivateKeyTask.onBadPassphrase()",
            "description": {
              "What": "This method is called when the passphrase provided is incorrect or invalid.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle the scenario when an incorrect passphrase is entered during decoding of a private key.",
              "How-to-use": "Subclasses of DecodePrivateKeyTask should implement this method to define the behavior when a bad passphrase is encountered.",
              "How-it-is-done": "Subclasses will override this method to provide custom logic, such as displaying an error message or prompting the user to re-enter the passphrase.",
              "Property": {
                "pre-conditions": "This method assumes that a passphrase has been entered for decoding the private key.",
                "post-conditions": "After this method is called, the application should handle the scenario of a bad passphrase appropriately."
              }
            }
          },
          "de.schildbach.wallet.ui.send.DecodePrivateKeyTask.onSuccess(org.bitcoinj.core.ECKey)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.DecodePrivateKeyTask.onSuccess(org.bitcoinj.core.ECKey)",
            "description": {
              "What": "This method is called when a private key is successfully decrypted.",
              "Parameters": [
                {
                  "name": "decryptedKey",
                  "type": "org.bitcoinj.core.ECKey",
                  "description": "The decrypted ECKey object representing the private key."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to handle the decrypted private key after successful decryption.",
              "How-to-use": "Subclasses of DecodePrivateKeyTask should implement this method to define the behavior when a private key is successfully decrypted.",
              "How-it-is-done": "When a private key is successfully decrypted, the onSuccess method is called with the decrypted ECKey object as a parameter. Subclasses can then perform any necessary actions with the decrypted private key.",
              "Property": {
                "pre-conditions": "The private key must be successfully decrypted before this method is called.",
                "post-conditions": "The decrypted private key is passed as a parameter to this method for further processing."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.DeriveKeyTask": {
        "qualifiedName": "de.schildbach.wallet.ui.send.DeriveKeyTask",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.send.DeriveKeyTask.de.schildbach.wallet.ui.send.DeriveKeyTask(android.os.Handler,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.DeriveKeyTask.de.schildbach.wallet.ui.send.DeriveKeyTask(android.os.Handler,int)",
            "description": {
              "What": "Initialize a DeriveKeyTask object with a background handler and scrypt iterations target.",
              "Parameters": [
                {
                  "name": "backgroundHandler",
                  "type": "android.os.Handler",
                  "description": "Handler for background operations."
                },
                {
                  "name": "scryptIterationsTarget",
                  "type": "int",
                  "description": "Target number of scrypt iterations."
                }
              ],
              "Returns": "N/A (Constructor)",
              "Why": "To set up the DeriveKeyTask object with necessary parameters for key derivation.",
              "How-to-use": "Create a new instance of DeriveKeyTask by passing a background handler and scrypt iterations target as parameters.",
              "How-it-is-done": "The constructor initializes the backgroundHandler, callbackHandler, and scryptIterationsTarget fields of the DeriveKeyTask object with the provided parameters.",
              "Property": {
                "pre-conditions": [
                  "The backgroundHandler parameter must not be null.",
                  "The scryptIterationsTarget parameter must be a positive integer."
                ],
                "post-conditions": [
                  "The DeriveKeyTask object is successfully initialized with the provided parameters."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.DeriveKeyTask.deriveKey(org.bitcoinj.wallet.Wallet,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.DeriveKeyTask.deriveKey(org.bitcoinj.wallet.Wallet,java.lang.String)",
            "description": {
              "What": "Derives a key from the wallet using the provided password, potentially upgrading the scrypt iterations and re-encrypting the wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which to derive the key."
                },
                {
                  "name": "password",
                  "type": "java.lang.String",
                  "description": "The password used to derive the key."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To derive a key for encryption purposes and potentially upgrade the scrypt iterations for enhanced security.",
              "How-to-use": "Call this method with a wallet object and a password to derive a key, and implement the onSuccess method to handle the derived key.",
              "How-it-is-done": "The method checks if the wallet is encrypted, derives a key using the provided password, and potentially upgrades the scrypt iterations if needed. It then posts the result to the callback handler for further processing.",
              "Property": {
                "pre-conditions": [
                  "The wallet must be encrypted."
                ],
                "post-conditions": [
                  "The key is derived from the wallet using the provided password.",
                  "If scrypt iterations are upgraded, the wallet is re-encrypted with the new key."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.DeriveKeyTask.onSuccess(org.spongycastle.crypto.params.KeyParameter,boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.DeriveKeyTask.onSuccess(org.spongycastle.crypto.params.KeyParameter,boolean)",
            "description": {
              "What": "The method is used to handle the successful derivation of an encryption key and indicate if it has changed.",
              "Parameters": [
                {
                  "name": "encryptionKey",
                  "type": "org.spongycastle.crypto.params.KeyParameter",
                  "description": "The derived encryption key."
                },
                {
                  "name": "changed",
                  "type": "boolean",
                  "description": "Indicates whether the encryption key has changed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow subclasses to define custom behavior when a key is successfully derived.",
              "How-to-use": "Extend the abstract class DeriveKeyTask and implement the onSuccess method to define the actions to be taken when the encryption key is successfully derived.",
              "How-it-is-done": "When the key derivation is successful, this method is called with the derived encryption key and a boolean flag indicating if the key has changed. Subclasses can then implement custom logic based on these parameters.",
              "Property": {
                "pre-conditions": "The key derivation process must be successful and result in a valid encryption key.",
                "post-conditions": "The onSuccess method should handle the derived encryption key appropriately based on the provided parameters."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.FeeCategory": {
        "qualifiedName": "de.schildbach.wallet.ui.send.FeeCategory",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.ui.send.FeeCategory.de.schildbach.wallet.ui.send.FeeCategory()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.FeeCategory.de.schildbach.wallet.ui.send.FeeCategory()",
            "description": {
              "What": "This method is a constructor for the FeeCategory enum.",
              "Parameters": [],
              "Returns": {
                "Type": "FeeCategory",
                "Description": "The constructed FeeCategory enum instance."
              },
              "Why": "To initialize instances of the FeeCategory enum.",
              "How-to-use": "Simply call the constructor to create new instances of the FeeCategory enum.",
              "How-it-is-done": "The constructor initializes a new instance of the FeeCategory enum without any parameters.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "A new instance of the FeeCategory enum is created."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.MaintenanceDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.de.schildbach.wallet.ui.send.MaintenanceDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.de.schildbach.wallet.ui.send.MaintenanceDialogFragment()",
            "description": {
              "What": "Creates a new instance of MaintenanceDialogFragment.",
              "Parameters": [],
              "Returns": "MaintenanceDialogFragment",
              "Why": "To provide a way to instantiate a new MaintenanceDialogFragment object.",
              "How-to-use": "Simply call the constructor to create a new instance of MaintenanceDialogFragment.",
              "How-it-is-done": "The constructor initializes a new instance of MaintenanceDialogFragment without any parameters.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of MaintenanceDialogFragment is created."
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.delayedDismiss()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.delayedDismiss()",
            "description": {
              "What": "Dismisses the dialog after a delay of 2000 milliseconds.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To automatically dismiss the dialog after a certain delay to provide a better user experience.",
              "How-to-use": "Call this method when you want to dismiss the dialog after a delay of 2000 milliseconds.",
              "How-it-is-done": "The method uses a Handler to post a delayed Runnable that calls the dismiss() method of the dialog after 2000 milliseconds.",
              "Property": {
                "pre-conditions": [
                  "The dialog must be shown before calling this method."
                ],
                "post-conditions": [
                  "The dialog will be dismissed after a delay of 2000 milliseconds."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.determineMaintenanceTransactions()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.determineMaintenanceTransactions()",
            "description": {
              "What": "This method determines maintenance transactions for the wallet.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "List<org.bitcoinj.core.Transaction>",
                "description": "A list of maintenance transactions for the wallet."
              },
              "Why": "To handle maintenance tasks for the wallet and potentially upgrade it.",
              "How-to-use": "Simply call determineMaintenanceTransactions() method to retrieve a list of maintenance transactions for the wallet.",
              "How-it-is-done": "The method calls wallet.doMaintenance() with null parameters and waits for the result using a ListenableFuture. It handles exceptions and returns the list of transactions or an empty list.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method returns a list of maintenance transactions or an empty list."
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.doMaintenance(org.spongycastle.crypto.params.KeyParameter)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.doMaintenance(org.spongycastle.crypto.params.KeyParameter)",
            "description": {
              "What": "Performs maintenance on the wallet with the provided encryption key.",
              "Parameters": [
                {
                  "name": "encryptionKey",
                  "type": "org.spongycastle.crypto.params.KeyParameter",
                  "description": "The encryption key used for wallet maintenance."
                }
              ],
              "Returns": "void",
              "Why": "To allow for wallet maintenance operations to be performed securely.",
              "How-to-use": "Call the method with the encryption key parameter to initiate wallet maintenance.",
              "How-it-is-done": "The method posts a Runnable to a background handler, propagates the BitcoinJ context, performs wallet maintenance using the encryption key, and updates the UI state accordingly.",
              "Property": {
                "pre-conditions": "The encryption key must not be null.",
                "post-conditions": "The wallet maintenance operation is completed, and the UI state is updated."
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.handleGo()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.handleGo()",
            "description": {
              "What": "Handles the process of decrypting the wallet and performing maintenance tasks.",
              "Parameters": [
                {
                  "name": "backgroundHandler",
                  "type": "Handler",
                  "description": "Handler for background tasks."
                },
                {
                  "name": "application",
                  "type": "WalletApplication",
                  "description": "Application instance for wallet operations."
                },
                {
                  "name": "activity",
                  "type": "Activity",
                  "description": "Current activity context."
                },
                {
                  "name": "wallet",
                  "type": "Wallet",
                  "description": "Wallet instance for maintenance."
                },
                {
                  "name": "passwordView",
                  "type": "EditText",
                  "description": "View for entering password."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the decryption and maintenance process of the wallet securely.",
              "How-to-use": "Call this method when the user initiates maintenance tasks on the wallet, providing the necessary parameters.",
              "How-it-is-done": "The method sets the state to decrypting, updates the view, derives the encryption key if the wallet is encrypted, performs maintenance tasks, and updates the view accordingly.",
              "Property": {
                "pre-conditions": [
                  "The wallet instance must be initialized and valid.",
                  "The passwordView must be initialized and accessible for user input."
                ],
                "post-conditions": [
                  "The wallet maintenance tasks are completed successfully.",
                  "The view is updated to reflect the current state."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Initialize the activity, application, and wallet variables of the MaintenanceDialogFragment.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the fragment."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the necessary variables for the fragment to interact with the wallet application.",
              "How-to-use": "Call this method in the onAttach() lifecycle method of the MaintenanceDialogFragment to initialize the activity, application, and wallet variables.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then casts the context to AbstractWalletActivity to access the wallet application and wallet.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The activity, application, and wallet variables of the MaintenanceDialogFragment are initialized."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize background thread and handler for background processing.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": "void",
              "Why": "To set up a background thread and handler for performing tasks that should not block the main UI thread.",
              "How-to-use": "Call this method in the onCreate() lifecycle method of a Fragment to initialize a background thread and handler for background processing.",
              "How-it-is-done": "The method creates a new HandlerThread with a specified name and priority, starts the thread, and then initializes a new Handler with the thread's looper.",
              "Property": {
                "pre-conditions": [
                  "The method should be called within the onCreate() method of a Fragment."
                ],
                "post-conditions": [
                  "A background thread and handler are successfully initialized for background processing."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog for maintenance operations with information on transaction values and fees.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "A dialog for maintenance operations."
              },
              "Why": "To provide users with a dialog for performing maintenance operations on transactions.",
              "How-to-use": "Call onCreateDialog method with the saved instance state to create a dialog for maintenance operations.",
              "How-it-is-done": "The method inflates a layout for the dialog, calculates transaction values and fees, sets up UI elements, and handles button clicks for maintenance or dismissal.",
              "Property": {
                "pre-conditions": "The activity and application must be initialized before calling this method.",
                "post-conditions": "A dialog for maintenance operations is created and displayed to the user."
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onDestroy()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onDestroy()",
            "description": {
              "What": "This method quits the background thread looper before calling the superclass's onDestroy method.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure proper cleanup and termination of resources associated with the background thread before the fragment is destroyed.",
              "How-to-use": "Simply call this method when the fragment is being destroyed to properly clean up the background thread resources.",
              "How-it-is-done": "The method accesses the background thread's looper and calls the quit method to terminate the looper. Then, it calls the superclass's onDestroy method to complete the destruction process.",
              "Property": {
                "pre-conditions": [
                  "The backgroundThread object must be initialized and accessible within the class."
                ],
                "post-conditions": [
                  "The background thread looper is terminated, ensuring proper cleanup of resources."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onDismiss(android.content.DialogInterface)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onDismiss(android.content.DialogInterface)",
            "description": {
              "What": "This method is called when the dialog is dismissed, setting the dialog reference to null and wiping passwords.",
              "Parameters": [
                {
                  "name": "dialog",
                  "type": "android.content.DialogInterface",
                  "description": "The dialog that is being dismissed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To perform necessary clean-up actions when the dialog is dismissed.",
              "How-to-use": "Override this method in a class that extends MaintenanceDialogFragment to customize behavior when the dialog is dismissed.",
              "How-it-is-done": "The method sets the dialog reference to null, calls the wipePasswords() method, and then calls the super.onDismiss(dialog) method.",
              "Property": {
                "pre-conditions": "The dialog reference should not be null.",
                "post-conditions": "The dialog reference is set to null and passwords are wiped."
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onResume()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.onResume()",
            "description": {
              "method": {
                "What": "Updates the view of the MaintenanceDialogFragment.",
                "Parameters": [
                  {
                    "name": "N/A",
                    "type": "N/A",
                    "description": "No parameters are passed to the method."
                  }
                ],
                "Returns": {
                  "type": "void",
                  "description": "This method does not return any value."
                },
                "Why": "To ensure that the view is updated when the fragment is resumed.",
                "How-to-use": "Simply call onResume() on an instance of MaintenanceDialogFragment to update its view.",
                "How-it-is-done": "The method calls the superclass's onResume() method to handle any necessary operations, then calls updateView() to update the view of the fragment.",
                "Property": {
                  "pre-conditions": "The fragment must be in a resumed state.",
                  "post-conditions": "The view of the fragment is updated."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.show(android.support.v4.app.FragmentManager)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.show(android.support.v4.app.FragmentManager)",
            "description": {
              "What": "This method shows a maintenance dialog fragment if it is not already shown in the specified FragmentManager.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager where the maintenance dialog fragment should be shown."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To display a maintenance dialog fragment to the user when needed.",
              "How-to-use": "Call this method with the FragmentManager instance as the parameter to show the maintenance dialog fragment.",
              "How-it-is-done": "The method first checks if the maintenance dialog fragment is already shown in the FragmentManager. If not, it creates a new instance of the MaintenanceDialogFragment class and adds it to the FragmentManager using a transaction.",
              "Property": {
                "pre-conditions": "The FragmentManager instance (fm) should not be null.",
                "post-conditions": "After calling this method, the maintenance dialog fragment may be displayed in the specified FragmentManager."
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.updateView()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.updateView()",
            "description": {
              "What": "Updates the view of the MaintenanceDialogFragment based on the current state and wallet encryption status.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To dynamically update the UI elements based on the state of the MaintenanceDialogFragment and the encryption status of the wallet.",
              "How-to-use": "Call this method whenever the view of the MaintenanceDialogFragment needs to be updated, typically after changes in the state or wallet encryption status.",
              "How-it-is-done": "The method checks if the dialog is not null, determines if a password is needed based on wallet encryption, and updates the visibility and text of UI elements accordingly based on the current state.",
              "Property": {
                "Pre-conditions": [
                  "The dialog instance must not be null."
                ],
                "Post-conditions": [
                  "The view of the MaintenanceDialogFragment is updated based on the current state and wallet encryption status."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.wipePasswords()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment.wipePasswords()",
            "description": {
              "What": "This method clears the text in a password view field.",
              "Parameters": [
                {
                  "name": "passwordView",
                  "type": "TextView",
                  "description": "The TextView representing the password field to be cleared."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow users to easily clear any entered passwords in the password field.",
              "How-to-use": "Call this method passing the TextView object that represents the password field that needs to be cleared.",
              "How-it-is-done": "The method sets the text of the passwordView TextView to null, effectively clearing any entered passwords.",
              "Property": {
                "pre-conditions": [
                  "The passwordView parameter must not be null."
                ],
                "post-conditions": [
                  "The text in the password field represented by passwordView will be cleared."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.MaintenanceDialogFragment$State": {
        "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment$State",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.ui.send.MaintenanceDialogFragment$State.de.schildbach.wallet.ui.send.MaintenanceDialogFragment$State()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.MaintenanceDialogFragment$State.de.schildbach.wallet.ui.send.MaintenanceDialogFragment$State()",
            "description": {
              "method": {
                "What": "Initialize a new instance of the State enum.",
                "Parameters": [],
                "Returns": "State",
                "Why": "To provide a default constructor for the State enum.",
                "How-to-use": "Simply call State() to create a new instance of the State enum.",
                "How-it-is-done": "The method does not take any parameters and simply initializes a new instance of the State enum.",
                "Property": {
                  "pre-conditions": [],
                  "post-conditions": [
                    "A new instance of the State enum is created."
                  ]
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.de.schildbach.wallet.ui.send.RaiseFeeDialogFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.de.schildbach.wallet.ui.send.RaiseFeeDialogFragment()",
            "description": {
              "What": "Initialize a new instance of RaiseFeeDialogFragment.",
              "Parameters": [
                {
                  "name": "",
                  "type": "",
                  "description": ""
                }
              ],
              "Returns": {
                "type": "RaiseFeeDialogFragment",
                "description": "A new instance of RaiseFeeDialogFragment."
              },
              "Why": "To provide a way to create a new instance of RaiseFeeDialogFragment for use in the application.",
              "How-to-use": "To use this method, simply call it to create a new instance of RaiseFeeDialogFragment.",
              "How-it-is-done": "The method initializes a new instance of RaiseFeeDialogFragment without any parameters or specific setup.",
              "Property": {
                "pre-conditions": "No specific pre-conditions are required for calling this method.",
                "post-conditions": "The method will return a new instance of RaiseFeeDialogFragment."
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.doRaiseFee(org.spongycastle.crypto.params.KeyParameter)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.doRaiseFee(org.spongycastle.crypto.params.KeyParameter)",
            "description": {
              "What": "This method raises the fee of a Bitcoin transaction by creating a new transaction with a higher fee and broadcasting it to the network.",
              "Parameters": [
                {
                  "name": "encryptionKey",
                  "type": "org.spongycastle.crypto.params.KeyParameter",
                  "description": "The encryption key used to sign the transaction."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return any value."
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.feeCanLikelyBeRaised(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.feeCanLikelyBeRaised(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction)",
            "description": {
              "What": "Checks if the fee for a transaction can likely be raised.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet object to check for spendable outputs."
                },
                {
                  "name": "transaction",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction object to check for depth and pay-to-many status."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the fee can likely be raised, false otherwise."
              },
              "Why": "To determine if the fee for a transaction can be raised before it gets confirmed in a block.",
              "How-to-use": "Call this method with a wallet and a transaction object to check if the fee can likely be raised before confirmation.",
              "How-it-is-done": "The method first checks if the transaction has any confirmations, then if it is a pay-to-many transaction, and finally if there are spendable outputs in the wallet for the transaction with the default transaction fee.",
              "Property": {
                "pre-conditions": [
                  "The wallet and transaction objects must not be null."
                ],
                "post-conditions": [
                  "The method returns true if the fee can likely be raised, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.findSpendableOutput(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.findSpendableOutput(org.bitcoinj.wallet.Wallet,org.bitcoinj.core.Transaction,org.bitcoinj.core.Coin)",
            "description": {
              "What": "This method finds a spendable output in a given transaction that belongs to the wallet and has a value greater than a specified minimum value.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet to check for ownership of the output."
                },
                {
                  "name": "transaction",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction to search for spendable outputs."
                },
                {
                  "name": "minimumOutputValue",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The minimum value that the output must have to be considered spendable."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.core.TransactionOutput",
                "description": "The first spendable output found in the transaction, or null if none is found."
              },
              "Why": "To provide a method for finding a suitable output for spending in a transaction within a wallet.",
              "How-to-use": "Call this method with a wallet, transaction, and minimum output value to find a spendable output for further processing.",
              "How-it-is-done": "Iterate through the outputs of the transaction, checking if each output belongs to the wallet, is available for spending, and has a value greater than the minimum specified. Return the first output that meets these criteria.",
              "Property": {
                "pre-conditions": [
                  "The wallet and transaction parameters must not be null.",
                  "The minimumOutputValue must be a non-null positive value."
                ],
                "post-conditions": [
                  "The method returns null if no suitable spendable output is found in the transaction."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.handleGo()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.handleGo()",
            "description": {
              "What": "Handles the action of raising the fee for a transaction in the wallet.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are passed to the method."
                },
                {
                  "name": "state",
                  "type": "RaiseFeeDialogFragment.State",
                  "description": "The state of the RaiseFeeDialogFragment."
                },
                {
                  "name": "wallet",
                  "type": "Wallet",
                  "description": "The wallet object for which the fee is being raised."
                },
                {
                  "name": "backgroundHandler",
                  "type": "Handler",
                  "description": "Handler for background tasks."
                },
                {
                  "name": "application",
                  "type": "WalletApplication",
                  "description": "The application object for the wallet."
                },
                {
                  "name": "activity",
                  "type": "Activity",
                  "description": "The current activity."
                },
                {
                  "name": "passwordView",
                  "type": "EditText",
                  "description": "The EditText view for entering the password."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "The method does not return any value."
              },
              "Why": "To handle the process of raising the fee for a transaction in the wallet, including decryption if the wallet is encrypted.",
              "How-to-use": "Call handleGo() method when the user initiates the action to raise the fee for a transaction in the wallet.",
              "How-it-is-done": "The method sets the state to DECRYPTING, updates the view, checks if the wallet is encrypted, derives the encryption key if needed, performs the fee raise operation, and updates the view again.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must be initialized and not null.",
                  "The passwordView must be initialized and not null."
                ],
                "post-conditions": [
                  "The fee for the transaction in the wallet is raised successfully.",
                  "The view is updated to reflect the changes."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.instance(org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.instance(org.bitcoinj.core.Transaction)",
            "description": {
              "What": "Creates an instance of RaiseFeeDialogFragment with a given Transaction object as an argument.",
              "Parameters": [
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The Transaction object to be passed as an argument."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment",
                "description": "An instance of RaiseFeeDialogFragment initialized with the provided Transaction object."
              },
              "Why": "To create a RaiseFeeDialogFragment instance with the necessary arguments for further processing or display.",
              "How-to-use": "Call this static method with a Transaction object as the argument to get an instance of RaiseFeeDialogFragment ready for use.",
              "How-it-is-done": "The method creates a new RaiseFeeDialogFragment instance, creates a Bundle to store the Transaction object's hash bytes, sets the arguments for the fragment, and returns the initialized fragment.",
              "Property": {
                "pre-conditions": [
                  "The Transaction object (tx) must not be null."
                ],
                "post-conditions": [
                  "The returned RaiseFeeDialogFragment instance will have the Transaction object's hash bytes set as arguments."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Initialize the RaiseFeeDialogFragment by setting the activity, application, config, and wallet fields.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to initialize the RaiseFeeDialogFragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the necessary fields for the RaiseFeeDialogFragment to interact with the wallet application.",
              "How-to-use": "Call this method when attaching the RaiseFeeDialogFragment to a context, typically in the onAttach method of a Fragment.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then sets the activity, application, config, and wallet fields based on the provided context.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "The activity, application, config, and wallet fields of the RaiseFeeDialogFragment are properly initialized."
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "This method initializes the RaiseFeeDialogFragment by setting up the ViewModel, observing dynamic fees changes, retrieving transaction data, and starting a background thread.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the necessary components and data for the RaiseFeeDialogFragment to function properly.",
              "How-to-use": "Call this method in the onCreate() method of RaiseFeeDialogFragment passing the savedInstanceState parameter.",
              "How-it-is-done": "The method initializes the ViewModel, observes dynamic fee changes, retrieves transaction data from arguments, and starts a background thread for processing.",
              "Property": {
                "pre-conditions": [
                  "The savedInstanceState parameter must not be null."
                ],
                "post-conditions": [
                  "The ViewModel is initialized and set up.",
                  "Dynamic fee changes are observed.",
                  "Transaction data is retrieved and processed.",
                  "A background thread is started for further processing."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.onCreateDialog(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.onCreateDialog(android.os.Bundle)",
            "description": {
              "What": "Creates a dialog for raising the fee in a wallet transaction.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the dialog."
                }
              ],
              "Returns": {
                "type": "android.app.Dialog",
                "description": "The dialog for raising the fee in a wallet transaction."
              },
              "Why": "To provide a user interface for the user to raise the fee of a wallet transaction.",
              "How-to-use": "Call onCreateDialog method with the saved instance state as a parameter to create the dialog for raising the fee in a wallet transaction.",
              "How-it-is-done": "The method inflates a layout for the dialog, sets up the dialog builder with title, view, buttons, and listeners, and returns the created dialog.",
              "Property": {
                "pre-conditions": [
                  "The activity context must be set before calling this method."
                ],
                "post-conditions": [
                  "A dialog for raising the fee in a wallet transaction is created and returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.onDestroy()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.onDestroy()",
            "description": {
              "What": "This method quits the background thread looper and calls the superclass' onDestroy method.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To properly clean up resources and handle the destruction of the dialog fragment.",
              "How-to-use": "Simply call this method when the dialog fragment is being destroyed to ensure proper cleanup of resources.",
              "How-it-is-done": "The method accesses the background thread's looper and calls its quit method to stop the thread, then calls the superclass' onDestroy method to handle any additional cleanup.",
              "Property": {
                "pre-conditions": [
                  "The backgroundThread object must be initialized and have a valid looper."
                ],
                "post-conditions": [
                  "The background thread looper is stopped and resources are cleaned up."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.onDismiss(android.content.DialogInterface)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.onDismiss(android.content.DialogInterface)",
            "description": {
              "What": "This method is called when the dialog is dismissed, setting the dialog reference to null and wiping passwords.",
              "Parameters": [
                {
                  "name": "dialog",
                  "type": "android.content.DialogInterface",
                  "description": "The dialog that is being dismissed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To perform necessary clean-up actions when the dialog is dismissed, such as wiping passwords to enhance security.",
              "How-to-use": "Override this method in a class that extends RaiseFeeDialogFragment to customize behavior when the dialog is dismissed.",
              "How-it-is-done": "The method sets the dialog reference to null, calls the wipePasswords() method, and then calls the super.onDismiss(dialog) to handle any additional clean-up actions.",
              "Property": {
                "pre-conditions": [
                  "The dialog reference should not be null."
                ],
                "post-conditions": [
                  "The dialog reference is set to null.",
                  "Passwords are wiped for security purposes."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.show(android.support.v4.app.FragmentManager,org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.show(android.support.v4.app.FragmentManager,org.bitcoinj.core.Transaction)",
            "description": {
              "What": "Show a dialog fragment for raising the fee of a Bitcoin transaction.",
              "Parameters": [
                {
                  "name": "fm",
                  "type": "android.support.v4.app.FragmentManager",
                  "description": "The FragmentManager to handle the dialog fragment."
                },
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The Bitcoin transaction for which the fee needs to be raised."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to display a dialog for raising the fee of a Bitcoin transaction.",
              "How-to-use": "Call this static method with the FragmentManager and the Bitcoin transaction as parameters to display the RaiseFeeDialogFragment.",
              "How-it-is-done": "The method creates a new instance of RaiseFeeDialogFragment with the provided Bitcoin transaction, then shows this fragment using the given FragmentManager.",
              "Property": {
                "pre-conditions": [
                  "The FragmentManager (fm) must not be null.",
                  "The Bitcoin transaction (tx) must not be null."
                ],
                "post-conditions": [
                  "A dialog fragment for raising the fee of the Bitcoin transaction is displayed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.updateView()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.updateView()",
            "description": {
              "What": "Updates the view of the RaiseFeeDialogFragment based on the current state and fee information.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                },
                "Returns"
              ],
              "type": "void",
              "description": "This method does not return any value."
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.wipePasswords()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment.wipePasswords()",
            "description": {
              "What": "This method clears the text in a password view field.",
              "Parameters": [
                {
                  "name": "passwordView",
                  "type": "TextView",
                  "description": "The TextView representing the password field to be cleared."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow users to easily clear any entered passwords in the password field.",
              "How-to-use": "Call this method passing the TextView object that represents the password field that needs to be cleared.",
              "How-it-is-done": "The method sets the text of the passwordView TextView to null, effectively clearing any entered passwords.",
              "Property": {
                "pre-conditions": [
                  "The passwordView parameter must not be null."
                ],
                "post-conditions": [
                  "The text in the passwordView TextView will be cleared."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$State": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$State",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$State.de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$State()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$State.de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$State()",
            "description": {
              "What": "Initialize a new instance of the State enum.",
              "Parameters": [],
              "Returns": {
                "Type": "State",
                "Description": "A new instance of the State enum."
              },
              "Why": "To provide a default constructor for the State enum.",
              "How-to-use": "Simply create a new instance of the State enum by calling 'new State()'.",
              "How-it-is-done": "The method defines a default constructor for the State enum, which does not take any parameters and simply initializes a new instance of the enum.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of the State enum is created."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$ViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$ViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$ViewModel.de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$ViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$ViewModel.de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$ViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for the RaiseFeeDialogFragment with the application context.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to create the ViewModel."
                }
              ],
              "Returns": {
                "type": "RaiseFeeDialogFragment$ViewModel",
                "description": "A ViewModel instance for the RaiseFeeDialogFragment."
              },
              "Why": "To provide a ViewModel for the RaiseFeeDialogFragment that can access the application context.",
              "How-to-use": "Create a new instance of RaiseFeeDialogFragment$ViewModel by passing an android.app.Application as the parameter.",
              "How-it-is-done": "The ViewModel constructor initializes the ViewModel by casting the application context to WalletApplication and storing it in a class variable.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The ViewModel is successfully initialized with the application context."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$ViewModel.getDynamicFees()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RaiseFeeDialogFragment$ViewModel.getDynamicFees()",
            "description": {
              "What": "This method returns a DynamicFeeLiveData object that provides dynamic fee data for the application.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the DynamicFeeLiveData object."
                }
              ],
              "Returns": {
                "type": "DynamicFeeLiveData",
                "description": "A DynamicFeeLiveData object that provides dynamic fee data for the application."
              },
              "Why": "To provide access to dynamic fee data for the application's use in fee calculations or display.",
              "How-to-use": "To get dynamic fee data, create an instance of RaiseFeeDialogFragment$ViewModel and call getDynamicFees() method with the application context as a parameter.",
              "How-it-is-done": "The method checks if the dynamicFees object is null, and if so, creates a new DynamicFeeLiveData object with the provided application context. It then returns the dynamicFees object.",
              "Property": {
                "pre-conditions": "The application context must be valid and not null.",
                "post-conditions": "The method returns a non-null DynamicFeeLiveData object that can be used to access dynamic fee data."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RequestPaymentRequestTask": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.de.schildbach.wallet.ui.send.RequestPaymentRequestTask(android.os.Handler,de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.de.schildbach.wallet.ui.send.RequestPaymentRequestTask(android.os.Handler,de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback)",
            "description": {
              "What": "Initialize a new instance of RequestPaymentRequestTask with background handler and result callback.",
              "Parameters": [
                {
                  "name": "backgroundHandler",
                  "type": "android.os.Handler",
                  "description": "Handler for background operations."
                },
                {
                  "name": "resultCallback",
                  "type": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.ResultCallback",
                  "description": "Callback for handling task results."
                }
              ],
              "Returns": {
                "type": "RequestPaymentRequestTask",
                "description": "A new instance of RequestPaymentRequestTask."
              },
              "Why": "To provide a way to create and handle payment request tasks in the background.",
              "How-to-use": "Create a new instance of RequestPaymentRequestTask by passing a background handler and a result callback, then use the instance to execute payment request tasks.",
              "How-it-is-done": "The method initializes the backgroundHandler, creates a new Handler for the callbackHandler using the current Looper, and sets the resultCallback for handling task results.",
              "Property": {
                "pre-conditions": "The backgroundHandler and resultCallback parameters must not be null.",
                "post-conditions": "A new instance of RequestPaymentRequestTask is successfully initialized with the provided background handler and result callback."
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.onFail(int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.onFail(int,java.lang.Object[])",
            "description": {
              "What": "Posts a runnable to the callback handler to notify the result callback of a failure with a message resource ID and arguments.",
              "Parameters": [
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "The resource ID of the message to be displayed for the failure."
                },
                {
                  "name": "messageArgs",
                  "type": "Object[]",
                  "description": "Arguments to be used in formatting the message."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle and notify the result callback of a failure in a separate thread to avoid blocking the main thread.",
              "How-to-use": "Extend the abstract class and implement the onFail method to handle failure scenarios with the provided message resource ID and arguments.",
              "How-it-is-done": "The method creates a new Runnable that calls the onFail method of the result callback with the provided message resource ID and arguments, then posts this Runnable to the callback handler for execution.",
              "Property": {
                "pre-conditions": [
                  "The callbackHandler must be initialized and set before calling this method."
                ],
                "post-conditions": [
                  "The resultCallback's onFail method will be called with the specified message resource ID and arguments in a separate thread."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.onPaymentIntent(de.schildbach.wallet.data.PaymentIntent)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.onPaymentIntent(de.schildbach.wallet.data.PaymentIntent)",
            "description": {
              "What": "Posts a payment intent to the callback handler for further processing.",
              "Parameters": [
                {
                  "name": "paymentIntent",
                  "type": "de.schildbach.wallet.data.PaymentIntent",
                  "description": "The payment intent to be processed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle payment intents asynchronously and ensure they are processed on the callback handler thread.",
              "How-to-use": "Extend the RequestPaymentRequestTask class and implement the onPaymentIntent method to handle payment intents.",
              "How-it-is-done": "The method creates a new Runnable that calls the onPaymentIntent method of the resultCallback on the callback handler thread.",
              "Property": {
                "pre-conditions": "The paymentIntent parameter must not be null.",
                "post-conditions": "The paymentIntent is processed on the callback handler thread."
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.requestPaymentRequest(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.requestPaymentRequest(java.lang.String)",
            "description": {
              "What": "This method is used to request a payment request from a specified URL.",
              "Parameters": [
                {
                  "name": "url",
                  "type": "java.lang.String",
                  "description": "The URL from which to request the payment request."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow subclasses to implement the logic for requesting a payment request from a URL.",
              "How-to-use": "To use this method, create a subclass of RequestPaymentRequestTask and implement the requestPaymentRequest method by specifying the URL from which to request the payment request.",
              "How-it-is-done": "Within the implementation of the requestPaymentRequest method in a subclass, the specified URL is used to make a request to the server to retrieve the payment request.",
              "Property": {
                "pre-conditions": [
                  "The URL parameter must not be null."
                ],
                "post-conditions": [
                  "The payment request is successfully retrieved from the specified URL."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$BluetoothRequestTask": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$BluetoothRequestTask",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$BluetoothRequestTask.de.schildbach.wallet.ui.send.RequestPaymentRequestTask$BluetoothRequestTask(android.os.Handler,de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback,android.bluetooth.BluetoothAdapter)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$BluetoothRequestTask.de.schildbach.wallet.ui.send.RequestPaymentRequestTask$BluetoothRequestTask(android.os.Handler,de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback,android.bluetooth.BluetoothAdapter)",
            "description": {
              "What": "Initialize a BluetoothRequestTask with a background handler, result callback, and Bluetooth adapter.",
              "Parameters": [
                {
                  "name": "backgroundHandler",
                  "type": "android.os.Handler",
                  "description": "Handler for background tasks."
                },
                {
                  "name": "resultCallback",
                  "type": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.ResultCallback",
                  "description": "Callback for task results."
                },
                {
                  "name": "bluetoothAdapter",
                  "type": "android.bluetooth.BluetoothAdapter",
                  "description": "Bluetooth adapter for communication."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.BluetoothRequestTask",
                "description": "Constructed BluetoothRequestTask object."
              },
              "Why": "To initialize a BluetoothRequestTask for handling Bluetooth communication in the payment request process.",
              "How-to-use": "Create a new instance of BluetoothRequestTask by passing a background handler, result callback, and Bluetooth adapter as parameters.",
              "How-it-is-done": "The method assigns the provided background handler, result callback, and Bluetooth adapter to the corresponding class variables of the BluetoothRequestTask.",
              "Property": {
                "pre-conditions": [
                  "The backgroundHandler, resultCallback, and bluetoothAdapter parameters must not be null."
                ],
                "post-conditions": [
                  "A new BluetoothRequestTask object is created with the provided parameters assigned to its internal variables."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$BluetoothRequestTask.requestPaymentRequest(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$BluetoothRequestTask.requestPaymentRequest(java.lang.String)",
            "description": {
              "What": "This method requests a payment request via Bluetooth from a specified URL.",
              "Parameters": [
                {
                  "name": "url",
                  "type": "java.lang.String",
                  "description": "The URL from which the payment request is requested."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to enable the retrieval of payment requests via Bluetooth for further processing.",
              "How-to-use": "Call this method with the URL of the payment request to initiate the Bluetooth communication and retrieve the payment request.",
              "How-it-is-done": "The method uses a background handler to execute the Bluetooth communication process, including connecting to the specified device, sending a request, and handling the response.",
              "Property": {
                "pre-conditions": [
                  "The Bluetooth adapter must be enabled and available for communication."
                ],
                "post-conditions": [
                  "The method will either successfully retrieve and process the payment request or handle any errors that occur during the Bluetooth communication."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$HttpRequestTask": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$HttpRequestTask",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$HttpRequestTask.de.schildbach.wallet.ui.send.RequestPaymentRequestTask$HttpRequestTask(android.os.Handler,de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$HttpRequestTask.de.schildbach.wallet.ui.send.RequestPaymentRequestTask$HttpRequestTask(android.os.Handler,de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback,java.lang.String)",
            "description": {
              "What": "Initialize a new instance of HttpRequestTask with a background handler, result callback, and optional user agent string.",
              "Parameters": [
                {
                  "name": "backgroundHandler",
                  "type": "android.os.Handler",
                  "description": "Handler for background processing."
                },
                {
                  "name": "resultCallback",
                  "type": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask.ResultCallback",
                  "description": "Callback for handling the result of the task."
                },
                {
                  "name": "userAgent",
                  "type": "java.lang.String",
                  "description": "Optional user agent string for HTTP requests."
                }
              ],
              "Returns": {
                "type": "HttpRequestTask",
                "description": "A new instance of HttpRequestTask."
              },
              "Why": "To provide a way to create HttpRequestTask instances with necessary parameters for handling HTTP requests.",
              "How-to-use": "Create a new instance of HttpRequestTask by passing a background handler, result callback, and optional user agent string to the constructor.",
              "How-it-is-done": "The constructor initializes the HttpRequestTask instance by assigning the provided background handler, result callback, and user agent string to their respective fields.",
              "Property": {
                "pre-conditions": "The backgroundHandler and resultCallback parameters must not be null.",
                "post-conditions": "A new instance of HttpRequestTask is created with the specified parameters."
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$HttpRequestTask.requestPaymentRequest(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$HttpRequestTask.requestPaymentRequest(java.lang.String)",
            "description": {
              "What": "This method sends a HTTP request to a specified URL to request a payment request and processes the response.",
              "Parameters": [
                {
                  "name": "url",
                  "type": "java.lang.String",
                  "description": "The URL to send the HTTP request to for the payment request."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle the communication with a server to request a payment request for a transaction.",
              "How-to-use": "Call this method with the URL of the server endpoint that provides the payment request. The method will asynchronously send the HTTP request and process the response.",
              "How-it-is-done": "The method uses an OkHttpClient to create a request with the specified URL, headers, and cache control. It then executes the call, processes the response, and parses the payment intent from the response body.",
              "Property": {
                "pre-conditions": [
                  "The URL parameter must not be null."
                ],
                "post-conditions": [
                  "The payment intent is processed and handled accordingly based on the response from the server."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback",
        "kind": "interface",
        "methods": {
          "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback.onFail(int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback.onFail(int,java.lang.Object[])",
            "description": {
              "What": "This method is called when the payment request task fails, providing a message resource ID and optional message arguments.",
              "Parameters": [
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "The resource ID of the message to be displayed."
                },
                {
                  "name": "messageArgs",
                  "type": "Object[]",
                  "description": "Optional arguments to be used in formatting the message."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle and display error messages when the payment request task fails.",
              "How-to-use": "Implement this method in a class that implements the ResultCallback interface to handle failure scenarios of the payment request task.",
              "How-it-is-done": "When the payment request task fails, this method is called with the message resource ID and optional arguments, which can be used to display an appropriate error message to the user.",
              "Property": {
                "pre-conditions": [
                  "The implementing class must implement the ResultCallback interface."
                ],
                "post-conditions": [
                  "An error message corresponding to the message resource ID should be displayed to the user."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback.onPaymentIntent(de.schildbach.wallet.data.PaymentIntent)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestPaymentRequestTask$ResultCallback.onPaymentIntent(de.schildbach.wallet.data.PaymentIntent)",
            "description": {
              "What": "This method is used to handle a payment intent received as a result of a payment request task.",
              "Parameters": [
                {
                  "name": "paymentIntent",
                  "type": "de.schildbach.wallet.data.PaymentIntent",
                  "description": "The payment intent object containing information about the payment request."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a callback mechanism for handling payment intents in the context of a payment request task.",
              "How-to-use": "Implement this method in a class that implements the ResultCallback interface to handle the payment intent received during a payment request task.",
              "How-it-is-done": "When this method is called, the implementation should process the payment intent object to handle the payment request accordingly.",
              "Property": {
                "pre-conditions": [
                  "The payment intent object passed as a parameter should not be null."
                ],
                "post-conditions": [
                  "After this method is called, the payment intent should be processed and the payment request task should proceed accordingly."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RequestWalletBalanceTask": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.de.schildbach.wallet.ui.send.RequestWalletBalanceTask(android.os.Handler,de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.de.schildbach.wallet.ui.send.RequestWalletBalanceTask(android.os.Handler,de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback)",
            "description": {
              "What": "Initialize a RequestWalletBalanceTask object with a background handler and a result callback.",
              "Parameters": [
                {
                  "name": "backgroundHandler",
                  "type": "android.os.Handler",
                  "description": "Handler for background processing."
                },
                {
                  "name": "resultCallback",
                  "type": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.ResultCallback",
                  "description": "Callback for handling the result of the task."
                }
              ],
              "Returns": {
                "type": "RequestWalletBalanceTask",
                "description": "A new instance of RequestWalletBalanceTask."
              },
              "Why": "To provide a way to asynchronously request the wallet balance and handle the result.",
              "How-to-use": "Create a new RequestWalletBalanceTask object by passing a background handler and a result callback, then execute the task to retrieve the wallet balance asynchronously.",
              "How-it-is-done": "The method initializes the backgroundHandler, creates a new handler for the current looper, and sets the resultCallback for handling the task result.",
              "Property": {
                "pre-conditions": "The backgroundHandler and resultCallback parameters must not be null.",
                "post-conditions": "A new RequestWalletBalanceTask object is created with the specified backgroundHandler and resultCallback."
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.loadElectrumServers(java.io.InputStream)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.loadElectrumServers(java.io.InputStream)",
            "description": {
              "What": "This method loads a list of Electrum servers from an input stream.",
              "Parameters": [
                {
                  "name": "is",
                  "type": "java.io.InputStream",
                  "description": "The input stream containing the Electrum server information."
                }
              ],
              "Returns": {
                "type": "java.util.List<de.schildbach.wallet.ui.send.RequestWalletBalanceTask.ElectrumServer>",
                "description": "A list of Electrum servers loaded from the input stream."
              },
              "Why": "To provide a way to load Electrum servers from a file or resource for use in the application.",
              "How-to-use": "Call this method with an InputStream containing the Electrum server information to get a list of ElectrumServer objects.",
              "How-it-is-done": "The method reads lines from the input stream, parses them to extract server information, and creates ElectrumServer objects with the extracted data.",
              "Property": {
                "pre-conditions": "The input stream 'is' should not be null.",
                "post-conditions": "The method returns a list of ElectrumServer objects loaded from the input stream."
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.onFail(int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.onFail(int,java.lang.Object[])",
            "description": {
              "What": "This method posts a runnable task to the callback handler to notify the result callback of a failure with a message resource ID and optional message arguments.",
              "Parameters": [
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "The resource ID of the message to be displayed for the failure."
                },
                {
                  "name": "messageArgs",
                  "type": "Object[]",
                  "description": "Optional arguments to be used in formatting the failure message."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle and notify the result callback of a failure during the request for wallet balance.",
              "How-to-use": "Create an instance of RequestWalletBalanceTask and call onFail method with the appropriate message resource ID and optional message arguments.",
              "How-it-is-done": "The onFail method creates a new Runnable that calls the resultCallback's onFail method with the provided message resource ID and arguments, then posts this Runnable to the callback handler for execution.",
              "Property": {
                "pre-conditions": [
                  "The callbackHandler must be initialized and set before calling this method.",
                  "The resultCallback must be set before calling this method."
                ],
                "post-conditions": [
                  "The resultCallback's onFail method will be called with the specified message resource ID and arguments."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.onResult(java.util.Set)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.onResult(java.util.Set)",
            "description": {
              "What": "This method posts a runnable task to the callback handler to pass the UTXOs set to the result callback.",
              "Parameters": [
                {
                  "name": "utxos",
                  "type": "java.util.Set<org.bitcoinj.core.UTXO>",
                  "description": "The set of unspent transaction outputs to be passed to the result callback."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To asynchronously handle the UTXOs set and pass it to the result callback in a separate thread.",
              "How-to-use": "Create an instance of RequestWalletBalanceTask, provide the UTXOs set as a parameter to the onResult method, and implement the resultCallback to handle the UTXOs set.",
              "How-it-is-done": "The onResult method uses the callbackHandler to post a new Runnable that calls the onResult method of the resultCallback with the provided UTXOs set.",
              "Property": {
                "pre-conditions": "The utxos parameter must not be null.",
                "post-conditions": "The resultCallback will be called with the provided UTXOs set in a separate thread."
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.requestWalletBalance(android.content.res.AssetManager,org.bitcoinj.core.Address)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.requestWalletBalance(android.content.res.AssetManager,org.bitcoinj.core.Address)",
            "description": {
              "What": "This method requests the wallet balance for a specific Bitcoin address from an Electrum server.",
              "Parameters": [
                {
                  "name": "assets",
                  "type": "android.content.res.AssetManager",
                  "description": "The AssetManager to access the Electrum server configuration file."
                },
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address for which the wallet balance is requested."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To retrieve the wallet balance for a specific Bitcoin address from an Electrum server.",
              "How-to-use": "Call this method with the AssetManager containing Electrum server configuration and the Bitcoin address for which the balance is requested.",
              "How-it-is-done": "The method connects to an Electrum server, sends a JSON-RPC request to fetch unspent outputs for the given address, parses the response, and returns the UTXOs (Unspent Transaction Outputs) if successful.",
              "Property": {
                "pre-conditions": [
                  "The AssetManager must contain the configuration file for Electrum servers.",
                  "The Bitcoin address provided must be valid."
                ],
                "post-conditions": [
                  "The method will either return a set of UTXOs for the given address or handle exceptions related to JSON parsing or network IO."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.sslCertificateFingerprint(java.security.cert.Certificate)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.sslCertificateFingerprint(java.security.cert.Certificate)",
            "description": {
              "What": "This method calculates the SHA-256 fingerprint of a given SSL certificate.",
              "Parameters": [
                {
                  "name": "certificate",
                  "type": "java.security.cert.Certificate",
                  "description": "The SSL certificate for which the fingerprint will be calculated."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The SHA-256 fingerprint of the input SSL certificate."
              },
              "Why": "To provide a way to easily calculate the fingerprint of SSL certificates for verification purposes.",
              "How-to-use": "Call this method with an SSL certificate as the parameter to get its SHA-256 fingerprint as a string.",
              "How-it-is-done": "The method encodes the input certificate, calculates its SHA-256 hash using Google Guava library, and returns the hash as a string.",
              "Property": {
                "pre-conditions": [
                  "The input certificate must not be null."
                ],
                "post-conditions": [
                  "The returned string will be the SHA-256 fingerprint of the input certificate."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.sslTrustAllCertificates()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask.sslTrustAllCertificates()",
            "description": {
              "What": "This method creates and returns an SSLSocketFactory that trusts all certificates for SSL connections.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "javax.net.ssl.SSLSocketFactory",
                "description": "Returns an SSLSocketFactory that trusts all certificates for SSL connections."
              },
              "Why": "This method is provided to allow SSL connections to be established without validating the server certificates, which can be useful for testing or development purposes.",
              "How-to-use": "Simply call this method to obtain an SSLSocketFactory instance that can be used for creating SSL connections with all certificates trusted.",
              "How-it-is-done": "The method creates a new SSLContext instance for the SSL protocol, initializes it with a TrustManager that trusts all certificates, and then retrieves the SSLSocketFactory from the context.",
              "Property": {
                "pre-conditions": [
                  "The SSL protocol must be available on the system."
                ],
                "post-conditions": [
                  "The returned SSLSocketFactory can be used for creating SSL connections with all certificates trusted."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer.de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer.de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "description": {
              "What": "Constructs an ElectrumServer object with the specified type, host, port, and certificate fingerprint.",
              "Parameters": [
                {
                  "name": "type",
                  "type": "String",
                  "description": "The type of the Electrum server (tcp or tls)."
                },
                {
                  "name": "host",
                  "type": "String",
                  "description": "The host address of the Electrum server."
                },
                {
                  "name": "port",
                  "type": "String",
                  "description": "The port number of the Electrum server."
                },
                {
                  "name": "certificateFingerprint",
                  "type": "String",
                  "description": "The fingerprint of the server's SSL certificate."
                }
              ],
              "Returns": {
                "type": "ElectrumServer",
                "description": "An instance of the ElectrumServer class."
              },
              "Why": "To initialize an ElectrumServer object with the necessary connection details for communicating with an Electrum server.",
              "How-to-use": "Create a new ElectrumServer object by providing the type, host, port, and certificate fingerprint as parameters to the constructor.",
              "How-it-is-done": "The method initializes the ElectrumServer object by parsing the type, creating an InetSocketAddress based on the host and port, and setting the certificate fingerprint.",
              "Property": {
                "pre-conditions": [
                  "The type parameter must be either 'tcp' or 'tls'."
                ],
                "post-conditions": [
                  "An ElectrumServer object is successfully created with the specified connection details."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer$Type": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer$Type",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer$Type.de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer$Type()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer$Type.de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer$Type()",
            "description": {
              "What": "This method is a constructor for the Enum Type in the ElectrumServer class.",
              "Parameters": [],
              "Returns": {
                "Type": "Constructor for the Enum Type in the ElectrumServer class."
              },
              "Why": "To provide an initialization method for the Enum Type in the ElectrumServer class.",
              "How-to-use": "Simply call the Type() constructor to initialize an instance of the Enum Type in the ElectrumServer class.",
              "How-it-is-done": "The Type() constructor does not take any parameters and simply initializes an instance of the Enum Type in the ElectrumServer class.",
              "Property": {
                "Pre-conditions": "No pre-conditions are required for calling this constructor.",
                "Post-conditions": "After calling this constructor, an instance of the Enum Type in the ElectrumServer class is initialized."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcRequest": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcRequest",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcRequest.de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcRequest(java.lang.String,java.lang.String[])": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcRequest.de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcRequest(java.lang.String,java.lang.String[])",
            "description": {
              "What": "Constructs a JsonRpcRequest object with a method and parameters.",
              "Parameters": [
                {
                  "name": "method",
                  "type": "String",
                  "description": "The method to be executed."
                },
                {
                  "name": "params",
                  "type": "String[]",
                  "description": "The parameters for the method."
                },
                "Returns"
              ]
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse.de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse.de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse()",
            "description": {
              "method": {
                "What": "This method is a constructor for the JsonRpcResponse class.",
                "Parameters": [],
                "Returns": "JsonRpcResponse",
                "Why": "The method is provided to initialize an instance of the JsonRpcResponse class.",
                "How-to-use": "To use this method, simply create a new instance of the JsonRpcResponse class.",
                "How-it-is-done": "The method initializes a new instance of the JsonRpcResponse class.",
                "Property": {
                  "pre-conditions": [],
                  "post-conditions": [
                    "A new instance of JsonRpcResponse is created."
                  ]
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse$Utxo": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse$Utxo",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse$Utxo.de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse$Utxo()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse$Utxo.de.schildbach.wallet.ui.send.RequestWalletBalanceTask$JsonRpcResponse$Utxo()",
            "description": {
              "method": {
                "What": "This method is a constructor for the Utxo class.",
                "Parameters": [],
                "Returns": "Utxo class",
                "Why": "Provided to initialize an instance of the Utxo class.",
                "How-to-use": "Simply call the Utxo constructor to create a new instance of the Utxo class.",
                "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the Utxo class.",
                "Property": {
                  "pre-conditions": [],
                  "post-conditions": [
                    "A new instance of the Utxo class is created."
                  ]
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback": {
        "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback",
        "kind": "interface",
        "methods": {
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback.onFail(int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback.onFail(int,java.lang.Object[])",
            "description": {
              "What": "This method is called when the request for wallet balance fails, providing a message resource ID and optional message arguments.",
              "Parameters": [
                {
                  "name": "messageResId",
                  "type": "int",
                  "description": "The resource ID of the message to be displayed."
                },
                {
                  "name": "messageArgs",
                  "type": "Object[]",
                  "description": "Optional arguments to be used in formatting the message."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the failure scenario of retrieving wallet balance and provide feedback to the user.",
              "How-to-use": "Implement this method in a class that implements the ResultCallback interface to handle the failure case of requesting wallet balance.",
              "How-it-is-done": "When called, this method can display an error message to the user using the provided message resource ID and optional arguments for formatting.",
              "Property": {
                "pre-conditions": [
                  "The messageResId parameter must correspond to a valid resource ID for a message to be displayed."
                ],
                "post-conditions": [
                  "The method should handle the failure scenario appropriately, such as displaying an error message to the user."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback.onResult(java.util.Set)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback.onResult(java.util.Set)",
            "description": {
              "What": "This method is used to handle the result of a request for wallet balance, providing a set of unspent transaction outputs (UTXOs).",
              "Parameters": [
                {
                  "name": "utxos",
                  "type": "java.util.Set<org.bitcoinj.core.UTXO>",
                  "description": "A set of unspent transaction outputs (UTXOs) representing the wallet balance."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow the callback implementation to process the UTXOs received from the wallet balance request.",
              "How-to-use": "Implement this method in a class that implements the ResultCallback interface to handle the UTXOs returned from the wallet balance request.",
              "How-it-is-done": "When this method is called, the provided set of UTXOs can be processed or used as needed by the implementation of the method.",
              "Property": {
                "pre-conditions": [
                  "The provided set of UTXOs should not be null."
                ],
                "post-conditions": [
                  "The implementation of this method should handle the set of UTXOs appropriately based on the requirements."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SendCoinsActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.SendCoinsActivity.de.schildbach.wallet.ui.send.SendCoinsActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsActivity.de.schildbach.wallet.ui.send.SendCoinsActivity()",
            "description": {
              "method": {
                "What": "Initialize a new instance of SendCoinsActivity class.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "SendCoinsActivity",
                  "description": "A new instance of SendCoinsActivity class."
                },
                "Why": "To provide a constructor for initializing SendCoinsActivity instances.",
                "How-to-use": "Simply call the constructor to create a new instance of SendCoinsActivity.",
                "How-it-is-done": "The constructor initializes a new instance of SendCoinsActivity class without any parameters.",
                "Property": {
                  "pre-conditions": "None",
                  "post-conditions": "A new instance of SendCoinsActivity class is created."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsActivity.onCreate(android.os.Bundle)",
            "description": {
              "method": "This method sets up the UI layout for sending coins and starts the BlockchainService.",
              "parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the activity."
                }
              ],
              "returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "why": "The method is provided to initialize the UI and start the BlockchainService for sending coins.",
              "how-to-use": "To use this method, extend the SendCoinsActivity class, override the onCreate method, call super.onCreate(savedInstanceState), set the content view to the send_coins_content layout, and start the BlockchainService.",
              "how-it-is-done": "The method first calls the super class onCreate method with the saved instance state, then sets the content view to the send_coins_content layout, and finally starts the BlockchainService with the context of the activity and false as a parameter.",
              "property": {
                "pre-conditions": [
                  "The SendCoinsActivity class must be extended.",
                  "The send_coins_content layout must be defined."
                ],
                "post-conditions": [
                  "The UI layout for sending coins is set up.",
                  "The BlockchainService is started."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsActivity.onCreateOptionsMenu(android.view.Menu)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsActivity.onCreateOptionsMenu(android.view.Menu)",
            "description": {
              "What": "Inflates the menu resource for the SendCoinsActivity options menu.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu in which the options menu items are placed."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the menu is successfully inflated, false otherwise."
              },
              "Why": "To provide options menu items for the SendCoinsActivity.",
              "How-to-use": "Override the onCreateOptionsMenu method in the SendCoinsActivity class and call getMenuInflater().inflate(R.menu.send_coins_activity_options, menu) to inflate the menu resource.",
              "How-it-is-done": "The method calls getMenuInflater().inflate(R.menu.send_coins_activity_options, menu) to inflate the menu resource specified by R.menu.send_coins_activity_options and returns the result of super.onCreateOptionsMenu(menu).",
              "Property": {
                "pre-conditions": "The SendCoinsActivity class must be extended and onCreateOptionsMenu method must be overridden.",
                "post-conditions": "The options menu for SendCoinsActivity will be inflated with the items specified in R.menu.send_coins_activity_options."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsActivity.onOptionsItemSelected(android.view.MenuItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsActivity.onOptionsItemSelected(android.view.MenuItem)",
            "description": {
              "What": "This method handles the selection of options in the menu of the SendCoinsActivity, specifically showing a help dialog when the help option is selected.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "android.view.MenuItem",
                  "description": "The selected menu item that triggered the method."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the selected menu item was handled, false otherwise."
              },
              "Why": "To provide users with a way to access help information while sending coins, enhancing the user experience of the application.",
              "How-to-use": "Override this method in the SendCoinsActivity class and implement the desired functionality for each menu option. In this case, handle the help option by showing a help dialog.",
              "How-it-is-done": "The method checks the ID of the selected menu item and if it matches the help option ID, it displays a help dialog using a HelpDialogFragment with the specified help content. It then returns true to indicate that the item was handled.",
              "Property": {
                "pre-conditions": "The method should be overridden in a subclass of SendCoinsActivity. The menu item IDs should be properly defined in the XML menu resource file.",
                "post-conditions": "If the help option is selected, a help dialog related to sending coins is displayed to the user."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsActivity.start(android.content.Context,de.schildbach.wallet.data.PaymentIntent)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsActivity.start(android.content.Context,de.schildbach.wallet.data.PaymentIntent)",
            "description": {
              "What": "Starts the SendCoinsActivity with the given payment intent.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the activity should be started."
                },
                {
                  "name": "paymentIntent",
                  "type": "de.schildbach.wallet.data.PaymentIntent",
                  "description": "The payment intent to be used in the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to start the SendCoinsActivity with a payment intent.",
              "How-to-use": "Call this method with a valid context and payment intent to start the SendCoinsActivity.",
              "How-it-is-done": "The method simply delegates to another overloaded method 'start' in the SendCoinsActivity class with additional parameters set to null and 0.",
              "Property": {
                "pre-conditions": [
                  "The context must not be null.",
                  "The paymentIntent must not be null."
                ],
                "post-conditions": [
                  "The SendCoinsActivity is started with the provided payment intent."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsActivity.start(android.content.Context,de.schildbach.wallet.data.PaymentIntent,de.schildbach.wallet.ui.send.FeeCategory,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsActivity.start(android.content.Context,de.schildbach.wallet.data.PaymentIntent,de.schildbach.wallet.ui.send.FeeCategory,int)",
            "description": {
              "What": "Starts the SendCoinsActivity with the provided PaymentIntent, FeeCategory, and intent flags.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the activity should be started."
                },
                {
                  "name": "paymentIntent",
                  "type": "de.schildbach.wallet.data.PaymentIntent",
                  "description": "The payment intent containing transaction details."
                },
                {
                  "name": "feeCategory",
                  "type": "de.schildbach.wallet.ui.send.FeeCategory",
                  "description": "The fee category for the transaction, can be null."
                },
                {
                  "name": "intentFlags",
                  "type": "int",
                  "description": "Flags to be set for the intent, can be 0."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to start the SendCoinsActivity with necessary parameters.",
              "How-to-use": "Call this method with the required parameters to start the SendCoinsActivity with the specified payment intent, fee category, and intent flags.",
              "How-it-is-done": "Creates an intent for SendCoinsActivity, adds the payment intent and fee category as extras, sets intent flags if provided, and starts the activity using the context.",
              "Property": {
                "pre-conditions": [
                  "The context must not be null.",
                  "The paymentIntent must not be null."
                ],
                "post-conditions": [
                  "The SendCoinsActivity is started with the provided parameters."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsActivity.startDonate(android.content.Context,org.bitcoinj.core.Coin,de.schildbach.wallet.ui.send.FeeCategory,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsActivity.startDonate(android.content.Context,org.bitcoinj.core.Coin,de.schildbach.wallet.ui.send.FeeCategory,int)",
            "description": {
              "What": "Starts the donation process by initiating the SendCoinsActivity with the specified donation amount, fee category, and intent flags.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the donation process is started."
                },
                {
                  "name": "amount",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The amount of donation to be sent."
                },
                {
                  "name": "feeCategory",
                  "type": "de.schildbach.wallet.ui.send.FeeCategory",
                  "description": "The fee category for the donation transaction."
                },
                {
                  "name": "intentFlags",
                  "type": "int",
                  "description": "Flags to be used for the intent when starting the donation process."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to start the donation process with the specified parameters.",
              "How-to-use": "Call startDonate method with the context, donation amount, fee category, and intent flags to initiate the donation process.",
              "How-it-is-done": "The method calls the start method of SendCoinsActivity with a PaymentIntent object representing the donation address, amount, and label, along with the specified fee category and intent flags.",
              "Property": {
                "pre-conditions": [
                  "The context must not be null.",
                  "The amount must be a valid donation amount.",
                  "The fee category must be a valid fee category."
                ],
                "post-conditions": [
                  "The donation process is initiated with the specified parameters."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SendCoinsFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.SendCoinsFragment.de.schildbach.wallet.ui.send.SendCoinsFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.de.schildbach.wallet.ui.send.SendCoinsFragment()",
            "description": {
              "What": "Initialize a new instance of SendCoinsFragment.",
              "Parameters": [],
              "Returns": "SendCoinsFragment",
              "Why": "To provide a way to create a new instance of SendCoinsFragment for use in the application.",
              "How-to-use": "Simply call the constructor SendCoinsFragment() to create a new instance of the SendCoinsFragment class.",
              "How-it-is-done": "The constructor initializes a new instance of the SendCoinsFragment class with default values or configurations.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of SendCoinsFragment is created and ready for use."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.everythingPlausible()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.everythingPlausible()",
            "description": {
              "What": "Checks if the payee, amount, and password inputs are plausible for sending coins.",
              "Parameters": [
                {
                  "name": "viewModel",
                  "type": "SendCoinsViewModel",
                  "description": "The view model containing the state and input data."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the payee, amount, and password inputs are plausible; false otherwise."
              },
              "Why": "To ensure that all necessary inputs are valid before proceeding with sending coins.",
              "How-to-use": "Call this method passing the SendCoinsViewModel instance to validate the input data before sending coins.",
              "How-it-is-done": "The method checks if the state is INPUT, then calls helper methods isPayeePlausible(), isAmountPlausible(), and isPasswordPlausible() to validate the payee, amount, and password inputs respectively.",
              "Property": {
                "pre-conditions": [
                  "The viewModel must not be null."
                ],
                "post-conditions": [
                  "The method returns true if the payee, amount, and password inputs are plausible based on the current state."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.handleCancel()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.handleCancel()",
            "description": {
              "What": "Handles the cancellation of sending coins by setting the result as canceled and finishing the activity.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the cancellation of sending coins and clean up the activity accordingly.",
              "How-to-use": "Call this method when the user cancels the process of sending coins.",
              "How-it-is-done": "Checks if the view model state is null or at a state before input, sets the activity result as canceled, and finishes the activity.",
              "Property": {
                "pre-conditions": [
                  "The activity and view model must be properly initialized before calling this method."
                ],
                "post-conditions": [
                  "The activity result is set as canceled and the activity is finished."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.handleEmpty()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.handleEmpty()",
            "description": {
              "What": "Updates the UI with the available balance and triggers a dry run of the transaction.",
              "Parameters": [
                {
                  "name": "available",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The available balance to be displayed."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the case when the available balance is empty and update the UI accordingly.",
              "How-to-use": "Call this method when the available balance is empty to update the UI with the available balance and trigger a dry run of the transaction.",
              "How-it-is-done": "The method retrieves the available balance from the view model, sets the BTC amount for the amount calculator link, updates the view, and posts a dry run runnable using a handler.",
              "Property": {
                "pre-conditions": [
                  "The view model must have a valid balance value."
                ],
                "post-conditions": [
                  "The UI is updated with the available balance.",
                  "A dry run of the transaction is triggered."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.handleFeeCategory(de.schildbach.wallet.ui.send.FeeCategory)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.handleFeeCategory(de.schildbach.wallet.ui.send.FeeCategory)",
            "description": {
              "What": "Updates the fee category in the view model, logs the change, updates the view, and posts a runnable for dry run calculation.",
              "Parameters": [
                {
                  "name": "feeCategory",
                  "type": "de.schildbach.wallet.ui.send.FeeCategory",
                  "description": "The fee category to be handled."
                },
                "Returns"
              ],
              "Returns": "void",
              "Why": "To handle the selection of a fee category and update the UI accordingly.",
              "How-to-use": "Call this method with the desired fee category as the parameter to update the fee category in the view model and UI.",
              "How-it-is-done": "The method sets the fee category in the view model, logs the change, updates the view, and posts a runnable for dry run calculation using a handler.",
              "Property": {
                "Pre-conditions": "The feeCategory parameter must not be null.",
                "Post-conditions": "The fee category in the view model is updated to the specified fee category, the view is updated, and a dry run calculation is scheduled."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.handleGo()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.handleGo()",
            "description": {
              "What": "Handles the process of signing and sending a payment from the wallet.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet from which the payment will be sent."
                },
                {
                  "name": "encryptionKey",
                  "type": "org.spongycastle.crypto.params.KeyParameter",
                  "description": "The encryption key used for decrypting the wallet if it is encrypted."
                },
                {
                  "name": "wasChanged",
                  "type": "boolean",
                  "description": "Indicates whether the encryption key was changed during the derivation process."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the process of signing and sending a payment securely from an encrypted wallet.",
              "How-to-use": "Call this method to initiate the process of signing and sending a payment from the wallet. Ensure that the wallet is set in the view model before calling this method.",
              "How-it-is-done": "If the wallet is encrypted, a key derivation task is executed to obtain the encryption key, which is then used to sign and send the payment. If the wallet is not encrypted, the payment is signed and sent without decryption.",
              "Property": {
                "pre-conditions": [
                  "The wallet in the view model must not be null."
                ],
                "post-conditions": [
                  "The payment is signed and sent from the wallet.",
                  "If the encryption key was changed during derivation, the wallet is automatically backed up."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.initStateFromBitcoinUri(android.net.Uri)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.initStateFromBitcoinUri(android.net.Uri)",
            "description": {
              "What": "Initialize the state of the SendCoinsFragment from a Bitcoin URI.",
              "Parameters": [
                {
                  "name": "bitcoinUri",
                  "type": "android.net.Uri",
                  "description": "The Bitcoin URI to parse and extract information from."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow the SendCoinsFragment to be initialized with information from a Bitcoin URI.",
              "How-to-use": "Call this method with a valid Bitcoin URI to extract payment intent information and update the state of the SendCoinsFragment.",
              "How-it-is-done": "The method creates a new StringInputParser instance with the input Bitcoin URI, then handles the payment intent extracted from the URI by updating the state of the SendCoinsFragment. It throws UnsupportedOperationException for handling private keys and direct transactions, and shows an error dialog if there is an error during parsing.",
              "Property": {
                "pre-conditions": [
                  "The bitcoinUri parameter must not be null."
                ],
                "post-conditions": [
                  "The state of the SendCoinsFragment is updated based on the information extracted from the Bitcoin URI."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.initStateFromIntentExtras(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.initStateFromIntentExtras(android.os.Bundle)",
            "description": {
              "What": "Initialize the state of the SendCoinsFragment based on the extras received from the intent.",
              "Parameters": [
                {
                  "name": "extras",
                  "type": "android.os.Bundle",
                  "description": "The extras bundle received from the intent."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the initial state of the SendCoinsFragment based on the payment intent and fee category provided.",
              "How-to-use": "Call this method with the extras bundle received from the intent to initialize the state of the SendCoinsFragment.",
              "How-it-is-done": "The method retrieves the PaymentIntent and FeeCategory from the extras bundle, updates the fee category in the view model if available, and then updates the state based on the payment intent.",
              "Property": {
                "pre-conditions": "The extras bundle must contain the PaymentIntent and FeeCategory as specified extras.",
                "post-conditions": "The state of the SendCoinsFragment is initialized based on the provided PaymentIntent and FeeCategory."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.initStateFromIntentUri(java.lang.String,android.net.Uri)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.initStateFromIntentUri(java.lang.String,android.net.Uri)",
            "description": {
              "What": "This method initializes the state of the SendCoinsFragment based on the data from a given intent URI.",
              "Parameters": [
                {
                  "name": "mimeType",
                  "type": "String",
                  "description": "The MIME type of the data."
                },
                {
                  "name": "bitcoinUri",
                  "type": "Uri",
                  "description": "The URI containing the Bitcoin data."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle and parse Bitcoin payment intents from a given URI.",
              "How-to-use": "Call this method with the MIME type and Bitcoin URI to initialize the state of the SendCoinsFragment based on the payment intent data.",
              "How-it-is-done": "The method opens an input stream from the Bitcoin URI, then uses a StreamInputParser to parse the data and handle the payment intent by updating the state of the fragment. If there is an error, it displays a dialog with the error message.",
              "Property": {
                "pre-conditions": "The contentResolver must be initialized before calling this method.",
                "post-conditions": "The state of the SendCoinsFragment is updated based on the payment intent data from the URI."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.initStateFromPaymentRequest(java.lang.String,byte[])": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.initStateFromPaymentRequest(java.lang.String,byte[])",
            "description": {
              "What": "Initialize the state of the SendCoinsFragment from a payment request.",
              "Parameters": [
                {
                  "name": "mimeType",
                  "type": "java.lang.String",
                  "description": "The MIME type of the input data."
                },
                {
                  "name": "input",
                  "type": "byte[]",
                  "description": "The input data in byte array format."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To parse and handle a payment intent from the provided input data.",
              "How-to-use": "Call this method with the MIME type and input data to initialize the state of the SendCoinsFragment based on a payment request.",
              "How-it-is-done": "The method creates a BinaryInputParser instance with the provided MIME type and input data, which then parses the data to extract a PaymentIntent object. The method then updates the state of the SendCoinsFragment with the extracted PaymentIntent.",
              "Property": {
                "pre-conditions": "The input data and MIME type must be valid and not null.",
                "post-conditions": "The state of the SendCoinsFragment is updated based on the payment intent extracted from the input data."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.isAmountPlausible()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.isAmountPlausible()",
            "description": {
              "What": "Checks if the amount entered by the user is plausible for sending coins.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "Returns true if the amount is plausible, false otherwise."
              },
              "Why": "To determine if the user-entered amount is valid for sending coins.",
              "How-to-use": "Call this method to check if the amount entered by the user is plausible before proceeding with the coin sending process.",
              "How-it-is-done": "The method first checks if a dry run transaction exists, then checks if the payment intent allows editing the amount, and finally checks if the payment intent has an amount set.",
              "Property": {
                "pre-conditions": "N/A",
                "post-conditions": "The method returns true if the amount is plausible based on the conditions checked within the method."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.isPasswordPlausible()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.isPasswordPlausible()",
            "description": {
              "What": "Checks if the password for the wallet is plausible based on whether the wallet is encrypted and if the password field is not empty.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet object to check the password for."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the password is plausible, false otherwise."
              },
              "Why": "To ensure that the user provides a valid password for an encrypted wallet before performing any sensitive operations.",
              "How-to-use": "Call this method to determine if the password provided by the user is plausible for the wallet before proceeding with any wallet-related actions.",
              "How-it-is-done": "The method first retrieves the wallet object from the view model. It then checks if the wallet is encrypted, returning true if it is not. If the wallet is encrypted, it checks if the password field is not empty and returns true if it is not empty.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must not be null."
                ],
                "post-conditions": [
                  "Returns true if the wallet is not encrypted or if the password field is not empty, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.isPayeePlausible()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.isPayeePlausible()",
            "description": {
              "What": "Checks if the payee is plausible based on the payment intent outputs or validated address.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "Returns true if the payee is plausible based on the payment intent outputs or validated address, otherwise false."
              },
              "Why": "To determine if the payee information is valid before proceeding with the transaction.",
              "How-to-use": "Call this method to check if the payee information is plausible before sending coins.",
              "How-it-is-done": "The method first checks if the payment intent has outputs, if true, it returns true. Then, it checks if the validated address is not null, if true, it returns true. Otherwise, it returns false.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method will return true if the payee is plausible based on the payment intent outputs or validated address, otherwise false."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onActivityResult(int,int,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onActivityResult(int,int,android.content.Intent)",
            "description": {
              "What": "This method posts a Runnable to the handler to call onActivityResultResumed with the provided parameters.",
              "Parameters": [
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code passed to startActivityForResult."
                },
                {
                  "name": "resultCode",
                  "type": "int",
                  "description": "The result code returned from the activity."
                },
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The data associated with the result."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the result of an activity in a separate thread using a handler.",
              "How-to-use": "Override this method in a class that extends SendCoinsFragment to handle the result of an activity. Make sure to call super.onActivityResult(requestCode, resultCode, intent) in the overridden method.",
              "How-it-is-done": "The method creates a new Runnable that calls onActivityResultResumed with the provided parameters and posts it to the handler for execution in the main thread.",
              "Property": {
                "pre-conditions": [
                  "The method should be overridden in a class that extends SendCoinsFragment."
                ],
                "post-conditions": [
                  "The onActivityResultResumed method will be called with the provided parameters in the main thread."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onActivityResultResumed(int,int,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onActivityResultResumed(int,int,android.content.Intent)",
            "description": {
              "What": "Handle the result of activities like scanning, enabling Bluetooth for payment request, and enabling Bluetooth for direct payment in the SendCoinsFragment.",
              "Parameters": [
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code that identifies the type of activity result."
                },
                {
                  "name": "resultCode",
                  "type": "int",
                  "description": "The result code indicating the success or failure of the activity."
                },
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent containing the result data from the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the result of different activities within the SendCoinsFragment and update the UI accordingly.",
              "How-to-use": "Call this method with the requestCode, resultCode, and intent parameters when receiving activity results in the SendCoinsFragment.",
              "How-it-is-done": "The method checks the requestCode to determine the type of activity result and performs specific actions based on the resultCode and intent data, such as parsing payment intents, handling direct transactions, and displaying error messages.",
              "Property": {
                "pre-conditions": [
                  "The SendCoinsFragment must have initiated the activities with the corresponding request codes."
                ],
                "post-conditions": [
                  "The UI of the SendCoinsFragment may be updated based on the result of the activities."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onAttach(android.content.Context)",
            "description": {
              "What": "Initialize various fields of the SendCoinsFragment class when it is attached to a context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context to which the fragment is attached."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up necessary fields and dependencies of the fragment when it is attached to a context.",
              "How-to-use": "Call this method when the SendCoinsFragment is attached to a context, typically in the onAttach method of the fragment.",
              "How-it-is-done": "The method first calls the superclass method to ensure proper initialization, then assigns various fields such as activity, application, config, addressBookDao, contentResolver, and fragmentManager based on the context provided.",
              "Property": {
                "pre-conditions": "The fragment must be attached to a valid context.",
                "post-conditions": "The fields of the fragment are initialized with the appropriate values based on the context."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize the SendCoinsFragment by setting up observers for wallet, address book, exchange rates, dynamic fees, blockchain state, and balance, as well as handling incoming intents.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the necessary components and data observers for the SendCoinsFragment and handle incoming intents for sending coins.",
              "How-to-use": "Call this method in the onCreate() method of a SendCoinsFragment instance, passing the savedInstanceState parameter.",
              "How-it-is-done": "The method sets up observers for wallet, address book, exchange rates, dynamic fees, blockchain state, and balance. It also handles incoming intents related to sending coins.",
              "Property": {
                "pre-conditions": [
                  "The fragment must be attached to an activity.",
                  "The viewModel field must be initialized with a SendCoinsViewModel instance."
                ],
                "post-conditions": [
                  "Observers are set up for wallet, address book, exchange rates, dynamic fees, blockchain state, and balance.",
                  "Incoming intents are processed to initialize the state of the fragment."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)",
            "description": {
              "What": "Inflates the menu resource for the SendCoinsFragment options menu.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu in which the options menu items are placed."
                },
                {
                  "name": "inflater",
                  "type": "android.view.MenuInflater",
                  "description": "The MenuInflater to inflate the menu resource."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the options menu for the SendCoinsFragment to provide additional functionality or actions.",
              "How-to-use": "Override this method in the SendCoinsFragment class and call inflater.inflate() with the desired menu resource ID.",
              "How-it-is-done": "The method inflates the menu resource specified by R.menu.send_coins_fragment_options using the provided MenuInflater, then calls the superclass method to handle any additional menu setup.",
              "Property": {
                "pre-conditions": "The SendCoinsFragment class must be extended to override this method.",
                "post-conditions": "The options menu for the SendCoinsFragment will be inflated with the specified menu items."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "What": "Creates the view for sending coins with various UI elements and event listeners.",
              "Parameters": [
                {
                  "name": "inflater",
                  "type": "android.view.LayoutInflater",
                  "description": "The LayoutInflater object that can be used to inflate any views in the fragment."
                },
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view that the fragment's UI should be attached to."
                },
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment, if available."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The created view for the SendCoinsFragment."
              },
              "Why": "To initialize the UI elements and event listeners required for sending coins in the wallet application.",
              "How-to-use": "Call this method when creating the SendCoinsFragment to set up the UI for sending coins.",
              "How-it-is-done": "The method inflates the layout for the fragment, initializes various UI elements, sets up event listeners, and returns the created view.",
              "Property": {
                "pre-conditions": [
                  "The layout file 'send_coins_fragment' must be defined in the resources (R.layout.send_coins_fragment)."
                ],
                "post-conditions": [
                  "The view for the SendCoinsFragment is created with all necessary UI elements and event listeners set up."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onDestroy()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onDestroy()",
            "description": {
              "What": "This method is used to clean up resources and unregister listeners when the fragment is being destroyed.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to ensure proper clean-up and resource management when the fragment is destroyed.",
              "How-to-use": "Simply call this method when the fragment is being destroyed to clean up resources and unregister listeners.",
              "How-it-is-done": "The method first quits the background thread's looper, removes the event listener for sentTransactionConfidenceListener if the sentTransaction is not null, and then calls the superclass's onDestroy method.",
              "Property": {
                "pre-conditions": [
                  "The backgroundThread and viewModel must be properly initialized before calling this method."
                ],
                "post-conditions": [
                  "The backgroundThread's looper is quit, the sentTransactionConfidenceListener is unregistered if needed, and the superclass's onDestroy method is called."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onDestroyView()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onDestroyView()",
            "description": {
              "What": "This method saves the last exchange direction used in the configuration object when the view is destroyed.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To persist the last exchange direction used by the user for future reference.",
              "How-to-use": "Simply call this method when the view associated with the SendCoinsFragment is being destroyed.",
              "How-it-is-done": "The method calls the superclass method onDestroyView() to handle any necessary clean-up, then retrieves the last exchange direction from the amountCalculatorLink and sets it in the configuration object.",
              "Property": {
                "pre-conditions": [
                  "The config object must be initialized and accessible within the SendCoinsFragment."
                ],
                "post-conditions": [
                  "The last exchange direction used by the user is saved in the configuration object."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onDetach()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onDetach()",
            "description": {
              "What": "This method removes any pending callbacks and messages from the handler when the fragment is detached from its parent activity.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that any pending callbacks or messages are removed when the fragment is no longer attached to its parent activity, preventing memory leaks or unwanted behavior.",
              "How-to-use": "Simply call this method when the fragment is being detached from its parent activity, typically in the onDetach() lifecycle method.",
              "How-it-is-done": "The method calls the removeCallbacksAndMessages(null) method on the handler object associated with the fragment, effectively removing any pending callbacks and messages. It then calls the super.onDetach() method to complete the detachment process.",
              "Property": {
                "pre-conditions": [
                  "The fragment must be currently attached to its parent activity."
                ],
                "post-conditions": [
                  "Any pending callbacks or messages in the handler associated with the fragment are removed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onOptionsItemSelected(android.view.MenuItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onOptionsItemSelected(android.view.MenuItem)",
            "description": {
              "What": "Handles options menu item selection in the SendCoinsFragment class.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "android.view.MenuItem",
                  "description": "The selected menu item."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the menu item selection was handled, false otherwise."
              },
              "Why": "To provide functionality for handling different menu item selections in the SendCoinsFragment class.",
              "How-to-use": "Override the onOptionsItemSelected method in your SendCoinsFragment class and implement the desired functionality for each menu item selection.",
              "How-it-is-done": "The method checks the ID of the selected menu item and performs corresponding actions such as starting a scan activity, handling fee categories, or handling an empty option.",
              "Property": {
                "pre-conditions": "The SendCoinsFragment class must be properly set up and initialized.",
                "post-conditions": "The selected menu item action is executed based on the ID of the menu item."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onPause()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onPause()",
            "description": {
              "What": "Removes listeners and sets listener to null when the fragment is paused.",
              "Parameters": [
                {
                  "name": "privateKeyPasswordView",
                  "type": "View",
                  "description": "The view for the private key password input field."
                },
                {
                  "name": "privateKeyPasswordListener",
                  "type": "TextWatcher",
                  "description": "The listener for the private key password input field."
                },
                {
                  "name": "amountCalculatorLink",
                  "type": "AmountCalculatorLink",
                  "description": "The link to the amount calculator."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To clean up resources and prevent memory leaks by removing listeners when the fragment is paused.",
              "How-to-use": "Call this method in the onPause() lifecycle method of the SendCoinsFragment class to remove listeners and set listener to null.",
              "How-it-is-done": "The method removes the text changed listener from the private key password view and sets the listener for the amount calculator link to null. It then calls the super class's onPause() method.",
              "Property": {
                "pre-conditions": [
                  "The private key password view, private key password listener, and amount calculator link should be initialized before calling this method."
                ],
                "post-conditions": [
                  "The listeners for the private key password view and amount calculator link are removed, and the listener for the amount calculator link is set to null."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onPrepareOptionsMenu(android.view.Menu)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onPrepareOptionsMenu(android.view.Menu)",
            "description": {
              "What": "This method prepares the options menu for the SendCoinsFragment by setting visibility and enabling/disabling menu items based on the current state of the fragment's view model.",
              "Parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The options menu to be prepared."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically update the options menu based on the state of the SendCoinsFragment's view model.",
              "How-to-use": "Call this method in the SendCoinsFragment class to update the options menu based on the current state of the fragment's view model.",
              "How-it-is-done": "The method first finds the scanAction, emptyAction, and feeCategoryAction menu items and sets their visibility and enabled status based on the view model's state. It then checks the feeCategory of the view model and sets the corresponding menu item as checked. Finally, it calls the superclass method to finish preparing the options menu.",
              "Property": {
                "pre-conditions": [
                  "The SendCoinsFragment instance must have a valid activity and view model set."
                ],
                "post-conditions": [
                  "The options menu of the SendCoinsFragment will be updated based on the current state of the view model."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.onResume()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.onResume()",
            "description": {
              "What": "Sets up listeners and updates the view when the fragment is resumed.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To initialize necessary components and update the view when the fragment is resumed.",
              "How-to-use": "Simply call this method when the fragment is resumed to set up listeners and update the view.",
              "How-it-is-done": "The method sets a listener for amount calculations, adds a text changed listener for private key password, updates the view, and posts a runnable for dry run operations using a handler.",
              "Property": {
                "pre-conditions": [
                  "The fragment must be in a resumed state."
                ],
                "post-conditions": [
                  "Listeners for amount calculations and private key password are set.",
                  "The view is updated with the latest data.",
                  "A runnable for dry run operations is posted using a handler."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.requestFocusFirst()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.requestFocusFirst()",
            "description": {
              "What": "This method sets focus on the first input field that needs attention in the SendCoinsFragment UI.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to improve user experience by automatically focusing on the first input field that requires attention during the send coins process.",
              "How-to-use": "Call this method when the SendCoinsFragment UI needs to set focus on the first input field that needs attention.",
              "How-it-is-done": "The method checks the plausibility of the payee, amount, and password fields, and sets focus on the corresponding field that needs attention. If everything is plausible, focus is set on the 'Go' button. If none of the conditions are met, a warning is logged.",
              "Property": {
                "pre-conditions": [
                  "The SendCoinsFragment UI must be initialized and visible."
                ],
                "post-conditions": [
                  "The focus is set on the first input field that requires attention based on the plausibility checks."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.requestPaymentRequest()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.requestPaymentRequest()",
            "description": {
              "What": "This method is used to request a payment request from a specified URL or Bluetooth device.",
              "Parameters": [
                {
                  "name": "paymentRequestHost",
                  "type": "String",
                  "description": "The host of the payment request URL or Bluetooth device."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to handle the process of requesting a payment request for sending coins.",
              "How-to-use": "Call this method to initiate the process of requesting a payment request for sending coins. Ensure that the viewModel.paymentIntent is properly set before calling this method.",
              "How-it-is-done": "The method first determines the paymentRequestHost based on the paymentIntent URL or Bluetooth device. It then shows a progress dialog, sets the state, and initiates a RequestPaymentRequestTask to handle the request. Depending on the type of URL, either an HttpRequestTask or BluetoothRequestTask is used to make the request.",
              "Property": {
                "pre-conditions": [
                  "The viewModel.paymentIntent must be properly set with the payment request URL or Bluetooth device."
                ],
                "post-conditions": [
                  "The method will update the state and view based on the received paymentIntent or show an error dialog if the request fails."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.sendPayment(org.bitcoinj.wallet.SendRequest,org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.sendPayment(org.bitcoinj.wallet.SendRequest,org.bitcoinj.core.Coin)",
            "description": {
              "What": "Send a payment using the provided send request and final amount.",
              "Parameters": [
                {
                  "name": "sendRequest",
                  "type": "org.bitcoinj.wallet.SendRequest",
                  "description": "The send request containing payment details."
                },
                {
                  "name": "finalAmount",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The final amount of the payment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To initiate the process of sending a payment from the wallet.",
              "How-to-use": "Call this method with a valid send request and final amount to send a payment from the wallet.",
              "How-it-is-done": "The method creates a new SendCoinsOfflineTask with the wallet and background handler, sends the payment offline, handles success, insufficient money, invalid encryption key, empty wallet failed, and failure scenarios.",
              "Property": {
                "pre-conditions": [
                  "The wallet instance must be initialized and valid.",
                  "The send request must contain valid payment details.",
                  "The final amount must be a valid coin value."
                ],
                "post-conditions": [
                  "The payment is sent successfully if there are no errors.",
                  "The sent transaction is stored in the view model for further processing."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.setState(de.schildbach.wallet.ui.send.SendCoinsViewModel$State)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.setState(de.schildbach.wallet.ui.send.SendCoinsViewModel$State)",
            "description": {
              "method": {
                "What": "Updates the state of the SendCoinsViewModel and triggers a UI update.",
                "Parameters": [
                  {
                    "name": "state",
                    "type": "de.schildbach.wallet.ui.send.SendCoinsViewModel.State",
                    "description": "The new state to set for the SendCoinsViewModel."
                  }
                ],
                "Returns": "void",
                "Why": "To update the state of the ViewModel and reflect the changes in the UI.",
                "How-to-use": "Call this method with the new state to update the ViewModel and trigger a UI update.",
                "How-it-is-done": "The method sets the state of the ViewModel to the provided state, invalidates the options menu of the activity, and updates the view.",
                "Property": {
                  "pre-conditions": [
                    "The SendCoinsViewModel instance (viewModel) must be initialized and accessible within the class.",
                    "The activity must have a valid options menu to invalidate."
                  ],
                  "post-conditions": [
                    "The state of the SendCoinsViewModel is updated to the provided state.",
                    "The options menu of the activity is invalidated.",
                    "The view is updated to reflect the new state."
                  ]
                }
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.signAndSendPayment(org.spongycastle.crypto.params.KeyParameter)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.signAndSendPayment(org.spongycastle.crypto.params.KeyParameter)",
            "description": {
              "What": "Sign and send a payment using the provided encryption key.",
              "Parameters": [
                {
                  "name": "encryptionKey",
                  "type": "org.spongycastle.crypto.params.KeyParameter",
                  "description": "The encryption key used to sign the payment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To sign and send a payment transaction with the specified encryption key.",
              "How-to-use": "Call this method with the encryption key parameter to sign and send a payment transaction.",
              "How-it-is-done": "The method sets the state to SIGNING, merges payment intent with edited values, retrieves fees and wallet information, creates a send request, sets necessary parameters, checks for significant fees, and prompts the user to confirm the payment if the fee is greater than the amount.",
              "Property": {
                "pre-conditions": [
                  "The viewModel, finalPaymentIntent, fees, wallet, sendRequest, and fee must be initialized and valid."
                ],
                "post-conditions": [
                  "The payment transaction is signed and sent based on the provided encryption key."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.updateStateFrom(de.schildbach.wallet.data.PaymentIntent)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.updateStateFrom(de.schildbach.wallet.data.PaymentIntent)",
            "description": {
              "What": "Updates the state of the SendCoinsFragment based on the provided PaymentIntent.",
              "Parameters": [
                {
                  "name": "paymentIntent",
                  "type": "de.schildbach.wallet.data.PaymentIntent",
                  "description": "The PaymentIntent object to update the state from."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle the logic of updating the state of the SendCoinsFragment based on the PaymentIntent provided.",
              "How-to-use": "Call this method with a PaymentIntent object to update the state of the SendCoinsFragment accordingly.",
              "How-it-is-done": "The method sets the PaymentIntent in the ViewModel, clears some related variables, and then based on the type of PaymentIntent, it either requests a payment request, sets the state to INPUT, updates the view, and posts a dry run runnable.",
              "Property": {
                "pre-conditions": "The paymentIntent parameter must not be null.",
                "post-conditions": "The state of the SendCoinsFragment is updated based on the provided PaymentIntent."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.updateView()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.updateView()",
            "description": {
              "What": "Update the view of the SendCoinsFragment based on the current state and data.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet object containing the user's funds."
                },
                {
                  "name": "fees",
                  "type": "Map<FeeCategory, Coin>",
                  "description": "A map of fee categories and corresponding coin values."
                },
                {
                  "name": "blockchainState",
                  "type": "BlockchainState",
                  "description": "The current state of the blockchain."
                },
                {
                  "name": "addressBook",
                  "type": "Map<String, AddressBookEntry>",
                  "description": "A map of address book entries."
                },
                {
                  "name": "viewModel.paymentIntent",
                  "type": "PaymentIntent",
                  "description": "The payment intent object representing the transaction details."
                },
                {
                  "name": "viewModel.state",
                  "type": "SendCoinsViewModel.State",
                  "description": "The current state of the SendCoinsViewModel."
                },
                {
                  "name": "viewModel.dryrunException",
                  "type": "Exception",
                  "description": "An exception that occurred during a dry run of the transaction."
                },
                {
                  "name": "viewModel.dryrunTransaction",
                  "type": "Transaction",
                  "description": "The transaction object resulting from a dry run."
                },
                {
                  "name": "viewModel.sentTransaction",
                  "type": "Transaction",
                  "description": "The transaction object that was sent."
                },
                {
                  "name": "viewModel.directPaymentAck",
                  "type": "Boolean",
                  "description": "A flag indicating whether a direct payment was acknowledged."
                }
              ],
              "Returns": "void",
              "Why": "To update the UI of the SendCoinsFragment based on the current transaction details and state.",
              "How-to-use": "Call this method whenever the data or state of the SendCoinsFragment changes to update the UI accordingly.",
              "How-it-is-done": "The method retrieves various data objects from the view model, sets visibility and text of UI elements based on the data, and handles different states of the transaction process.",
              "Property": {
                "Preconditions": [
                  "The method requires a valid ViewModel instance with necessary data objects set.",
                  "The method assumes the existence of UI elements like TextViews and Buttons."
                ],
                "Postconditions": [
                  "The UI of the SendCoinsFragment is updated to reflect the current transaction details and state."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment.validateReceivingAddress()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment.validateReceivingAddress()",
            "description": {
              "What": "Validates a receiving address by checking if it is a valid Bitcoin address and resolves its label from the address book.",
              "Parameters": [
                {
                  "name": "addressStr",
                  "type": "java.lang.String",
                  "description": "The receiving address string to be validated."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To ensure that the provided receiving address is valid and to associate it with a label if available.",
              "How-to-use": "Call this method when a user enters a receiving address to validate it and resolve its label.",
              "How-it-is-done": "The method trims the input address string, checks if it is not empty, validates it against Bitcoin network parameters, resolves the label from the address book, and logs the validated address.",
              "Property": {
                "pre-conditions": [
                  "The receivingAddressView must be initialized and accessible."
                ],
                "post-conditions": [
                  "If the address is valid, the viewModel.validatedAddress will be set with the validated address and label."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.afterTextChanged(android.text.Editable)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.afterTextChanged(android.text.Editable)",
            "description": {
              "What": "This method checks if the input text is empty or not, and then either validates the receiving address or updates the view accordingly.",
              "Parameters": [
                {
                  "name": "s",
                  "type": "android.text.Editable",
                  "description": "The editable text input to be checked."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle text changes in the receiving address input field and trigger validation or view updates based on the input.",
              "How-to-use": "To use this method, implement the afterTextChanged method in a class that extends ReceivingAddressListener and pass the editable text input as a parameter when calling the method.",
              "How-it-is-done": "The method first converts the editable text input to a string and trims any leading or trailing spaces. It then checks if the string is empty, and either calls the validateReceivingAddress method or the updateView method based on the result.",
              "Property": {
                "pre-conditions": [
                  "The method should be called after text changes in the receiving address input field."
                ],
                "post-conditions": [
                  "If the input text is not empty, the validateReceivingAddress method is called. If the input text is empty, the updateView method is called."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.beforeTextChanged(java.lang.CharSequence,int,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.beforeTextChanged(java.lang.CharSequence,int,int,int)",
            "description": {
              "What": "This method is called before the text is changed in the receiving address field of the SendCoinsFragment.",
              "Parameters": [
                {
                  "name": "s",
                  "type": "java.lang.CharSequence",
                  "description": "The text in the receiving address field."
                },
                {
                  "name": "start",
                  "type": "int",
                  "description": "The index at which the change will start."
                },
                {
                  "name": "count",
                  "type": "int",
                  "description": "The number of characters that will be replaced."
                },
                {
                  "name": "after",
                  "type": "int",
                  "description": "The length of the new text that will replace the old text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow for any necessary actions or validations to be performed before the text is changed in the receiving address field.",
              "How-to-use": "Override this method in a class that implements the ReceivingAddressListener interface to handle actions before text changes in the receiving address field.",
              "How-it-is-done": "The method does not contain any implementation details as it is meant to be overridden in a subclass to define custom behavior.",
              "Property": {
                "pre-conditions": [
                  "The class implementing this method must be a subclass of SendCoinsFragment$ReceivingAddressListener."
                ],
                "post-conditions": [
                  "Any necessary actions or validations before text changes in the receiving address field can be performed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener()",
            "description": {
              "What": "Initialize a new instance of the ReceivingAddressListener class.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "ReceivingAddressListener",
                "description": "A new instance of the ReceivingAddressListener class is returned."
              },
              "Why": "To provide a constructor for initializing a ReceivingAddressListener instance.",
              "How-to-use": "Simply call the constructor to create a new ReceivingAddressListener object.",
              "How-it-is-done": "The method initializes a new instance of the ReceivingAddressListener class without any parameters being passed.",
              "Property": {
                "pre-conditions": "No pre-conditions are required for calling this method.",
                "post-conditions": "A new ReceivingAddressListener object is created after calling this method."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.onFocusChange(android.view.View,boolean)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.onFocusChange(android.view.View,boolean)",
            "description": {
              "What": "Validates the receiving address when the focus is lost and updates the view accordingly.",
              "Parameters": [
                {
                  "name": "v",
                  "type": "android.view.View",
                  "description": "The view that triggered the focus change event."
                },
                {
                  "name": "hasFocus",
                  "type": "boolean",
                  "description": "Indicates whether the view currently has focus or not."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To validate the receiving address and update the view when the focus is lost, ensuring data integrity and user experience.",
              "How-to-use": "Implement the onFocusChange method in a class that implements the ReceivingAddressListener interface, then set this class as the listener for the view that needs to validate the receiving address.",
              "How-it-is-done": "When the focus is lost from the view, the method calls validateReceivingAddress() to check the validity of the address and updateView() to reflect any changes in the UI.",
              "Property": {
                "pre-conditions": [
                  "The class containing this method must implement the ReceivingAddressListener interface."
                ],
                "post-conditions": [
                  "The receiving address is validated and the view is updated based on the validation result."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.onItemClick(android.widget.AdapterView,android.view.View,int,long)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.onItemClick(android.widget.AdapterView,android.view.View,int,long)",
            "description": {
              "What": "This method handles the selection of an address from a list of suggestions and sets it as the validated address in the view model.",
              "Parameters": [
                {
                  "name": "parent",
                  "type": "android.widget.AdapterView<?>",
                  "description": "The parent AdapterView where the item was clicked."
                },
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view that was clicked."
                },
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the clicked item in the adapter."
                },
                {
                  "name": "id",
                  "type": "long",
                  "description": "The row id of the clicked item."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the selection of an address from suggestions and update the view model with the validated address.",
              "How-to-use": "Implement this method in a class that implements AdapterView.OnItemClickListener interface and set it as the click listener for the AdapterView.",
              "How-it-is-done": "The method retrieves the selected address from the adapter, creates an AddressAndLabel object, sets it in the view model, clears the receiving address view, and logs the selection. It catches AddressFormatException if any.",
              "Property": {
                "pre-conditions": "The receivingAddressViewAdapter must be set with the list of address book entries before using this method.",
                "post-conditions": "The validated address in the view model is updated with the selected address from the suggestions."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.onTextChanged(java.lang.CharSequence,int,int,int)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressListener.onTextChanged(java.lang.CharSequence,int,int,int)",
            "description": {
              "What": "This method is called when the text in a text field is changed.",
              "Parameters": [
                {
                  "name": "s",
                  "type": "java.lang.CharSequence",
                  "description": "The new text in the text field."
                },
                {
                  "name": "start",
                  "type": "int",
                  "description": "The start position of the changed text."
                },
                {
                  "name": "before",
                  "type": "int",
                  "description": "The length of the text that was replaced."
                },
                {
                  "name": "count",
                  "type": "int",
                  "description": "The length of the new text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a callback for handling text changes in a text field.",
              "How-to-use": "Implement this method in a class that implements the ReceivingAddressListener interface to handle text changes in a text field.",
              "How-it-is-done": "When the text in the text field changes, this method is called with the new text, start position, length of replaced text, and length of new text as parameters.",
              "Property": {
                "pre-conditions": "The class implementing this method must implement the ReceivingAddressListener interface.",
                "post-conditions": "The text field's text will be updated according to the changes made by the user."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressViewAdapter": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressViewAdapter",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressViewAdapter.de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressViewAdapter(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressViewAdapter.de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressViewAdapter(android.content.Context)",
            "description": {
              "What": "Initialize a ReceivingAddressViewAdapter object for displaying receiving addresses in a list view.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the adapter will be used."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "Constructor method, does not return a specific type."
              },
              "Why": "To set up the adapter with the necessary context and inflater for displaying receiving addresses in a list view.",
              "How-to-use": "Create a new instance of ReceivingAddressViewAdapter by passing a valid context as a parameter.",
              "How-it-is-done": "The constructor initializes the adapter by setting the inflater using the provided context.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The inflater is set for the adapter to use in inflating views."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressViewAdapter.getFilter()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressViewAdapter.getFilter()",
            "description": {
              "What": "This method returns a filter that performs filtering on a list of address book entries based on a given constraint.",
              "Parameters": [
                {
                  "name": "constraint",
                  "type": "CharSequence",
                  "description": "The constraint used for filtering the address book entries."
                }
              ],
              "Returns": {
                "type": "Filter",
                "description": "A filter that performs filtering on a list of address book entries."
              },
              "Why": "To provide a way to filter address book entries based on a given constraint in the UI.",
              "How-to-use": "Call getFilter() on an instance of ReceivingAddressViewAdapter to get the filter, then use it to perform filtering on the address book entries.",
              "How-it-is-done": "The method creates a new Filter instance with overridden performFiltering and publishResults methods. In performFiltering, it retrieves address book entries based on the constraint and sets the results. In publishResults, it updates the adapter with the filtered entries.",
              "Property": {
                "pre-conditions": "The viewModel.validatedAddress should be null if the constraint is not empty.",
                "post-conditions": "The adapter is updated with the filtered address book entries after calling getFilter()."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressViewAdapter.getView(int,android.view.View,android.view.ViewGroup)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsFragment$ReceivingAddressViewAdapter.getView(int,android.view.View,android.view.ViewGroup)",
            "description": {
              "What": "This method is responsible for creating or reusing a view to display an address book entry in a list view.",
              "Parameters": [
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the item within the adapter's data set."
                },
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view to be reused or inflated for the item at the specified position."
                },
                {
                  "name": "parent",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view group that the returned view will be attached to."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The view representing the address book entry at the specified position."
              },
              "Why": "To provide a custom view for each address book entry in a list view and optimize view recycling for better performance.",
              "How-to-use": "Call this method within the getView() method of a custom adapter for a list view to display address book entries.",
              "How-it-is-done": "If the view is null, inflate the layout for an address book row. Set the label and formatted address of the address book entry to the corresponding text views in the view. Return the updated view.",
              "Property": {
                "pre-conditions": [
                  "The inflater and layout resource (R.layout.address_book_row) must be properly initialized."
                ],
                "post-conditions": [
                  "The view returned will display the label and formatted address of the address book entry at the specified position."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SendCoinsOfflineTask": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsOfflineTask",
        "kind": "abstract",
        "methods": {
          "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.de.schildbach.wallet.ui.send.SendCoinsOfflineTask(org.bitcoinj.wallet.Wallet,android.os.Handler)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.de.schildbach.wallet.ui.send.SendCoinsOfflineTask(org.bitcoinj.wallet.Wallet,android.os.Handler)",
            "description": {
              "What": "Initializes a SendCoinsOfflineTask object with a wallet and a background handler.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet to use for sending coins offline."
                },
                {
                  "name": "backgroundHandler",
                  "type": "android.os.Handler",
                  "description": "The handler for background processing."
                },
                "Returns"
              ],
              "type": "SendCoinsOfflineTask",
              "description": "A new instance of SendCoinsOfflineTask."
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.onEmptyWalletFailed()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.onEmptyWalletFailed()",
            "description": {
              "What": "This method handles the case when the wallet is empty and cannot adjust downwards for sending coins offline.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle the specific scenario where the wallet is empty and cannot adjust downwards for sending coins offline.",
              "How-to-use": "Simply call this method when needed to handle the failure of adjusting downwards due to an empty wallet.",
              "How-it-is-done": "When called, this method triggers the onFailure method with a new instance of Wallet.CouldNotAdjustDownwards exception.",
              "Property": {
                "pre-conditions": [
                  "The wallet must be empty."
                ],
                "post-conditions": [
                  "The onFailure method is called with a new instance of Wallet.CouldNotAdjustDownwards exception."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.onFailure(java.lang.Exception)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.onFailure(java.lang.Exception)",
            "description": {
              "What": "This method is called when an exception occurs during the execution of the SendCoinsOfflineTask.",
              "Parameters": [
                {
                  "name": "exception",
                  "type": "java.lang.Exception",
                  "description": "The exception that occurred during the task execution."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle exceptions that may occur during the offline sending of coins.",
              "How-to-use": "Subclasses of SendCoinsOfflineTask should implement this method to define the behavior when an exception occurs during the task execution.",
              "How-it-is-done": "When an exception occurs during the task execution, the onFailure method is called with the exception as a parameter. Subclasses should implement this method to handle the exception appropriately.",
              "Property": {
                "pre-conditions": "The SendCoinsOfflineTask must be executed and an exception must occur during the execution.",
                "post-conditions": "The exception is handled by the implementation of this method in the subclass."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.onInsufficientMoney(org.bitcoinj.core.Coin)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.onInsufficientMoney(org.bitcoinj.core.Coin)",
            "description": {
              "What": "This method is called when there is insufficient money to complete a transaction offline.",
              "Parameters": [
                {
                  "name": "missing",
                  "type": "org.bitcoinj.core.Coin",
                  "description": "The amount of money missing to complete the transaction."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to handle the scenario where there is not enough money to send in an offline transaction.",
              "How-to-use": "Subclasses of SendCoinsOfflineTask must implement this method to define the behavior when there is insufficient money.",
              "How-it-is-done": "When the amount of money missing for the transaction is determined, this method is called with the missing amount as a parameter. Subclasses can then implement custom logic to handle this situation, such as notifying the user or adjusting the transaction.",
              "Property": {
                "pre-conditions": [
                  "The subclass of SendCoinsOfflineTask must implement this method."
                ],
                "post-conditions": [
                  "The behavior defined in this method will be executed when there is insufficient money for an offline transaction."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.onInvalidEncryptionKey()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.onInvalidEncryptionKey()",
            "description": {
              "What": "This method is called when the encryption key provided is invalid during the send coins offline task.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "This method does not take any parameters."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle the scenario where an invalid encryption key is provided for the send coins offline task.",
              "How-to-use": "Subclasses of SendCoinsOfflineTask should implement this method to define the behavior when an invalid encryption key is encountered.",
              "How-it-is-done": "When an invalid encryption key is detected during the send coins offline task, the onInvalidEncryptionKey() method is called, triggering the specific behavior defined in the subclass implementation.",
              "Property": {
                "pre-conditions": [
                  "The send coins offline task is in progress."
                ],
                "post-conditions": [
                  "The behavior defined in the subclass implementation for handling an invalid encryption key is executed."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.onSuccess(org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.onSuccess(org.bitcoinj.core.Transaction)",
            "description": {
              "What": "This method is called when a transaction is successfully created offline.",
              "Parameters": [
                {
                  "name": "transaction",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction that was successfully created offline."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "This method is provided to allow subclasses to handle the successful creation of an offline transaction.",
              "How-to-use": "Subclasses of SendCoinsOfflineTask should implement this method to define the actions to be taken when a transaction is successfully created offline.",
              "How-it-is-done": "When a transaction is successfully created offline, this method is called with the created transaction as a parameter. Subclasses can then implement custom logic to handle the successful transaction creation.",
              "Property": {
                "pre-conditions": "The transaction parameter should not be null.",
                "post-conditions": "The subclass implementation of this method should handle the successful creation of an offline transaction."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.sendCoinsOffline(org.bitcoinj.wallet.SendRequest)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsOfflineTask.sendCoinsOffline(org.bitcoinj.wallet.SendRequest)",
            "description": {
              "What": "Sends coins offline using a provided SendRequest object and handles various exceptions that may occur during the process.",
              "Parameters": [
                {
                  "name": "sendRequest",
                  "type": "org.bitcoinj.wallet.SendRequest",
                  "description": "The SendRequest object containing details of the transaction to be sent."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To facilitate sending coins offline and handle exceptions that may arise during the process.",
              "How-to-use": "Create a SendRequest object with transaction details, then call sendCoinsOffline method with this object as the parameter.",
              "How-it-is-done": "The method posts a Runnable to a background handler, sets the Context, sends coins offline using the provided SendRequest, and handles various exceptions by posting Runnables to a callback handler.",
              "Property": {
                "pre-conditions": [
                  "The wallet object must be initialized and accessible."
                ],
                "post-conditions": [
                  "The transaction is successfully sent offline if no exceptions are thrown."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SendCoinsViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.SendCoinsViewModel.de.schildbach.wallet.ui.send.SendCoinsViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsViewModel.de.schildbach.wallet.ui.send.SendCoinsViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for sending coins with necessary LiveData objects.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to initialize the ViewModel."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.send.SendCoinsViewModel",
                "description": "A ViewModel instance for sending coins with LiveData objects initialized."
              },
              "Why": "To provide a ViewModel that can be used for sending coins with necessary data sources and live data objects.",
              "How-to-use": "Create an instance of SendCoinsViewModel by passing an android.app.Application context as a parameter.",
              "How-it-is-done": "The method initializes the ViewModel by creating instances of WalletLiveData, SelectedExchangeRateLiveData, DynamicFeeLiveData, BlockchainStateLiveData, and WalletBalanceLiveData using the provided application context.",
              "Property": {
                "pre-conditions": "The application context must not be null.",
                "post-conditions": "The ViewModel is initialized with all necessary LiveData objects for sending coins."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SendCoinsViewModel$State": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsViewModel$State",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.ui.send.SendCoinsViewModel$State.de.schildbach.wallet.ui.send.SendCoinsViewModel$State()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SendCoinsViewModel$State.de.schildbach.wallet.ui.send.SendCoinsViewModel$State()",
            "description": {
              "method": {
                "What": "Initialize a new instance of the State enum.",
                "Parameters": [],
                "Returns": "State",
                "Why": "To provide a default constructor for the State enum.",
                "How-to-use": "Simply call 'new State()' to create a new instance of the State enum.",
                "How-it-is-done": "The method defines a constructor for the State enum that does not take any parameters.",
                "Property": {
                  "pre-conditions": "None",
                  "post-conditions": "A new instance of the State enum is created."
                }
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SweepWalletActivity": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletActivity",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.SweepWalletActivity.de.schildbach.wallet.ui.send.SweepWalletActivity()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletActivity.de.schildbach.wallet.ui.send.SweepWalletActivity()",
            "description": {
              "What": "This method is a constructor for the SweepWalletActivity class.",
              "Parameters": [],
              "Returns": "SweepWalletActivity - the constructed SweepWalletActivity object.",
              "Why": "This constructor is provided to initialize an instance of the SweepWalletActivity class.",
              "How-to-use": "To use this constructor, simply create a new instance of SweepWalletActivity by calling new SweepWalletActivity().",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the SweepWalletActivity class.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of SweepWalletActivity is created."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletActivity.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletActivity.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize the SweepWalletActivity by setting the content view and starting the BlockchainService.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the activity."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the activity layout and start the BlockchainService for sweeping wallets.",
              "How-to-use": "Extend SweepWalletActivity and override the onCreate method, passing the saved instance state as a parameter.",
              "How-it-is-done": "The method calls the superclass onCreate method, sets the content view to the sweep_wallet_content layout, and starts the BlockchainService with the 'false' parameter.",
              "Property": {
                "pre-conditions": [
                  "The SweepWalletActivity class must be properly implemented and extended.",
                  "The sweep_wallet_content layout must be defined in the project resources."
                ],
                "post-conditions": [
                  "The activity layout is set to sweep_wallet_content.",
                  "The BlockchainService is started with the 'false' parameter."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletActivity.start(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletActivity.start(android.content.Context)",
            "description": {
              "What": "Starts the SweepWalletActivity by creating and starting a new Intent.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context used to start the activity."
                },
                "Returns"
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to start the SweepWalletActivity from any context.",
              "How-to-use": "Simply call SweepWalletActivity.start(context) with the desired context to start the activity.",
              "How-it-is-done": "The method creates a new Intent with the SweepWalletActivity class and starts it using the provided context.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The SweepWalletActivity is started and displayed to the user."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletActivity.start(android.content.Context,org.bitcoinj.core.VersionedChecksummedBytes)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletActivity.start(android.content.Context,org.bitcoinj.core.VersionedChecksummedBytes)",
            "description": {
              "What": "Starts the SweepWalletActivity with a given key for sweeping a wallet.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the activity should be started."
                },
                {
                  "name": "key",
                  "type": "org.bitcoinj.core.VersionedChecksummedBytes",
                  "description": "The key used for sweeping the wallet."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a convenient way to start the SweepWalletActivity with a specific key for sweeping a wallet.",
              "How-to-use": "Simply call this static method with the context and key parameters to start the SweepWalletActivity with the specified key.",
              "How-it-is-done": "The method creates an Intent for the SweepWalletActivity class, adds the key as an extra to the intent, and starts the activity using the context provided.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null.",
                  "The key parameter must not be null."
                ],
                "post-conditions": [
                  "The SweepWalletActivity is started with the specified key."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SweepWalletFragment": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.SweepWalletFragment.askConfirmSweep(org.bitcoinj.core.ECKey)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.askConfirmSweep(org.bitcoinj.core.ECKey)",
            "description": {
              "What": "Creates a new wallet with a single key and sets the state to confirm the sweep operation.",
              "Parameters": [
                {
                  "name": "key",
                  "type": "ECKey",
                  "description": "The ECKey to import into the new wallet."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To prepare for confirming the sweep operation and updating the wallet balance.",
              "How-to-use": "Call this method with an ECKey parameter to initiate the sweep process with the provided key.",
              "How-it-is-done": "The method creates a new KeyChainGroup, imports the provided key, creates a new Wallet with the group, sets the state to confirm sweep, and posts a request to update the wallet balance.",
              "Property": {
                "pre-conditions": [
                  "The ECKey parameter must not be null."
                ],
                "post-conditions": [
                  "A new wallet is created with the imported key.",
                  "The state is set to confirm sweep."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.de.schildbach.wallet.ui.send.SweepWalletFragment()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.de.schildbach.wallet.ui.send.SweepWalletFragment()",
            "description": {
              "method": {
                "What": "Initialize a new instance of SweepWalletFragment.",
                "Parameters": [
                  {
                    "name": "",
                    "type": "",
                    "description": ""
                  }
                ],
                "Returns": {
                  "type": "SweepWalletFragment",
                  "description": "A new instance of SweepWalletFragment."
                },
                "Why": "To provide a way to create a new instance of SweepWalletFragment.",
                "How-to-use": "Simply call the constructor to create a new instance of SweepWalletFragment.",
                "How-it-is-done": "The method initializes a new instance of SweepWalletFragment without any parameters.",
                "Property": {
                  "pre-conditions": "No specific pre-conditions for calling the constructor.",
                  "post-conditions": "A new instance of SweepWalletFragment is created and ready for use."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.handleDecrypt()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.handleDecrypt()",
            "description": {
              "What": "This method posts a Runnable to decode a key in a background thread.",
              "Parameters": [
                {
                  "name": "maybeDecodeKeyRunnable",
                  "type": "Runnable",
                  "description": "The Runnable to decode the key."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to handle the decryption process of a key in a separate thread to avoid blocking the main UI thread.",
              "How-to-use": "To use this method, provide a Runnable that contains the decryption logic for the key, and call handleDecrypt() to post this Runnable to be executed in a background thread.",
              "How-it-is-done": "The method simply posts the provided Runnable (maybeDecodeKeyRunnable) to a handler, which will execute it in a background thread when the handler's looper is ready.",
              "Property": {
                "pre-conditions": [
                  "The maybeDecodeKeyRunnable parameter must not be null."
                ],
                "post-conditions": [
                  "The maybeDecodeKeyRunnable will be executed in a background thread."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.handleReload()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.handleReload()",
            "description": {
              "What": "This method handles reloading the wallet balance when the wallet to sweep is not null.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "The method is provided to request the wallet balance when needed for the sweep wallet functionality.",
              "How-to-use": "Simply call this method within the SweepWalletFragment class to handle reloading the wallet balance.",
              "How-it-is-done": "The method first checks if the wallet to sweep is not null, and then proceeds to request the wallet balance.",
              "Property": {
                "pre-conditions": [
                  "The viewModel.walletToSweep should not be null."
                ],
                "post-conditions": [
                  "The wallet balance is requested if the viewModel.walletToSweep is not null."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.handleSweep()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.handleSweep()",
            "description": {
              "What": "Handles the process of sweeping a wallet by sending all funds to a specified address.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To initiate the process of sweeping a wallet and sending all funds to a specified address.",
              "How-to-use": "Call this method to start the process of sweeping the wallet and sending all funds to a specified address.",
              "How-it-is-done": "The method sets the state to preparation, retrieves dynamic fees, creates a send request with the specified fee, and then initiates the send coins offline task. Depending on the outcome, different actions are taken such as updating the state, showing dialogs, or processing the transaction.",
              "Property": {
                "pre-conditions": [
                  "The wallet to sweep must be initialized in the view model."
                ],
                "post-conditions": [
                  "The wallet funds are sent to the specified address if successful.",
                  "The state is updated based on the outcome of the sweep process."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.maybeDecodeKey()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.maybeDecodeKey()",
            "description": {
              "What": "Decodes a private key and prompts the user to confirm the sweep operation.",
              "Parameters": [
                {
                  "name": "viewModel",
                  "type": "de.schildbach.wallet.ui.send.SweepWalletFragment.State",
                  "description": "The view model containing the private key to sweep."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the decoding of different types of private keys and initiate the sweep operation.",
              "How-to-use": "Call this method with the appropriate view model containing the private key to sweep to decode the key and prompt the user for confirmation.",
              "How-it-is-done": "The method checks the type of private key to sweep and either directly decodes it (if it's a DumpedPrivateKey) or prompts the user for a password to decode a BIP38PrivateKey. It then shows progress, decodes the key in a background task, and handles success or failure accordingly.",
              "Property": {
                "pre-conditions": [
                  "The viewModel.state must be DECODE_KEY.",
                  "The viewModel.privateKeyToSweep must not be null."
                ],
                "post-conditions": [
                  "If successful, the private key is decoded and the user is prompted to confirm the sweep operation.",
                  "If the private key type is not supported, an IllegalStateException is thrown."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.onActivityResult(int,int,android.content.Intent)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.onActivityResult(int,int,android.content.Intent)",
            "description": {
              "What": "Handle the result of a scan operation and parse the input data accordingly.",
              "Parameters": [
                {
                  "name": "requestCode",
                  "type": "int",
                  "description": "The request code that identifies the scan operation."
                },
                {
                  "name": "resultCode",
                  "type": "int",
                  "description": "The result code indicating the outcome of the scan operation."
                },
                {
                  "name": "intent",
                  "type": "android.content.Intent",
                  "description": "The intent containing the scanned data."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To handle the result of a scan operation and process the scanned data accordingly.",
              "How-to-use": "Override the onActivityResult method in a SweepWalletFragment subclass, check the request code and result code, and handle the scanned data based on the result.",
              "How-it-is-done": "If the request code matches the scan request code and the result is OK, extract the scanned input data, parse it using a StringInputParser, and handle the different types of input data such as private keys, payment intents, or direct transactions.",
              "Property": {
                "pre-conditions": [
                  "The requestCode should match the REQUEST_CODE_SCAN constant of SweepWalletFragment.",
                  "The resultCode should indicate a successful scan operation (RESULT_OK)."
                ],
                "post-conditions": [
                  "The viewModel.privateKeyToSweep may be set with the parsed private key.",
                  "The state of the SweepWalletFragment may be updated to DECODE_KEY.",
                  "The input data may be classified as a private key, payment intent, or direct transaction."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.onAttach(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.onAttach(android.content.Context)",
            "description": {
              "method": {
                "What": "Initialize the fragment with the context, activity, application, configuration, and fragment manager.",
                "Parameters": [
                  {
                    "name": "context",
                    "type": "android.content.Context",
                    "description": "The context to attach to the fragment."
                  }
                ],
                "Returns": "void",
                "Why": "To set up necessary components for the fragment to function properly.",
                "How-to-use": "Call this method when attaching the fragment to a context, typically in the onAttach() method of the fragment.",
                "How-it-is-done": "The method assigns the context to the activity, retrieves the application and configuration from the activity, and gets the fragment manager.",
                "Property": {
                  "pre-conditions": "The context parameter must not be null.",
                  "post-conditions": "The activity, application, configuration, and fragment manager are properly initialized for the fragment to use."
                }
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.onCreate(android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.onCreate(android.os.Bundle)",
            "description": {
              "What": "Initialize the SweepWalletFragment by setting up options menu, checking if sweep wallet is enabled, observing dynamic fees, and handling intent extras.",
              "Parameters": [
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved instance state of the fragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To set up the SweepWalletFragment with necessary configurations and data for sweeping a wallet.",
              "How-to-use": "Extend SweepWalletFragment and override the onCreate method, passing the saved instance state as a parameter.",
              "How-it-is-done": "The method sets up options menu, checks if sweep wallet is enabled, observes dynamic fees, creates a background thread, and handles intent extras for private key sweeping.",
              "Property": {
                "pre-conditions": [
                  "The ENABLE_SWEEP_WALLET constant must be enabled."
                ],
                "post-conditions": [
                  "The SweepWalletFragment is initialized with necessary configurations and data."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)",
            "description": {
              "method": "Inflates the menu options for the SweepWalletFragment, sets visibility for scanAction based on camera features, and calls super.onCreateOptionsMenu(menu, inflater).",
              "parameters": [
                {
                  "name": "menu",
                  "type": "android.view.Menu",
                  "description": "The menu to inflate options into."
                },
                {
                  "name": "inflater",
                  "type": "android.view.MenuInflater",
                  "description": "The inflater to inflate the menu options."
                }
              ],
              "returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "why": "To set up the menu options for the SweepWalletFragment and handle visibility based on device camera features.",
              "how-to-use": "Call this method in the SweepWalletFragment to inflate menu options and set visibility for scanAction based on camera features.",
              "how-it-is-done": "The method inflates the menu options from R.menu.sweep_wallet_fragment_options, finds the scanAction and reloadAction items, checks for camera features using PackageManager, and sets visibility for scanAction accordingly.",
              "property": {
                "pre-conditions": "The activity field must be initialized before calling this method.",
                "post-conditions": "The menu options are inflated, and the visibility of scanAction is set based on camera features."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
            "description": {
              "What": "This method inflates a layout for the SweepWalletFragment and initializes various views and listeners for user interaction.",
              "Parameters": [
                {
                  "name": "inflater",
                  "type": "android.view.LayoutInflater",
                  "description": "The LayoutInflater object that can be used to inflate any views in the fragment."
                },
                {
                  "name": "container",
                  "type": "android.view.ViewGroup",
                  "description": "The parent view that the fragment's UI should be attached to."
                },
                {
                  "name": "savedInstanceState",
                  "type": "android.os.Bundle",
                  "description": "The saved state of the fragment, if available."
                }
              ],
              "Returns": {
                "type": "android.view.View",
                "description": "The root view of the inflated layout for the SweepWalletFragment."
              },
              "Why": "To set up the UI components and functionality for sweeping a wallet in the application.",
              "How-to-use": "Call this method when creating the SweepWalletFragment to initialize its UI components and set up event listeners for user interaction.",
              "How-it-is-done": "The method inflates the layout, initializes various views and listeners, sets up click listeners for buttons, and returns the root view of the inflated layout.",
              "Property": {
                "pre-conditions": [
                  "The layout file 'sweep_wallet_fragment.xml' must be available in the resources.",
                  "The activity context must be set before calling this method."
                ],
                "post-conditions": [
                  "The SweepWalletFragment UI will be set up with all necessary views and listeners for user interaction."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.onDestroy()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.onDestroy()",
            "description": {
              "What": "This method is used to clean up resources and unregister event listeners when the fragment is being destroyed.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure proper clean-up and resource management when the fragment is destroyed.",
              "How-to-use": "Simply override the onDestroy() method in your SweepWalletFragment class and add any additional clean-up logic specific to your implementation.",
              "How-it-is-done": "The method first quits the background thread's looper, removes the event listener for the sent transaction's confidence if it exists, and then calls the super.onDestroy() method to perform any additional clean-up.",
              "Property": {
                "pre-conditions": [
                  "The backgroundThread and viewModel.sentTransaction should be initialized before calling this method."
                ],
                "post-conditions": [
                  "The backgroundThread's looper is quit, and the sentTransactionConfidenceListener is unregistered if it was previously registered."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.onOptionsItemSelected(android.view.MenuItem)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.onOptionsItemSelected(android.view.MenuItem)",
            "description": {
              "What": "Handles options menu item selection for sweep wallet fragment.",
              "Parameters": [
                {
                  "name": "item",
                  "type": "android.view.MenuItem",
                  "description": "The selected menu item."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the item selection was handled, false otherwise."
              },
              "Why": "To provide functionality for handling options menu item selection in the sweep wallet fragment.",
              "How-to-use": "Override this method in SweepWalletFragment class and implement the desired functionality for each menu item.",
              "How-it-is-done": "The method checks the ID of the selected menu item and performs corresponding actions such as reloading or starting the scan activity.",
              "Property": {
                "pre-conditions": "The SweepWalletFragment class must be extended and this method must be overridden.",
                "post-conditions": "The selected menu item action is handled appropriately based on the ID."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.requestWalletBalance()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.requestWalletBalance()",
            "description": {
              "What": "Requests the wallet balance and prepares the wallet to sweep UTXOs.",
              "Parameters": [
                {
                  "name": "fragmentManager",
                  "type": "FragmentManager",
                  "description": "The fragment manager to show progress dialog."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To fetch the wallet balance and prepare the wallet for sweeping UTXOs in a structured manner.",
              "How-to-use": "Call this method passing the fragment manager as a parameter to request the wallet balance and prepare the wallet for sweeping UTXOs.",
              "How-it-is-done": "The method shows a progress dialog, fetches UTXOs, filters out spent UTXOs, creates fake transactions for unswept UTXOs, updates the view, and handles success or failure scenarios.",
              "Property": {
                "pre-conditions": [
                  "The walletToSweep in the viewModel must be initialized."
                ],
                "post-conditions": [
                  "The walletToSweep in the viewModel will be updated with unswept UTXOs as fake transactions."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.setState(de.schildbach.wallet.ui.send.SweepWalletFragment$State)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.setState(de.schildbach.wallet.ui.send.SweepWalletFragment$State)",
            "description": {
              "What": "Updates the state of the SweepWalletFragment and triggers a view update.",
              "Parameters": [
                {
                  "name": "state",
                  "type": "de.schildbach.wallet.ui.send.SweepWalletFragment.State",
                  "description": "The new state to set for the SweepWalletFragment."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the state of the SweepWalletFragment and reflect changes in the UI.",
              "How-to-use": "Call this method with the desired State object to update the state of the SweepWalletFragment and trigger a view update.",
              "How-it-is-done": "The method sets the state of the viewModel to the provided state parameter and then calls the updateView method to reflect the changes in the UI.",
              "Property": {
                "pre-conditions": [
                  "The viewModel object must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The state of the SweepWalletFragment will be updated to the provided state parameter.",
                  "The UI will be updated to reflect the changes in the state."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment.updateView()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment.updateView()",
            "description": {
              "What": "Updates the view elements based on the current state and data in the ViewModel.",
              "Parameters": [
                {
                  "fees": "Map<FeeCategory, Coin>",
                  "description": "Dynamic fees data from the ViewModel."
                },
                {
                  "btcFormat": "MonetaryFormat",
                  "description": "Monetary format configuration data."
                },
                {
                  "viewModel": "SweepWalletViewModel",
                  "description": "ViewModel containing data for the view elements."
                },
                {
                  "config": "Configuration",
                  "description": "Configuration data for the view elements."
                },
                {
                  "balanceView": "View",
                  "description": "View element for displaying balance information."
                },
                {
                  "messageView": "View",
                  "description": "View element for displaying messages."
                },
                {
                  "passwordViewGroup": "ViewGroup",
                  "description": "View group for password related elements."
                },
                {
                  "hintView": "View",
                  "description": "View element for displaying hints."
                },
                {
                  "sweepTransactionViewGroup": "ViewGroup",
                  "description": "View group for displaying sweep transaction information."
                },
                {
                  "viewCancel": "Button",
                  "description": "Cancel button element."
                },
                {
                  "viewGo": "Button",
                  "description": "Go button element."
                },
                {
                  "reloadAction": "Action",
                  "description": "Reload action element."
                },
                {
                  "scanAction": "Action",
                  "description": "Scan action element."
                }
              ],
              "Returns": "void",
              "Why": "To update the view elements based on the current state and data in the ViewModel for the Sweep Wallet feature.",
              "How-to-use": "Call this method whenever the view needs to be updated based on changes in the ViewModel data or state.",
              "How-it-is-done": "The method retrieves data from the ViewModel, configures the view elements based on the data and state, and sets the visibility, text, and enabled status of the elements accordingly.",
              "Property": {
                "Pre-conditions": [
                  "The ViewModel instance must be initialized and contain the necessary data.",
                  "The view elements referenced in the method must be present in the layout."
                ],
                "Post-conditions": [
                  "The view elements will be updated to reflect the current state and data in the ViewModel."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SweepWalletFragment$FakeTransaction": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment$FakeTransaction",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.SweepWalletFragment$FakeTransaction.de.schildbach.wallet.ui.send.SweepWalletFragment$FakeTransaction(org.bitcoinj.core.NetworkParameters,org.bitcoinj.core.Sha256Hash)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment$FakeTransaction.de.schildbach.wallet.ui.send.SweepWalletFragment$FakeTransaction(org.bitcoinj.core.NetworkParameters,org.bitcoinj.core.Sha256Hash)",
            "description": {
              "What": "Initialize a FakeTransaction object with the given network parameters and hash.",
              "Parameters": [
                {
                  "name": "params",
                  "type": "org.bitcoinj.core.NetworkParameters",
                  "description": "The network parameters for the transaction."
                },
                {
                  "name": "hash",
                  "type": "org.bitcoinj.core.Sha256Hash",
                  "description": "The hash value for the transaction."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.send.SweepWalletFragment$FakeTransaction",
                "description": "A new FakeTransaction object."
              },
              "Why": "To create a FakeTransaction object with the specified network parameters and hash for testing purposes.",
              "How-to-use": "Create a new FakeTransaction object by passing the network parameters and hash as arguments to the constructor.",
              "How-it-is-done": "The constructor initializes the FakeTransaction object by setting the network parameters and hash values provided as arguments.",
              "Property": {
                "pre-conditions": "The network parameters and hash values must not be null.",
                "post-conditions": "A new FakeTransaction object is created with the specified network parameters and hash."
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment$FakeTransaction.getHash()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment$FakeTransaction.getHash()",
            "description": {
              "What": "This method returns the hash of a fake transaction.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "None",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "Sha256Hash",
                "description": "The hash of the fake transaction."
              },
              "Why": "To provide a way to retrieve the hash of a fake transaction for further processing or comparison.",
              "How-to-use": "Simply call the getHash() method on an instance of FakeTransaction to obtain the hash value of the fake transaction.",
              "How-it-is-done": "The method simply returns the stored hash value of the fake transaction, which is initialized during object creation.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method will always return the hash value of the fake transaction."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SweepWalletFragment$State": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment$State",
        "kind": "enum",
        "methods": {
          "de.schildbach.wallet.ui.send.SweepWalletFragment$State.de.schildbach.wallet.ui.send.SweepWalletFragment$State()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment$State.de.schildbach.wallet.ui.send.SweepWalletFragment$State()",
            "description": {
              "What": "This method is a constructor for the State enum class.",
              "Parameters": [],
              "Returns": "State",
              "Why": "To initialize an instance of the State enum class.",
              "How-to-use": "To create a new State object, simply call the constructor like 'State state = new State();'.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the State enum class.",
              "Property": {
                "Pre-conditions": "No pre-conditions as the constructor does not rely on any external state.",
                "Post-conditions": "A new instance of the State enum class is created and ready for use."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.ui.send.SweepWalletFragment$ViewModel": {
        "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment$ViewModel",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.ui.send.SweepWalletFragment$ViewModel.de.schildbach.wallet.ui.send.SweepWalletFragment$ViewModel(android.app.Application)": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment$ViewModel.de.schildbach.wallet.ui.send.SweepWalletFragment$ViewModel(android.app.Application)",
            "description": {
              "What": "Initialize a ViewModel for the SweepWalletFragment with the application context.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "android.app.Application",
                  "description": "The application context used to create the ViewModel."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.ui.send.SweepWalletFragment$ViewModel",
                "description": "A ViewModel instance for the SweepWalletFragment."
              },
              "Why": "To provide a ViewModel for the SweepWalletFragment that requires the application context for functionality.",
              "How-to-use": "Create an instance of SweepWalletFragment$ViewModel by passing the application context as a parameter.",
              "How-it-is-done": "The constructor initializes the ViewModel by casting the application context to WalletApplication and assigning it to the application field.",
              "Property": {
                "pre-conditions": [
                  "The application parameter must not be null."
                ],
                "post-conditions": [
                  "The ViewModel is successfully initialized with the application context."
                ]
              }
            }
          },
          "de.schildbach.wallet.ui.send.SweepWalletFragment$ViewModel.getDynamicFees()": {
            "qualifiedName": "de.schildbach.wallet.ui.send.SweepWalletFragment$ViewModel.getDynamicFees()",
            "description": {
              "What": "This method returns a DynamicFeeLiveData object that provides dynamic fee information for transactions.",
              "Parameters": [
                {
                  "name": "application",
                  "type": "Application",
                  "description": "The application context used to create the DynamicFeeLiveData object."
                }
              ],
              "Returns": {
                "type": "DynamicFeeLiveData",
                "description": "A LiveData object that provides dynamic fee information for transactions."
              },
              "Why": "To provide access to dynamic fee information for transactions within the SweepWalletFragment ViewModel.",
              "How-to-use": "Call this method to get a DynamicFeeLiveData object that can be observed for dynamic fee updates in the UI.",
              "How-it-is-done": "The method checks if the dynamicFees object is null, and if so, creates a new DynamicFeeLiveData object with the provided application context.",
              "Property": {
                "pre-conditions": [
                  "The application context must be valid and not null."
                ],
                "post-conditions": [
                  "The method returns a non-null DynamicFeeLiveData object."
                ]
              }
            }
          }
        }
      }
    }
  },
  "de.schildbach.wallet.util": {
    "qualifiedName": "de.schildbach.wallet.util",
    "classes": {
      "de.schildbach.wallet.util.Base43": {
        "qualifiedName": "de.schildbach.wallet.util.Base43",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.Base43.copyOfRange(byte[],int,int)": {
            "qualifiedName": "de.schildbach.wallet.util.Base43.copyOfRange(byte[],int,int)",
            "description": {
              "What": "This method copies a range of bytes from a source array to a new array.",
              "Parameters": [
                {
                  "name": "source",
                  "type": "byte[]",
                  "description": "The source array from which to copy bytes."
                },
                {
                  "name": "from",
                  "type": "int",
                  "description": "The starting index of the range to copy (inclusive)."
                },
                {
                  "name": "to",
                  "type": "int",
                  "description": "The ending index of the range to copy (exclusive)."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "A new byte array containing the copied range of bytes."
              },
              "Why": "To provide a utility method for copying a specific range of bytes from an array.",
              "How-to-use": "Call this method with the source array, starting index, and ending index to get a new array containing the specified range of bytes.",
              "How-it-is-done": "The method creates a new byte array with the size of the specified range, then uses System.arraycopy to copy the bytes from the source array to the new array.",
              "Property": {
                "pre-conditions": [
                  "The source array must not be null.",
                  "The 'from' index must be within the bounds of the source array.",
                  "The 'to' index must be within the bounds of the source array."
                ],
                "post-conditions": [
                  "The returned array will contain the bytes from the 'from' index (inclusive) to the 'to' index (exclusive) of the source array."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Base43.de.schildbach.wallet.util.Base43()": {
            "qualifiedName": "de.schildbach.wallet.util.Base43.de.schildbach.wallet.util.Base43()",
            "description": {
              "What": "This method is a constructor for the Base43 class.",
              "Parameters": [],
              "Returns": "Base43 class instance",
              "Why": "To initialize an instance of the Base43 class.",
              "How-to-use": "Simply create a new instance of the Base43 class by calling the constructor.",
              "How-it-is-done": "The constructor initializes a new instance of the Base43 class with default values or settings.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of the Base43 class is created."
              }
            }
          },
          "de.schildbach.wallet.util.Base43.decode(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Base43.decode(java.lang.String)",
            "description": {
              "What": "Decode a Base43 encoded string into a byte array.",
              "Parameters": [
                {
                  "name": "input",
                  "type": "java.lang.String",
                  "description": "The Base43 encoded string to decode."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "The decoded byte array."
              },
              "Why": "To provide a method for decoding Base43 encoded strings into byte arrays.",
              "How-to-use": "Call the decode method with a Base43 encoded string as the input parameter to get the decoded byte array.",
              "How-it-is-done": "The method iterates over each character in the input string, converts it to the corresponding Base43 digit, removes leading zeros, and then decodes the byte array using a custom divmod256 method.",
              "Property": {
                "pre-conditions": [
                  "The input string must not be null."
                ],
                "post-conditions": [
                  "The returned byte array will be the decoded version of the input Base43 encoded string."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Base43.divmod256(byte[],int)": {
            "qualifiedName": "de.schildbach.wallet.util.Base43.divmod256(byte[],int)",
            "description": {
              "What": "This method performs division and modulo operations on a byte array representing a number encoded in base43.",
              "Parameters": [
                {
                  "name": "number43",
                  "type": "byte[]",
                  "description": "The byte array representing the number encoded in base43."
                },
                {
                  "name": "startAt",
                  "type": "int",
                  "description": "The index in the byte array from which to start the division and modulo operations."
                }
              ],
              "Returns": {
                "type": "byte",
                "description": "The remainder after performing the division and modulo operations."
              },
              "Why": "To convert a number encoded in base43 to a byte array representation for further processing or decoding.",
              "How-to-use": "Call this method with the byte array representing the base43 number and the starting index, then use the returned remainder for further processing.",
              "How-it-is-done": "Iterate over the byte array from the specified index, perform division and modulo operations on each element, updating the array in-place, and returning the final remainder.",
              "Property": {
                "pre-conditions": "The byte array 'number43' must not be null and 'startAt' must be a valid index within the array.",
                "post-conditions": "The byte array 'number43' will be modified in-place with division results, and the final remainder will be returned."
              }
            }
          },
          "de.schildbach.wallet.util.Base43.divmod43(byte[],int)": {
            "qualifiedName": "de.schildbach.wallet.util.Base43.divmod43(byte[],int)",
            "description": {
              "What": "This method performs division and modulo operations on a byte array using base 43 arithmetic.",
              "Parameters": [
                {
                  "name": "number",
                  "type": "byte[]",
                  "description": "The byte array to perform operations on."
                },
                {
                  "name": "startAt",
                  "type": "int",
                  "description": "The index in the byte array to start the operations from."
                }
              ],
              "Returns": {
                "type": "byte",
                "description": "The remainder after performing the operations."
              },
              "Why": "To convert byte array data into base 43 format for encoding purposes.",
              "How-to-use": "Call this method with a byte array and the starting index to convert the data into base 43 format.",
              "How-it-is-done": "Iterate over the byte array starting from the specified index, perform division and modulo operations with base 43, and update the byte array with the results.",
              "Property": {
                "pre-conditions": "The byte array 'number' must not be null.",
                "post-conditions": "The byte array 'number' will be modified with base 43 converted values."
              }
            }
          },
          "de.schildbach.wallet.util.Base43.encode(byte[])": {
            "qualifiedName": "de.schildbach.wallet.util.Base43.encode(byte[])",
            "description": {
              "What": "Encode a byte array into a Base43 string.",
              "Parameters": [
                {
                  "name": "input",
                  "type": "byte[]",
                  "description": "The byte array to be encoded."
                }
              ],
              "Returns": {
                "type": "String",
                "description": "The Base43 encoded string."
              },
              "Why": "To provide a method for encoding byte arrays into a Base43 string representation.",
              "How-to-use": "Call the encode method with a byte array as input to get the Base43 encoded string.",
              "How-it-is-done": "The method first removes leading zero bytes from the input, then encodes the remaining bytes into Base43 format using a custom alphabet, and finally returns the encoded string.",
              "Property": {
                "pre-conditions": "The input byte array must not be null.",
                "post-conditions": "The returned string will be a valid Base43 encoding of the input byte array."
              }
            }
          },
          "de.schildbach.wallet.util.Base43.f117d0d6fede4fff437792f44698edec": {
            "qualifiedName": "de.schildbach.wallet.util.Base43.f117d0d6fede4fff437792f44698edec",
            "description": {
              "What": "Initialize the INDEXES array with the indexes of characters in the ALPHABET array for Base43 encoding.",
              "Parameters": [],
              "Returns": "void",
              "Why": "To efficiently map characters to their corresponding indexes for Base43 encoding and decoding operations.",
              "How-to-use": "Simply call the static block of code in the class to initialize the INDEXES array for Base43 encoding and decoding operations.",
              "How-it-is-done": "The method loops through the INDEXES array and sets all values to -1, then loops through the ALPHABET array to map each character to its index in the INDEXES array.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": [
                  "The INDEXES array is initialized with the correct indexes for characters in the ALPHABET array for Base43 encoding and decoding operations."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.Base43Test": {
        "qualifiedName": "de.schildbach.wallet.util.Base43Test",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.Base43Test.de.schildbach.wallet.util.Base43Test()": {
            "qualifiedName": "de.schildbach.wallet.util.Base43Test.de.schildbach.wallet.util.Base43Test()",
            "description": {
              "What": "This method is a constructor for the Base43Test class.",
              "Parameters": [],
              "Returns": "Base43Test",
              "Why": "The method is provided to initialize an instance of the Base43Test class.",
              "How-to-use": "To use this method, simply create a new instance of the Base43Test class.",
              "How-it-is-done": "The method initializes a new instance of the Base43Test class without any parameters.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "A new instance of the Base43Test class is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Base43Test.decode()": {
            "qualifiedName": "de.schildbach.wallet.util.Base43Test.decode()",
            "description": {
              "What": "The method decodes a Base43 encoded string into a byte array.",
              "Parameters": [
                {
                  "name": "encodedString",
                  "type": "String",
                  "description": "The Base43 encoded string to decode."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "The decoded byte array."
              },
              "Why": "To provide a utility method for decoding Base43 encoded strings.",
              "How-to-use": "Call the decode() method of the Base43 class with a Base43 encoded string as the parameter to get the decoded byte array.",
              "How-it-is-done": "The method uses the Base43 decoding algorithm to convert the encoded string into a byte array by processing the characters in the string and mapping them to their corresponding byte values.",
              "Property": {
                "pre-conditions": "The input encoded string must be a valid Base43 encoded string.",
                "post-conditions": "The method returns a byte array that represents the decoded data from the input encoded string."
              }
            }
          },
          "de.schildbach.wallet.util.Base43Test.encode()": {
            "qualifiedName": "de.schildbach.wallet.util.Base43Test.encode()",
            "description": {
              "What": "The method encodes a byte array or a string into a Base43 encoded string.",
              "Parameters": [
                {
                  "name": "data",
                  "type": "byte[] or String",
                  "description": "The data to be encoded."
                },
                {
                  "name": "expected",
                  "type": "String",
                  "description": "The expected Base43 encoded string."
                }
              ],
              "Returns": {
                "type": "String",
                "description": "The Base43 encoded string of the input data."
              },
              "Why": "To provide a method for encoding data into a custom Base43 encoding scheme.",
              "How-to-use": "Call the encode() method with a byte array or a string as input to get the Base43 encoded string.",
              "How-it-is-done": "The method converts the input data into a Base43 encoded string by mapping each byte to a corresponding Base43 character.",
              "Property": {
                "pre-conditions": "The input data must not be null.",
                "post-conditions": "The method returns a non-null Base43 encoded string."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.Bluetooth": {
        "qualifiedName": "de.schildbach.wallet.util.Bluetooth",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.Bluetooth.compressMac(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Bluetooth.compressMac(java.lang.String)",
            "description": {
              "What": "The method compresses a MAC address by removing the colon separators.",
              "Parameters": [
                {
                  "name": "mac",
                  "type": "java.lang.String",
                  "description": "The MAC address to be compressed."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The compressed MAC address without colon separators."
              },
              "Why": "To provide a utility method for compressing MAC addresses for easier handling or comparison.",
              "How-to-use": "Simply call compressMac method with a MAC address string as the parameter to get the compressed MAC address without colon separators.",
              "How-it-is-done": "The method uses the replaceAll method of the String class to remove all occurrences of colon (':') characters in the MAC address string.",
              "Property": {
                "pre-conditions": [
                  "The input MAC address string should not be null."
                ],
                "post-conditions": [
                  "The returned compressed MAC address string will not contain any colon separators."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Bluetooth.de.schildbach.wallet.util.Bluetooth()": {
            "qualifiedName": "de.schildbach.wallet.util.Bluetooth.de.schildbach.wallet.util.Bluetooth()",
            "description": {
              "What": "This method is a constructor for the Bluetooth class.",
              "Parameters": [],
              "Returns": {
                "type": "Bluetooth",
                "description": "An instance of the Bluetooth class."
              },
              "Why": "To initialize an instance of the Bluetooth class.",
              "How-to-use": "Simply create a new instance of the Bluetooth class by calling the constructor.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the Bluetooth class.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the Bluetooth class is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Bluetooth.decompressMac(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Bluetooth.decompressMac(java.lang.String)",
            "description": {
              "What": "This method decompresses a compressed MAC address by inserting colons at every two characters.",
              "Parameters": [
                {
                  "name": "compressedMac",
                  "type": "java.lang.String",
                  "description": "The compressed MAC address to be decompressed."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The decompressed MAC address with colons inserted."
              },
              "Why": "The method is provided to convert a compressed MAC address into a more readable format for display or processing.",
              "How-to-use": "Call the method 'decompressMac' with a compressed MAC address as the input parameter to get the decompressed MAC address with colons inserted.",
              "How-it-is-done": "The method iterates over the compressed MAC address in pairs of two characters, appends a colon after each pair, and then removes the last colon before returning the decompressed MAC address.",
              "Property": {
                "pre-conditions": [
                  "The input compressed MAC address must not be null."
                ],
                "post-conditions": [
                  "The returned decompressed MAC address will have colons inserted at every two characters."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Bluetooth.getAddress(android.bluetooth.BluetoothAdapter)": {
            "qualifiedName": "de.schildbach.wallet.util.Bluetooth.getAddress(android.bluetooth.BluetoothAdapter)",
            "description": {
              "What": "This method retrieves the Bluetooth MAC address of a device, handling a specific case for Android Marshmallow.",
              "Parameters": [
                {
                  "name": "adapter",
                  "type": "android.bluetooth.BluetoothAdapter",
                  "description": "The BluetoothAdapter instance to retrieve the MAC address from."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The MAC address of the Bluetooth device, or null if it cannot be determined."
              },
              "Why": "To provide a way to retrieve the Bluetooth MAC address of a device, especially handling a specific case for Android Marshmallow.",
              "How-to-use": "Call the method getAddress() from the Bluetooth class, passing a BluetoothAdapter instance as the parameter, to retrieve the MAC address of the device.",
              "How-it-is-done": "The method first checks if the adapter is null, then retrieves the address. If the address is a specific fake MAC address for Marshmallow, it uses reflection to access the actual MAC address. Any exceptions are caught and handled accordingly.",
              "Property": {
                "pre-conditions": "The adapter parameter must not be null.",
                "post-conditions": "The method will return the MAC address of the Bluetooth device if successful, or null if it fails."
              }
            }
          },
          "de.schildbach.wallet.util.Bluetooth.getBluetoothMac(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Bluetooth.getBluetoothMac(java.lang.String)",
            "description": {
              "What": "This method extracts the Bluetooth MAC address from a Bluetooth URL.",
              "Parameters": [
                {
                  "name": "url",
                  "type": "java.lang.String",
                  "description": "The Bluetooth URL from which to extract the MAC address."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The Bluetooth MAC address extracted from the URL."
              },
              "Why": "To provide a utility method for extracting Bluetooth MAC addresses from Bluetooth URLs.",
              "How-to-use": "Call the method `getBluetoothMac` with a Bluetooth URL as the argument to extract the MAC address.",
              "How-it-is-done": "The method first checks if the URL is a valid Bluetooth URL, then finds the index of the first '/' character to extract the MAC address substring starting from index 3.",
              "Property": {
                "pre-conditions": "The input URL must be a valid Bluetooth URL.",
                "post-conditions": "The method returns the Bluetooth MAC address extracted from the URL."
              }
            }
          },
          "de.schildbach.wallet.util.Bluetooth.getBluetoothQuery(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Bluetooth.getBluetoothQuery(java.lang.String)",
            "description": {
              "What": "This method extracts the query part of a Bluetooth URL.",
              "Parameters": [
                {
                  "name": "url",
                  "type": "java.lang.String",
                  "description": "The Bluetooth URL from which to extract the query."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The query part of the Bluetooth URL."
              },
              "Why": "To provide a utility method for extracting the query part of a Bluetooth URL.",
              "How-to-use": "Call the method with a Bluetooth URL as the parameter to get the query part of the URL.",
              "How-it-is-done": "The method first checks if the URL is a valid Bluetooth URL, then finds the index of the first '/' character to extract the query part, returning '/' if no query part is found.",
              "Property": {
                "pre-conditions": "The input URL must be a valid Bluetooth URL.",
                "post-conditions": "The returned query part will be a valid query string or '/'."
              }
            }
          },
          "de.schildbach.wallet.util.Bluetooth.isBluetoothUrl(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Bluetooth.isBluetoothUrl(java.lang.String)",
            "description": {
              "What": "Checks if the given URL is a Bluetooth URL starting with 'bt:'.",
              "Parameters": [
                {
                  "name": "url",
                  "type": "java.lang.String",
                  "description": "The URL to be checked."
                },
                {
                  "Returns": {
                    "type": "boolean",
                    "description": "True if the URL is a Bluetooth URL, false otherwise."
                  }
                },
                "Why",
                "The method is provided to determine if a given URL is a Bluetooth URL, which can be useful for handling Bluetooth-related functionality in the application.",
                "How-to-use",
                "Call the method 'isBluetoothUrl' with a String parameter representing the URL to check, and it will return a boolean value indicating if the URL is a Bluetooth URL.",
                "How-it-is-done",
                "The method checks if the input URL is not null and starts with 'bt:' using a utility method 'startsWithIgnoreCase' from the 'GenericUtils' class.",
                "Property",
                {
                  "pre-conditions": [
                    "The 'url' parameter should not be null."
                  ],
                  "post-conditions": [
                    "The method returns true if the 'url' parameter starts with 'bt:', false otherwise."
                  ]
                }
              ]
            }
          }
        }
      },
      "de.schildbach.wallet.util.BluetoothTest": {
        "qualifiedName": "de.schildbach.wallet.util.BluetoothTest",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.BluetoothTest.compressDecompressMac()": {
            "qualifiedName": "de.schildbach.wallet.util.BluetoothTest.compressDecompressMac()",
            "description": {
              "What": "This method compresses and decompresses a MAC address string.",
              "Parameters": [
                {
                  "name": "mac",
                  "type": "String",
                  "description": "The MAC address string to compress and decompress."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To test the functionality of the compressMac and decompressMac methods in the Bluetooth class.",
              "How-to-use": "Call the compressDecompressMac method with a MAC address string as the parameter to test the compression and decompression functionality.",
              "How-it-is-done": "The method first compresses the MAC address using the compressMac method, then decompresses it using the decompressMac method, and finally asserts that the original MAC address is equal to the decompressed MAC address.",
              "Property": {
                "pre-conditions": "None.",
                "post-conditions": "The original MAC address should be equal to the decompressed MAC address."
              }
            }
          },
          "de.schildbach.wallet.util.BluetoothTest.de.schildbach.wallet.util.BluetoothTest()": {
            "qualifiedName": "de.schildbach.wallet.util.BluetoothTest.de.schildbach.wallet.util.BluetoothTest()",
            "description": {
              "What": "This method is a constructor for the BluetoothTest class.",
              "Parameters": [],
              "Returns": "BluetoothTest class instance",
              "Why": "To initialize an instance of the BluetoothTest class.",
              "How-to-use": "Simply create a new instance of the BluetoothTest class by calling the constructor.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the BluetoothTest class.",
              "Property": {
                "Pre-conditions": "No pre-conditions as the constructor does not require any parameters.",
                "Post-conditions": "A new instance of the BluetoothTest class is created."
              }
            }
          },
          "de.schildbach.wallet.util.BluetoothTest.getBluetooth()": {
            "qualifiedName": "de.schildbach.wallet.util.BluetoothTest.getBluetooth()",
            "description": {
              "What": "This method tests the functionality of the getBluetoothMac and getBluetoothQuery methods in the Bluetooth class by asserting their return values for different input URIs.",
              "Parameters": [
                {
                  "name": "simpleUri",
                  "type": "String",
                  "description": "A simple Bluetooth URI without a query."
                },
                {
                  "name": "queryUri",
                  "type": "String",
                  "description": "A Bluetooth URI with a query part."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To verify the correctness of the getBluetoothMac and getBluetoothQuery methods in the Bluetooth class.",
              "How-to-use": "To use this method, simply call it within a JUnit test class and run the test to verify the functionality of the getBluetoothMac and getBluetoothQuery methods.",
              "How-it-is-done": "The method creates two Bluetooth URIs, one without a query and one with a query. It then asserts the return values of the getBluetoothMac and getBluetoothQuery methods for these URIs.",
              "Property": {
                "pre-conditions": "None.",
                "post-conditions": "The assertions should pass if the getBluetoothMac and getBluetoothQuery methods are implemented correctly."
              }
            }
          },
          "de.schildbach.wallet.util.BluetoothTest.isBluetoothUri()": {
            "qualifiedName": "de.schildbach.wallet.util.BluetoothTest.isBluetoothUri()",
            "description": {
              "What": "This method checks if a given URI is a Bluetooth URI.",
              "Parameters": [
                {
                  "name": "uri",
                  "type": "String",
                  "description": "The URI to be checked for being a Bluetooth URI."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the URI is a Bluetooth URI, false otherwise."
              },
              "Why": "To provide a utility method for determining if a URI is related to Bluetooth communication.",
              "How-to-use": "Call the method 'isBluetoothUri()' with a String parameter representing the URI to be checked, and it will return a boolean indicating if it is a Bluetooth URI.",
              "How-it-is-done": "The method simply checks if the URI starts with 'bt:' or 'BT:', which are common prefixes for Bluetooth URIs, and returns true if it does.",
              "Property": {
                "pre-conditions": "The input URI should not be null.",
                "post-conditions": "The method does not modify the input URI."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.CheatSheet": {
        "qualifiedName": "de.schildbach.wallet.util.CheatSheet",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.CheatSheet.de.schildbach.wallet.util.CheatSheet()": {
            "qualifiedName": "de.schildbach.wallet.util.CheatSheet.de.schildbach.wallet.util.CheatSheet()",
            "description": {
              "What": "This method is a constructor for the CheatSheet class.",
              "Parameters": [],
              "Returns": {
                "type": "CheatSheet",
                "description": "A new instance of the CheatSheet class."
              },
              "Why": "The constructor is provided to initialize a new instance of the CheatSheet class.",
              "How-to-use": "To create a new CheatSheet object, simply call the constructor CheatSheet().",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the CheatSheet class.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the CheatSheet class is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.CheatSheet.remove(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.util.CheatSheet.remove(android.view.View)",
            "description": {
              "What": "This method removes the long click listener from a given view.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view from which to remove the long click listener."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To remove the long click listener from a view, providing a way to clean up resources or prevent unintended behavior.",
              "How-to-use": "Call this method with the view as the parameter to remove the long click listener from that view.",
              "How-it-is-done": "The method sets the onLongClickListener of the view to null, effectively removing any previously set long click listener.",
              "Property": {
                "pre-conditions": [
                  "The view parameter must not be null."
                ],
                "post-conditions": [
                  "The long click listener of the view is removed."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.CheatSheet.setup(android.view.View)": {
            "qualifiedName": "de.schildbach.wallet.util.CheatSheet.setup(android.view.View)",
            "description": {
              "What": "Sets up a long click listener on a view to show a cheat sheet with the view's content description.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view to set up the long click listener on."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the cheat sheet is shown, false otherwise."
              },
              "Why": "To provide a convenient way to show a cheat sheet with the content description of a view on long click.",
              "How-to-use": "Call this method with the desired view as the parameter to enable showing a cheat sheet on long click for that view.",
              "How-it-is-done": "The method sets an OnLongClickListener on the provided view, which shows a cheat sheet using the showCheatSheet method from the CheatSheet class when the view is long clicked.",
              "Property": {
                "pre-conditions": [
                  "The view parameter must not be null."
                ],
                "post-conditions": [
                  "A long click listener is set on the view to show a cheat sheet with the view's content description."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.CheatSheet.setup(android.view.View,int)": {
            "qualifiedName": "de.schildbach.wallet.util.CheatSheet.setup(android.view.View,int)",
            "description": {
              "What": "This method sets up a long click listener on a view to show a cheat sheet with a specified text resource ID.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view to set up the long click listener on."
                },
                {
                  "name": "textResId",
                  "type": "int",
                  "description": "The resource ID of the text to display in the cheat sheet."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the cheat sheet is shown successfully, false otherwise."
              },
              "Why": "To provide a convenient way to show informative cheat sheets on long clicks for user interaction.",
              "How-to-use": "Call this method with a view and a text resource ID to set up a cheat sheet on long click for that view.",
              "How-it-is-done": "The method sets an onLongClickListener on the view that shows a cheat sheet with the specified text resource ID when the view is long clicked.",
              "Property": {
                "pre-conditions": "The view parameter must not be null.",
                "post-conditions": "The view will have a long click listener set up to show a cheat sheet with the specified text resource ID."
              }
            }
          },
          "de.schildbach.wallet.util.CheatSheet.setup(android.view.View,java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.util.CheatSheet.setup(android.view.View,java.lang.CharSequence)",
            "description": {
              "What": "Sets up a long click listener on a view to show a cheat sheet with the provided text.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view to set up the long click listener on."
                },
                {
                  "name": "text",
                  "type": "java.lang.CharSequence",
                  "description": "The text to display in the cheat sheet when long clicked."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the cheat sheet is shown successfully, false otherwise."
              },
              "Why": "To provide a convenient way to show a cheat sheet with information when a view is long clicked.",
              "How-to-use": "Call this method with a view and text to set up a long click listener that shows a cheat sheet with the provided text when the view is long clicked.",
              "How-it-is-done": "The method sets an OnLongClickListener on the view that, when triggered, calls the showCheatSheet method from the CheatSheet class with the view and text parameters.",
              "Property": {
                "pre-conditions": "The view parameter must not be null.",
                "post-conditions": "The view will have a long click listener set up that shows a cheat sheet with the provided text when triggered."
              }
            }
          },
          "de.schildbach.wallet.util.CheatSheet.showCheatSheet(android.view.View,java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.util.CheatSheet.showCheatSheet(android.view.View,java.lang.CharSequence)",
            "description": {
              "What": "Displays a cheat sheet (tooltip) with the given text near the specified view.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view near which the cheat sheet should be displayed."
                },
                {
                  "name": "text",
                  "type": "java.lang.CharSequence",
                  "description": "The text to be displayed in the cheat sheet."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the cheat sheet was successfully displayed, false otherwise."
              },
              "Why": "To provide users with additional information or hints related to the view they interact with.",
              "How-to-use": "Call this method with a view and text to display a cheat sheet near the specified view.",
              "How-it-is-done": "The method calculates the position to display the cheat sheet based on the view's location and screen dimensions, then creates and shows a custom Toast with the specified text.",
              "Property": {
                "pre-conditions": [
                  "The 'view' parameter must not be null.",
                  "The 'text' parameter should not be empty."
                ],
                "post-conditions": [
                  "A cheat sheet (tooltip) is displayed near the specified view with the given text."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.CrashReporter": {
        "qualifiedName": "de.schildbach.wallet.util.CrashReporter",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.CrashReporter.appendInstalledPackages(java.lang.Appendable,android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter.appendInstalledPackages(java.lang.Appendable,android.content.Context)",
            "description": {
              "What": "This method appends a list of installed packages on the device along with their version information and installation dates to the provided Appendable object.",
              "Parameters": [
                {
                  "name": "report",
                  "type": "java.lang.Appendable",
                  "description": "The object to which the installed packages information will be appended."
                },
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application to access the PackageManager."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way to gather and report information about the installed packages on a device for debugging or analysis purposes.",
              "How-to-use": "Call this method with an Appendable object and the application's context to retrieve and append the list of installed packages information.",
              "How-it-is-done": "The method first obtains the PackageManager from the provided context, retrieves a list of installed packages, sorts them by package name, and then appends each package's information to the provided Appendable object in a formatted string.",
              "Property": {
                "pre-conditions": [
                  "The context parameter must not be null."
                ],
                "post-conditions": [
                  "The Appendable object 'report' will contain the information of all installed packages on the device."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.CrashReporter.appendSavedCrashTrace(java.lang.Appendable)": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter.appendSavedCrashTrace(java.lang.Appendable)",
            "description": {
              "What": "This method appends the saved crash trace from a file to the provided Appendable object.",
              "Parameters": [
                {
                  "name": "report",
                  "type": "java.lang.Appendable",
                  "description": "The Appendable object to which the crash trace will be appended."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow retrieval and appending of saved crash traces for debugging purposes.",
              "How-to-use": "Call this method with an Appendable object as the parameter to append the saved crash trace to that object.",
              "How-it-is-done": "The method checks if the crash trace file exists, reads its contents using a BufferedReader, copies the contents to the provided Appendable object, and then deletes the saved crash trace file.",
              "Property": {
                "pre-conditions": "The crashTraceFile must exist in order for the method to append the crash trace.",
                "post-conditions": "The saved crash trace file will be deleted after its contents are appended to the provided Appendable object."
              }
            }
          },
          "de.schildbach.wallet.util.CrashReporter.appendTrace(java.io.PrintWriter,java.lang.Throwable)": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter.appendTrace(java.io.PrintWriter,java.lang.Throwable)",
            "description": {
              "What": "Appends the stack trace of a Throwable and its causes to a PrintWriter.",
              "Parameters": [
                {
                  "name": "writer",
                  "type": "java.io.PrintWriter",
                  "description": "The PrintWriter to append the stack trace to."
                },
                {
                  "name": "throwable",
                  "type": "java.lang.Throwable",
                  "description": "The Throwable whose stack trace and causes are to be appended."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a utility method for appending stack traces to a PrintWriter for error reporting or logging purposes.",
              "How-to-use": "Call this method with a PrintWriter object and a Throwable object to append the stack trace and causes to the PrintWriter.",
              "How-it-is-done": "The method first prints the stack trace of the initial Throwable to the PrintWriter. Then, it iterates through the causes of the Throwable, printing each cause's stack trace to the PrintWriter.",
              "Property": {
                "pre-conditions": [
                  "The 'writer' parameter must not be null.",
                  "The 'throwable' parameter must not be null."
                ],
                "post-conditions": [
                  "The stack trace of the initial Throwable and its causes are appended to the PrintWriter."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.CrashReporter.collectSavedBackgroundTraces(java.io.File)": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter.collectSavedBackgroundTraces(java.io.File)",
            "description": {
              "What": "This method moves a saved background trace file to a specified location.",
              "Parameters": [
                {
                  "name": "file",
                  "type": "java.io.File",
                  "description": "The location where the saved background trace file will be moved."
                },
                "Returns"
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the file was successfully moved, false otherwise."
              },
              "Why": "To allow users to collect and save background traces for debugging purposes.",
              "How-to-use": "Call this method with the desired file location to move the saved background trace file to that location.",
              "How-it-is-done": "The method renames the backgroundTracesFile to the specified file location, returning true if successful.",
              "Property": {
                "pre-conditions": "The backgroundTracesFile must exist and be accessible.",
                "post-conditions": "The backgroundTracesFile will be moved to the specified location if the method returns true."
              }
            }
          },
          "de.schildbach.wallet.util.CrashReporter.copy(java.io.BufferedReader,java.lang.Appendable)": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter.copy(java.io.BufferedReader,java.lang.Appendable)",
            "description": {
              "What": "Copies the content of a BufferedReader to an Appendable line by line.",
              "Parameters": [
                {
                  "name": "in",
                  "type": "java.io.BufferedReader",
                  "description": "The BufferedReader to read from."
                },
                {
                  "name": "out",
                  "type": "java.lang.Appendable",
                  "description": "The Appendable to write to."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a utility method for copying the content of a BufferedReader to an Appendable, which can be useful in various I/O operations.",
              "How-to-use": "Call this method with a BufferedReader containing the content to be copied and an Appendable to write the content to.",
              "How-it-is-done": "The method reads each line from the BufferedReader using readLine() method, appends it to the Appendable, and adds a newline character. This process continues until the end of the BufferedReader is reached.",
              "Property": {
                "pre-conditions": "The 'in' parameter must not be null.",
                "post-conditions": "The content of the BufferedReader is successfully copied to the Appendable."
              }
            }
          },
          "de.schildbach.wallet.util.CrashReporter.de.schildbach.wallet.util.CrashReporter()": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter.de.schildbach.wallet.util.CrashReporter()",
            "description": {
              "What": "This method is a constructor for the CrashReporter class.",
              "Parameters": [],
              "Returns": {
                "type": "CrashReporter",
                "description": "An instance of the CrashReporter class."
              },
              "Why": "To initialize an instance of the CrashReporter class.",
              "How-to-use": "Simply create a new instance of the CrashReporter class using the constructor.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the CrashReporter class.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the CrashReporter class is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.CrashReporter.deleteSaveCrashTrace()": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter.deleteSaveCrashTrace()",
            "description": {
              "What": "Deletes the saved crash trace file if it exists.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "Returns true if the crash trace file was successfully deleted, false otherwise."
              },
              "Why": "Provided to allow the deletion of saved crash trace files for maintenance or privacy reasons.",
              "How-to-use": "Simply call the method deleteSaveCrashTrace() to delete the saved crash trace file.",
              "How-it-is-done": "The method accesses the static crashTraceFile field of the CrashReporter class and attempts to delete the file using the delete() method, returning true if successful.",
              "Property": {
                "pre-conditions": "None.",
                "post-conditions": "The saved crash trace file is deleted if it exists."
              }
            }
          },
          "de.schildbach.wallet.util.CrashReporter.hasSavedCrashTrace()": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter.hasSavedCrashTrace()",
            "description": {
              "What": "Checks if a crash trace file exists in the system.",
              "Parameters": [],
              "Returns": {
                "Type": "boolean",
                "Description": "True if the crash trace file exists, false otherwise."
              },
              "Why": "To determine if a crash trace has been saved in the system.",
              "How-to-use": "Call the method 'hasSavedCrashTrace()' to check if a crash trace file exists in the system.",
              "How-it-is-done": "The method checks the existence of a specific file 'crashTraceFile' using the 'exists()' method of the File class.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "The method returns true if the crash trace file exists, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.CrashReporter.init(java.io.File)": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter.init(java.io.File)",
            "description": {
              "What": "Initialize the CrashReporter by setting up necessary files and exception handler.",
              "Parameters": [
                {
                  "name": "cacheDir",
                  "type": "java.io.File",
                  "description": "The directory where crash reports and traces will be stored."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To handle uncaught exceptions and provide a way to report crashes in the application.",
              "How-to-use": "Call this method with the cache directory where crash reports should be stored before any potential crashes occur.",
              "How-it-is-done": "The method sets up the backgroundTracesFile and crashTraceFile by creating files in the cache directory. It then sets a custom UncaughtExceptionHandler to handle any uncaught exceptions.",
              "Property": {
                "pre-conditions": [
                  "The cacheDir parameter must not be null."
                ],
                "post-conditions": [
                  "The CrashReporter is initialized and ready to handle any uncaught exceptions."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.CrashReporter.saveBackgroundTrace(java.lang.Throwable,android.content.pm.PackageInfo)": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter.saveBackgroundTrace(java.lang.Throwable,android.content.pm.PackageInfo)",
            "description": {
              "What": "Save a background trace of a Throwable with package information to a file.",
              "Parameters": [
                {
                  "name": "throwable",
                  "type": "java.lang.Throwable",
                  "description": "The Throwable object to save the trace of."
                },
                {
                  "name": "packageInfo",
                  "type": "android.content.pm.PackageInfo",
                  "description": "The PackageInfo object containing version information."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to save background traces for debugging purposes.",
              "How-to-use": "Call this method with the Throwable object and PackageInfo object to save the background trace to a file.",
              "How-it-is-done": "The method synchronizes on a file object, creates a PrintWriter to write to the file, appends timestamp and version information, and then appends the stack trace of the Throwable.",
              "Property": {
                "pre-conditions": [
                  "The backgroundTracesFile object must be initialized."
                ],
                "post-conditions": [
                  "The background trace with timestamp, version information, and stack trace of the Throwable is saved to the file."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.CrashReporter$ExceptionHandler": {
        "qualifiedName": "de.schildbach.wallet.util.CrashReporter$ExceptionHandler",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.CrashReporter$ExceptionHandler.de.schildbach.wallet.util.CrashReporter$ExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter$ExceptionHandler.de.schildbach.wallet.util.CrashReporter$ExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)",
            "description": {
              "What": "Initializes an ExceptionHandler object with a previous UncaughtExceptionHandler.",
              "Parameters": [
                {
                  "name": "previousHandler",
                  "type": "java.lang.Thread.UncaughtExceptionHandler",
                  "description": "The previous UncaughtExceptionHandler to be stored in the ExceptionHandler object."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "Constructor method, does not return a specific type."
              },
              "Why": "To allow the ExceptionHandler to store a reference to the previous UncaughtExceptionHandler for handling uncaught exceptions.",
              "How-to-use": "Create a new ExceptionHandler object by passing the previous UncaughtExceptionHandler as a parameter to the constructor.",
              "How-it-is-done": "The constructor initializes the ExceptionHandler object by storing the provided previous UncaughtExceptionHandler in a class variable for future reference.",
              "Property": {
                "pre-conditions": [
                  "The previousHandler parameter must not be null."
                ],
                "post-conditions": [
                  "The ExceptionHandler object is successfully initialized with the provided previous UncaughtExceptionHandler."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.CrashReporter$ExceptionHandler.saveCrashTrace(java.lang.Throwable)": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter$ExceptionHandler.saveCrashTrace(java.lang.Throwable)",
            "description": {
              "What": "This method saves the crash trace of a Throwable to a file in UTF-8 encoding.",
              "Parameters": [
                {
                  "name": "throwable",
                  "type": "java.lang.Throwable",
                  "description": "The Throwable object containing the crash trace to be saved."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way to save crash traces for debugging purposes.",
              "How-to-use": "Call this method with the Throwable object that represents the crash trace to be saved.",
              "How-it-is-done": "The method creates a PrintWriter to write to a FileOutputStream using UTF-8 encoding, then appends the crash trace to the writer and closes it to save the trace to a file.",
              "Property": {
                "pre-conditions": "The crashTraceFile field in CrashReporter class must be initialized with the file path where the crash trace will be saved.",
                "post-conditions": "After calling this method, the crash trace of the provided Throwable will be saved to the specified file."
              }
            }
          },
          "de.schildbach.wallet.util.CrashReporter$ExceptionHandler.uncaughtException(java.lang.Thread,java.lang.Throwable)": {
            "qualifiedName": "de.schildbach.wallet.util.CrashReporter$ExceptionHandler.uncaughtException(java.lang.Thread,java.lang.Throwable)",
            "description": {
              "What": "This method logs a warning message for an uncaught exception, saves the crash trace, and then delegates the exception handling to the previous uncaught exception handler.",
              "Parameters": [
                {
                  "name": "t",
                  "type": "java.lang.Thread",
                  "description": "The thread where the uncaught exception occurred."
                },
                {
                  "name": "exception",
                  "type": "java.lang.Throwable",
                  "description": "The uncaught exception that caused the crash."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a custom exception handling mechanism for uncaught exceptions in the application.",
              "How-to-use": "Create an instance of CrashReporter$ExceptionHandler and set it as the default uncaught exception handler using Thread.setDefaultUncaughtExceptionHandler().",
              "How-it-is-done": "The method logs a warning message with the exception, attempts to save the crash trace, and then calls the uncaughtException method of the previous uncaught exception handler.",
              "Property": {
                "pre-conditions": [
                  "The CrashReporter$ExceptionHandler instance must be set as the default uncaught exception handler."
                ],
                "post-conditions": [
                  "The uncaught exception is logged, the crash trace is saved (if possible), and the exception handling is delegated to the previous uncaught exception handler."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.Crypto": {
        "qualifiedName": "de.schildbach.wallet.util.Crypto",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.Crypto.concat(byte[],byte[])": {
            "qualifiedName": "de.schildbach.wallet.util.Crypto.concat(byte[],byte[])",
            "description": {
              "What": "Concatenates two byte arrays into a single byte array.",
              "Parameters": [
                {
                  "name": "arrayA",
                  "type": "byte[]",
                  "description": "The first byte array to be concatenated."
                },
                {
                  "name": "arrayB",
                  "type": "byte[]",
                  "description": "The second byte array to be concatenated."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "A new byte array containing the concatenated contents of arrayA and arrayB."
              },
              "Why": "To combine two byte arrays into a single byte array for various cryptographic operations.",
              "How-to-use": "Call the method with two byte arrays as arguments to get a new byte array with the concatenated contents.",
              "How-it-is-done": "The method creates a new byte array with a length equal to the sum of the lengths of arrayA and arrayB. It then copies the contents of arrayA and arrayB into the new array using System.arraycopy.",
              "Property": {
                "pre-conditions": [
                  "Both arrayA and arrayB must not be null."
                ],
                "post-conditions": [
                  "The returned byte array will have a length equal to the sum of the lengths of arrayA and arrayB."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Crypto.de.schildbach.wallet.util.Crypto()": {
            "qualifiedName": "de.schildbach.wallet.util.Crypto.de.schildbach.wallet.util.Crypto()",
            "description": {
              "What": "This method is a constructor for the Crypto class.",
              "Parameters": [],
              "Returns": {
                "type": "Crypto",
                "description": "An instance of the Crypto class."
              },
              "Why": "To initialize an instance of the Crypto class.",
              "How-to-use": "Simply create a new instance of the Crypto class by calling 'new Crypto()'.",
              "How-it-is-done": "The method initializes a new instance of the Crypto class without any parameters or specific functionality.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the Crypto class is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Crypto.decrypt(java.lang.String,char[])": {
            "qualifiedName": "de.schildbach.wallet.util.Crypto.decrypt(java.lang.String,char[])",
            "description": {
              "What": "Decrypts a given text using a password and returns the decrypted text as a string.",
              "Parameters": [
                {
                  "name": "textToDecode",
                  "type": "java.lang.String",
                  "description": "The text to be decrypted."
                },
                {
                  "name": "password",
                  "type": "char[]",
                  "description": "The password used for decryption."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The decrypted text as a string."
              },
              "Why": "To provide a method for decrypting text using a password in the Crypto utility class.",
              "How-to-use": "Call the decrypt method with the text to decrypt and the password as parameters to get the decrypted text as a result.",
              "How-it-is-done": "The method calls the decryptBytes method to get the decrypted bytes, then converts the bytes to a string using UTF-8 encoding and trims any leading or trailing whitespace before returning the decrypted text.",
              "Property": {
                "pre-conditions": [
                  "The textToDecode parameter must not be null.",
                  "The password parameter must not be null."
                ],
                "post-conditions": [
                  "The returned decrypted text will not contain any leading or trailing whitespace."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Crypto.decryptBytes(java.lang.String,char[])": {
            "qualifiedName": "de.schildbach.wallet.util.Crypto.decryptBytes(java.lang.String,char[])",
            "description": {
              "What": "Decrypts a base64 encoded text using a password and returns the decrypted bytes.",
              "Parameters": [
                {
                  "name": "textToDecode",
                  "type": "java.lang.String",
                  "description": "The base64 encoded text to decrypt."
                },
                {
                  "name": "password",
                  "type": "char[]",
                  "description": "The password used for decryption."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "The decrypted bytes of the input text."
              },
              "Why": "To provide a method for decrypting base64 encoded text using a password.",
              "How-to-use": "Call decryptBytes method with the base64 encoded text and password as parameters to get the decrypted bytes.",
              "How-it-is-done": "The method decodes the base64 encoded text, extracts the cipher bytes, and then decrypts the cipher bytes using the provided password.",
              "Property": {
                "pre-conditions": [
                  "The input text must be a valid base64 encoded string.",
                  "The length of the input text must be greater than the length of the salted bytes."
                ],
                "post-conditions": [
                  "The method returns the decrypted bytes of the input text."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Crypto.decryptRaw(byte[],char[])": {
            "qualifiedName": "de.schildbach.wallet.util.Crypto.decryptRaw(byte[],char[])",
            "description": {
              "What": "Decrypts a byte array using a password and returns the decrypted byte array.",
              "Parameters": [
                {
                  "name": "bytesToDecode",
                  "type": "byte[]",
                  "description": "The byte array to decrypt."
                },
                {
                  "name": "password",
                  "type": "char[]",
                  "description": "The password used for decryption."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "The decrypted byte array."
              },
              "Why": "To provide a method for decrypting byte arrays using a password.",
              "How-to-use": "Call decryptRaw method with the byte array to decrypt and the password as parameters to get the decrypted byte array.",
              "How-it-is-done": "The method extracts the salt and cipher bytes from the input, generates an AES key using the password and salt, initializes a cipher with the key, decrypts the cipher bytes, and returns the decrypted bytes.",
              "Property": {
                "pre-conditions": "The input byte array must contain both salt and cipher bytes.",
                "post-conditions": "The method returns the decrypted byte array if successful, otherwise throws an IOException."
              }
            }
          },
          "de.schildbach.wallet.util.Crypto.encrypt(byte[],char[])": {
            "qualifiedName": "de.schildbach.wallet.util.Crypto.encrypt(byte[],char[])",
            "description": {
              "What": "Encrypts a byte array using a password and returns the encrypted result as a Base64 encoded string.",
              "Parameters": [
                {
                  "name": "plainTextAsBytes",
                  "type": "byte[]",
                  "description": "The byte array to be encrypted."
                },
                {
                  "name": "password",
                  "type": "char[]",
                  "description": "The password used for encryption."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The encrypted byte array encoded as a Base64 string."
              },
              "Why": "To provide a method for encrypting data using a password for security purposes.",
              "How-to-use": "Call the method with the byte array to encrypt and the password as parameters to get the encrypted result as a Base64 encoded string.",
              "How-it-is-done": "The method first encrypts the input byte array using the provided password, then concatenates the result with a predefined salt value, and finally encodes the combined byte array as a Base64 string.",
              "Property": {
                "pre-conditions": "The input byte array and password must not be null.",
                "post-conditions": "The returned string will be a Base64 encoded representation of the encrypted byte array."
              }
            }
          },
          "de.schildbach.wallet.util.Crypto.encrypt(java.lang.String,char[])": {
            "qualifiedName": "de.schildbach.wallet.util.Crypto.encrypt(java.lang.String,char[])",
            "description": {
              "What": "Encrypts a given plain text using a password.",
              "Parameters": [
                {
                  "name": "plainText",
                  "type": "java.lang.String",
                  "description": "The plain text to be encrypted."
                },
                {
                  "name": "password",
                  "type": "char[]",
                  "description": "The password used for encryption."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The encrypted text."
              },
              "Why": "To provide a method for encrypting sensitive information using a password.",
              "How-to-use": "Call the encrypt method with the plain text and password as parameters to get the encrypted text.",
              "How-it-is-done": "The method converts the plain text to bytes using UTF-8 encoding, then calls another encrypt method with the byte array and password.",
              "Property": {
                "pre-conditions": "The plain text and password must not be null.",
                "post-conditions": "The returned encrypted text will be a non-null string."
              }
            }
          },
          "de.schildbach.wallet.util.Crypto.encryptRaw(byte[],char[])": {
            "qualifiedName": "de.schildbach.wallet.util.Crypto.encryptRaw(byte[],char[])",
            "description": {
              "What": "Encrypts a byte array using a password and returns the encrypted bytes with salt.",
              "Parameters": [
                {
                  "name": "plainTextAsBytes",
                  "type": "byte[]",
                  "description": "The byte array to be encrypted."
                },
                {
                  "name": "password",
                  "type": "char[]",
                  "description": "The password used for encryption."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "The encrypted byte array with salt."
              },
              "Why": "To provide a method for encrypting byte arrays with a password for security purposes.",
              "How-to-use": "Call the method with the byte array to encrypt and the password as parameters to get the encrypted byte array with salt.",
              "How-it-is-done": "The method generates a random salt, derives an AES key from the password and salt, initializes a cipher with the key, encrypts the input bytes, and concatenates the salt with the encrypted bytes.",
              "Property": {
                "pre-conditions": "The input byte array and password must not be null.",
                "post-conditions": "The returned encrypted byte array will include the salt used for encryption."
              }
            }
          },
          "de.schildbach.wallet.util.Crypto.getAESPasswordKey(char[],byte[])": {
            "qualifiedName": "de.schildbach.wallet.util.Crypto.getAESPasswordKey(char[],byte[])",
            "description": {
              "What": "Generate AES password key using the provided password and salt.",
              "Parameters": [
                {
                  "name": "password",
                  "type": "char[]",
                  "description": "The password used to generate the key."
                },
                {
                  "name": "salt",
                  "type": "byte[]",
                  "description": "The salt used in key generation."
                }
              ],
              "Returns": {
                "type": "CipherParameters",
                "description": "The generated AES password key."
              },
              "Why": "To securely generate an AES key for encryption/decryption operations.",
              "How-to-use": "Call the method with the password as a char array and a salt as a byte array to obtain the AES password key for encryption/decryption operations.",
              "How-it-is-done": "The method uses the OpenSSLPBEParametersGenerator to generate parameters based on the password and salt, then derives the key and initialization vector (IV) for AES encryption.",
              "Property": {
                "pre-conditions": [
                  "The password must not be null.",
                  "The salt must not be null."
                ],
                "post-conditions": [
                  "The returned key is a valid AES password key for encryption/decryption operations."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.CryptoTest": {
        "qualifiedName": "de.schildbach.wallet.util.CryptoTest",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.CryptoTest.backups()": {
            "qualifiedName": "de.schildbach.wallet.util.CryptoTest.backups()",
            "description": {
              "What": "Decrypts and verifies the integrity of Bitcoin wallet backups using a password.",
              "Parameters": [
                {
                  "name": "backup",
                  "type": "byte[]",
                  "description": "Encrypted Bitcoin wallet backup data."
                },
                {
                  "name": "backupCrLf",
                  "type": "byte[]",
                  "description": "Encrypted Bitcoin wallet backup data with CRLF line endings."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To ensure that encrypted Bitcoin wallet backups can be successfully decrypted and verified for integrity.",
              "How-to-use": "Call the method with the encrypted Bitcoin wallet backup data and the backup data with CRLF line endings as parameters.",
              "How-it-is-done": "The method decrypts the backup data using the provided password and then checks if the decrypted data represents a valid Bitcoin wallet using WalletProtobufSerializer.isWallet().",
              "Property": {
                "pre-conditions": "The provided password must be correct for decrypting the backup data.",
                "post-conditions": "The method verifies that the decrypted data represents a valid Bitcoin wallet backup."
              }
            }
          },
          "de.schildbach.wallet.util.CryptoTest.de.schildbach.wallet.util.CryptoTest()": {
            "qualifiedName": "de.schildbach.wallet.util.CryptoTest.de.schildbach.wallet.util.CryptoTest()",
            "description": {
              "What": "This method is a constructor for the CryptoTest class.",
              "Parameters": [],
              "Returns": "CryptoTest",
              "Why": "To initialize an instance of the CryptoTest class.",
              "How-to-use": "Simply create a new instance of the CryptoTest class using the 'new' keyword.",
              "How-it-is-done": "The method initializes a new instance of the CryptoTest class without any parameters.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of the CryptoTest class is created."
              }
            }
          },
          "de.schildbach.wallet.util.CryptoTest.readBackupFromResource(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.CryptoTest.readBackupFromResource(java.lang.String)",
            "description": {
              "What": "This method reads a backup file from a specified resource and returns its content as a string.",
              "Parameters": [
                {
                  "name": "filename",
                  "type": "java.lang.String",
                  "description": "The name of the file to read from the resource."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The content of the backup file as a string."
              },
              "Why": "To provide a way to read backup files from a specified resource in the application.",
              "How-to-use": "Call this method with the filename of the backup file to read its content as a string.",
              "How-it-is-done": "The method creates a BufferedReader to read from the specified resource using UTF-8 encoding, copies the content to a StringBuilder, closes the reader, and returns the content as a string.",
              "Property": {
                "pre-conditions": [
                  "The filename parameter must not be null."
                ],
                "post-conditions": [
                  "The method returns the content of the backup file as a string."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.CryptoTest.roundtripBytes()": {
            "qualifiedName": "de.schildbach.wallet.util.CryptoTest.roundtripBytes()",
            "description": {
              "What": "This method tests the roundtrip encryption and decryption of a byte array using a password.",
              "Parameters": [
                {
                  "name": "PLAIN_BYTES",
                  "type": "byte[]",
                  "description": "The byte array to be encrypted and decrypted."
                },
                {
                  "name": "PASSWORD",
                  "type": "String",
                  "description": "The password used for encryption and decryption."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that the encryption and decryption process works correctly and securely.",
              "How-to-use": "Provide a byte array to be encrypted and decrypted along with a password, then run the test method to verify the roundtrip process.",
              "How-it-is-done": "The method encrypts the input byte array using the provided password, then decrypts the encrypted bytes using the same password. It then compares the decrypted bytes with the original input bytes to ensure they match.",
              "Property": {
                "pre-conditions": "The PLAIN_BYTES and PASSWORD parameters must be properly initialized before running the test.",
                "post-conditions": "If the test passes, it confirms that the encryption and decryption process is functioning correctly."
              }
            }
          },
          "de.schildbach.wallet.util.CryptoTest.roundtripDifferentByteSizes()": {
            "qualifiedName": "de.schildbach.wallet.util.CryptoTest.roundtripDifferentByteSizes()",
            "description": {
              "What": "The method tests the roundtrip encryption and decryption of byte arrays of different sizes.",
              "Parameters": [
                {
                  "name": "stream",
                  "type": "ByteArrayOutputStream",
                  "description": "The output stream to write bytes to."
                },
                {
                  "name": "plainBytes",
                  "type": "byte[]",
                  "description": "The plain byte array to be encrypted."
                },
                {
                  "name": "roundtrippedPlainBytes",
                  "type": "byte[]",
                  "description": "The decrypted byte array after roundtrip encryption and decryption."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that the encryption and decryption methods work correctly for byte arrays of various sizes.",
              "How-to-use": "Create an instance of CryptoTest and call the roundtripDifferentByteSizes() method.",
              "How-it-is-done": "The method creates a ByteArrayOutputStream, encrypts and decrypts the byte array in a loop, and asserts that the original byte array matches the decrypted byte array.",
              "Property": {
                "pre-conditions": "The Crypto class and its encrypt/decrypt methods are functioning correctly.",
                "post-conditions": "The method verifies that the encryption and decryption process is successful for byte arrays of different sizes."
              }
            }
          },
          "de.schildbach.wallet.util.CryptoTest.roundtripDifferentPasswordSizes()": {
            "qualifiedName": "de.schildbach.wallet.util.CryptoTest.roundtripDifferentPasswordSizes()",
            "description": {
              "What": "This method tests the roundtrip encryption and decryption of a plain text using passwords of different sizes.",
              "Parameters": [
                {
                  "name": "password",
                  "type": "char[]",
                  "description": "The password used for encryption and decryption."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that the encryption and decryption process works correctly with passwords of varying sizes.",
              "How-to-use": "Call this method to test the encryption and decryption functionality with passwords of different sizes.",
              "How-it-is-done": "The method iterates through increasing password sizes, encrypts and decrypts a plain text using the password, and asserts that the decrypted text matches the original plain text.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method ensures that the decrypted text matches the original plain text for each password size tested."
              }
            }
          },
          "de.schildbach.wallet.util.CryptoTest.roundtripDifferentTextSizes()": {
            "qualifiedName": "de.schildbach.wallet.util.CryptoTest.roundtripDifferentTextSizes()",
            "description": {
              "What": "The method tests the roundtrip encryption and decryption of text with different sizes using a specific password.",
              "Parameters": [
                {
                  "name": "builder",
                  "type": "StringBuilder",
                  "description": "A StringBuilder used to generate text of increasing sizes for testing."
                },
                {
                  "name": "plainText",
                  "type": "String",
                  "description": "The plain text to be encrypted and decrypted."
                },
                {
                  "name": "roundtrippedPlainText",
                  "type": "String",
                  "description": "The text after roundtrip encryption and decryption."
                },
                {
                  "name": "PASSWORD",
                  "type": "String",
                  "description": "The password used for encryption and decryption."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To ensure that the encryption and decryption methods work correctly for text of varying sizes.",
              "How-to-use": "Simply call the method 'roundtripDifferentTextSizes()' within a JUnit test class to verify the functionality of the encryption and decryption methods.",
              "How-it-is-done": "The method generates text of increasing sizes using a StringBuilder, encrypts and decrypts the text using a specific password, and then asserts that the original text matches the decrypted text.",
              "Property": {
                "pre-conditions": "The Crypto class and its encrypt and decrypt methods are functioning correctly.",
                "post-conditions": "The method verifies that the encryption and decryption process is successful for text of different sizes."
              }
            }
          },
          "de.schildbach.wallet.util.CryptoTest.roundtripText()": {
            "qualifiedName": "de.schildbach.wallet.util.CryptoTest.roundtripText()",
            "description": {
              "What": "This method tests the roundtrip encryption and decryption functionality of the Crypto class.",
              "Parameters": [
                {
                  "name": "plainText",
                  "type": "String",
                  "description": "The plain text message to be encrypted and decrypted."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To ensure that the encryption and decryption methods of the Crypto class work correctly and maintain data integrity.",
              "How-to-use": "Call the roundtripText() method and provide a plain text message as input to test the encryption and decryption functionality.",
              "How-it-is-done": "The method encrypts the plain text message using a password, then decrypts the encrypted text using the same password, and finally compares the decrypted text with the original plain text to verify the roundtrip process.",
              "Property": {
                "pre-conditions": "The Crypto class encryption and decryption methods must be functioning correctly.",
                "post-conditions": "The plain text message should be successfully encrypted and decrypted without any data loss or corruption."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.Formats": {
        "qualifiedName": "de.schildbach.wallet.util.Formats",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.Formats.de.schildbach.wallet.util.Formats()": {
            "qualifiedName": "de.schildbach.wallet.util.Formats.de.schildbach.wallet.util.Formats()",
            "description": {
              "What": "This method is a constructor for the Formats class.",
              "Parameters": [],
              "Returns": "Formats class instance",
              "Why": "Provided to initialize an instance of the Formats class.",
              "How-to-use": "Simply create a new instance of the Formats class by calling new Formats().",
              "How-it-is-done": "The constructor initializes a new instance of the Formats class.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of the Formats class is created."
              }
            }
          },
          "de.schildbach.wallet.util.Formats.sanitizeMemo(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Formats.sanitizeMemo(java.lang.String)",
            "description": {
              "What": "Sanitizes a memo by extracting relevant information and adding context information if available.",
              "Parameters": [
                {
                  "name": "memo",
                  "type": "java.lang.String",
                  "description": "The memo to be sanitized."
                }
              ],
              "Returns": {
                "type": "java.lang.String[]",
                "description": "An array of sanitized memos with added context information if available."
              },
              "Why": "To extract relevant information from a memo and provide additional context information if present, enhancing the readability and usability of the memo.",
              "How-to-use": "Call the method 'sanitizeMemo' with a memo string as the parameter, and it will return an array of sanitized memos with added context information if available.",
              "How-it-is-done": "The method uses a regular expression pattern to match and extract relevant information from the memo. It then checks for specific groups in the matched pattern to determine if additional context information is available, and constructs the sanitized memo accordingly.",
              "Property": {
                "pre-conditions": [
                  "The parameter 'memo' should not be null."
                ],
                "post-conditions": [
                  "The method returns an array of sanitized memos with added context information if available."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.FormatsTest": {
        "qualifiedName": "de.schildbach.wallet.util.FormatsTest",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.FormatsTest.de.schildbach.wallet.util.FormatsTest()": {
            "qualifiedName": "de.schildbach.wallet.util.FormatsTest.de.schildbach.wallet.util.FormatsTest()",
            "description": {
              "What": "This method is a constructor for the FormatsTest class.",
              "Parameters": [],
              "Returns": "FormatsTest",
              "Why": "The constructor is provided to initialize an instance of the FormatsTest class.",
              "How-to-use": "To use this constructor, simply create a new instance of FormatsTest by calling new FormatsTest().",
              "How-it-is-done": "The constructor initializes a new instance of the FormatsTest class without any parameters.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A new instance of FormatsTest is created."
              }
            }
          },
          "de.schildbach.wallet.util.FormatsTest.monetarySpannable()": {
            "qualifiedName": "de.schildbach.wallet.util.FormatsTest.monetarySpannable()",
            "description": {
              "What": "The method tests the functionality of the monetarySpannable regex pattern in the Formats class.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to the method."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "The method does not return any value."
              },
              "Why": "To ensure that the monetarySpannable regex pattern in the Formats class works correctly and captures the expected groups in different monetary formats.",
              "How-to-use": "Simply call the monetarySpannable method within a JUnit test class to verify the correctness of the monetarySpannable regex pattern.",
              "How-it-is-done": "The method creates various Matcher instances using the monetarySpannable regex pattern and asserts the expected groups for different monetary formats such as numbers, symbols, codes, and substrings.",
              "Property": {
                "pre-conditions": "No pre-conditions are required for this method.",
                "post-conditions": "The method verifies the correctness of the monetarySpannable regex pattern by checking the captured groups for different monetary formats."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.GenericUtils": {
        "qualifiedName": "de.schildbach.wallet.util.GenericUtils",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.GenericUtils.currencySymbol(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.GenericUtils.currencySymbol(java.lang.String)",
            "description": {
              "What": "This method returns the currency symbol for a given currency code.",
              "Parameters": [
                {
                  "name": "currencyCode",
                  "type": "java.lang.String",
                  "description": "The currency code for which the symbol is to be retrieved."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The currency symbol corresponding to the provided currency code, or the currency code itself if an IllegalArgumentException occurs."
              },
              "Why": "To provide a convenient way to retrieve the currency symbol based on the currency code.",
              "How-to-use": "Call the method `currencySymbol` with a valid currency code as the parameter to get the corresponding currency symbol.",
              "How-it-is-done": "The method attempts to retrieve the currency instance using the provided currency code, then returns the symbol associated with that currency. If an IllegalArgumentException occurs, it returns the currency code itself.",
              "Property": {
                "pre-conditions": "The currency code must be a valid ISO 4217 currency code.",
                "post-conditions": "The method will always return either the currency symbol or the currency code itself."
              }
            }
          },
          "de.schildbach.wallet.util.GenericUtils.de.schildbach.wallet.util.GenericUtils()": {
            "qualifiedName": "de.schildbach.wallet.util.GenericUtils.de.schildbach.wallet.util.GenericUtils()",
            "description": {
              "What": "This method is a constructor for the GenericUtils class.",
              "Parameters": [],
              "Returns": {
                "type": "GenericUtils",
                "description": "An instance of the GenericUtils class."
              },
              "Why": "The constructor is provided to initialize an instance of the GenericUtils class.",
              "How-to-use": "To use this constructor, simply create a new instance of the GenericUtils class.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the GenericUtils class.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the GenericUtils class is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.GenericUtils.startsWithIgnoreCase(java.lang.String,java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.GenericUtils.startsWithIgnoreCase(java.lang.String,java.lang.String)",
            "description": {
              "What": "Checks if a string starts with a specified prefix ignoring case.",
              "Parameters": [
                {
                  "name": "string",
                  "type": "java.lang.String",
                  "description": "The string to check."
                },
                {
                  "name": "prefix",
                  "type": "java.lang.String",
                  "description": "The prefix to check for at the beginning of the string."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the string starts with the specified prefix ignoring case, false otherwise."
              },
              "Why": "To provide a method for case-insensitive checking of string prefixes.",
              "How-to-use": "Call the method with a string and a prefix to check if the string starts with the prefix ignoring case. The method returns a boolean indicating the result.",
              "How-it-is-done": "The method uses the regionMatches() method of the String class with the 'ignoreCase' parameter set to true to perform a case-insensitive check of the prefix at the beginning of the string.",
              "Property": {
                "pre-conditions": "Both string and prefix parameters must not be null.",
                "post-conditions": "The method does not modify the input strings."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.Io": {
        "qualifiedName": "de.schildbach.wallet.util.Io",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.Io.copy(java.io.InputStream,java.io.OutputStream)": {
            "qualifiedName": "de.schildbach.wallet.util.Io.copy(java.io.InputStream,java.io.OutputStream)",
            "description": {
              "What": "This method copies data from an input stream to an output stream.",
              "Parameters": [
                {
                  "name": "is",
                  "type": "java.io.InputStream",
                  "description": "The input stream from which data will be read."
                },
                {
                  "name": "os",
                  "type": "java.io.OutputStream",
                  "description": "The output stream to which data will be written."
                }
              ],
              "Returns": {
                "type": "long",
                "description": "The total number of bytes copied from the input stream to the output stream."
              },
              "Why": "To provide a utility method for copying data between streams efficiently.",
              "How-to-use": "Call the method with an input stream and an output stream as parameters to copy data from the input stream to the output stream.",
              "How-it-is-done": "The method reads data from the input stream into a buffer, writes the buffer to the output stream, and repeats this process until the end of the input stream is reached.",
              "Property": {
                "pre-conditions": [
                  "The input stream (is) and output stream (os) must not be null."
                ],
                "post-conditions": [
                  "The output stream (os) will contain a copy of all data read from the input stream (is)."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Io.copy(java.io.Reader,java.lang.StringBuilder)": {
            "qualifiedName": "de.schildbach.wallet.util.Io.copy(java.io.Reader,java.lang.StringBuilder)",
            "description": {
              "What": "Copy the content from a Reader to a StringBuilder.",
              "Parameters": [
                {
                  "name": "reader",
                  "type": "java.io.Reader",
                  "description": "The Reader from which content will be copied."
                },
                {
                  "name": "builder",
                  "type": "java.lang.StringBuilder",
                  "description": "The StringBuilder to which content will be copied."
                }
              ],
              "Returns": {
                "type": "long",
                "description": "The number of characters copied."
              },
              "Why": "To efficiently copy content from a Reader to a StringBuilder without the need for manual handling of character buffers.",
              "How-to-use": "Simply call the method with a Reader containing the content to be copied and a StringBuilder to store the copied content.",
              "How-it-is-done": "The method internally calls another overloaded copy method with an additional offset parameter set to 0, which performs the actual copying of content character by character.",
              "Property": {
                "pre-conditions": [
                  "The reader must not be null.",
                  "The builder must not be null."
                ],
                "post-conditions": [
                  "The content from the reader will be copied to the builder.",
                  "The return value will indicate the number of characters copied."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Io.copy(java.io.Reader,java.lang.StringBuilder,long)": {
            "qualifiedName": "de.schildbach.wallet.util.Io.copy(java.io.Reader,java.lang.StringBuilder,long)",
            "description": {
              "What": "This method copies characters from a Reader to a StringBuilder up to a specified limit of characters.",
              "Parameters": [
                {
                  "name": "reader",
                  "type": "java.io.Reader",
                  "description": "The Reader from which characters are read."
                },
                {
                  "name": "builder",
                  "type": "java.lang.StringBuilder",
                  "description": "The StringBuilder to which characters are appended."
                },
                {
                  "name": "maxChars",
                  "type": "long",
                  "description": "The maximum number of characters to read, 0 for no limit."
                }
              ],
              "Returns": {
                "type": "long",
                "description": "The total number of characters read and appended to the StringBuilder."
              },
              "Why": "To provide a utility method for copying characters from a Reader to a StringBuilder with a limit on the number of characters.",
              "How-to-use": "Call the method with a Reader, a StringBuilder, and the maximum number of characters to read, and handle any IOException that may be thrown.",
              "How-it-is-done": "The method reads characters from the Reader into a buffer, appends them to the StringBuilder, and keeps track of the total number of characters read. It throws an IOException if the limit of characters is exceeded.",
              "Property": {
                "pre-conditions": [
                  "The reader and builder parameters must not be null."
                ],
                "post-conditions": [
                  "The StringBuilder will contain the characters read from the Reader, up to the specified limit."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Io.de.schildbach.wallet.util.Io()": {
            "qualifiedName": "de.schildbach.wallet.util.Io.de.schildbach.wallet.util.Io()",
            "description": {
              "What": "This method is a constructor for the Io class.",
              "Parameters": [],
              "Returns": {
                "type": "de.schildbach.wallet.util.Io",
                "description": "The constructed Io object."
              },
              "Why": "To initialize an instance of the Io class.",
              "How-to-use": "Simply create a new instance of the Io class by calling 'new Io()'.",
              "How-it-is-done": "The constructor initializes a new instance of the Io class without any parameters or additional logic.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the Io class is created."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.Iso8601Format": {
        "qualifiedName": "de.schildbach.wallet.util.Iso8601Format",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.Iso8601Format.de.schildbach.wallet.util.Iso8601Format(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Iso8601Format.de.schildbach.wallet.util.Iso8601Format(java.lang.String)",
            "description": {
              "What": "Initialize an Iso8601Format object with a specified format string and set the time zone to UTC.",
              "Parameters": [
                {
                  "name": "formatString",
                  "type": "java.lang.String",
                  "description": "The format string to be used for the Iso8601Format object."
                }
              ],
              "Returns": {
                "type": "Iso8601Format",
                "description": "The constructed Iso8601Format object."
              },
              "Why": "To provide a way to create an Iso8601Format object with a specific format string and UTC time zone setting.",
              "How-to-use": "Create a new Iso8601Format object by passing a format string to the constructor, which will automatically set the time zone to UTC.",
              "How-it-is-done": "The method initializes the Iso8601Format object with the provided format string and then sets the time zone to UTC using the setTimeZone method.",
              "Property": {
                "pre-conditions": [
                  "The formatString parameter must not be null."
                ],
                "post-conditions": [
                  "The constructed Iso8601Format object will have the specified format string and the time zone set to UTC."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Iso8601Format.formatDateTime(java.util.Date)": {
            "qualifiedName": "de.schildbach.wallet.util.Iso8601Format.formatDateTime(java.util.Date)",
            "description": {
              "What": "Formats a given java.util.Date object into a string representation in ISO 8601 format.",
              "Parameters": [
                {
                  "name": "date",
                  "type": "java.util.Date",
                  "description": "The date object to be formatted."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "A string representation of the input date in ISO 8601 format."
              },
              "Why": "To provide a convenient method for formatting Date objects into ISO 8601 format.",
              "How-to-use": "Simply call the method 'formatDateTime' with a java.util.Date object as the parameter to get the formatted date string in ISO 8601 format.",
              "How-it-is-done": "The method calls the 'newDateTimeFormat' method of the Iso8601Format class to obtain a DateFormat instance with ISO 8601 date-time format, and then formats the input date using this DateFormat instance.",
              "Property": {
                "pre-conditions": [
                  "The input date object must not be null."
                ],
                "post-conditions": [
                  "The returned string will be a valid ISO 8601 representation of the input date."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Iso8601Format.formatDateTimeT(java.util.Date)": {
            "qualifiedName": "de.schildbach.wallet.util.Iso8601Format.formatDateTimeT(java.util.Date)",
            "description": {
              "What": "Formats a given java.util.Date object into a string representation in ISO 8601 format with 'T' separator.",
              "Parameters": [
                {
                  "name": "date",
                  "type": "java.util.Date",
                  "description": "The date object to be formatted."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "A string representation of the input date in ISO 8601 format with 'T' separator."
              },
              "Why": "To provide a convenient method for formatting Date objects into ISO 8601 format with 'T' separator.",
              "How-to-use": "Simply call the static method formatDateTimeT() of the Iso8601Format class, passing a java.util.Date object as the parameter, to get the formatted date string.",
              "How-it-is-done": "The method delegates the formatting task to a new instance of DateTimeFormatT class from Iso8601Format and calls its format() method with the input date object.",
              "Property": {
                "pre-conditions": [
                  "The input date object must not be null."
                ],
                "post-conditions": [
                  "The returned string will be a valid ISO 8601 formatted date string with 'T' separator."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Iso8601Format.newDateFormat()": {
            "qualifiedName": "de.schildbach.wallet.util.Iso8601Format.newDateFormat()",
            "description": {
              "What": "Creates a new date format with the pattern 'yyyy-MM-dd'.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are required."
                }
              ],
              "Returns": {
                "type": "java.text.DateFormat",
                "description": "A new date format with the specified pattern."
              },
              "Why": "To provide a standardized date format for use in the application.",
              "How-to-use": "Simply call the 'newDateFormat()' method to obtain a date format object with the pattern 'yyyy-MM-dd'.",
              "How-it-is-done": "The method creates a new instance of the 'Iso8601Format' class with the specified date pattern 'yyyy-MM-dd' and returns it as a 'java.text.DateFormat' object.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method always returns a valid date format object with the specified pattern."
              }
            }
          },
          "de.schildbach.wallet.util.Iso8601Format.newDateTimeFormat()": {
            "qualifiedName": "de.schildbach.wallet.util.Iso8601Format.newDateTimeFormat()",
            "description": {
              "What": "Creates a new date and time format with the pattern 'yyyy-MM-dd HH:mm:ss'.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are required."
                }
              ],
              "Returns": {
                "type": "java.text.DateFormat",
                "description": "A new date and time format with the specified pattern."
              },
              "Why": "To provide a standardized date and time format for use in the application.",
              "How-to-use": "Simply call the static method newDateTimeFormat() from the Iso8601Format class to obtain a DateFormat object with the specified pattern.",
              "How-it-is-done": "The method creates a new instance of Iso8601Format class with the pattern 'yyyy-MM-dd HH:mm:ss' and returns it as a DateFormat object.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The returned DateFormat object will have the specified date and time pattern."
              }
            }
          },
          "de.schildbach.wallet.util.Iso8601Format.newDateTimeFormatT()": {
            "qualifiedName": "de.schildbach.wallet.util.Iso8601Format.newDateTimeFormatT()",
            "description": {
              "What": "Creates a new date-time format with the pattern 'yyyy-MM-dd'T'HH:mm:ss'Z''.",
              "Parameters": [
                {
                  "name": "None"
                },
                {
                  "type": "None"
                },
                {
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "java.text.DateFormat",
                "description": "A new date-time format with the specified pattern."
              },
              "Why": "To provide a specific date-time format for use in the application.",
              "How-to-use": "Simply call the static method newDateTimeFormatT() to obtain a date-time format with the pattern 'yyyy-MM-dd'T'HH:mm:ss'Z''.",
              "How-it-is-done": "The method creates a new instance of Iso8601Format with the specified date-time pattern 'yyyy-MM-dd'T'HH:mm:ss'Z''.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The returned date-time format is ready to be used for formatting date-time values."
              }
            }
          },
          "de.schildbach.wallet.util.Iso8601Format.newTimeFormat()": {
            "qualifiedName": "de.schildbach.wallet.util.Iso8601Format.newTimeFormat()",
            "description": {
              "What": "Creates a new time format with the pattern 'HH:mm:ss'.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are required."
                }
              ],
              "Returns": {
                "type": "java.text.DateFormat",
                "description": "A new time format with the pattern 'HH:mm:ss'."
              },
              "Why": "To provide a standardized time format for use in the application.",
              "How-to-use": "Simply call the static method newTimeFormat() from the Iso8601Format class to obtain a time format object with the specified pattern.",
              "How-it-is-done": "The method creates a new instance of Iso8601Format class with the pattern 'HH:mm:ss' and returns it as a java.text.DateFormat object.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The returned time format object will have the pattern 'HH:mm:ss'."
              }
            }
          },
          "de.schildbach.wallet.util.Iso8601Format.parseDateTime(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Iso8601Format.parseDateTime(java.lang.String)",
            "description": {
              "What": "Parse a string representation of a date and time in ISO 8601 format into a Date object.",
              "Parameters": [
                {
                  "name": "source",
                  "type": "java.lang.String",
                  "description": "The string representation of the date and time to be parsed."
                }
              ],
              "Returns": {
                "type": "java.util.Date",
                "description": "A Date object representing the parsed date and time."
              },
              "Why": "To provide a utility method for parsing ISO 8601 date and time strings into Date objects.",
              "How-to-use": "Call the parseDateTime method with a string in ISO 8601 format as the source parameter to obtain a Date object representing the parsed date and time.",
              "How-it-is-done": "The method delegates the parsing task to a new instance of Iso8601Format's DateTimeFormat, which uses a SimpleDateFormat with the appropriate ISO 8601 format pattern to parse the input string into a Date object.",
              "Property": {
                "pre-conditions": [
                  "The source parameter must be a non-null string representing a valid date and time in ISO 8601 format."
                ],
                "post-conditions": [
                  "The method returns a non-null Date object representing the parsed date and time."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Iso8601Format.parseDateTimeT(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Iso8601Format.parseDateTimeT(java.lang.String)",
            "description": {
              "What": "This method parses a string representation of a date and time in ISO 8601 format with 'T' separator.",
              "Parameters": [
                {
                  "name": "source",
                  "type": "java.lang.String",
                  "description": "The string representation of the date and time to be parsed."
                }
              ],
              "Returns": {
                "type": "java.util.Date",
                "description": "The parsed Date object representing the date and time."
              },
              "Why": "To provide a utility method for parsing ISO 8601 date and time strings.",
              "How-to-use": "Call the method 'parseDateTimeT' with a string parameter containing the ISO 8601 formatted date and time to obtain a Date object representing the parsed date and time.",
              "How-it-is-done": "The method uses a new instance of a DateTimeFormatT object from Iso8601Format class to parse the input string and return the Date object.",
              "Property": {
                "pre-conditions": "The input string must be in valid ISO 8601 format with 'T' separator.",
                "post-conditions": "The method will throw a ParseException if the input string is not in a valid ISO 8601 format."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.MonetarySpannable": {
        "qualifiedName": "de.schildbach.wallet.util.MonetarySpannable",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.MonetarySpannable.applyMarkup(android.text.Spannable,java.lang.Object[],java.lang.Object[],java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.util.MonetarySpannable.applyMarkup(android.text.Spannable,java.lang.Object[],java.lang.Object[],java.lang.Object[])",
            "description": {
              "What": "This method applies different spans to a Spannable text based on the provided arrays of spans for prefix, significant, and insignificant parts of the text.",
              "Parameters": [
                {
                  "name": "spannable",
                  "type": "android.text.Spannable",
                  "description": "The Spannable text to which spans will be applied."
                },
                {
                  "name": "prefixSpans",
                  "type": "java.lang.Object[]",
                  "description": "Array of spans to be applied to the prefix part of the text."
                },
                {
                  "name": "significantSpans",
                  "type": "java.lang.Object[]",
                  "description": "Array of spans to be applied to the significant part of the text."
                },
                {
                  "name": "insignificantSpans",
                  "type": "java.lang.Object[]",
                  "description": "Array of spans to be applied to the insignificant part of the text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow for applying different visual styles to different parts of a Spannable text, such as prefix, significant, and insignificant parts.",
              "How-to-use": "Call this method with the Spannable text and arrays of spans for prefix, significant, and insignificant parts to apply the specified visual styles to each part.",
              "How-it-is-done": "The method first removes any existing spans specified in the input arrays, then uses a regex pattern to identify the prefix, significant, and insignificant parts of the text, and finally applies the corresponding spans to each part.",
              "Property": {
                "pre-conditions": [
                  "The Spannable text (spannable) must not be null."
                ],
                "post-conditions": [
                  "The specified spans are applied to the corresponding parts of the Spannable text."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.MonetarySpannable.applyMarkup(java.lang.Object[],java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.util.MonetarySpannable.applyMarkup(java.lang.Object[],java.lang.Object[])",
            "description": {
              "What": "This method applies markup to the monetary spannable object by adding prefix spans and insignificant spans.",
              "Parameters": [
                {
                  "name": "prefixSpans",
                  "type": "java.lang.Object[]",
                  "description": "An array of prefix spans to be added to the monetary spannable object."
                },
                {
                  "name": "insignificantSpans",
                  "type": "java.lang.Object[]",
                  "description": "An array of insignificant spans to be added to the monetary spannable object."
                }
              ],
              "Returns": {
                "type": "de.schildbach.wallet.util.MonetarySpannable",
                "description": "The modified monetary spannable object with the applied markup."
              },
              "Why": "To allow users to customize the appearance of the monetary spannable object by adding different types of spans.",
              "How-to-use": "Create an instance of MonetarySpannable, set the prefixSpans and insignificantSpans arrays, and call applyMarkup method to apply the markup.",
              "How-it-is-done": "The method calls the static applyMarkup method of MonetarySpannable class passing the current object, prefixSpans, standard significant spans, and insignificantSpans arrays.",
              "Property": {
                "pre-conditions": [
                  "The MonetarySpannable object must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The MonetarySpannable object will have the specified prefix spans and insignificant spans applied."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.MonetarySpannable.de.schildbach.wallet.util.MonetarySpannable(org.bitcoinj.utils.MonetaryFormat,boolean,org.bitcoinj.core.Monetary)": {
            "qualifiedName": "de.schildbach.wallet.util.MonetarySpannable.de.schildbach.wallet.util.MonetarySpannable(org.bitcoinj.utils.MonetaryFormat,boolean,org.bitcoinj.core.Monetary)",
            "description": {
              "What": "Constructs a MonetarySpannable object based on the provided format, signed flag, and monetary value.",
              "Parameters": [
                {
                  "name": "format",
                  "type": "org.bitcoinj.utils.MonetaryFormat",
                  "description": "The format to be used for formatting the monetary value."
                },
                {
                  "name": "signed",
                  "type": "boolean",
                  "description": "A flag indicating whether the monetary value should be signed."
                },
                {
                  "name": "monetary",
                  "type": "org.bitcoinj.core.Monetary",
                  "description": "The monetary value to be formatted."
                }
              ],
              "Returns": {
                "type": "MonetarySpannable",
                "description": "A new instance of MonetarySpannable constructed based on the provided parameters."
              },
              "Why": "To provide a convenient way to create a formatted monetary value with customizable formatting options.",
              "How-to-use": "Create a new instance of MonetarySpannable by passing in a MonetaryFormat, a boolean flag for signed formatting, and a Monetary value.",
              "How-it-is-done": "The constructor calls a static method format() in the same class to generate the formatted string based on the provided parameters and then initializes the MonetarySpannable object with this formatted string.",
              "Property": {
                "pre-conditions": [
                  "The format parameter should not be null.",
                  "The monetary parameter can be null."
                ],
                "post-conditions": [
                  "A new MonetarySpannable object is created with the specified formatting and monetary value."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.MonetarySpannable.de.schildbach.wallet.util.MonetarySpannable(org.bitcoinj.utils.MonetaryFormat,org.bitcoinj.core.Monetary)": {
            "qualifiedName": "de.schildbach.wallet.util.MonetarySpannable.de.schildbach.wallet.util.MonetarySpannable(org.bitcoinj.utils.MonetaryFormat,org.bitcoinj.core.Monetary)",
            "description": {
              "What": "Constructs a MonetarySpannable object with the specified format and monetary value.",
              "Parameters": [
                {
                  "name": "format",
                  "type": "org.bitcoinj.utils.MonetaryFormat",
                  "description": "The format to use for the monetary value."
                },
                {
                  "name": "monetary",
                  "type": "org.bitcoinj.core.Monetary",
                  "description": "The monetary value to be displayed."
                },
                "Returns"
              ]
            }
          },
          "de.schildbach.wallet.util.MonetarySpannable.format(org.bitcoinj.utils.MonetaryFormat,boolean,org.bitcoinj.core.Monetary)": {
            "qualifiedName": "de.schildbach.wallet.util.MonetarySpannable.format(org.bitcoinj.utils.MonetaryFormat,boolean,org.bitcoinj.core.Monetary)",
            "description": {
              "What": "Format a monetary value using a specified format and sign options.",
              "Parameters": [
                {
                  "name": "format",
                  "type": "org.bitcoinj.utils.MonetaryFormat",
                  "description": "The format to be used for formatting the monetary value."
                },
                {
                  "name": "signed",
                  "type": "boolean",
                  "description": "A flag indicating whether to include the sign in the formatted output."
                },
                {
                  "name": "monetary",
                  "type": "org.bitcoinj.core.Monetary",
                  "description": "The monetary value to be formatted."
                }
              ],
              "Returns": {
                "type": "java.lang.CharSequence",
                "description": "The formatted monetary value as a CharSequence."
              },
              "Why": "To provide flexibility in formatting monetary values with different formats and sign options.",
              "How-to-use": "Call the method with the desired format, sign option, and monetary value to get the formatted output as a CharSequence.",
              "How-it-is-done": "The method first checks for null monetary value and format, then formats the monetary value based on the specified format and sign options, returning the formatted value as a CharSequence.",
              "Property": {
                "pre-conditions": [
                  "The monetary value and format should not be null."
                ],
                "post-conditions": [
                  "The returned CharSequence will contain the formatted monetary value based on the specified format and sign options."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.Nfc": {
        "qualifiedName": "de.schildbach.wallet.util.Nfc",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.Nfc.createMime(java.lang.String,byte[])": {
            "qualifiedName": "de.schildbach.wallet.util.Nfc.createMime(java.lang.String,byte[])",
            "description": {
              "What": "Creates an NdefRecord for a MIME type with the specified payload.",
              "Parameters": [
                {
                  "name": "mimeType",
                  "type": "java.lang.String",
                  "description": "The MIME type of the record."
                },
                {
                  "name": "payload",
                  "type": "byte[]",
                  "description": "The payload data of the record."
                }
              ],
              "Returns": {
                "type": "android.nfc.NdefRecord",
                "description": "The created NdefRecord for the specified MIME type and payload."
              },
              "Why": "To facilitate the creation of NdefRecords for MIME types in NFC communication.",
              "How-to-use": "Call the method with the desired MIME type and payload data to obtain an NdefRecord for use in NFC communication.",
              "How-it-is-done": "The method converts the MIME type to ASCII bytes, creates an NdefRecord with the specified TNF_MIME_MEDIA type, MIME bytes, empty type, and payload, then returns the created NdefRecord.",
              "Property": {
                "pre-conditions": "The mimeType parameter must not be null.",
                "post-conditions": "The returned NdefRecord is created with the specified MIME type and payload."
              }
            }
          },
          "de.schildbach.wallet.util.Nfc.de.schildbach.wallet.util.Nfc()": {
            "qualifiedName": "de.schildbach.wallet.util.Nfc.de.schildbach.wallet.util.Nfc()",
            "description": {
              "What": "This method is a constructor for the Nfc class.",
              "Parameters": [],
              "Returns": {
                "type": "Nfc",
                "description": "An instance of the Nfc class."
              },
              "Why": "To initialize an instance of the Nfc class.",
              "How-to-use": "Simply create a new instance of the Nfc class by calling new Nfc().",
              "How-it-is-done": "The method initializes a new instance of the Nfc class without any parameters.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "An instance of the Nfc class is created."
              }
            }
          },
          "de.schildbach.wallet.util.Nfc.extractMimePayload(java.lang.String,android.nfc.NdefMessage)": {
            "qualifiedName": "de.schildbach.wallet.util.Nfc.extractMimePayload(java.lang.String,android.nfc.NdefMessage)",
            "description": {
              "What": "This method extracts the payload of a specific MIME type from an NdefMessage.",
              "Parameters": [
                {
                  "name": "mimeType",
                  "type": "java.lang.String",
                  "description": "The MIME type to extract the payload for."
                },
                {
                  "name": "message",
                  "type": "android.nfc.NdefMessage",
                  "description": "The NdefMessage to search for the MIME type."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "The payload of the specified MIME type, or null if not found."
              },
              "Why": "To provide a utility method for extracting MIME payloads from NdefMessages.",
              "How-to-use": "Call the method with the desired MIME type and NdefMessage to retrieve the payload for that MIME type.",
              "How-it-is-done": "The method converts the MIME type to bytes, then iterates through the NdefRecords in the NdefMessage to find a record matching the MIME type, returning its payload if found.",
              "Property": {
                "pre-conditions": [
                  "The NdefMessage must not be null."
                ],
                "post-conditions": [
                  "The method returns null if no record with the specified MIME type is found."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.OnFirstPreDraw": {
        "qualifiedName": "de.schildbach.wallet.util.OnFirstPreDraw",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.OnFirstPreDraw.de.schildbach.wallet.util.OnFirstPreDraw(android.view.ViewTreeObserver,de.schildbach.wallet.util.OnFirstPreDraw$Callback)": {
            "qualifiedName": "de.schildbach.wallet.util.OnFirstPreDraw.de.schildbach.wallet.util.OnFirstPreDraw(android.view.ViewTreeObserver,de.schildbach.wallet.util.OnFirstPreDraw$Callback)",
            "description": {
              "What": "This method adds a listener to a ViewTreeObserver to be notified when the view is about to be drawn for the first time.",
              "Parameters": [
                {
                  "name": "viewTreeObserver",
                  "type": "android.view.ViewTreeObserver",
                  "description": "The ViewTreeObserver to add the listener to."
                },
                {
                  "name": "callback",
                  "type": "de.schildbach.wallet.util.OnFirstPreDraw.Callback",
                  "description": "The callback to be invoked when the view is about to be drawn for the first time."
                }
              ],
              "Returns": "N/A (constructor)",
              "Why": "To allow clients to perform actions when a view is about to be drawn for the first time.",
              "How-to-use": "Create an instance of OnFirstPreDraw by passing a ViewTreeObserver and a callback, then the listener will be added to the ViewTreeObserver to be notified when the view is about to be drawn for the first time.",
              "How-it-is-done": "The method initializes the viewTreeObserver and callback fields with the provided parameters, then adds an instance of the class itself as a listener to the viewTreeObserver.",
              "Property": {
                "pre-conditions": "The viewTreeObserver and callback parameters must not be null.",
                "post-conditions": "The listener is successfully added to the ViewTreeObserver."
              }
            }
          },
          "de.schildbach.wallet.util.OnFirstPreDraw.listen(android.view.View,de.schildbach.wallet.util.OnFirstPreDraw$Callback)": {
            "qualifiedName": "de.schildbach.wallet.util.OnFirstPreDraw.listen(android.view.View,de.schildbach.wallet.util.OnFirstPreDraw$Callback)",
            "description": {
              "What": "Creates a listener for the first pre-draw event of a given view.",
              "Parameters": [
                {
                  "name": "view",
                  "type": "android.view.View",
                  "description": "The view to listen for the first pre-draw event."
                },
                {
                  "name": "callback",
                  "type": "de.schildbach.wallet.util.OnFirstPreDraw.Callback",
                  "description": "The callback to be executed when the first pre-draw event occurs."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To allow users to perform actions when the first pre-draw event of a view occurs.",
              "How-to-use": "Call this method with the view and callback parameters to set up a listener for the first pre-draw event of the view.",
              "How-it-is-done": "The method creates a new instance of OnFirstPreDraw passing the view's ViewTreeObserver and the callback.",
              "Property": {
                "pre-conditions": "The view parameter must not be null.",
                "post-conditions": "A listener is set up for the first pre-draw event of the view."
              }
            }
          },
          "de.schildbach.wallet.util.OnFirstPreDraw.onPreDraw()": {
            "qualifiedName": "de.schildbach.wallet.util.OnFirstPreDraw.onPreDraw()",
            "description": {
              "What": "This method is used to handle the onPreDraw event and execute a callback only once when the view is drawn for the first time.",
              "Parameters": [
                {
                  "name": "viewTreeObserver",
                  "type": "ViewTreeObserver",
                  "description": "The ViewTreeObserver associated with the view being drawn."
                },
                {
                  "name": "callback",
                  "type": "OnFirstPreDraw.Callback",
                  "description": "The callback to be executed when the view is drawn for the first time."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "Returns true if the callback is executed for the first time, false otherwise."
              },
              "Why": "To provide a mechanism to execute a callback only once when a view is drawn for the first time, avoiding multiple executions.",
              "How-to-use": "Create an instance of OnFirstPreDraw, passing the ViewTreeObserver and the callback. Add the instance as an OnPreDrawListener to the ViewTreeObserver.",
              "How-it-is-done": "The method first checks if the ViewTreeObserver is alive and removes the listener if so. Then, it executes the callback only if it has not been executed before.",
              "Property": {
                "pre-conditions": [
                  "The viewTreeObserver must not be null.",
                  "The callback must not be null."
                ],
                "post-conditions": [
                  "The callback is executed only once when the view is drawn for the first time.",
                  "The listener is removed from the ViewTreeObserver after execution."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.OnFirstPreDraw$Callback": {
        "qualifiedName": "de.schildbach.wallet.util.OnFirstPreDraw$Callback",
        "kind": "interface",
        "methods": {
          "de.schildbach.wallet.util.OnFirstPreDraw$Callback.onFirstPreDraw()": {
            "qualifiedName": "de.schildbach.wallet.util.OnFirstPreDraw$Callback.onFirstPreDraw()",
            "description": {
              "What": "This method is used to notify when the first pre-draw event occurs.",
              "Parameters": [
                {
                  "name": "",
                  "type": "",
                  "description": ""
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the first pre-draw event has occurred, false otherwise."
              },
              "Why": "This method is provided to allow classes implementing the interface to perform actions when the first pre-draw event happens.",
              "How-to-use": "Implement the OnFirstPreDraw.Callback interface and override the onFirstPreDraw() method to define the desired behavior when the first pre-draw event occurs.",
              "How-it-is-done": "When the first pre-draw event occurs, the onFirstPreDraw() method is called, triggering any actions defined in its implementation.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The method should return true if the first pre-draw event has occurred, and false otherwise."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.Qr": {
        "qualifiedName": "de.schildbach.wallet.util.Qr",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.Qr.bitmap(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Qr.bitmap(java.lang.String)",
            "description": {
              "What": "Generates a QR code bitmap image from the given content string.",
              "Parameters": [
                {
                  "name": "content",
                  "type": "java.lang.String",
                  "description": "The content string to encode into a QR code."
                }
              ],
              "Returns": {
                "type": "android.graphics.Bitmap",
                "description": "A bitmap image of the QR code generated from the content string."
              },
              "Why": "To provide a method for generating QR code images from content strings, which can be useful for various applications such as displaying QR codes for scanning.",
              "How-to-use": "Call the 'bitmap' method of the 'Qr' class with the content string as the parameter to generate a QR code bitmap image.",
              "How-it-is-done": "The method uses the ZXing library to encode the content string into a BitMatrix, then converts the BitMatrix into a byte array representing pixel values of the QR code image, and finally creates a Bitmap image from the pixel values.",
              "Property": {
                "pre-conditions": [
                  "The content string must not be null."
                ],
                "post-conditions": [
                  "If the content string is successfully encoded into a QR code image, a non-null Bitmap object is returned.",
                  "If an exception occurs during the encoding process, null is returned."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Qr.de.schildbach.wallet.util.Qr()": {
            "qualifiedName": "de.schildbach.wallet.util.Qr.de.schildbach.wallet.util.Qr()",
            "description": {
              "What": "This method is a constructor for the Qr class.",
              "Parameters": [],
              "Returns": "Qr class instance",
              "Why": "To initialize an instance of the Qr class.",
              "How-to-use": "Simply call the constructor to create a new instance of the Qr class.",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the Qr class.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of the Qr class is created."
              }
            }
          },
          "de.schildbach.wallet.util.Qr.decodeBinary(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Qr.decodeBinary(java.lang.String)",
            "description": {
              "What": "Decode a binary content encoded in Base43 format.",
              "Parameters": [
                {
                  "name": "content",
                  "type": "java.lang.String",
                  "description": "The binary content encoded in Base43 format."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "The decoded binary content as a byte array."
              },
              "Why": "To provide a method for decoding binary content encoded in Base43 format.",
              "How-to-use": "Call the method 'decodeBinary' with a Base43 encoded string as the parameter to get the decoded binary content as a byte array.",
              "How-it-is-done": "The method 'decodeBinary' internally uses the 'decode' method from the 'Base43' class to decode the Base43 encoded content and return it as a byte array.",
              "Property": {
                "pre-conditions": [
                  "The input content must be a valid Base43 encoded string."
                ],
                "post-conditions": [
                  "The method returns the decoded binary content as a byte array."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Qr.decodeDecompressBinary(java.lang.String)": {
            "qualifiedName": "de.schildbach.wallet.util.Qr.decodeDecompressBinary(java.lang.String)",
            "description": {
              "What": "Decode and decompress a binary string encoded using Base43 and optionally compressed with GZIP.",
              "Parameters": [
                {
                  "name": "content",
                  "type": "java.lang.String",
                  "description": "The binary string to decode and decompress."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "The decoded and decompressed binary data."
              },
              "Why": "To provide a method for decoding and decompressing binary data encoded in a specific format.",
              "How-to-use": "Call the method `decodeDecompressBinary` with a binary string encoded using Base43, optionally compressed with GZIP, to get the decoded and decompressed binary data.",
              "How-it-is-done": "The method checks if compression is used, decodes the Base43 encoded string, creates an input stream from the decoded bytes, and if compression is used, wraps the stream with a GZIPInputStream. It then reads from the stream, writes to a ByteArrayOutputStream, and returns the resulting byte array.",
              "Property": {
                "pre-conditions": [
                  "The input binary string must be encoded using Base43."
                ],
                "post-conditions": [
                  "The method returns the decoded and decompressed binary data."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Qr.encodeBinary(byte[])": {
            "qualifiedName": "de.schildbach.wallet.util.Qr.encodeBinary(byte[])",
            "description": {
              "What": "Encodes a byte array into a Base43 string.",
              "Parameters": [
                {
                  "name": "bytes",
                  "type": "byte[]",
                  "description": "The byte array to be encoded."
                }
              ],
              "Returns": {
                "type": "java.lang.String",
                "description": "The Base43 encoded string."
              },
              "Why": "To provide a method for encoding binary data into a human-readable format using Base43 encoding.",
              "How-to-use": "Call the method `encodeBinary` with a byte array as the parameter to get the Base43 encoded string.",
              "How-it-is-done": "The method calls the `encode` method of the `Base43` class from the `de.schildbach.wallet.util` package to perform the Base43 encoding of the input byte array.",
              "Property": {
                "pre-conditions": "The input byte array must not be null.",
                "post-conditions": "The returned string will be the Base43 encoded representation of the input byte array."
              }
            }
          },
          "de.schildbach.wallet.util.Qr.encodeCompressBinary(byte[])": {
            "qualifiedName": "de.schildbach.wallet.util.Qr.encodeCompressBinary(byte[])",
            "description": {
              "What": "Compresses a byte array using GZIP and encodes it in Base43 format with a flag indicating compression.",
              "Parameters": [
                {
                  "name": "bytes",
                  "type": "byte[]",
                  "description": "The byte array to compress and encode."
                }
              ],
              "Returns": {
                "type": "String",
                "description": "A string representing the compressed and encoded byte array."
              },
              "Why": "To provide a method for compressing and encoding byte arrays with a flag indicating compression for efficient storage or transmission.",
              "How-to-use": "Call the method with a byte array as input to get a string representation of the compressed and encoded data.",
              "How-it-is-done": "The method creates a GZIPOutputStream to compress the input byte array, checks if compression was effective, then encodes the compressed or original bytes using Base43 with a flag indicating compression.",
              "Property": {
                "pre-conditions": "The input byte array must not be null.",
                "post-conditions": "The returned string will start with 'Z' if compression was used, or '-' if no compression was applied."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.Toast": {
        "qualifiedName": "de.schildbach.wallet.util.Toast",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.Toast.customToast(int,int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.util.Toast.customToast(int,int,java.lang.Object[])",
            "description": {
              "What": "This method displays a custom toast message with formatted text for a specified duration.",
              "Parameters": [
                {
                  "name": "textResId",
                  "type": "int",
                  "description": "The resource ID of the text to be displayed."
                },
                {
                  "name": "duration",
                  "type": "int",
                  "description": "The duration for which the toast message should be displayed."
                },
                {
                  "name": "formatArgs",
                  "type": "Object[]",
                  "description": "Optional arguments to format the text before displaying."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a way to display custom toast messages with formatted text.",
              "How-to-use": "Call this method with the resource ID of the text, duration, and optional format arguments to display a custom toast message.",
              "How-it-is-done": "The method retrieves the formatted text using the resource ID and format arguments, then calls another method to display the custom toast message with the specified duration.",
              "Property": {
                "pre-conditions": [
                  "The context must be set before calling this method."
                ],
                "post-conditions": [
                  "A custom toast message is displayed with the specified text and duration."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Toast.customToast(java.lang.CharSequence,int)": {
            "qualifiedName": "de.schildbach.wallet.util.Toast.customToast(java.lang.CharSequence,int)",
            "description": {
              "What": "This method displays a custom toast message with the given text and duration.",
              "Parameters": [
                {
                  "name": "text",
                  "type": "java.lang.CharSequence",
                  "description": "The text to be displayed in the toast message."
                },
                {
                  "name": "duration",
                  "type": "int",
                  "description": "The duration for which the toast message should be displayed (e.g., Toast.LENGTH_SHORT or Toast.LENGTH_LONG)."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow displaying custom toast messages in the application.",
              "How-to-use": "To use this method, create an instance of the Toast class and call customToast() with the desired text and duration parameters.",
              "How-it-is-done": "The method creates a new Toast message using the provided text and duration, then shows the toast message on the screen.",
              "Property": {
                "pre-conditions": "The 'context' variable must be initialized with a valid context before calling this method.",
                "post-conditions": "A custom toast message is displayed on the screen with the specified text and duration."
              }
            }
          },
          "de.schildbach.wallet.util.Toast.de.schildbach.wallet.util.Toast(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.util.Toast.de.schildbach.wallet.util.Toast(android.content.Context)",
            "description": {
              "What": "Initialize a Toast object with the given context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context to use for the Toast object."
                }
              ],
              "Returns": "N/A",
              "Why": "To provide a way to create Toast objects with a specific context.",
              "How-to-use": "Create a new instance of Toast by passing a valid android.content.Context object as the parameter.",
              "How-it-is-done": "The constructor initializes the context field of the Toast object with the provided context parameter.",
              "Property": {
                "pre-conditions": "The context parameter must not be null.",
                "post-conditions": "A new Toast object is created with the specified context."
              }
            }
          },
          "de.schildbach.wallet.util.Toast.longToast(int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.util.Toast.longToast(int,java.lang.Object[])",
            "description": {
              "What": "Displays a long duration toast message with formatted text.",
              "Parameters": [
                {
                  "name": "textResId",
                  "type": "int",
                  "description": "The resource ID of the text to be displayed."
                },
                {
                  "name": "formatArgs",
                  "type": "Object[]",
                  "description": "Optional arguments for formatting the text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to display toast messages with formatted text for a longer duration.",
              "How-to-use": "Call this method with the resource ID of the text to be displayed and optional format arguments to show a long toast message with formatted text.",
              "How-it-is-done": "The method delegates the display of the toast message to a customToast method with the specified text resource ID, long duration, and optional format arguments.",
              "Property": {
                "pre-conditions": [
                  "The textResId parameter must be a valid resource ID of the text to be displayed."
                ],
                "post-conditions": [
                  "A long duration toast message with formatted text is displayed on the screen."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Toast.longToast(java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.util.Toast.longToast(java.lang.CharSequence)",
            "description": {
              "What": "Display a toast message with the given text for a long duration.",
              "Parameters": [
                {
                  "name": "text",
                  "type": "java.lang.CharSequence",
                  "description": "The text to be displayed in the toast message."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to display longer duration toast messages in the application.",
              "How-to-use": "Call the method 'longToast' with the desired text message as the parameter to display a toast message for a long duration.",
              "How-it-is-done": "The method 'longToast' internally calls the 'customToast' method with the provided text and 'LENGTH_LONG' constant to display the toast message for a long duration.",
              "Property": {
                "pre-conditions": [
                  "The 'text' parameter must not be null."
                ],
                "post-conditions": [
                  "A toast message with the given text will be displayed for a long duration."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Toast.postLongToast(int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.util.Toast.postLongToast(int,java.lang.Object[])",
            "description": {
              "What": "Posts a long toast message with the specified text resource ID and format arguments.",
              "Parameters": [
                {
                  "name": "textResId",
                  "type": "int",
                  "description": "The resource ID of the text to be displayed in the toast message."
                },
                {
                  "name": "formatArgs",
                  "type": "Object[]",
                  "description": "Optional format arguments to be used in the text resource string."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To display a long toast message with dynamic text content in a separate thread to avoid blocking the main UI thread.",
              "How-to-use": "Call postLongToast(int textResId, Object... formatArgs) with the desired text resource ID and optional format arguments to display a long toast message asynchronously.",
              "How-it-is-done": "The method uses a handler to post a Runnable that calls the longToast(int textResId, Object... formatArgs) method to display the toast message with the specified text resource ID and format arguments.",
              "Property": {
                "pre-conditions": [
                  "The textResId parameter must be a valid resource ID of a string resource."
                ],
                "post-conditions": [
                  "A long toast message is displayed with the specified text content."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Toast.postLongToast(java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.util.Toast.postLongToast(java.lang.CharSequence)",
            "description": {
              "What": "This method posts a long duration toast message on the UI thread.",
              "Parameters": [
                {
                  "name": "text",
                  "type": "java.lang.CharSequence",
                  "description": "The text to be displayed in the toast message."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To display a toast message for a longer duration without blocking the UI thread.",
              "How-to-use": "Call this method with the desired text message to display a long duration toast on the UI thread.",
              "How-it-is-done": "The method uses a handler to post a Runnable on the UI thread, which then calls the longToast method with the provided text.",
              "Property": {
                "pre-conditions": "The method should be called from the UI thread.",
                "post-conditions": "A long duration toast message with the specified text is displayed on the UI thread."
              }
            }
          },
          "de.schildbach.wallet.util.Toast.postToast(int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.util.Toast.postToast(int,java.lang.Object[])",
            "description": {
              "What": "This method posts a toast message with a specified text resource ID and optional format arguments.",
              "Parameters": [
                {
                  "name": "textResId",
                  "type": "int",
                  "description": "The resource ID of the text to be displayed in the toast message."
                },
                {
                  "name": "formatArgs",
                  "type": "Object[]",
                  "description": "Optional format arguments to be used in the text resource."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To display toast messages with dynamic text content and provide a way to update the UI from a background thread.",
              "How-to-use": "Call this method with the text resource ID and optional format arguments to display a toast message on the UI thread.",
              "How-it-is-done": "The method uses a handler to post a Runnable on the UI thread, which then calls the 'toast' method with the specified text resource ID and format arguments.",
              "Property": {
                "pre-conditions": [
                  "The 'handler' instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "A toast message will be displayed on the UI thread with the specified text resource ID and format arguments."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Toast.postToast(java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.util.Toast.postToast(java.lang.CharSequence)",
            "description": {
              "What": "This method posts a toast message to be displayed on the UI thread.",
              "Parameters": [
                {
                  "name": "text",
                  "type": "java.lang.CharSequence",
                  "description": "The text message to be displayed in the toast."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To display toast messages on the UI thread asynchronously.",
              "How-to-use": "Call this method with the desired text message to display a toast on the UI thread.",
              "How-it-is-done": "The method uses a handler to post a new Runnable on the UI thread, which then calls the toast method with the provided text message.",
              "Property": {
                "pre-conditions": [
                  "The method should be called from a context where a handler is available."
                ],
                "post-conditions": [
                  "A toast message will be displayed on the UI thread with the provided text."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Toast.toast(int,java.lang.Object[])": {
            "qualifiedName": "de.schildbach.wallet.util.Toast.toast(int,java.lang.Object[])",
            "description": {
              "What": "Displays a short toast message with formatted text.",
              "Parameters": [
                {
                  "name": "textResId",
                  "type": "int",
                  "description": "Resource ID of the text to be displayed."
                },
                {
                  "name": "formatArgs",
                  "type": "Object[]",
                  "description": "Array of objects to be used for formatting the text."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to display formatted toast messages in the application.",
              "How-to-use": "Call the 'toast' method with the resource ID of the text and an array of objects for formatting.",
              "How-it-is-done": "The method calls the 'customToast' method with the provided text resource ID, short duration, and format arguments for displaying the toast message.",
              "Property": {
                "pre-conditions": [
                  "The 'textResId' parameter must be a valid resource ID of the text to be displayed."
                ],
                "post-conditions": [
                  "A toast message is displayed with the formatted text using the provided format arguments."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.Toast.toast(java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.util.Toast.toast(java.lang.CharSequence)",
            "description": {
              "What": "Displays a short toast message with the given text.",
              "Parameters": [
                {
                  "name": "text",
                  "type": "java.lang.CharSequence",
                  "description": "The text to be displayed in the toast message."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a convenient way to display short toast messages in the application.",
              "How-to-use": "Simply call the 'toast' method with the desired text to display a short toast message.",
              "How-it-is-done": "The 'toast' method internally calls the 'customToast' method with the provided text and a predefined length of 'LENGTH_SHORT' for the toast duration.",
              "Property": {
                "pre-conditions": "The 'text' parameter must not be null.",
                "post-conditions": "A toast message with the specified text is displayed for a short duration."
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.ViewPagerTabs": {
        "qualifiedName": "de.schildbach.wallet.util.ViewPagerTabs",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.ViewPagerTabs.addTabLabels(int[])": {
            "qualifiedName": "de.schildbach.wallet.util.ViewPagerTabs.addTabLabels(int[])",
            "description": {
              "What": "This method adds tab labels to the ViewPagerTabs object.",
              "Parameters": [
                {
                  "name": "labelResId",
                  "type": "int[]",
                  "description": "An array of resource IDs for the tab labels."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To dynamically add tab labels to the ViewPagerTabs object based on the provided resource IDs.",
              "How-to-use": "Call this method with an array of resource IDs for the tab labels to be added to the ViewPagerTabs object.",
              "How-it-is-done": "The method iterates over the provided resource IDs, retrieves the corresponding label strings from the context, calculates the width of each label, and adds them to the labels list while updating the maxWidth property if necessary.",
              "Property": {
                "pre-conditions": [
                  "The ViewPagerTabs object must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The tab labels specified by the provided resource IDs are added to the ViewPagerTabs object."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.ViewPagerTabs.de.schildbach.wallet.util.ViewPagerTabs(android.content.Context,android.util.AttributeSet)": {
            "qualifiedName": "de.schildbach.wallet.util.ViewPagerTabs.de.schildbach.wallet.util.ViewPagerTabs(android.content.Context,android.util.AttributeSet)",
            "description": {
              "What": "Initialize a custom view for tabs in a ViewPager with specific text size, color, and shadow.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the view will be created."
                },
                {
                  "name": "attrs",
                  "type": "android.util.AttributeSet",
                  "description": "The set of attributes provided in the XML layout file for customization."
                }
              ],
              "Returns": {
                "type": "ViewPagerTabs",
                "description": "A custom view for tabs in a ViewPager with specified text attributes."
              },
              "Why": "To provide a custom view for tabs in a ViewPager with specific text styling and shadow effects.",
              "How-to-use": "Create an instance of ViewPagerTabs by passing a valid context and attributes, then add this view to the layout XML file to display tabs in a ViewPager.",
              "How-it-is-done": "The method initializes the view by setting text size, color, anti-aliasing, and shadow properties using Paint class methods. It ensures the view is save enabled to retain its state.",
              "Property": {
                "pre-conditions": [
                  "Valid non-null context and attributes must be provided."
                ],
                "post-conditions": [
                  "The ViewPagerTabs view is initialized with specified text attributes and ready for display."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.ViewPagerTabs.getSuggestedMinimumHeight()": {
            "qualifiedName": "de.schildbach.wallet.util.ViewPagerTabs.getSuggestedMinimumHeight()",
            "description": {
              "What": "Calculates the suggested minimum height for the ViewPagerTabs based on the font metrics and padding.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are required for this method."
                }
              ],
              "Returns": {
                "type": "int",
                "description": "The suggested minimum height for the ViewPagerTabs."
              },
              "Why": "To determine the minimum height needed for the ViewPagerTabs to display text properly with padding.",
              "How-to-use": "Simply call this method on an instance of ViewPagerTabs to get the suggested minimum height value.",
              "How-it-is-done": "The method sets the typeface to DEFAULT_BOLD, calculates the height based on font metrics, padding, and returns the total height.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "The returned height value is the suggested minimum height for the ViewPagerTabs."
              }
            }
          },
          "de.schildbach.wallet.util.ViewPagerTabs.onDraw(android.graphics.Canvas)": {
            "qualifiedName": "de.schildbach.wallet.util.ViewPagerTabs.onDraw(android.graphics.Canvas)",
            "description": {
              "What": "Draws tabs with labels on a canvas for a ViewPager.",
              "Parameters": [
                {
                  "name": "canvas",
                  "type": "android.graphics.Canvas",
                  "description": "The canvas on which to draw the tabs."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To visually represent tabs with labels for a ViewPager component.",
              "How-to-use": "Extend the ViewPagerTabs class and override the onDraw method to customize the appearance of tabs with labels for a ViewPager.",
              "How-it-is-done": "The method calculates the positions and visibility of tabs based on the current page position and offset, then draws the tabs and labels on the canvas with appropriate styles and alpha values.",
              "Property": {
                "pre-conditions": [
                  "The ViewPagerTabs class must be extended and the onDraw method must be overridden."
                ],
                "post-conditions": [
                  "Tabs with labels are drawn on the canvas based on the current page position and offset."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.ViewPagerTabs.onMeasure(int,int)": {
            "qualifiedName": "de.schildbach.wallet.util.ViewPagerTabs.onMeasure(int,int)",
            "description": {
              "What": "This method calculates the width and height of the view based on the specified width and height measurements.",
              "Parameters": [
                {
                  "name": "widthMeasureSpec",
                  "type": "int",
                  "description": "The width measurement specification."
                },
                {
                  "name": "heightMeasureSpec",
                  "type": "int",
                  "description": "The height measurement specification."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to handle the measurement of the view's width and height in a custom way.",
              "How-to-use": "Override this method in a custom ViewPagerTabs class to define how the view's width and height should be measured.",
              "How-it-is-done": "The method extracts the width and height mode and size from the measurement specifications, calculates the width and height based on the mode, and sets the measured dimensions for the view.",
              "Property": {
                "pre-conditions": [
                  "The widthMeasureSpec and heightMeasureSpec parameters must be valid measurement specifications."
                ],
                "post-conditions": [
                  "The view's measured width and height will be set based on the calculations performed in the method."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.ViewPagerTabs.onPageScrollStateChanged(int)": {
            "qualifiedName": "de.schildbach.wallet.util.ViewPagerTabs.onPageScrollStateChanged(int)",
            "description": {
              "What": "This method is used to handle changes in the scroll state of a ViewPager.",
              "Parameters": [
                {
                  "name": "state",
                  "type": "int",
                  "description": "The new scroll state of the ViewPager (0 for idle, 1 for dragging, 2 for settling)."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to allow custom behavior to be implemented based on the scroll state of a ViewPager.",
              "How-to-use": "Override this method in a custom ViewPagerTabs class to define actions to be taken when the scroll state changes.",
              "How-it-is-done": "The method simply receives the new scroll state as a parameter and can be implemented to perform actions based on this state.",
              "Property": {
                "pre-conditions": "This method should be used in a class that extends ViewPagerTabs.",
                "post-conditions": "The actions defined in this method will be executed when the scroll state of the ViewPager changes."
              }
            }
          },
          "de.schildbach.wallet.util.ViewPagerTabs.onPageScrolled(int,float,int)": {
            "qualifiedName": "de.schildbach.wallet.util.ViewPagerTabs.onPageScrolled(int,float,int)",
            "description": {
              "What": "Updates the page offset based on the current position and offset while scrolling in a ViewPagerTabs.",
              "Parameters": [
                {
                  "name": "position",
                  "type": "int",
                  "description": "The position of the current page."
                },
                {
                  "name": "positionOffset",
                  "type": "float",
                  "description": "The offset from the current page."
                },
                {
                  "name": "positionOffsetPixels",
                  "type": "int",
                  "description": "The offset in pixels from the current page."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the page offset and trigger a redraw of the ViewPagerTabs.",
              "How-to-use": "Create an instance of ViewPagerTabs and set it as the OnPageChangeListener for a ViewPager. As the ViewPager is scrolled, this method will be called automatically to update the page offset.",
              "How-it-is-done": "The method calculates the page offset by adding the position and offset values, then invalidates the view to trigger a redraw.",
              "Property": {
                "pre-conditions": "The ViewPagerTabs instance must be set as the OnPageChangeListener for a ViewPager.",
                "post-conditions": "The page offset will be updated and the view will be invalidated for a redraw."
              }
            }
          },
          "de.schildbach.wallet.util.ViewPagerTabs.onPageSelected(int)": {
            "qualifiedName": "de.schildbach.wallet.util.ViewPagerTabs.onPageSelected(int)",
            "description": {
              "What": "Updates the page position and invalidates the view.",
              "Parameters": [
                {
                  "name": "position",
                  "type": "int",
                  "description": "The new position of the page."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To update the page position and trigger a view invalidation for the ViewPagerTabs class.",
              "How-to-use": "Call this method when the selected page changes to update the position and refresh the view accordingly.",
              "How-it-is-done": "The method sets the pagePosition field to the new position parameter and then calls the invalidate() method to trigger a view refresh.",
              "Property": {
                "pre-conditions": [
                  "The ViewPagerTabs instance must be properly initialized before calling this method."
                ],
                "post-conditions": [
                  "The page position is updated to the new value provided as the parameter.",
                  "The view associated with the ViewPagerTabs instance is invalidated and will be redrawn."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.ViewPagerTabs.onRestoreInstanceState(android.os.Parcelable)": {
            "qualifiedName": "de.schildbach.wallet.util.ViewPagerTabs.onRestoreInstanceState(android.os.Parcelable)",
            "description": {
              "What": "Restores the instance state of the ViewPagerTabs by retrieving the page position and offset from the saved bundle.",
              "Parameters": [
                {
                  "name": "state",
                  "type": "android.os.Parcelable",
                  "description": "The Parcelable object containing the saved instance state."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To restore the state of the ViewPagerTabs after it has been destroyed and recreated, maintaining the previous page position and offset.",
              "How-to-use": "Call this method passing the Parcelable object containing the saved instance state when restoring the ViewPagerTabs.",
              "How-it-is-done": "Checks if the Parcelable state is a Bundle, retrieves the page position and offset from the bundle, calls the super method to restore the super state, and then returns.",
              "Property": {
                "pre-conditions": "The state parameter must not be null.",
                "post-conditions": "The ViewPagerTabs instance state is successfully restored with the previous page position and offset."
              }
            }
          },
          "de.schildbach.wallet.util.ViewPagerTabs.onSaveInstanceState()": {
            "qualifiedName": "de.schildbach.wallet.util.ViewPagerTabs.onSaveInstanceState()",
            "description": {
              "What": "This method saves the current state of the ViewPagerTabs instance.",
              "Parameters": [
                {
                  "name": "N/A",
                  "type": "N/A",
                  "description": "No parameters are passed to this method."
                }
              ],
              "Returns": {
                "type": "Parcelable",
                "description": "A Bundle containing the saved state of the ViewPagerTabs instance."
              },
              "Why": "To allow the ViewPagerTabs instance to save its state and restore it later when needed.",
              "How-to-use": "Simply call this method on an instance of ViewPagerTabs to save its state before it gets destroyed or recreated.",
              "How-it-is-done": "The method creates a Bundle, puts the super state, page position, and page offset into it, and returns the Bundle.",
              "Property": {
                "pre-conditions": [
                  "The ViewPagerTabs instance must be initialized before calling this method."
                ],
                "post-conditions": [
                  "The saved state can be retrieved later using onRestoreInstanceState() method."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.WalletUtils": {
        "qualifiedName": "de.schildbach.wallet.util.WalletUtils",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.WalletUtils.autoBackupWallet(android.content.Context,org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.autoBackupWallet(android.content.Context,org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method is used to automatically backup a Bitcoin wallet by serializing it to a protobuf file in the specified context.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context in which the wallet backup will be saved."
                },
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The Bitcoin wallet to be backed up."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "The method is provided to allow for automatic backup of Bitcoin wallets to prevent loss of funds or data.",
              "How-to-use": "To use this method, pass the context in which the backup file will be saved and the wallet object to be backed up as parameters.",
              "How-it-is-done": "The method first creates a protobuf representation of the wallet, clears sensitive information, writes the protobuf to a file in the specified context, and logs the backup operation.",
              "Property": {
                "pre-conditions": "The wallet object must not be null.",
                "post-conditions": "A protobuf file containing the serialized wallet is saved in the specified context."
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.de.schildbach.wallet.util.WalletUtils()": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.de.schildbach.wallet.util.WalletUtils()",
            "description": {
              "What": "This method is a constructor for the WalletUtils class.",
              "Parameters": [],
              "Returns": "WalletUtils",
              "Why": "To initialize an instance of the WalletUtils class.",
              "How-to-use": "Simply create a new instance of the WalletUtils class by calling new WalletUtils().",
              "How-it-is-done": "The constructor does not take any parameters and simply initializes a new instance of the WalletUtils class.",
              "Property": {
                "Pre-conditions": "None",
                "Post-conditions": "A new instance of the WalletUtils class is created."
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.formatAddress(java.lang.String,org.bitcoinj.core.Address,int,int)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.formatAddress(java.lang.String,org.bitcoinj.core.Address,int,int)",
            "description": {
              "What": "Formats a Bitcoin address with a specified prefix, group size, and line size using thin spaces as separators.",
              "Parameters": [
                {
                  "name": "prefix",
                  "type": "java.lang.String",
                  "description": "Optional prefix to be added before the formatted address."
                },
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to be formatted."
                },
                {
                  "name": "groupSize",
                  "type": "int",
                  "description": "The size of each group of characters in the formatted address."
                },
                {
                  "name": "lineSize",
                  "type": "int",
                  "description": "The maximum number of characters per line in the formatted address."
                }
              ],
              "Returns": {
                "type": "android.text.Spanned",
                "description": "A formatted Bitcoin address with the specified prefix, group size, and line size."
              },
              "Why": "To provide a convenient way to format Bitcoin addresses for display purposes with customizable separators.",
              "How-to-use": "Call the method with the desired prefix, Bitcoin address, group size, and line size to get a formatted address with thin space separators.",
              "How-it-is-done": "The method delegates the formatting task to the formatHash method by converting the Bitcoin address to base58 format and using thin spaces as separators.",
              "Property": {
                "pre-conditions": [
                  "The address parameter must not be null."
                ],
                "post-conditions": [
                  "The returned Spanned object will contain the formatted address with the specified parameters."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.formatAddress(org.bitcoinj.core.Address,int,int)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.formatAddress(org.bitcoinj.core.Address,int,int)",
            "description": {
              "What": "Formats a Bitcoin address with a specified group size and line size.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "org.bitcoinj.core.Address",
                  "description": "The Bitcoin address to format."
                },
                {
                  "name": "groupSize",
                  "type": "int",
                  "description": "The number of characters in each group."
                },
                {
                  "name": "lineSize",
                  "type": "int",
                  "description": "The number of groups per line."
                }
              ],
              "Returns": {
                "type": "android.text.Spanned",
                "description": "A formatted Bitcoin address as a Spanned object."
              },
              "Why": "To provide a method for formatting Bitcoin addresses with custom group and line sizes.",
              "How-to-use": "Call the method with a Bitcoin address, group size, and line size to get a formatted address as a Spanned object.",
              "How-it-is-done": "The method calls another method in WalletUtils class to format the address using the base58 representation with the specified group and line sizes.",
              "Property": {
                "pre-conditions": [
                  "The address parameter must not be null.",
                  "The groupSize and lineSize parameters must be positive integers."
                ],
                "post-conditions": [
                  "The returned Spanned object will contain the formatted Bitcoin address."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.formatHash(java.lang.String,int,int)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.formatHash(java.lang.String,int,int)",
            "description": {
              "What": "Formats a hash address with specified group size and line size using thin space as separator.",
              "Parameters": [
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The hash address to be formatted."
                },
                {
                  "name": "groupSize",
                  "type": "int",
                  "description": "The size of each group in the formatted hash."
                },
                {
                  "name": "lineSize",
                  "type": "int",
                  "description": "The number of groups per line in the formatted hash."
                }
              ],
              "Returns": {
                "type": "android.text.Spanned",
                "description": "A formatted hash address as a Spanned object."
              },
              "Why": "To provide a convenient method for formatting hash addresses with custom group and line sizes.",
              "How-to-use": "Call the method with the hash address, group size, and line size parameters to get a formatted Spanned object.",
              "How-it-is-done": "The method internally calls another formatHash method with additional parameters including the thin space separator to format the hash address.",
              "Property": {
                "pre-conditions": [
                  "The address parameter must not be null."
                ],
                "post-conditions": [
                  "The returned Spanned object will contain the formatted hash address with specified group and line sizes."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.formatHash(java.lang.String,java.lang.String,int,int,char)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.formatHash(java.lang.String,java.lang.String,int,int,char)",
            "description": {
              "What": "Format a given address with specified group size, line size, and group separator, applying monospace style to each group.",
              "Parameters": [
                {
                  "name": "prefix",
                  "type": "java.lang.String",
                  "description": "Optional prefix to be added before the formatted address."
                },
                {
                  "name": "address",
                  "type": "java.lang.String",
                  "description": "The address to be formatted."
                },
                {
                  "name": "groupSize",
                  "type": "int",
                  "description": "The size of each group in the formatted address."
                },
                {
                  "name": "lineSize",
                  "type": "int",
                  "description": "The size of each line in the formatted address, 0 for no line breaks."
                },
                {
                  "name": "groupSeparator",
                  "type": "char",
                  "description": "The character used to separate groups in the formatted address."
                }
              ],
              "Returns": {
                "type": "android.text.Spanned",
                "description": "A Spanned object representing the formatted address with monospace styling."
              },
              "Why": "To visually enhance the display of addresses by formatting them in a structured and monospace style.",
              "How-to-use": "Call the method with the address to format, specify group size, line size, group separator, and optionally a prefix to be added.",
              "How-it-is-done": "The method iterates over the address in groups of the specified size, applying monospace styling to each group and adding separators or line breaks as needed.",
              "Property": {
                "pre-conditions": [
                  "The address must not be null."
                ],
                "post-conditions": [
                  "The returned Spanned object will contain the formatted address with monospace styling applied."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.getToAddressOfSent(org.bitcoinj.core.Transaction,org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.getToAddressOfSent(org.bitcoinj.core.Transaction,org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method retrieves the recipient address of a sent transaction from the transaction outputs.",
              "Parameters": [
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction from which to retrieve the recipient address."
                },
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet used to determine if an output is owned by the wallet."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.core.Address",
                "description": "The recipient address of the sent transaction, or null if not found."
              },
              "Why": "To provide a utility method for retrieving the recipient address of a sent transaction.",
              "How-to-use": "Call this method with a transaction and a wallet as parameters to get the recipient address of the sent transaction.",
              "How-it-is-done": "Iterate through the transaction outputs, check if the output is not owned by the wallet, retrieve the script public key, and return the recipient address from the script.",
              "Property": {
                "pre-conditions": [
                  "The transaction (tx) must not be null.",
                  "The wallet must not be null."
                ],
                "post-conditions": [
                  "The method returns null if no recipient address is found in the transaction outputs."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.getWalletAddressOfReceived(org.bitcoinj.core.Transaction,org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.getWalletAddressOfReceived(org.bitcoinj.core.Transaction,org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "This method retrieves the wallet address that received a transaction output within a given wallet.",
              "Parameters": [
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction from which to retrieve the wallet address."
                },
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet to check for ownership of the transaction output."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.core.Address",
                "description": "The wallet address that received the transaction output, or null if none found."
              },
              "Why": "To provide a utility method for retrieving the wallet address that received a specific transaction output within a wallet.",
              "How-to-use": "Call this method with a transaction and a wallet as parameters to get the wallet address that received the transaction output.",
              "How-it-is-done": "Iterate through the transaction outputs, check if they belong to the wallet, and return the address associated with the output if found.",
              "Property": {
                "pre-conditions": [
                  "The transaction and wallet parameters must not be null."
                ],
                "post-conditions": [
                  "The method returns the wallet address that received the transaction output, or null if none found."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.isEntirelySelf(org.bitcoinj.core.Transaction,org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.isEntirelySelf(org.bitcoinj.core.Transaction,org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Checks if a given transaction is entirely self-owned by a specific wallet.",
              "Parameters": [
                {
                  "name": "tx",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The transaction to be checked."
                },
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The wallet to check ownership against."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the transaction is entirely self-owned by the wallet, false otherwise."
              },
              "Why": "To determine if a transaction involves only inputs and outputs owned by a specific wallet.",
              "How-to-use": "Call the method with a transaction and a wallet as parameters to check if the transaction is entirely self-owned by the wallet.",
              "How-it-is-done": "The method iterates through all inputs and outputs of the transaction, checking if each is owned by the specified wallet. If any input or output is not owned by the wallet, the method returns false.",
              "Property": {
                "pre-conditions": [
                  "The input transaction (tx) and wallet must not be null."
                ],
                "post-conditions": [
                  "The method returns true if all inputs and outputs of the transaction are owned by the wallet, false otherwise."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.isPayToManyTransaction(org.bitcoinj.core.Transaction)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.isPayToManyTransaction(org.bitcoinj.core.Transaction)",
            "description": {
              "What": "This method checks if a given Bitcoin transaction has more than 20 outputs.",
              "Parameters": [
                {
                  "name": "transaction",
                  "type": "org.bitcoinj.core.Transaction",
                  "description": "The Bitcoin transaction to be checked."
                },
                "Returns"
              ],
              "type": "boolean",
              "description": "True if the transaction has more than 20 outputs, false otherwise."
            }
          },
          "de.schildbach.wallet.util.WalletUtils.longHash(org.bitcoinj.core.Sha256Hash)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.longHash(org.bitcoinj.core.Sha256Hash)",
            "description": {
              "What": "This method calculates a long hash value from a Sha256Hash object.",
              "Parameters": [
                {
                  "name": "hash",
                  "type": "org.bitcoinj.core.Sha256Hash",
                  "description": "The Sha256Hash object to calculate the long hash from."
                }
              ],
              "Returns": {
                "type": "long",
                "description": "The long hash value calculated from the input Sha256Hash object."
              },
              "Why": "To provide a way to convert a Sha256Hash object into a long hash value for certain use cases.",
              "How-to-use": "To use this method, pass a Sha256Hash object as the parameter and it will return a long hash value.",
              "How-it-is-done": "The method extracts bytes from the Sha256Hash object and combines them into a long value by shifting and bitwise OR operations.",
              "Property": {
                "pre-conditions": "The input Sha256Hash object must not be null.",
                "post-conditions": "The returned long hash value will be a unique representation of the input Sha256Hash object."
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.readKeys(java.io.BufferedReader,org.bitcoinj.core.NetworkParameters)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.readKeys(java.io.BufferedReader,org.bitcoinj.core.NetworkParameters)",
            "description": {
              "What": "Reads a list of ECKeys from a BufferedReader containing private keys and creation times in a specific format.",
              "Parameters": [
                {
                  "name": "in",
                  "type": "java.io.BufferedReader",
                  "description": "The BufferedReader to read the keys from."
                },
                {
                  "name": "expectedNetworkParameters",
                  "type": "org.bitcoinj.core.NetworkParameters",
                  "description": "The expected network parameters for the ECKeys."
                }
              ],
              "Returns": {
                "type": "java.util.List<org.bitcoinj.core.ECKey>",
                "description": "A list of ECKeys read from the BufferedReader."
              },
              "Why": "To provide a method for reading ECKeys from a BufferedReader in a specific format for use in wallet applications.",
              "How-to-use": "Call readKeys method with a BufferedReader and expected network parameters to read ECKeys from the input stream.",
              "How-it-is-done": "The method reads lines from the BufferedReader, splits them into parts, converts the first part to an ECKey using the expected network parameters, sets the creation time if available, and adds the ECKey to a list.",
              "Property": {
                "pre-conditions": [
                  "The BufferedReader 'in' should not be null.",
                  "The expectedNetworkParameters should be a valid NetworkParameters object."
                ],
                "post-conditions": [
                  "A list of ECKeys is returned based on the input from the BufferedReader."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.restorePrivateKeysFromBase58(java.io.InputStream,org.bitcoinj.core.NetworkParameters)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.restorePrivateKeysFromBase58(java.io.InputStream,org.bitcoinj.core.NetworkParameters)",
            "description": {
              "What": "This method restores private keys from a base58 encoded input stream and creates a new Bitcoin wallet with the imported keys.",
              "Parameters": [
                {
                  "name": "is",
                  "type": "java.io.InputStream",
                  "description": "The input stream containing base58 encoded private keys."
                },
                {
                  "name": "expectedNetworkParameters",
                  "type": "org.bitcoinj.core.NetworkParameters",
                  "description": "The expected network parameters for the Bitcoin wallet."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.wallet.Wallet",
                "description": "A new Bitcoin wallet with the imported private keys."
              },
              "Why": "To allow users to restore a Bitcoin wallet from base58 encoded private keys stored in an input stream.",
              "How-to-use": "Create an InputStream with the base58 encoded private keys, provide the expected network parameters, and call this method to get a new Bitcoin wallet with the imported keys.",
              "How-it-is-done": "The method reads the base58 encoded private keys from the input stream, imports them into a KeyChainGroup with the expected network parameters, and creates a new Wallet instance with the imported keys.",
              "Property": {
                "pre-conditions": "The input stream must contain valid base58 encoded private keys.",
                "post-conditions": "A new Bitcoin wallet is created with the imported private keys."
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.restoreWalletFromAutoBackup(android.content.Context)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.restoreWalletFromAutoBackup(android.content.Context)",
            "description": {
              "What": "This method restores a Bitcoin wallet from an auto backup file stored in the app's internal storage.",
              "Parameters": [
                {
                  "name": "context",
                  "type": "android.content.Context",
                  "description": "The context of the application."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.wallet.Wallet",
                "description": "The restored Bitcoin wallet."
              },
              "Why": "To provide a way for users to restore their wallet from a backup file in case of data loss or device change.",
              "How-to-use": "Call this method with the application's context to restore the Bitcoin wallet from the auto backup file.",
              "How-it-is-done": "The method reads the wallet data from the specified backup file, checks its consistency, resets the blockchain service, logs the restoration, and returns the wallet object.",
              "Property": {
                "pre-conditions": "The backup file must exist in the app's internal storage.",
                "post-conditions": "The wallet is successfully restored and ready for use."
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.restoreWalletFromProtobuf(java.io.InputStream,org.bitcoinj.core.NetworkParameters)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.restoreWalletFromProtobuf(java.io.InputStream,org.bitcoinj.core.NetworkParameters)",
            "description": {
              "What": "This method restores a Bitcoin wallet from a Protocol Buffers input stream with the expected network parameters.",
              "Parameters": [
                {
                  "name": "is",
                  "type": "java.io.InputStream",
                  "description": "The input stream containing the Protocol Buffers data of the wallet."
                },
                {
                  "name": "expectedNetworkParameters",
                  "type": "org.bitcoinj.core.NetworkParameters",
                  "description": "The expected network parameters of the wallet to be restored."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.wallet.Wallet",
                "description": "The restored Bitcoin wallet."
              },
              "Why": "To provide a utility method for restoring a Bitcoin wallet from a Protocol Buffers input stream with specified network parameters.",
              "How-to-use": "Call this method with the input stream containing the wallet data and the expected network parameters to restore the wallet.",
              "How-it-is-done": "The method uses a WalletProtobufSerializer to read the wallet data from the input stream, validates the network parameters, checks for consistency, and returns the restored wallet.",
              "Property": {
                "pre-conditions": "The input stream must contain valid Protocol Buffers data of a Bitcoin wallet.",
                "post-conditions": "The method returns a valid and consistent Bitcoin wallet with the expected network parameters."
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.restoreWalletFromProtobufOrBase58(java.io.InputStream,org.bitcoinj.core.NetworkParameters)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.restoreWalletFromProtobufOrBase58(java.io.InputStream,org.bitcoinj.core.NetworkParameters)",
            "description": {
              "What": "This method restores a Bitcoin wallet from either a protobuf or a base58 encoded input stream.",
              "Parameters": [
                {
                  "name": "is",
                  "type": "java.io.InputStream",
                  "description": "The input stream containing the protobuf or base58 encoded data."
                },
                {
                  "name": "expectedNetworkParameters",
                  "type": "org.bitcoinj.core.NetworkParameters",
                  "description": "The expected network parameters for the wallet."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.wallet.Wallet",
                "description": "The restored Bitcoin wallet."
              },
              "Why": "To provide a method for restoring a Bitcoin wallet from different types of encoded data.",
              "How-to-use": "Create an input stream with the protobuf or base58 encoded data, provide the expected network parameters, and call this method to get the restored wallet.",
              "How-it-is-done": "The method first tries to restore the wallet from protobuf data, and if that fails, it falls back to restoring from base58 encoded data. It handles exceptions and provides informative error messages.",
              "Property": {
                "pre-conditions": "The input stream must contain valid protobuf or base58 encoded data.",
                "post-conditions": "A Bitcoin wallet is successfully restored from the input stream."
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.walletFromByteArray(byte[])": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.walletFromByteArray(byte[])",
            "description": {
              "What": "Converts a byte array representation of a wallet into a BitcoinJ Wallet object.",
              "Parameters": [
                {
                  "name": "walletBytes",
                  "type": "byte[]",
                  "description": "The byte array representation of the wallet to be converted."
                }
              ],
              "Returns": {
                "type": "org.bitcoinj.wallet.Wallet",
                "description": "The BitcoinJ Wallet object created from the byte array."
              },
              "Why": "To provide a method for converting byte array representations of wallets into usable Wallet objects.",
              "How-to-use": "Call the method with a byte array containing the wallet data to get a BitcoinJ Wallet object.",
              "How-it-is-done": "The method creates a ByteArrayInputStream from the input byte array, then uses the WalletProtobufSerializer to read the wallet data and create a Wallet object.",
              "Property": {
                "pre-conditions": "The input byte array must contain valid wallet data in a format that can be read by WalletProtobufSerializer.",
                "post-conditions": "The method returns a valid BitcoinJ Wallet object created from the input byte array."
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.walletToByteArray(org.bitcoinj.wallet.Wallet)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.walletToByteArray(org.bitcoinj.wallet.Wallet)",
            "description": {
              "What": "Converts a BitcoinJ Wallet object to a byte array using WalletProtobufSerializer.",
              "Parameters": [
                {
                  "name": "wallet",
                  "type": "org.bitcoinj.wallet.Wallet",
                  "description": "The Wallet object to be converted to a byte array."
                }
              ],
              "Returns": {
                "type": "byte[]",
                "description": "A byte array representation of the input Wallet object."
              },
              "Why": "To provide a method for converting a Wallet object to a byte array for serialization or storage purposes.",
              "How-to-use": "Call the method with a Wallet object as the parameter to obtain a byte array representation of the Wallet.",
              "How-it-is-done": "The method creates a new ByteArrayOutputStream, uses WalletProtobufSerializer to write the Wallet object to the stream, and then returns the byte array representation of the stream.",
              "Property": {
                "pre-conditions": [
                  "The input Wallet object must not be null."
                ],
                "post-conditions": [
                  "The returned byte array will contain a serialized form of the input Wallet object."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils.writeKeys(java.io.Writer,java.util.List)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils.writeKeys(java.io.Writer,java.util.List)",
            "description": {
              "What": "This method writes a list of ECKey private keys to a Writer object in a specific format.",
              "Parameters": [
                {
                  "name": "out",
                  "type": "java.io.Writer",
                  "description": "The Writer object to write the keys to."
                },
                {
                  "name": "keys",
                  "type": "java.util.List<org.bitcoinj.core.ECKey>",
                  "description": "The list of ECKey objects containing the private keys to be written."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return anything."
              },
              "Why": "To provide a way to export private keys securely and in a readable format for backup or storage purposes.",
              "How-to-use": "Call this method with a Writer object and a list of ECKey objects to write the private keys to the Writer in a specific format.",
              "How-it-is-done": "The method iterates over the list of ECKey objects, writing each private key in Base58 format to the Writer. It also includes the creation time of the key if available.",
              "Property": {
                "pre-conditions": [
                  "The Writer object 'out' must not be null.",
                  "The list of ECKey objects 'keys' must not be null."
                ],
                "post-conditions": [
                  "The private keys are written to the Writer object 'out' in a specific format."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.WalletUtils$MonospaceSpan": {
        "qualifiedName": "de.schildbach.wallet.util.WalletUtils$MonospaceSpan",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.WalletUtils$MonospaceSpan.de.schildbach.wallet.util.WalletUtils$MonospaceSpan()": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils$MonospaceSpan.de.schildbach.wallet.util.WalletUtils$MonospaceSpan()",
            "description": {
              "What": "Creates a MonospaceSpan object for displaying text in a monospace font.",
              "Parameters": [
                {
                  "name": "None",
                  "type": "N/A",
                  "description": "No parameters are required for this constructor."
                }
              ],
              "Returns": {
                "type": "MonospaceSpan",
                "description": "A MonospaceSpan object with the specified font family 'monospace'."
              },
              "Why": "To provide a way to format text in a monospace font for better readability or styling purposes.",
              "How-to-use": "Simply create a new instance of MonospaceSpan using the constructor MonospaceSpan().",
              "How-it-is-done": "The constructor initializes the MonospaceSpan object with the font family 'monospace' for later use in formatting text.",
              "Property": {
                "pre-conditions": "None",
                "post-conditions": "A valid MonospaceSpan object is created and ready to be used for formatting text."
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils$MonospaceSpan.equals(java.lang.Object)": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils$MonospaceSpan.equals(java.lang.Object)",
            "description": {
              "What": "Checks if the current object is equal to another object of the same class.",
              "Parameters": [
                {
                  "name": "o",
                  "type": "java.lang.Object",
                  "description": "The object to compare for equality."
                }
              ],
              "Returns": {
                "type": "boolean",
                "description": "True if the objects are equal, false otherwise."
              },
              "Why": "To provide a way to compare instances of the MonospaceSpan class for equality.",
              "How-to-use": "Create an instance of MonospaceSpan and call the equals method with another object to check for equality.",
              "How-it-is-done": "The method first checks if the objects are the same instance, then compares their classes, and finally returns true if they are equal.",
              "Property": {
                "pre-conditions": "None.",
                "post-conditions": "The method will return true if the objects are equal, false otherwise."
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtils$MonospaceSpan.hashCode()": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtils$MonospaceSpan.hashCode()",
            "description": {
              "What": "This method returns a constant hash code value of 0.",
              "Parameters": [],
              "Returns": {
                "Type": "int",
                "Description": "The constant hash code value of 0."
              },
              "Why": "The method is provided to override the default hashCode() method and return a specific constant value.",
              "How-to-use": "Simply call the hashCode() method on an instance of the MonospaceSpan class to retrieve the constant hash code value of 0.",
              "How-it-is-done": "The method simply returns the constant integer value of 0, indicating that all instances of MonospaceSpan will have the same hash code.",
              "Property": {
                "Pre-conditions": [],
                "Post-conditions": [
                  "The method will always return the constant hash code value of 0."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.WalletUtilsTest": {
        "qualifiedName": "de.schildbach.wallet.util.WalletUtilsTest",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.WalletUtilsTest.de.schildbach.wallet.util.WalletUtilsTest()": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtilsTest.de.schildbach.wallet.util.WalletUtilsTest()",
            "description": {
              "What": "This method is a constructor for the WalletUtilsTest class.",
              "Parameters": [],
              "Returns": {
                "type": "WalletUtilsTest",
                "description": "A new instance of the WalletUtilsTest class."
              },
              "Why": "To initialize a new instance of the WalletUtilsTest class.",
              "How-to-use": "Simply create a new instance of the WalletUtilsTest class by calling the constructor.",
              "How-it-is-done": "The constructor initializes a new instance of the WalletUtilsTest class without any parameters.",
              "Property": {
                "pre-conditions": [],
                "post-conditions": [
                  "A new instance of the WalletUtilsTest class is created."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtilsTest.restoreWalletFromBase58_wrongNetwork()": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtilsTest.restoreWalletFromBase58_wrongNetwork()",
            "description": {
              "What": "This method is used to restore a wallet from a base58 encoded backup file with the wrong network parameters.",
              "Parameters": [
                {
                  "name": "inputStream",
                  "type": "InputStream",
                  "description": "The input stream containing the base58 encoded backup file."
                },
                {
                  "name": "networkParams",
                  "type": "NetworkParameters",
                  "description": "The network parameters to use for restoring the wallet."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "This method is provided to test the behavior of restoring a wallet with incorrect network parameters.",
              "How-to-use": "To use this method, provide an input stream with a base58 encoded backup file and the network parameters to use for restoring the wallet. The method will throw an IOException if the network parameters do not match the ones in the backup file.",
              "How-it-is-done": "The method calls the restoreWalletFromProtobufOrBase58() method from WalletUtils class with the provided input stream and network parameters. It expects an IOException to be thrown during the process.",
              "Property": {
                "pre-conditions": [
                  "The input stream must contain a valid base58 encoded backup file."
                ],
                "post-conditions": [
                  "If the network parameters do not match the ones in the backup file, an IOException will be thrown."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtilsTest.restoreWalletFromProtobufOrBase58()": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtilsTest.restoreWalletFromProtobufOrBase58()",
            "description": {
              "What": "The method restores a wallet from a Protobuf or Base58 backup file for the TestNet3 network.",
              "Parameters": [
                {
                  "name": "inputStreamProtobuf",
                  "type": "InputStream",
                  "description": "The input stream containing the Protobuf backup file."
                },
                {
                  "name": "params",
                  "type": "NetworkParameters",
                  "description": "The network parameters for the TestNet3 network."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To provide a utility method for restoring wallets from different types of backup files for the TestNet3 network.",
              "How-to-use": "Call the method with the input stream of the Protobuf or Base58 backup file and the TestNet3 network parameters to restore the wallet.",
              "How-it-is-done": "The method reads the input stream to obtain the backup data, then decodes and restores the wallet using the provided TestNet3 network parameters.",
              "Property": {
                "pre-conditions": [
                  "The input stream for the Protobuf or Base58 backup file must not be null.",
                  "The TestNet3 network parameters must be valid and not null."
                ],
                "post-conditions": [
                  "The wallet is successfully restored from the backup file for the TestNet3 network."
                ]
              }
            }
          },
          "de.schildbach.wallet.util.WalletUtilsTest.restoreWalletFromProtobuf_wrongNetwork()": {
            "qualifiedName": "de.schildbach.wallet.util.WalletUtilsTest.restoreWalletFromProtobuf_wrongNetwork()",
            "description": {
              "What": "This method is used to test the restoration of a wallet from a protobuf file with the wrong network parameters.",
              "Parameters": [
                {
                  "name": "inputStream",
                  "type": "InputStream",
                  "description": "The input stream containing the protobuf file to restore the wallet from."
                },
                {
                  "name": "networkParams",
                  "type": "NetworkParameters",
                  "description": "The network parameters to use for the wallet restoration."
                }
              ],
              "Returns": {
                "type": "void",
                "description": "This method does not return any value."
              },
              "Why": "To verify that the method throws an IOException when attempting to restore a wallet with incorrect network parameters.",
              "How-to-use": "Provide an InputStream pointing to a protobuf file and the network parameters to use, then call the method to test the wallet restoration process.",
              "How-it-is-done": "The method attempts to restore a wallet from the provided protobuf file using the specified network parameters. If the network parameters do not match the ones in the protobuf file, an IOException is expected to be thrown.",
              "Property": {
                "pre-conditions": [
                  "The protobuf file provided should contain valid wallet data."
                ],
                "post-conditions": [
                  "An IOException is expected to be thrown if the network parameters do not match during the wallet restoration process."
                ]
              }
            }
          }
        }
      },
      "de.schildbach.wallet.util.WholeStringBuilder": {
        "qualifiedName": "de.schildbach.wallet.util.WholeStringBuilder",
        "kind": "class",
        "methods": {
          "de.schildbach.wallet.util.WholeStringBuilder.bold(java.lang.CharSequence)": {
            "qualifiedName": "de.schildbach.wallet.util.WholeStringBuilder.bold(java.lang.CharSequence)",
            "description": {
              "What": "The method returns a CharSequence with the input text formatted in bold style.",
              "Parameters": [
                {
                  "name": "text",
                  "type": "java.lang.CharSequence",
                  "description": "The text to be formatted in bold style."
                }
              ],
              "Returns": {
                "type": "java.lang.CharSequence",
                "description": "A CharSequence with the input text formatted in bold style."
              },
              "Why": "To provide a convenient way to format text in bold style.",
              "How-to-use": "Call the bold method with a CharSequence parameter to get a new CharSequence with the input text formatted in bold style.",
              "How-it-is-done": "The method creates a new WholeStringBuilder instance with the input text and a StyleSpan with Typeface.BOLD style, then returns the formatted CharSequence.",
              "Property": {
                "pre-conditions": "The text parameter must not be null.",
                "post-conditions": "The returned CharSequence will have the input text formatted in bold style."
              }
            }
          },
          "de.schildbach.wallet.util.WholeStringBuilder.de.schildbach.wallet.util.WholeStringBuilder(java.lang.CharSequence,java.lang.Object)": {
            "qualifiedName": "de.schildbach.wallet.util.WholeStringBuilder.de.schildbach.wallet.util.WholeStringBuilder(java.lang.CharSequence,java.lang.Object)",
            "description": {
              "What": "Initialize a WholeStringBuilder with a given text and apply a span to the entire text.",
              "Parameters": [
                {
                  "name": "text",
                  "type": "java.lang.CharSequence",
                  "description": "The text to be used in the WholeStringBuilder."
                },
                {
                  "name": "span",
                  "type": "java.lang.Object",
                  "description": "The span to be applied to the entire text."
                }
              ],
              "Returns": {
                "type": "WholeStringBuilder",
                "description": "A new instance of WholeStringBuilder with the specified text and span applied."
              },
              "Why": "To provide a convenient way to create a WholeStringBuilder with a specified span applied to the entire text.",
              "How-to-use": "Create a new WholeStringBuilder instance by passing the text and span as parameters, then use the instance to work with the text and span.",
              "How-it-is-done": "The method initializes the WholeStringBuilder with the given text, then applies the specified span to the entire text using SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE flag.",
              "Property": {
                "pre-conditions": "The text and span parameters must not be null.",
                "post-conditions": "The WholeStringBuilder instance is created with the specified text and span applied."
              }
            }
          }
        }
      }
    }
  }
}