{
  "elements": {
    "nodes": [
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "properties": {
            "simpleName": "pOrigin",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The tableau pile from which the card is moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aOrigin",
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.model.Location aOrigin;",
            "visibility": "private",
            "simpleName": "aOrigin",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aOrigin",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "boolean",
          "properties": {
            "simpleName": "boolean",
            "qualifiedName": "boolean",
            "metaSrc": "source code"
          },
          "labels": [
            "Primitive"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs",
          "properties": {
            "simpleName": "cs",
            "qualifiedName": "ca.mcgill.cs",
            "kind": "package",
            "metaSrc": "source code"
          },
          "labels": [
            "Container"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "properties": {
            "docComment": "Keeps track of the current state of the game and provides\r\na facade to it. \r\n\r\nThe game state can logically be separated into four distinct \r\nconceptual elements: the deck, the discard pile, the foundations\r\nwhere completed suits are accumulated, and the tableau, which consists of\r\nseven piles where cards fan down in sequences of alternating suit colors.\r\n",
            "simpleName": "GameModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "transit",
            "description": "Manages the game state, handles card movements, and notifies listeners of state changes.",
            "roleStereotype": "Controller",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])",
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.Move[])",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])",
            "kind": "constructor",
            "sourceText": "/**\r\n *\r\n * @param pMoves\r\n * \t\tAny move to be added to this composite\r\n */\r\npublic CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move... pMoves) {\r\n    for (ca.mcgill.cs.stg.solitaire.model.Move move : pMoves) {\r\n        aMoves.add(move);\r\n    }\r\n}",
            "docComment": "\r\n@param pMoves\r\n\t\tAny move to be added to this composite\r\n",
            "metaSrc": "source code",
            "description": "Initializes a CompositeMove object with an array of Move objects.",
            "returns": "A CompositeMove object initialized with the provided Move objects.",
            "reason": "To allow the creation of CompositeMove objects with a variable number of Move objects for composite moves in the Solitaire game.",
            "howToUse": "Create an array of Move objects, then pass it as an argument when initializing a new CompositeMove object.",
            "howItWorks": "Iterates over the array of Move objects passed as arguments and adds each Move object to the list of moves in the CompositeMove object.",
            "assertions": {
              "preConditions": [
                "The array of Move objects (pMoves) should not be null."
              ],
              "postConditions": [
                "The CompositeMove object is initialized with all the Move objects from the input array."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The destination where the card is to be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The tableau pile to move the card to."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The image view associated with the card pile."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES",
          "properties": {
            "sourceText": "SPADES",
            "visibility": "public",
            "simpleName": "SPADES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT",
          "properties": {
            "sourceText": "private static final int TO_PERCENT = 100;",
            "visibility": "private",
            "simpleName": "TO_PERCENT",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "properties": {
            "visibility": "private",
            "simpleName": "buildLayout()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
            "kind": "method",
            "sourceText": "private void buildLayout() {\r\n    getChildren().clear();\r\n    int offset = 0;\r\n    ca.mcgill.cs.stg.solitaire.cards.CardStack stack = aModel.getTableauPile(aIndex);\r\n    // this essentially acts as a spacer\r\n    if (stack.isEmpty()) {\r\n        javafx.scene.image.ImageView image = new javafx.scene.image.ImageView(ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack());\r\n        image.setVisible(false);\r\n        getChildren().add(image);\r\n        return;\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card cardView : stack) {\r\n        final javafx.scene.image.ImageView image = new javafx.scene.image.ImageView(getImage(cardView));\r\n        image.setTranslateY(ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET * offset);\r\n        offset++;\r\n        getChildren().add(image);\r\n        setOnDragOver(createDragOverHandler(image, cardView));\r\n        setOnDragEntered(createDragEnteredHandler(image, cardView));\r\n        setOnDragExited(createDragExitedHandler(image, cardView));\r\n        setOnDragDropped(createDragDroppedHandler(image, cardView));\r\n        if (aModel.isVisibleInTableau(cardView)) {\r\n            image.setOnDragDetected(createDragDetectedHandler(image, cardView));\r\n        }\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Builds the layout of the card pile view based on the cards in the stack.",
            "returns": "Void - does not return anything.",
            "reason": "To dynamically update the visual representation of the card pile based on the cards in the stack.",
            "howToUse": "Call this method whenever the layout of the card pile needs to be updated.",
            "howItWorks": "The method first clears the existing children, then iterates through the cards in the stack, adding image views for each card with appropriate event handlers.",
            "assertions": {
              "preConditions": [
                "The card pile view and model must be properly initialized."
              ],
              "postConditions": [
                "The visual representation of the card pile is updated based on the cards in the stack."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "char",
          "properties": {
            "simpleName": "char",
            "qualifiedName": "char",
            "metaSrc": "source code"
          },
          "labels": [
            "Primitive"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "public",
            "simpleName": "getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pIndex\r\n * \t\tThe position of the stack to return.\r\n * @return A copy of the stack at position pIndex\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.CardStack getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex);",
            "docComment": "\r\n@param pIndex\r\n\t\tThe position of the stack to return.\r\n@return A copy of the stack at position pIndex\r\n",
            "metaSrc": "source code",
            "description": "Returns the card stack at the specified tableau pile index.",
            "returns": "The card stack at the specified tableau pile index.",
            "reason": "Provided to allow access to the card stack at a specific tableau pile index in the solitaire game.",
            "howToUse": "Call getTableauPile method with the desired tableau pile index to retrieve the card stack at that index.",
            "howItWorks": "The method takes a tableau pile index as input, retrieves the corresponding card stack from the game model, and returns it to the caller.",
            "assertions": {
              "preConditions": [
                "The game model and tableau pile index must be valid and initialized."
              ],
              "postConditions": [
                "The method returns the card stack at the specified tableau pile index."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()",
          "properties": {
            "visibility": "public",
            "simpleName": "clear()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()",
            "kind": "method",
            "sourceText": "/**\r\n * Removes all the cards in the stack.\r\n */\r\npublic void clear() {\r\n    aCards.clear();\r\n}",
            "docComment": "Removes all the cards in the stack.\r\n",
            "metaSrc": "source code",
            "description": "Clears all the cards from the card stack.",
            "returns": "This method does not return anything.",
            "reason": "Provided to remove all cards from the card stack when needed.",
            "howToUse": "Create an instance of CardStack and call the clear() method to remove all cards from the stack.",
            "howItWorks": "The method simply calls the clear() method of the underlying list data structure to remove all elements from the list.",
            "assertions": {
              "preConditions": [],
              "postConditions": [
                "The card stack should be empty after calling the clear() method."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "long",
          "properties": {
            "simpleName": "long",
            "qualifiedName": "long",
            "metaSrc": "source code"
          },
          "labels": [
            "Primitive"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The tableau pile to search within."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR",
          "properties": {
            "sourceText": "private static final java.lang.String SEPARATOR = \";\";",
            "visibility": "private",
            "simpleName": "SEPARATOR",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "properties": {
            "visibility": "private",
            "simpleName": "playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "kind": "static method",
            "sourceText": "private static void playGame(ca.mcgill.cs.stg.solitaire.model.GameModel pModel) {\r\n    pModel.reset();\r\n    boolean advanced = true;\r\n    while (advanced) {\r\n        advanced = pModel.tryToAutoPlay();\r\n    } \r\n    while (pModel.canUndo()) {\r\n        pModel.undoLast();\r\n    } \r\n    advanced = true;\r\n    while (advanced) {\r\n        advanced = pModel.tryToAutoPlay();\r\n    } \r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Automatically plays a solitaire card game until no more moves can be made.",
            "returns": "This method does not return any value.",
            "reason": "Provided to automate the gameplay of a solitaire card game without user intervention.",
            "howToUse": "Pass an instance of GameModel representing the current game state to the method to automatically play the game.",
            "howItWorks": "Resets the game model, attempts to autoplay moves until no more moves can be made, undoes the last move, and attempts to autoplay again.",
            "assertions": {
              "preConditions": [
                "The GameModel instance pModel should not be null."
              ],
              "postConditions": [
                "The solitaire game is played automatically until no more moves can be possible."
              ]
            },
            "layer": "Service Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.<init>1()",
          "properties": {
            "visibility": "default",
            "simpleName": "<init>1()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.<init>1()",
            "kind": "object initializer",
            "sourceText": "// Create the flyweight objects\r\nstatic {\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Suit suit : ca.mcgill.cs.stg.solitaire.cards.Suit.values()) {\r\n        CARDS[suit.ordinal()] = new Card[ca.mcgill.cs.stg.solitaire.cards.Rank.values().length];\r\n        for (ca.mcgill.cs.stg.solitaire.cards.Rank rank : ca.mcgill.cs.stg.solitaire.cards.Rank.values()) {\r\n            CARDS[suit.ordinal()][rank.ordinal()] = new Card(rank, suit);\r\n        }\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize the CARDS array with all possible combinations of ranks and suits for a deck of cards.",
            "returns": "An array of Card objects representing a deck of cards.",
            "reason": "To pre-populate the CARDS array with all possible combinations of ranks and suits for easy access during the game.",
            "howToUse": "Simply call the static block to initialize the CARDS array with all possible combinations of ranks and suits.",
            "howItWorks": "The method iterates over all possible combinations of suits and ranks, creating a new Card object for each combination and storing it in the CARDS array.",
            "assertions": {
              "preConditions": [],
              "postConditions": [
                "The CARDS array is initialized with all possible combinations of ranks and suits."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Script"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy).0",
          "properties": {
            "simpleName": "pPlayingStrategy",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The playing strategy to be used in the game."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SEVENTH",
          "properties": {
            "sourceText": "SEVENTH",
            "visibility": "public",
            "simpleName": "SEVENTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SEVENTH",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The destination location for the card."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "properties": {
            "visibility": "public",
            "simpleName": "peek()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The card at the top of the stack.\r\n * @pre !isEmpty();\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card peek() {\r\n    assert !isEmpty();\r\n    return aCards.get(aCards.size() - 1);\r\n}",
            "docComment": "\r\n@return The card at the top of the stack.\r\n@pre !isEmpty();\r\n",
            "metaSrc": "source code",
            "description": "Returns the top card of the card stack without removing it.",
            "returns": "the top card of the card stack",
            "reason": "Provided to allow users to view the top card of the stack without modifying the stack itself.",
            "howToUse": "Create an instance of CardStack, add cards to it, and call peek() to retrieve the top card without removing it.",
            "howItWorks": "Checks if the stack is not empty, then returns the card at the top of the stack without removing it.",
            "assertions": {
              "preConditions": [
                "The card stack must not be empty."
              ],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
          "properties": {
            "visibility": "public",
            "simpleName": "getScore()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The number of cards in the foundations.\r\n */\r\npublic int getScore() {\r\n    return aFoundations.getTotalSize();\r\n}",
            "docComment": "\r\n@return The number of cards in the foundations.\r\n",
            "metaSrc": "source code",
            "description": "Returns the total size of the foundations in the solitaire game.",
            "returns": "The total size of the foundations in the game.",
            "reason": "Provided to retrieve the current score of the game for display or further game logic.",
            "howToUse": "Call getScore() method on an instance of GameModel to retrieve the current score of the game.",
            "howItWorks": "The method accesses the total size of the foundations in the game and returns it as the score.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED",
          "properties": {
            "sourceText": "private static final java.lang.String BORDER_STYLE_DRAGGED = \"-fx-border-color: darkgray;\" + (\"-fx-border-width: 3;\" + \" -fx-border-radius: 10.0\");",
            "visibility": "private",
            "simpleName": "BORDER_STYLE_DRAGGED",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The destination foundation pile."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIFTH",
          "properties": {
            "sourceText": "FIFTH",
            "visibility": "public",
            "simpleName": "FIFTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIFTH",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "properties": {
            "docComment": "Application class for Solitaire. The responsibility\r\nof this class is limited to assembling the major UI components \r\nand launching the application. All gesture handling logic is \r\nhandled by its composed elements, which act as observers\r\nof the game model.\r\n",
            "simpleName": "Solitaire",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Initialize a new instance of the Solitaire class.",
            "roleStereotype": "Controller",
            "layer": "Presentation Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "properties": {
            "visibility": "public",
            "simpleName": "sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pSuit\r\n * \t\tThe suit to test against.\r\n * @return True if this suit and pSuit are of the same color.\r\n * @pre pSuit != null;\r\n */\r\npublic boolean sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit pSuit) {\r\n    assert pSuit != null;\r\n    if ((this == ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS) || (this == ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES)) {\r\n        return (pSuit == ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS) || (pSuit == ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES);\r\n    } else {\r\n        return (pSuit == ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS) || (pSuit == ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS);\r\n    }\r\n}",
            "docComment": "\r\n@param pSuit\r\n\t\tThe suit to test against.\r\n@return True if this suit and pSuit are of the same color.\r\n@pre pSuit != null;\r\n",
            "metaSrc": "source code",
            "description": "Checks if the color of the current suit is the same as the color of the given suit.",
            "returns": "True if the colors are the same, false otherwise.",
            "reason": "To determine if two suits have the same color for game logic and card placement rules.",
            "howToUse": "Call this method on a Suit object passing another Suit object as an argument to check if their colors are the same.",
            "howItWorks": "If the current suit is CLUBS or SPADES, it checks if the given suit is also CLUBS or SPADES; otherwise, it checks for DIAMONDS or HEARTS.",
            "assertions": {
              "preConditions": [
                "The current suit object must not be null."
              ],
              "postConditions": [
                "Returns true if the colors of the two suits are the same, false otherwise."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "properties": {
            "visibility": "public",
            "simpleName": "shuffle()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
            "kind": "method",
            "sourceText": "/**\r\n * Reinitializes the deck with all 52 cards, and shuffles them.\r\n */\r\npublic void shuffle() {\r\n    java.util.List<ca.mcgill.cs.stg.solitaire.cards.Card> cards = new java.util.ArrayList<>();\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Suit suit : ca.mcgill.cs.stg.solitaire.cards.Suit.values()) {\r\n        for (ca.mcgill.cs.stg.solitaire.cards.Rank rank : ca.mcgill.cs.stg.solitaire.cards.Rank.values()) {\r\n            cards.add(ca.mcgill.cs.stg.solitaire.cards.Card.get(rank, suit));\r\n        }\r\n    }\r\n    java.util.Collections.shuffle(cards);\r\n    aCards = new ca.mcgill.cs.stg.solitaire.cards.CardStack(cards);\r\n}",
            "docComment": "Reinitializes the deck with all 52 cards, and shuffles them.\r\n",
            "metaSrc": "source code",
            "description": "Shuffles the deck of cards.",
            "returns": "This method does not return anything.",
            "reason": "To randomize the order of cards in the deck for a game of solitaire.",
            "howToUse": "Create an instance of Deck and call shuffle() method to shuffle the cards in the deck.",
            "howItWorks": "Creates a list of all possible cards, shuffles the list using Collections.shuffle(), and then assigns the shuffled list to the deck.",
            "assertions": {
              "preConditions": [],
              "postConditions": [
                "The deck of cards is shuffled."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.aModel",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.GameModel aModel;",
            "visibility": "private",
            "simpleName": "aModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.aModel",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "private static ca.mcgill.cs.stg.solitaire.model.Move substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    if (pModel.isDeckEmpty()) {\r\n        return pModel.getNullMove();\r\n    } else {\r\n        return pModel.getDiscardMove();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns a move based on whether the deck is empty or not in a solitaire card game.",
            "returns": "A move object representing either a null move or a discard move.",
            "reason": "Provides a strategy for the AI player to decide whether to draw a card from the deck or make a move with the discard pile.",
            "howToUse": "Pass the current game model view object as the parameter to get the recommended move based on the deck status.",
            "howItWorks": "Checks if the deck is empty, if so, returns a null move; otherwise, returns a discard move from the model.",
            "assertions": {
              "preConditions": [
                "The game model view object must be initialized and represent a valid game state."
              ],
              "postConditions": [
                "The method returns a valid move object based on the deck status."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aMoves",
          "properties": {
            "sourceText": "private final java.util.Stack<ca.mcgill.cs.stg.solitaire.model.Move> aMoves = new java.util.Stack<>();",
            "visibility": "private",
            "simpleName": "aMoves",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aMoves",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca",
          "properties": {
            "simpleName": "ca",
            "qualifiedName": "ca",
            "kind": "package",
            "metaSrc": "source code"
          },
          "labels": [
            "Container"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model view used to determine the legal move."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The destination location where the card should be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "properties": {
            "docComment": "reveals the top of the stack.\r\n",
            "simpleName": "RevealTopMove",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Reveals and hides the top card of a tableau, updating the game state and notifying listeners.",
            "roleStereotype": "Service Provider",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "constructor",
            "sourceText": "RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    aIndex = pIndex;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize a RevealTopMove object with a TableauPile parameter.",
            "returns": "The constructed RevealTopMove object.",
            "reason": "Provided to set the TableauPile parameter for the RevealTopMove object.",
            "howToUse": "Create a new RevealTopMove object by passing a TableauPile object as the parameter.",
            "howItWorks": "Assigns the passed TableauPile object to the aIndex field of the RevealTopMove object during initialization.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy()",
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new strategy.\r\n */\r\npublic NullPlayingStrategy() {\r\n}",
            "docComment": "Creates a new strategy.\r\n",
            "metaSrc": "source code",
            "description": "Initialize a new instance of NullPlayingStrategy.",
            "returns": "a new instance of NullPlayingStrategy",
            "reason": "Provide a default constructor for the NullPlayingStrategy class.",
            "howToUse": "Simply create a new instance of NullPlayingStrategy by calling new NullPlayingStrategy().",
            "howItWorks": "The method creates a new instance of NullPlayingStrategy without any specific initialization logic.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "private",
            "simpleName": "createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.MouseEvent> createDragDetectedHandler(final javafx.scene.image.ImageView pImageView, final ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.MouseEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.MouseEvent pMouseEvent) {\r\n            javafx.scene.input.Dragboard db = pImageView.startDragAndDrop(javafx.scene.input.TransferMode.ANY);\r\n            ca.mcgill.cs.stg.solitaire.gui.CardPileView.CLIPBOARD_CONTENT.putString(ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(aModel.getSubStack(pCard, aIndex)));\r\n            db.setContent(ca.mcgill.cs.stg.solitaire.gui.CardPileView.CLIPBOARD_CONTENT);\r\n            pMouseEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Creates a drag detected handler for a card image view in a solitaire card game implementation.",
            "returns": "The event handler for drag detected events.",
            "reason": "To handle drag detected events for cards in the solitaire game interface.",
            "howToUse": "Call this method with the card's image view and associated card to set up drag detection for the card.",
            "howItWorks": "When a drag is detected on the card image view, it starts a drag-and-drop operation with the card's serialized data on the dragboard.",
            "assertions": {
              "preConditions": [
                "The card image view and associated card must not be null."
              ],
              "postConditions": [
                "The drag detected handler is created for the card image view."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "properties": {
            "docComment": "A read-only version of a game model.\r\n",
            "simpleName": "GameModelView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Handles the logic of moving cards, discarding cards, checking move legality, and accessing card stacks in the solitaire game.",
            "roleStereotype": "Service Provider",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy()",
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new strategy.\r\n */\r\npublic GreedyPlayingStrategy() {\r\n}",
            "docComment": "Creates a new strategy.\r\n",
            "metaSrc": "source code",
            "description": "Initialize a new instance of GreedyPlayingStrategy.",
            "returns": "a new instance of GreedyPlayingStrategy",
            "reason": "Provide a constructor to create a new instance of the GreedyPlayingStrategy class.",
            "howToUse": "Simply create a new instance of GreedyPlayingStrategy by calling GreedyPlayingStrategy() constructor.",
            "howItWorks": "The constructor initializes a new instance of GreedyPlayingStrategy with default values or configurations.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "int",
          "properties": {
            "simpleName": "int",
            "qualifiedName": "int",
            "metaSrc": "source code"
          },
          "labels": [
            "Primitive"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move.undo()",
          "properties": {
            "visibility": "public",
            "simpleName": "undo()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Move.undo()",
            "kind": "method",
            "sourceText": "/**\r\n * Undoes the move by reversing\r\n * its effect.\r\n */\r\nvoid undo();",
            "docComment": "Undoes the move by reversing\r\nits effect.\r\n",
            "metaSrc": "source code",
            "description": "Undoes the last move made in the solitaire game.",
            "returns": "This method does not return any value.",
            "reason": "Provided to allow the user to undo their last move and revert the game state.",
            "howToUse": "Call this method when the user wants to undo their last move in the solitaire game.",
            "howItWorks": "The undo() method reverses the effects of the last move made by restoring the game state to its previous state.",
            "assertions": {
              "preConditions": [
                "There must be a valid move to undo."
              ],
              "postConditions": [
                "The game state is reverted to the state before the last move."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView).0",
          "properties": {
            "simpleName": "pView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The image view associated with the suit stack."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The GameModel to associate with the DiscardPileView."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "properties": {
            "visibility": "private",
            "simpleName": "move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "private void move(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination) {\r\n    ca.mcgill.cs.stg.solitaire.model.Location source = find(pCard);\r\n    if ((source instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile) && (pDestination instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile)) {\r\n        aTableau.moveWithin(pCard, ((ca.mcgill.cs.stg.solitaire.model.TableauPile) (source)), ((ca.mcgill.cs.stg.solitaire.model.TableauPile) (pDestination)));\r\n    } else {\r\n        absorbCard(source);\r\n        if (pDestination instanceof ca.mcgill.cs.stg.solitaire.model.FoundationPile) {\r\n            aFoundations.push(pCard, ((ca.mcgill.cs.stg.solitaire.model.FoundationPile) (pDestination)));\r\n        } else if (pDestination == ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE) {\r\n            aDiscard.push(pCard);\r\n        } else {\r\n            assert pDestination instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile;\r\n            aTableau.push(pCard, ((ca.mcgill.cs.stg.solitaire.model.TableauPile) (pDestination)));\r\n        }\r\n    }\r\n    notifyListeners();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Moves a card to a specified destination within the solitaire game.",
            "returns": "This method does not return any value.",
            "reason": "Provides the functionality to move cards within the solitaire game model.",
            "howToUse": "Call this method with the card to be moved and the destination location as parameters to move the card within the game.",
            "howItWorks": "The method first finds the source location of the card, then based on the destination type, it moves the card accordingly within the game model. It notifies listeners after the move.",
            "assertions": {
              "preConditions": [
                "The card and destination location must not be null."
              ],
              "postConditions": [
                "The card is successfully moved to the specified destination within the game model."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "private",
            "simpleName": "getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.scene.image.Image getImage(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    if (aModel.isVisibleInTableau(pCard)) {\r\n        return ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(pCard);\r\n    } else {\r\n        return ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns the image of a card based on its visibility in the tableau.",
            "returns": "The image of the card.",
            "reason": "To provide the appropriate image representation of a card based on its visibility in the tableau.",
            "howToUse": "Call this method with a Card object as the argument to retrieve the corresponding image for display.",
            "howItWorks": "The method checks if the card is visible in the tableau using the model, and returns the corresponding card image or a back image accordingly.",
            "assertions": {
              "preConditions": [
                "The Card object pCard must not be null."
              ],
              "postConditions": [
                "The method returns a valid Image object representing the card."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "properties": {
            "visibility": "public",
            "simpleName": "getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.model.Move getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination) {\r\n    ca.mcgill.cs.stg.solitaire.model.Location source = find(pCard);\r\n    if ((source instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile) && aTableau.revealsTop(pCard)) {\r\n        return new ca.mcgill.cs.stg.solitaire.model.CompositeMove(new ca.mcgill.cs.stg.solitaire.model.GameModel.CardMove(pCard, pDestination), new ca.mcgill.cs.stg.solitaire.model.GameModel.RevealTopMove(((ca.mcgill.cs.stg.solitaire.model.TableauPile) (source))));\r\n    }\r\n    return new ca.mcgill.cs.stg.solitaire.model.GameModel.CardMove(pCard, pDestination);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns a move for a given card to a specified destination location, with additional logic for revealing the top card in a tableau pile.",
            "returns": "A move object representing the card move.",
            "reason": "Provides a way to handle card movements in the solitaire game, including revealing the top card in a tableau pile.",
            "howToUse": "Call this method with the card to move and the destination location, and use the returned move object to execute the card move in the game.",
            "howItWorks": "The method first finds the source location of the card, then checks if the card is from a tableau pile and if it reveals the top card. If so, it creates a composite move to reveal the top card before moving the specified card to the destination.",
            "assertions": {
              "preConditions": [
                "The game model and card objects must be properly initialized."
              ],
              "postConditions": [
                "A valid move object is returned based on the card and destination input."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card for which the previous card needs to be found."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "private",
            "simpleName": "createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createDragEnteredHandler(final javafx.scene.image.ImageView pImageView, final ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            ca.mcgill.cs.stg.solitaire.gui.CardTransfer transfer = new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(pEvent.getDragboard().getString());\r\n            if (aModel.isLegalMove(transfer.getTop(), aIndex)) {\r\n                pImageView.setEffect(new javafx.scene.effect.DropShadow());\r\n            }\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the drag entered event for a card image view in a solitaire card game.",
            "returns": "Event handler for drag events.",
            "reason": "Provided to handle the drag entered event and determine if a move is legal based on the card being dragged.",
            "howToUse": "Pass in the image view of the card and the card object to create a drag entered event handler for the card pile view.",
            "howItWorks": "Creates a new event handler that checks if the dragged card can be legally moved to the current card pile view index, and applies a drop shadow effect to the image view if the move is legal.",
            "assertions": {
              "preConditions": [
                "pImageView and pCard must not be null."
              ],
              "postConditions": [
                "The drag entered event is handled, and the image view may have a drop shadow effect applied."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.FOUR",
          "properties": {
            "sourceText": "FOUR",
            "visibility": "public",
            "simpleName": "FOUR",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.FOUR",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The index of the tableau pile to retrieve the card stack from."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The index of the tableau pile to show the top card from."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check visibility for."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aDestination",
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.model.Location aDestination;",
            "visibility": "private",
            "simpleName": "aDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aDestination",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
          "properties": {
            "visibility": "public",
            "simpleName": "isNull()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True if the move is not a move that\r\nadvances the game. False by default.\r\n */\r\ndefault boolean isNull() {\r\n    return false;\r\n}",
            "docComment": "\r\n@return True if the move is not a move that\r\nadvances the game. False by default.\r\n",
            "metaSrc": "source code",
            "description": "The method returns false indicating that the move is not null.",
            "returns": "false if the move is not null.",
            "reason": "To provide a default implementation for checking if a move is null.",
            "howToUse": "Call this method on a Move object to check if it is null.",
            "howItWorks": "The method simply returns false, indicating that the move is not null.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.NINE",
          "properties": {
            "sourceText": "NINE",
            "visibility": "public",
            "simpleName": "NINE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.NINE",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "default",
            "simpleName": "contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check.\r\n * @return Whether pCard is contains in any stack.\r\n * @pre pCard != null;\r\n */\r\nboolean contains(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert pCard != null;\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile index : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        if (contains(pCard, index)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check.\r\n@return Whether pCard is contains in any stack.\r\n@pre pCard != null;\r\n",
            "metaSrc": "source code",
            "description": "Checks if the given card is present in any of the tableau piles.",
            "returns": "True if the card is present in any tableau pile, false otherwise.",
            "reason": "Provided to determine if a specific card is already present in any of the tableau piles.",
            "howToUse": "Call this method with a card object to check if it exists in any tableau pile of the solitaire game.",
            "howItWorks": "Iterates through all tableau piles and checks if the given card is present in any of them by calling another method 'contains(pCard, index)'. Returns true if found, false otherwise.",
            "assertions": {
              "preConditions": [
                "pCard must not be null."
              ],
              "postConditions": [
                "Returns true if the card is present in any tableau pile, false otherwise."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "constructor",
            "sourceText": "SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel pModel, ca.mcgill.cs.stg.solitaire.model.FoundationPile pIndex) {\r\n    aModel = pModel;\r\n    aIndex = pIndex;\r\n    setPadding(new javafx.geometry.Insets(ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING));\r\n    setStyle(ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE);\r\n    final javafx.scene.image.ImageView image = new javafx.scene.image.ImageView(ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack());\r\n    image.setVisible(false);\r\n    getChildren().add(image);\r\n    aDragHandler = new ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(image);\r\n    image.setOnDragDetected(aDragHandler);\r\n    setOnDragOver(createOnDragOverHandler(image));\r\n    setOnDragEntered(createOnDragEnteredHandler());\r\n    setOnDragExited(createOnDragExitedHandler());\r\n    setOnDragDropped(createOnDragDroppedHandler());\r\n    aModel.addListener(this);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initializes a SuitStack object with the given GameModel and FoundationPile.",
            "returns": "The constructed SuitStack object.",
            "reason": "To initialize a SuitStack object with the necessary components and event handlers for the solitaire card game implementation.",
            "howToUse": "Create a new SuitStack object by providing a GameModel and a FoundationPile as parameters, then add the SuitStack object to the desired UI layout.",
            "howItWorks": "The method sets up the visual representation of the SuitStack with padding and border style, adds a card image, initializes drag and drop handlers, and registers itself as a listener to the GameModel.",
            "assertions": {
              "preConditions": [
                "pModel and pIndex must not be null."
              ],
              "postConditions": [
                "The SuitStack object is initialized with the provided GameModel and FoundationPile."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "properties": {
            "visibility": "private",
            "simpleName": "createOnDragDroppedHandler()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createOnDragDroppedHandler() {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            javafx.scene.input.Dragboard db = pEvent.getDragboard();\r\n            boolean success = false;\r\n            if (db.hasString()) {\r\n                ca.mcgill.cs.stg.solitaire.gui.CardTransfer transfer = new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(pEvent.getDragboard().getString());\r\n                aModel.getCardMove(transfer.getTop(), aIndex).perform();\r\n                success = true;\r\n            }\r\n            pEvent.setDropCompleted(success);\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the drag and drop event for moving cards to the suit stack.",
            "returns": "The event handler for drag and drop events.",
            "reason": "Provided to define the behavior of dropping cards onto the suit stack in the Solitaire game.",
            "howToUse": "Assign this event handler to the onDragDropped property of the suit stack UI element.",
            "howItWorks": "When a card is dropped onto the suit stack, it creates a CardTransfer object and performs the card move operation in the model, setting the drop success flag accordingly.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Remove the card at the top of the pile at pLocation,\r\n * and returns it.\r\n *\r\n * @param pLocation\r\n * \t\tThe location where to obtain the card.\r\n * @pre pLocation != null && !isEmpty(pLocation)\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.Card pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile pLocation) {\r\n    assert (pLocation != null) && (!isEmpty(pLocation));\r\n    return aPiles.get(pLocation).pop();\r\n}",
            "docComment": "Remove the card at the top of the pile at pLocation,\r\nand returns it.\r\n\r\n@param pLocation\r\n\t\tThe location where to obtain the card.\r\n@pre pLocation != null && !isEmpty(pLocation)\r\n",
            "metaSrc": "source code",
            "description": "This method pops a card from the specified FoundationPile.",
            "returns": "The card popped from the FoundationPile.",
            "reason": "To retrieve and remove the top card from a FoundationPile in a solitaire card game implementation.",
            "howToUse": "Create an instance of Foundations, pass the FoundationPile object as a parameter, and call the pop method to retrieve the top card from the specified FoundationPile.",
            "howItWorks": "The method first checks if the provided FoundationPile is not null and is not empty. It then retrieves the FoundationPile from the map of piles and pops the top card from it, returning the card.",
            "assertions": {
              "preConditions": [
                "pLocation must not be null.",
                "The specified FoundationPile must not be empty."
              ],
              "postConditions": [
                "The top card from the FoundationPile is successfully popped."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "properties": {
            "docComment": "Represents a general-purpose stack of cards. New CardStack\r\ninstances are initially empty.\r\n",
            "simpleName": "CardStack",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Manages a collection of Card objects and provides methods for manipulating the stack.",
            "roleStereotype": "Structurer",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "properties": {
            "visibility": "public",
            "simpleName": "main(java.lang.String[])",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
            "kind": "static method",
            "sourceText": "/**\r\n *\r\n * @param pArgs\r\n * \t\tNot used.\r\n */\r\npublic static void main(java.lang.String[] pArgs) {\r\n    ca.mcgill.cs.stg.solitaire.model.GameModel model = new ca.mcgill.cs.stg.solitaire.model.GameModel(new ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy());\r\n    for (int i = 0; i < ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES; i++) {\r\n        ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(model);\r\n    }\r\n    java.lang.System.out.println(\"Runs completed.\");\r\n}",
            "docComment": "\r\n@param pArgs\r\n\t\tNot used.\r\n",
            "metaSrc": "source code",
            "description": "Runs a specified number of solitaire games using a greedy playing strategy.",
            "returns": "This method does not return any value.",
            "reason": "To run multiple instances of the solitaire game using a specific playing strategy.",
            "howToUse": "Run the program with the desired command line arguments to specify settings, such as the number of games to play.",
            "howItWorks": "Creates a GameModel instance with a GreedyPlayingStrategy, then iterates over a specified number of games, playing each game using the provided model. Prints a message when all runs are completed.",
            "assertions": {
              "preConditions": [
                "The GameModel and GreedyPlayingStrategy classes must be properly implemented."
              ],
              "postConditions": [
                "All specified number of solitaire games are played using the greedy playing strategy."
              ]
            },
            "layer": "Service Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The image view of the card."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "/* Only if it reveals a card or empties a pile. We also don't move kings between empty piles */\r\nprivate static ca.mcgill.cs.stg.solitaire.model.Move substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile pile : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        ca.mcgill.cs.stg.solitaire.cards.CardStack stack = pModel.getTableauPile(pile);\r\n        for (ca.mcgill.cs.stg.solitaire.cards.Card card : stack) {\r\n            if (pModel.isBottomKing(card)) {\r\n                continue;\r\n            }\r\n            if (pModel.isLowestVisibleInTableau(card)) {\r\n                for (ca.mcgill.cs.stg.solitaire.model.TableauPile pile2 : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n                    if (pModel.isLegalMove(card, pile2)) {\r\n                        return pModel.getCardMove(card, pile2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Moves a card within the tableau piles if certain conditions are met.",
            "returns": "A move to be made within the tableau piles.",
            "reason": "Provided to implement a strategy for moving cards within the tableau piles during gameplay.",
            "howToUse": "Call this method with the current game model view to determine a move within the tableau piles.",
            "howItWorks": "Iterates through each card in the tableau piles, checks if it meets certain criteria, and if so, finds a legal move for that card.",
            "assertions": {
              "preConditions": [
                "The game model view must be initialized with the current state of the game."
              ],
              "postConditions": [
                "A move within the tableau piles is returned."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
          "properties": {
            "visibility": "public",
            "simpleName": "size()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The number of cards in the transfer.\r\n */\r\npublic int size() {\r\n    return aCards.length;\r\n}",
            "docComment": "\r\n@return The number of cards in the transfer.\r\n",
            "metaSrc": "source code",
            "description": "Returns the number of cards in the array.",
            "returns": "the number of cards in the array",
            "reason": "Provided to retrieve the size of the card array for various operations.",
            "howToUse": "Call this method to get the number of cards in the array.",
            "howItWorks": "The method simply returns the length of the 'aCards' array, which represents the number of cards in the array.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).2",
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).2",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The tableau pile to which the card is moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscardMove",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.Move aDiscardMove = new ca.mcgill.cs.stg.solitaire.model.Move() {\r\n    @java.lang.Override\r\n    public void perform() {\r\n        assert !isDeckEmpty();\r\n        aDiscard.push(aDeck.draw());\r\n        aMoves.push(this);\r\n        notifyListeners();\r\n    }\r\n\r\n    @java.lang.Override\r\n    public void undo() {\r\n        assert !isDiscardPileEmpty();\r\n        aDeck.push(aDiscard.pop());\r\n        notifyListeners();\r\n    }\r\n};",
            "visibility": "private",
            "simpleName": "aDiscardMove",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscardMove",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The GameModel to associate with the CardPileView."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Make the top card of a pile visible.\r\n *\r\n * @param pIndex\r\n * \t\tThe index of the requested pile.\r\n * @pre pIndex != null && !isEmpty(pIndex)\r\n */\r\nvoid showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    assert !aPiles.get(pIndex).isEmpty();\r\n    aVisible.add(aPiles.get(pIndex).peek());\r\n}",
            "docComment": "Make the top card of a pile visible.\r\n\r\n@param pIndex\r\n\t\tThe index of the requested pile.\r\n@pre pIndex != null && !isEmpty(pIndex)\r\n",
            "metaSrc": "source code",
            "description": "Add the top card of a specified tableau pile to the visible cards list.",
            "returns": "This method does not return anything.",
            "reason": "To update the visible cards list with the top card of a specified tableau pile for gameplay purposes.",
            "howToUse": "Create an instance of Tableau class, then call showTop method with the desired tableau pile index as the parameter.",
            "howItWorks": "The method first asserts that the specified tableau pile is not empty, then adds the top card of that pile to the list of visible cards.",
            "assertions": {
              "preConditions": [
                "The specified tableau pile must not be empty."
              ],
              "postConditions": [
                "The top card of the specified tableau pile is added to the list of visible cards."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "properties": {
            "visibility": "public",
            "simpleName": "main(java.lang.String[])",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
            "kind": "static method",
            "sourceText": "/**\r\n *\r\n * @param pArgs\r\n * \t\tNot used.\r\n */\r\npublic static void main(java.lang.String[] pArgs) {\r\n    int total = 0;\r\n    int totalWon = 0;\r\n    ca.mcgill.cs.stg.solitaire.model.GameModel model = new ca.mcgill.cs.stg.solitaire.model.GameModel(new ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy());\r\n    for (int i = 0; i < ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES; i++) {\r\n        ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(model);\r\n        int score = model.getScore();\r\n        total += score;\r\n        if (score == ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS) {\r\n            totalWon++;\r\n        }\r\n    }\r\n    java.lang.System.out.println(java.lang.String.format(\"Ratio won     %d/%d=%.1f%%\", totalWon, ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES, (((double) (totalWon)) / ((double) (ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES))) * ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT));\r\n    java.lang.System.out.println(java.lang.String.format(\"Average score %d/%d=%.1f\", total, ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES, ((double) (total)) / ((double) (ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES))));\r\n}",
            "docComment": "\r\n@param pArgs\r\n\t\tNot used.\r\n",
            "metaSrc": "source code",
            "description": "Runs multiple games of Solitaire using a greedy playing strategy and calculates the win ratio and average score.",
            "returns": "This method does not return any value.",
            "reason": "To automate the playing of multiple games of Solitaire and analyze the performance of the GreedyPlayingStrategy.",
            "howToUse": "Run the main method with appropriate command-line arguments to execute multiple games of Solitaire and view the win ratio and average score.",
            "howItWorks": "Creates a GameModel with a GreedyPlayingStrategy, plays multiple games, calculates total score and wins, then prints the win ratio and average score.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Service Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "properties": {
            "docComment": "Models a deck of 52 cards.\r\n",
            "simpleName": "Deck",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Responsible for managing the deck of cards, including shuffling, drawing, checking if empty, and adding cards.",
            "roleStereotype": "Structurer",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "constructor",
            "sourceText": "CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel pModel, ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    aModel = pModel;\r\n    aIndex = pIndex;\r\n    setPadding(new javafx.geometry.Insets(ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING));\r\n    setAlignment(javafx.geometry.Pos.TOP_CENTER);\r\n    buildLayout();\r\n    aModel.addListener(this);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initializes a CardPileView with a GameModel and TableauPile, setting padding, alignment, building layout, and adding a listener to the GameModel.",
            "returns": "The constructed CardPileView object.",
            "reason": "This method is provided to initialize a CardPileView with necessary components and set up listeners for model changes.",
            "howToUse": "Create a new CardPileView object by passing a GameModel and TableauPile as parameters, then add the CardPileView to the UI layout.",
            "howItWorks": "The method assigns the provided GameModel and TableauPile to the CardPileView, sets padding and alignment, builds the layout, and adds a listener to the GameModel for updates.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS",
          "properties": {
            "sourceText": "HEARTS",
            "visibility": "public",
            "simpleName": "HEARTS",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card object to be set for the CardDragHandler instance."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Move pCard and all the cards below to pDestination.\r\n *\r\n * @param pCard\r\n * \t\tThe card to move, possibly including all the cards on top of it.\r\n * @param pOrigin\r\n * \t\tThe location of the card before the move.\r\n * @param pDestination\r\n * \t\tThe intended destination of the card.\r\n * @pre this is a legal move\r\n */\r\nvoid moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pOrigin, ca.mcgill.cs.stg.solitaire.model.TableauPile pDestination) {\r\n    assert ((pCard != null) && (pOrigin != null)) && (pDestination != null);\r\n    assert contains(pCard, pOrigin);\r\n    assert isVisible(pCard);\r\n    java.util.Stack<ca.mcgill.cs.stg.solitaire.cards.Card> temp = new java.util.Stack<>();\r\n    ca.mcgill.cs.stg.solitaire.cards.Card card = aPiles.get(pOrigin).pop();\r\n    temp.push(card);\r\n    while (card != pCard) {\r\n        card = aPiles.get(pOrigin).pop();\r\n        temp.push(card);\r\n    } \r\n    while (!temp.isEmpty()) {\r\n        aPiles.get(pDestination).push(temp.pop());\r\n    } \r\n}",
            "docComment": "Move pCard and all the cards below to pDestination.\r\n\r\n@param pCard\r\n\t\tThe card to move, possibly including all the cards on top of it.\r\n@param pOrigin\r\n\t\tThe location of the card before the move.\r\n@param pDestination\r\n\t\tThe intended destination of the card.\r\n@pre this is a legal move\r\n",
            "metaSrc": "source code",
            "description": "Moves a card within a tableau pile from one position to another.",
            "returns": "This method does not return any value.",
            "reason": "To facilitate moving cards within a tableau pile in the solitaire game implementation.",
            "howToUse": "Call this method with the card to be moved, the origin tableau pile, and the destination tableau pile as parameters.",
            "howItWorks": "The method pops the card and all cards above it from the origin pile, stores them in a temporary stack, and then pushes them onto the destination pile in the correct order.",
            "assertions": {
              "preConditions": [
                "pCard and pOrigin must not be null.",
                "The card must be in the origin tableau pile.",
                "The card must be visible."
              ],
              "postConditions": [
                "The card is moved to the destination tableau pile."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int).0",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The index of the card to peek at."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to start the sequence from."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be added to the stack."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "properties": {
            "simpleName": "pRank",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The rank of the card."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "properties": {
            "visibility": "public",
            "simpleName": "get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "kind": "static method",
            "sourceText": "/**\r\n * Get a flyweight Card object.\r\n *\r\n * @param pRank\r\n * \t\tThe rank of the card (from ace to kind)\r\n * @param pSuit\r\n * \t\tThe suit of the card (clubs, diamond, spades, hearts)\r\n * @return The card object representing the card with pRank and pSuit\r\n */\r\npublic static ca.mcgill.cs.stg.solitaire.cards.Card get(ca.mcgill.cs.stg.solitaire.cards.Rank pRank, ca.mcgill.cs.stg.solitaire.cards.Suit pSuit) {\r\n    assert (pRank != null) && (pSuit != null);\r\n    return ca.mcgill.cs.stg.solitaire.cards.Card.CARDS[pSuit.ordinal()][pRank.ordinal()];\r\n}",
            "docComment": "Get a flyweight Card object.\r\n\r\n@param pRank\r\n\t\tThe rank of the card (from ace to kind)\r\n@param pSuit\r\n\t\tThe suit of the card (clubs, diamond, spades, hearts)\r\n@return The card object representing the card with pRank and pSuit\r\n",
            "metaSrc": "source code",
            "description": "Returns a specific card based on the given rank and suit.",
            "returns": "The card with the specified rank and suit.",
            "reason": "Provides a way to retrieve a specific card from the deck.",
            "howToUse": "Call this method with the desired rank and suit to get the corresponding card object.",
            "howItWorks": "The method accesses a pre-defined array of cards based on the ordinal values of the rank and suit, returning the specific card requested.",
            "assertions": {
              "preConditions": [
                "pRank and pSuit must not be null."
              ],
              "postConditions": [
                "The method returns a valid card object."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "float",
          "properties": {
            "simpleName": "float",
            "qualifiedName": "float",
            "metaSrc": "source code"
          },
          "labels": [
            "Primitive"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.EIGHT",
          "properties": {
            "sourceText": "EIGHT",
            "visibility": "public",
            "simpleName": "EIGHT",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.EIGHT",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "properties": {
            "visibility": "public",
            "simpleName": "addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
            "kind": "method",
            "sourceText": "/**\r\n * Registers an observer for the state of the game model.\r\n *\r\n * @param pListener\r\n * \t\tA listener to register.\r\n * @pre pListener != null\r\n */\r\npublic void addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener pListener) {\r\n    assert pListener != null;\r\n    aListeners.add(pListener);\r\n}",
            "docComment": "Registers an observer for the state of the game model.\r\n\r\n@param pListener\r\n\t\tA listener to register.\r\n@pre pListener != null\r\n",
            "metaSrc": "source code",
            "description": "Adds a listener to the list of listeners for the game model.",
            "returns": "This method does not return anything.",
            "reason": "Provided to allow external classes to register themselves as listeners for game model events.",
            "howToUse": "Create an instance of a class that implements GameModelListener interface, then call addListener method on a GameModel instance passing the listener as a parameter.",
            "howItWorks": "Checks if the listener parameter is not null, then adds it to the list of listeners stored in aListeners field of the GameModel instance.",
            "assertions": {
              "preConditions": [
                "The pListener parameter must not be null."
              ],
              "postConditions": [
                "The listener is successfully added to the list of listeners."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Make the top card of a pile not visible.\r\n *\r\n * @param pIndex\r\n * \t\tThe index of the requested stack.\r\n * @pre pIndex != null && !isEmpty(pIndex)\r\n */\r\nvoid hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    assert !aPiles.get(pIndex).isEmpty();\r\n    aVisible.remove(aPiles.get(pIndex).peek());\r\n}",
            "docComment": "Make the top card of a pile not visible.\r\n\r\n@param pIndex\r\n\t\tThe index of the requested stack.\r\n@pre pIndex != null && !isEmpty(pIndex)\r\n",
            "metaSrc": "source code",
            "description": "Remove the top card from a tableau pile and hide it from being visible.",
            "returns": "This method does not return anything.",
            "reason": "To hide the top card of a tableau pile when it is no longer visible in the game.",
            "howToUse": "Call this method with the specific tableau pile index to hide the top card from being visible in the game.",
            "howItWorks": "The method first asserts that the tableau pile is not empty, then removes the top card from the visible cards list of the tableau pile.",
            "assertions": {
              "preConditions": [
                "The tableau pile specified must not be empty."
              ],
              "postConditions": [
                "The top card of the specified tableau pile is removed from the visible cards list."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "private",
            "simpleName": "createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createDragOverHandler(final javafx.scene.image.ImageView pImageView, final ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            if ((pEvent.getGestureSource() != pImageView) && pEvent.getDragboard().hasString()) {\r\n                ca.mcgill.cs.stg.solitaire.gui.CardTransfer transfer = new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(pEvent.getDragboard().getString());\r\n                if (aModel.isLegalMove(transfer.getTop(), aIndex)) {\r\n                    pEvent.acceptTransferModes(javafx.scene.input.TransferMode.MOVE);\r\n                }\r\n            }\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles drag over events for a card pile view in a solitaire game.",
            "returns": "An event handler for drag events on the card pile view.",
            "reason": "Provided to handle drag events over a card pile view and determine if a legal move can be made.",
            "howToUse": "Create an instance of CardPileView and call this method passing the image view and card object as parameters to set up drag event handling.",
            "howItWorks": "Checks if the drag event is from a different image view and has a valid string data, creates a CardTransfer object, and checks if the move is legal based on the model.",
            "assertions": {
              "preConditions": [
                "pImageView and pCard must not be null."
              ],
              "postConditions": [
                "The drag event is consumed after processing."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aImageView",
          "properties": {
            "sourceText": "private javafx.scene.image.ImageView aImageView;",
            "visibility": "private",
            "simpleName": "aImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aImageView",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String).0",
          "properties": {
            "simpleName": "pId",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The id used to create the Card object."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model view containing the current game state."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.CLIPBOARD_CONTENT",
          "properties": {
            "sourceText": "private static final javafx.scene.input.ClipboardContent CLIPBOARD_CONTENT = new javafx.scene.input.ClipboardContent();",
            "visibility": "private",
            "simpleName": "CLIPBOARD_CONTENT",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.CLIPBOARD_CONTENT",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model representing the current state of the solitaire game."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be checked."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.CLIPBOARD_CONTENT",
          "properties": {
            "sourceText": "private static final javafx.scene.input.ClipboardContent CLIPBOARD_CONTENT = new javafx.scene.input.ClipboardContent();",
            "visibility": "private",
            "simpleName": "CLIPBOARD_CONTENT",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.CLIPBOARD_CONTENT",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "properties": {
            "docComment": "Component that shows a stack of cards in \r\nwhich a completed suit is accumulated.\r\n",
            "simpleName": "SuitStack",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Manages the visual representation and interaction of the suit stack in the Solitaire card game.",
            "roleStereotype": "User Interfacer",
            "layer": "Presentation Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.aRank",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.cards.Rank aRank;",
            "visibility": "private",
            "simpleName": "aRank",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.aRank",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String).0",
          "properties": {
            "simpleName": "pString",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The string containing card information to be parsed."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.TWO",
          "properties": {
            "sourceText": "TWO",
            "visibility": "public",
            "simpleName": "TWO",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.TWO",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Determines if it is legal to move pCard on top of pPile,\r\n * i.e. if a king is moved to an empty pile or any other rank on\r\n * a card of immediately greater rank but of a different color.\r\n *\r\n * @param pCard\r\n * \t\tThe card we wish to move\r\n * @param pPile\r\n * \t\tThe desired destination pile\r\n * @return True if the move is legal\r\n * @pre pCard != null && pPile != null\r\n */\r\nboolean canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pPile) {\r\n    assert (pCard != null) && (pPile != null);\r\n    ca.mcgill.cs.stg.solitaire.cards.CardStack pile = aPiles.get(pPile);\r\n    if (pile.isEmpty()) {\r\n        return pCard.getRank() == ca.mcgill.cs.stg.solitaire.cards.Rank.KING;\r\n    } else {\r\n        return (pCard.getRank().ordinal() == (pile.peek().getRank().ordinal() - 1)) && (!pCard.getSuit().sameColorAs(pile.peek().getSuit()));\r\n    }\r\n}",
            "docComment": "Determines if it is legal to move pCard on top of pPile, \r\ni.e. if a king is moved to an empty pile or any other rank on \r\na card of immediately greater rank but of a different color.\r\n\r\n@param pCard\r\n\t\tThe card we wish to move\r\n@param pPile\r\n\t\tThe desired destination pile\r\n@return True if the move is legal\r\n@pre pCard != null && pPile != null\r\n",
            "metaSrc": "source code",
            "description": "Checks if a card can be moved to a tableau pile based on the game rules.",
            "returns": "True if the card can be moved to the tableau pile, false otherwise.",
            "reason": "Provided to determine the validity of moving a card to a tableau pile in the solitaire game.",
            "howToUse": "Call this method with a card and a tableau pile to check if the card can be legally moved to the pile.",
            "howItWorks": "Checks if the tableau pile is empty and the card is a King, or if the card's rank is one less than the top card in the pile and the suits are different.",
            "assertions": {
              "preConditions": [
                "pCard and pPile must not be null."
              ],
              "postConditions": [
                "Returns true if the card can be moved to the tableau pile based on game rules."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check if it reveals the top card."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()",
          "properties": {
            "visibility": "public",
            "simpleName": "undo()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void undo() {\r\n    move(aCard, aOrigin);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Undo a card move in the game model.",
            "returns": "This method does not return anything.",
            "reason": "Provided to allow the user to undo a card move in the game and revert the game state.",
            "howToUse": "Call this method when the user wants to undo a card move in the game.",
            "howItWorks": "The method calls the 'move' method with the card and its original pile to revert the move and update the game state accordingly.",
            "assertions": {
              "preConditions": [
                "The card move to be undone must have been previously executed."
              ],
              "postConditions": [
                "The card move is undone, and the game state is reverted to its previous state."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "public",
            "simpleName": "isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return aTableau.contains(pCard) && aTableau.isVisible(pCard);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if a given card is visible in the tableau.",
            "returns": "True if the card is in the tableau and visible, false otherwise.",
            "reason": "To determine if a card is visible in the tableau for game logic purposes.",
            "howToUse": "Call this method with a Card object to check if it is visible in the tableau.",
            "howItWorks": "The method first checks if the card is in the tableau, then calls the isVisible method on the tableau to determine if the card is visible.",
            "assertions": {
              "preConditions": [
                "The game model and tableau must be properly initialized."
              ],
              "postConditions": [
                "Returns true if the card is in the tableau and visible, false otherwise."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The image view of the card being dragged."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "properties": {
            "visibility": "public",
            "simpleName": "isEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True iff there are no cards in the deck.\r\n */\r\npublic boolean isEmpty() {\r\n    return aCards.isEmpty();\r\n}",
            "docComment": "\r\n@return True iff there are no cards in the deck.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the deck of cards is empty.",
            "returns": "true if the deck is empty, false otherwise.",
            "reason": "Provided to allow checking if the deck is empty before performing any operations.",
            "howToUse": "Create an instance of Deck class and call isEmpty() method to check if the deck is empty.",
            "howItWorks": "The method simply delegates the check to the isEmpty() method of the underlying list of cards.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.aCards",
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.cards.CardStack aCards;",
            "visibility": "private",
            "simpleName": "aCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.aCards",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aListeners",
          "properties": {
            "sourceText": "private final java.util.List<ca.mcgill.cs.stg.solitaire.model.GameModelListener> aListeners = new java.util.ArrayList<>();",
            "visibility": "private",
            "simpleName": "aListeners",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aListeners",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "properties": {
            "docComment": "An immutable utility object to facilitate the transfer of card \r\nthrough the drag board (drag and drop space).\r\n",
            "simpleName": "CardTransfer",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Manages card information and provides methods for serialization and retrieval.",
            "roleStereotype": "Information Holder",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "default",
            "simpleName": "isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check.\r\n * @return True if the card is visible and there is no\r\nvisible card below it in its pile. This includes\r\nthe case where the card is at the bottom of the pile.\r\n * @pre pCard != null && contains(pCard)\r\n */\r\nboolean isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert (pCard != null) && contains(pCard);\r\n    if (!isVisible(pCard)) {\r\n        return false;\r\n    } else {\r\n        java.util.Optional<ca.mcgill.cs.stg.solitaire.cards.Card> previousCard = getPreviousCard(pCard);\r\n        return (!previousCard.isPresent()) || (!isVisible(previousCard.get()));\r\n    }\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check.\r\n@return True if the card is visible and there is no\r\nvisible card below it in its pile. This includes\r\nthe case where the card is at the bottom of the pile.\r\n@pre pCard != null && contains(pCard)\r\n",
            "metaSrc": "source code",
            "description": "Checks if the given card is the lowest visible card in the tableau.",
            "returns": "True if the given card is the lowest visible card, false otherwise.",
            "reason": "To determine if a card is the lowest visible card in the tableau for game logic purposes.",
            "howToUse": "Call this method with a card object to check if it is the lowest visible card in the tableau.",
            "howItWorks": "The method first checks if the given card is visible. If it is, it then checks if there is no previous card or if the previous card is not visible.",
            "assertions": {
              "preConditions": [
                "The given card must not be null.",
                "The given card must be part of the tableau."
              ],
              "postConditions": [
                "Returns true if the given card is the lowest visible card in the tableau."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "properties": {
            "visibility": "private",
            "simpleName": "createOnDragEnteredHandler()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createOnDragEnteredHandler() {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            ca.mcgill.cs.stg.solitaire.gui.CardTransfer transfer = new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(pEvent.getDragboard().getString());\r\n            if ((transfer.size() == 1) && aModel.isLegalMove(transfer.getTop(), aIndex)) {\r\n                setStyle(ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED);\r\n            }\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the drag entered event for the suit stack in the Solitaire card game.",
            "returns": "The event handler for drag entered events.",
            "reason": "Provided to handle the drag entered event and determine if a legal move can be made.",
            "howToUse": "Create an instance of SuitStack and set this method as the onDragEntered event handler for the stack.",
            "howItWorks": "Creates a new CardTransfer object based on the dragboard content, checks if the transfer size is 1 and if the move is legal, then sets the style of the stack.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "properties": {
            "visibility": "public",
            "simpleName": "getRank()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
            "kind": "method",
            "sourceText": "/**\r\n * Obtain the rank of the card.\r\n *\r\n * @return An object representing the rank of the card.\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Rank getRank() {\r\n    return aRank;\r\n}",
            "docComment": "Obtain the rank of the card.\r\n\r\n@return An object representing the rank of the card.\r\n",
            "metaSrc": "source code",
            "description": "Returns the rank of the card.",
            "returns": "the rank of the card",
            "reason": "Provided to allow access to the rank of a card object.",
            "howToUse": "Create an instance of Card class, call getRank() method on the instance to retrieve the rank of the card.",
            "howItWorks": "The method simply returns the value of the 'aRank' instance variable which represents the rank of the card.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "properties": {
            "visibility": "public",
            "simpleName": "getSuit()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
            "kind": "method",
            "sourceText": "/**\r\n * Obtain the suit of the card.\r\n *\r\n * @return An object representing the suit of the card\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Suit getSuit() {\r\n    return aSuit;\r\n}",
            "docComment": "Obtain the suit of the card.\r\n\r\n@return An object representing the suit of the card\r\n",
            "metaSrc": "source code",
            "description": "Returns the suit of the card.",
            "returns": "the suit of the card",
            "reason": "Provided to allow access to the suit information of a card object.",
            "howToUse": "Create an instance of Card class and call getSuit() method to retrieve the suit of the card.",
            "howItWorks": "The method simply returns the value of the 'aSuit' instance variable which represents the suit of the card.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getNullMove()",
          "properties": {
            "visibility": "public",
            "simpleName": "getNullMove()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getNullMove()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.model.Move getNullMove() {\r\n    return ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns the null move of the Solitaire game.",
            "returns": "The null move of the Solitaire game.",
            "reason": "Provided to handle cases where a null move is needed in the game logic.",
            "howToUse": "Call this method to retrieve the null move of the Solitaire game.",
            "howItWorks": "The method simply returns the predefined NULL_MOVE constant from the GameModel class.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView).0",
          "properties": {
            "simpleName": "pView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The ImageView to be associated with the CardDragHandler."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "properties": {
            "docComment": "Represents the rank of a playing card.\r\n",
            "simpleName": "Rank",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank",
            "kind": "enum",
            "metaSrc": "source code",
            "description": "Responsible for defining the ranks of playing cards.",
            "roleStereotype": "Information Holder",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aCard",
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.cards.Card aCard;",
            "visibility": "private",
            "simpleName": "aCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aCard",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[]).0",
          "properties": {
            "simpleName": "pMoves",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[]).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "Array of Move objects to be added to the CompositeMove."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill",
          "properties": {
            "simpleName": "mcgill",
            "qualifiedName": "ca.mcgill",
            "kind": "package",
            "metaSrc": "source code"
          },
          "labels": [
            "Container"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aCard",
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.cards.Card aCard;",
            "visibility": "private",
            "simpleName": "aCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aCard",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The index of the tableau pile to retrieve the card stack from."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card object being dragged."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "properties": {
            "visibility": "public",
            "simpleName": "size()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The number of cards in the stack.\r\n */\r\npublic int size() {\r\n    return aCards.size();\r\n}",
            "docComment": "\r\n@return The number of cards in the stack.\r\n",
            "metaSrc": "source code",
            "description": "Returns the number of cards in the card stack.",
            "returns": "the number of cards in the card stack",
            "reason": "To provide the functionality of getting the size of the card stack.",
            "howToUse": "Create an instance of CardStack, add cards to it, and then call size() method to get the number of cards in the stack.",
            "howItWorks": "The method simply returns the size of the internal list of cards stored in the CardStack object.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Places a card on top of the pile at pIndex. The\r\n * card will be visible by default.\r\n *\r\n * @param pCard\r\n * \t\tThe card to push.\r\n * @param pIndex\r\n * \t\tThe index of the destination stack.\r\n * @pre pCard != null && pIndex != null;\r\n */\r\nvoid push(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    assert (pCard != null) && (pIndex != null);\r\n    aPiles.get(pIndex).push(pCard);\r\n    aVisible.add(pCard);\r\n}",
            "docComment": "Places a card on top of the pile at pIndex. The\r\ncard will be visible by default.\r\n\r\n@param pCard\r\n\t\tThe card to push.\r\n@param pIndex\r\n\t\tThe index of the destination stack.\r\n@pre pCard != null && pIndex != null;\r\n",
            "metaSrc": "source code",
            "description": "Pushes a card onto a tableau pile and adds it to the visible cards list.",
            "returns": "This method does not return anything.",
            "reason": "To add a card to a tableau pile in the solitaire game implementation.",
            "howToUse": "Create an instance of the Card class representing the card to be pushed, and specify the tableau pile index where the card should be pushed.",
            "howItWorks": "The method first checks if the card and tableau pile index are not null, then pushes the card onto the specified tableau pile and adds it to the list of visible cards.",
            "assertions": {
              "preConditions": [
                "pCard and pIndex must not be null."
              ],
              "postConditions": [
                "The card is successfully pushed onto the specified tableau pile and added to the list of visible cards."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "properties": {
            "docComment": "Component that shows the deck and allows clicking\r\nit to draw cards. Listens to game model state changes\r\nand updates itself to disappear if it is empty.\r\n",
            "simpleName": "DeckView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Responsible for providing a visual representation of the deck in the solitaire game, allowing players to interact with it, and dynamically updating the appearance of the deck view button based on the game state changes.",
            "roleStereotype": "User Interfacer",
            "layer": "Presentation Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg",
          "properties": {
            "simpleName": "stg",
            "qualifiedName": "ca.mcgill.cs.stg",
            "kind": "package",
            "metaSrc": "source code"
          },
          "labels": [
            "Container"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()",
          "properties": {
            "visibility": "public",
            "simpleName": "gameStateChanged()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void gameStateChanged() {\r\n    buildLayout();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Rebuilds the layout of the card pile view when the game state changes.",
            "returns": "This method does not return anything.",
            "reason": "This method is provided to update the layout of the card pile view in response to changes in the game state.",
            "howToUse": "Simply call this method whenever the game state changes to update the layout of the card pile view.",
            "howItWorks": "When the game state changes, the method calls the buildLayout() method to reconstruct the layout of the card pile view based on the updated game state.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location).0",
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The location from which to absorb the card."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.THIRD",
          "properties": {
            "sourceText": "THIRD",
            "visibility": "public",
            "simpleName": "THIRD",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.THIRD",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The Card object for which the image needs to be retrieved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card object being dragged."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "/* If the discard pile is empty, discard. */\r\nprivate static ca.mcgill.cs.stg.solitaire.model.Move substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    if (pModel.isDiscardPileEmpty() && (!pModel.isDeckEmpty())) {\r\n        return pModel.getDiscardMove();\r\n    } else {\r\n        return pModel.getNullMove();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns a move to discard a card if the discard pile is empty and the deck is not empty.",
            "returns": "A move to discard a card or a null move.",
            "reason": "Provides a strategy for the AI player to make a move when the discard pile is empty.",
            "howToUse": "Call this method with the current game model view as the parameter to get a move to discard a card if needed.",
            "howItWorks": "Checks if the discard pile is empty and the deck is not empty, then returns a move to discard a card; otherwise, returns a null move.",
            "assertions": {
              "preConditions": [
                "The game model view object must be valid."
              ],
              "postConditions": [
                "A move to discard a card or a null move is returned."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards",
          "properties": {
            "sourceText": "private static java.util.Map<java.lang.String, javafx.scene.image.Image> aCards = new java.util.HashMap<java.lang.String, javafx.scene.image.Image>();",
            "visibility": "private",
            "simpleName": "aCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS",
          "properties": {
            "sourceText": "private static final int ALL_CARDS = 52;",
            "visibility": "private",
            "simpleName": "ALL_CARDS",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL",
          "properties": {
            "sourceText": "private static final java.lang.String BUTTON_STYLE_NORMAL = \"-fx-background-color: transparent; -fx-padding: 5, 5, 5, 5;\";",
            "visibility": "private",
            "simpleName": "BUTTON_STYLE_NORMAL",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS",
          "properties": {
            "sourceText": "DIAMONDS",
            "visibility": "public",
            "simpleName": "DIAMONDS",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack).0",
          "properties": {
            "simpleName": "pCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The CardStack object to be serialized."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles",
          "properties": {
            "sourceText": "private final java.util.Map<ca.mcgill.cs.stg.solitaire.model.FoundationPile, ca.mcgill.cs.stg.solitaire.cards.CardStack> aPiles = new java.util.HashMap<>();",
            "visibility": "private",
            "simpleName": "aPiles",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card associated with the image view."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
          "properties": {
            "visibility": "private",
            "simpleName": "createNewGameImage()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
            "kind": "method",
            "sourceText": "private javafx.scene.canvas.Canvas createNewGameImage() {\r\n    double width = ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack().getWidth();\r\n    double height = ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack().getHeight();\r\n    javafx.scene.canvas.Canvas canvas = new javafx.scene.canvas.Canvas(width, height);\r\n    javafx.scene.canvas.GraphicsContext context = canvas.getGraphicsContext2D();\r\n    // The reset image\r\n    context.setStroke(javafx.scene.paint.Color.DARKGREEN);\r\n    context.setLineWidth(ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH);\r\n    context.strokeOval(width / 4, ((height / 2) - (width / 4)) + ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE, width / 2, width / 2);\r\n    // The text\r\n    context.setTextAlign(javafx.scene.text.TextAlignment.CENTER);\r\n    context.setTextBaseline(javafx.geometry.VPos.CENTER);\r\n    context.setFill(javafx.scene.paint.Color.DARKKHAKI);\r\n    context.setFont(javafx.scene.text.Font.font(javafx.scene.text.Font.getDefault().getName(), ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE));\r\n    if (aModel.isCompleted()) {\r\n        context.fillText(\"You won!\", java.lang.Math.round(width / 2), ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE);\r\n    } else {\r\n        context.fillText(\"Give up?\", java.lang.Math.round(width / 2), ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE);\r\n    }\r\n    context.setTextAlign(javafx.scene.text.TextAlignment.CENTER);\r\n    return canvas;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Creates a new game image with text based on game completion status.",
            "returns": "A canvas object representing the new game image.",
            "reason": "Provides a visual representation of the game status for the user.",
            "howToUse": "Call this method to generate a canvas object with text indicating game status.",
            "howItWorks": "Calculates the dimensions of the canvas, sets up graphics context, draws an oval shape, sets text alignment, font, and color based on game completion status.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model view containing the tableau and foundation piles."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.SECOND",
          "properties": {
            "sourceText": "SECOND",
            "visibility": "public",
            "simpleName": "SECOND",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.SECOND",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model representing the current state of the solitaire game."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING",
          "properties": {
            "sourceText": "private static final int PADDING = 5;",
            "visibility": "private",
            "simpleName": "PADDING",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()",
          "properties": {
            "visibility": "public",
            "simpleName": "gameStateChanged()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()",
            "kind": "method",
            "sourceText": "/**\r\n * Called whenever the state of the\r\n * game model changes.\r\n */\r\nvoid gameStateChanged();",
            "docComment": "Called whenever the state of the \r\ngame model changes.\r\n",
            "metaSrc": "source code",
            "description": "Notify listeners that the game state has changed.",
            "returns": "This method does not return any value.",
            "reason": "To inform any registered listeners about changes in the game state.",
            "howToUse": "Implement this method in a class that implements the GameModelListener interface and add custom logic to handle game state changes.",
            "howItWorks": "When called, this method triggers an event to notify any registered listeners that the game state has changed.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Service Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "private",
            "simpleName": "createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createDragExitedHandler(final javafx.scene.image.ImageView pImageView, final ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            pImageView.setEffect(null);\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Resets the visual effect of a card image view when a drag event exits the card pile view.",
            "returns": "An event handler for drag events.",
            "reason": "Provided to handle the visual effect of a card image view when a drag event exits the card pile view.",
            "howToUse": "Pass the image view of the card and the associated card object to create a drag exited event handler for the card pile view.",
            "howItWorks": "When a drag event exits the card pile view, the method sets the visual effect of the card image view to null and consumes the event to prevent further handling.",
            "assertions": {
              "preConditions": [
                "pImageView and pCard must not be null."
              ],
              "postConditions": [
                "The visual effect of pImageView is reset to null.",
                "The drag event is consumed."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.lang.String)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a card transfer from a serialized\r\n * version of the cards.\r\n *\r\n * @param pString\r\n * \t\tThe serialized version\r\n */\r\npublic CardTransfer(java.lang.String pString) {\r\n    assert (pString != null) && (pString.length() > 0);\r\n    java.lang.String[] tokens = pString.split(ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR);\r\n    aCards = new ca.mcgill.cs.stg.solitaire.cards.Card[tokens.length];\r\n    for (int i = 0; i < tokens.length; i++) {\r\n        aCards[i] = ca.mcgill.cs.stg.solitaire.cards.Card.get(tokens[i]);\r\n    }\r\n    assert aCards.length > 0;\r\n}",
            "docComment": "Creates a card transfer from a serialized\r\nversion of the cards.\r\n\r\n@param pString\r\n\t\tThe serialized version\r\n",
            "metaSrc": "source code",
            "description": "Constructs a CardTransfer object by parsing a string and creating an array of Card objects.",
            "returns": "A CardTransfer object constructed from the provided string.",
            "reason": "To initialize a CardTransfer object with card information from a string representation.",
            "howToUse": "Create a new CardTransfer object by passing a string containing card information as the parameter.",
            "howItWorks": "The method splits the input string using a separator, creates an array of Card objects based on the tokens, and ensures the array is not empty.",
            "assertions": {
              "preConditions": [
                "The input string pString must not be null and must have a length greater than 0."
              ],
              "postConditions": [
                "The array of Card objects aCards is initialized with valid card information."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model",
          "properties": {
            "simpleName": "model",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model",
            "kind": "package",
            "metaSrc": "source code",
            "description": "Manages the game state, handles card movements, and notifies listeners of state changes.",
            "layer": "Domain Layer"
          },
          "labels": [
            "Container"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()",
          "properties": {
            "visibility": "public",
            "simpleName": "perform()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void perform() {\r\n    assert isLegalMove(aCard, aDestination);\r\n    move(aCard, aDestination);\r\n    aMoves.push(this);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Performs a legal move of a card to a destination and pushes the move onto the stack.",
            "returns": "This method does not return anything.",
            "reason": "To execute a legal move of a card in the solitaire game and keep track of the move for potential undo functionality.",
            "howToUse": "Call this method with the card to be moved and the destination pile as parameters to perform the move.",
            "howItWorks": "The method first checks if the move is legal, then executes the move by calling the 'move' method, and finally pushes the move onto the stack of moves.",
            "assertions": {
              "preConditions": [
                "The move must be legal."
              ],
              "postConditions": [
                "The card is successfully moved to the destination pile."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "private",
            "simpleName": "getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "static method",
            "sourceText": "private static java.lang.String getCode(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES[pCard.getRank().ordinal()] + ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES[pCard.getSuit().ordinal()];\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Generates a code for a given card based on its rank and suit.",
            "returns": "The code representing the card based on its rank and suit.",
            "reason": "To provide a unique code representation for each card in the solitaire game.",
            "howToUse": "Pass a Card object to the method to get the code representing that card.",
            "howItWorks": "The method accesses the RANK_CODES and SUIT_CODES arrays to retrieve the codes for the card's rank and suit respectively, then concatenates them to form the final code.",
            "assertions": {
              "preConditions": [
                "The Card object passed to the method is not null."
              ],
              "postConditions": [
                "A non-null code representing the card is returned."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards",
          "properties": {
            "simpleName": "cards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards",
            "kind": "package",
            "metaSrc": "source code",
            "description": "Responsible for managing the representation and manipulation of playing cards in a solitaire game.",
            "layer": "Domain Layer"
          },
          "labels": [
            "Container"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)",
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(javafx.scene.image.ImageView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)",
            "kind": "constructor",
            "sourceText": "CardDragHandler(javafx.scene.image.ImageView pView) {\r\n    aImageView = pView;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize the CardDragHandler object with the provided ImageView.",
            "returns": "A new instance of CardDragHandler.",
            "reason": "To set the ImageView for the CardDragHandler object, allowing it to handle drag events for the associated card image.",
            "howToUse": "Create a new instance of CardDragHandler by passing an ImageView as the parameter.",
            "howItWorks": "Assigns the provided ImageView to the 'aImageView' attribute of the CardDragHandler object, which will be used to handle drag events for the associated card image.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
          "properties": {
            "visibility": "public",
            "simpleName": "isDeckEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True if the deck has no card left in it.\r\n */\r\nboolean isDeckEmpty();",
            "docComment": "\r\n@return True if the deck has no card left in it.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the deck of cards is empty.",
            "returns": "true if the deck is empty, false otherwise.",
            "reason": "To determine if there are any cards left in the deck for gameplay.",
            "howToUse": "Call this method to check if there are any cards remaining in the deck before dealing a new set of cards.",
            "howItWorks": "The method accesses the deck of cards and checks if there are any remaining cards in it. It returns true if the deck is empty, otherwise false.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FOURTH",
          "properties": {
            "sourceText": "FOURTH",
            "visibility": "public",
            "simpleName": "FOURTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FOURTH",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.QUEEN",
          "properties": {
            "sourceText": "QUEEN",
            "visibility": "public",
            "simpleName": "QUEEN",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.QUEEN",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit()",
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit()",
            "kind": "constructor",
            "sourceText": "Suit() {\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize a Suit enum instance.",
            "returns": "a Suit enum instance",
            "reason": "Provided to create instances of the Suit enum with default values.",
            "howToUse": "Simply call the Suit constructor to create a new instance of the enum.",
            "howItWorks": "The constructor initializes a Suit enum instance with default values, as no parameters are provided.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "properties": {
            "visibility": "default",
            "simpleName": "getTotalSize()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The total number of cards in all the foundation piles.\r\n */\r\nint getTotalSize() {\r\n    int total = 0;\r\n    for (ca.mcgill.cs.stg.solitaire.cards.CardStack stack : aPiles.values()) {\r\n        total += stack.size();\r\n    }\r\n    return total;\r\n}",
            "docComment": "\r\n@return The total number of cards in all the foundation piles.\r\n",
            "metaSrc": "source code",
            "description": "Calculates the total size of all card stacks in the foundations.",
            "returns": "The total size of all card stacks in the foundations.",
            "reason": "To provide the total size of all card stacks in the foundations for game logic or display purposes.",
            "howToUse": "Create an instance of Foundations class, call getTotalSize() method to get the total size of all card stacks in the foundations.",
            "howItWorks": "Iterates through all card stacks in the foundations, retrieves the size of each stack, and adds them up to calculate the total size.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[]).0",
          "properties": {
            "simpleName": "pArgs",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[]).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "Command line arguments passed to the program."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model view containing the tableau piles."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "public",
            "simpleName": "push(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n * Places pCard on top of the deck.\r\n *\r\n * @param pCard\r\n * \t\tThe card to place on top of the deck.\r\n * @pre pCard !=null\r\n */\r\npublic void push(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert pCard != null;\r\n    aCards.push(pCard);\r\n}",
            "docComment": "Places pCard on top of the deck.\r\n\r\n@param pCard\r\n\t\tThe card to place on top of the deck.\r\n@pre pCard !=null\r\n",
            "metaSrc": "source code",
            "description": "Pushes a card onto the deck.",
            "returns": "This method does not return anything.",
            "reason": "Provided to add a card to the deck during gameplay.",
            "howToUse": "Create an instance of Deck, then call push method with a Card object as the parameter to add the card to the deck.",
            "howItWorks": "The method checks if the input card is not null, then pushes the card onto the deck's stack of cards.",
            "assertions": {
              "preConditions": [
                "The input card must not be null."
              ],
              "postConditions": [
                "The card is successfully added to the deck."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card we wish to move\r\n * @param pLocation\r\n * \t\tThe desired location for pCard\r\n * @return True if pCard can be moved to the top of pLocation.\r\nThis is only possible if its rank is immediately superior\r\nto that of the card currently on top of the pile or, in\r\nthe case of an ace, if the location is empty.\r\n * @pre pCard != null && pLocation != null\r\n */\r\nboolean canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.FoundationPile pLocation) {\r\n    assert (pCard != null) && (pLocation != null);\r\n    if (isEmpty(pLocation)) {\r\n        return pCard.getRank() == ca.mcgill.cs.stg.solitaire.cards.Rank.ACE;\r\n    } else {\r\n        return (pCard.getSuit() == peek(pLocation).getSuit()) && (pCard.getRank().ordinal() == (peek(pLocation).getRank().ordinal() + 1));\r\n    }\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card we wish to move\r\n@param pLocation\r\n\t\tThe desired location for pCard\r\n@return True if pCard can be moved to the top of pLocation.\r\nThis is only possible if its rank is immediately superior\r\nto that of the card currently on top of the pile or, in\r\nthe case of an ace, if the location is empty.\r\n@pre pCard != null && pLocation != null\r\n",
            "metaSrc": "source code",
            "description": "Determines if a card can be moved to a foundation pile based on the game rules.",
            "returns": "True if the card can be moved to the foundation pile, false otherwise.",
            "reason": "Provides the logic to check if a card can be legally moved to a foundation pile in the solitaire game.",
            "howToUse": "Call this method with the card to be moved and the destination foundation pile to determine if the move is valid.",
            "howItWorks": "If the foundation pile is empty, the card must be an Ace to be moved. Otherwise, the card must have the same suit as the top card in the pile and a rank one higher than the top card.",
            "assertions": {
              "preConditions": [
                "pCard and pLocation must not be null."
              ],
              "postConditions": [
                "Returns true if the card can be moved to the foundation pile according to the game rules."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be pushed onto the pile."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aDragHandler",
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.gui.CardDragHandler aDragHandler;",
            "visibility": "private",
            "simpleName": "aDragHandler",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aDragHandler",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDeck",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.cards.Deck aDeck = new ca.mcgill.cs.stg.solitaire.cards.Deck();",
            "visibility": "private",
            "simpleName": "aDeck",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDeck",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aFoundations",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.Foundations aFoundations = new ca.mcgill.cs.stg.solitaire.model.Foundations();",
            "visibility": "private",
            "simpleName": "aFoundations",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aFoundations",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.aIndex",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.TableauPile aIndex;",
            "visibility": "private",
            "simpleName": "aIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.aIndex",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
          "properties": {
            "visibility": "default",
            "simpleName": "initialize()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
            "kind": "method",
            "sourceText": "/**\r\n * Initializes the FoundationPiles object to reset it to four empty piles.\r\n */\r\nvoid initialize() {\r\n    for (ca.mcgill.cs.stg.solitaire.model.FoundationPile index : ca.mcgill.cs.stg.solitaire.model.FoundationPile.values()) {\r\n        aPiles.put(index, new ca.mcgill.cs.stg.solitaire.cards.CardStack());\r\n    }\r\n}",
            "docComment": "Initializes the FoundationPiles object to reset it to four empty piles.\r\n",
            "metaSrc": "source code",
            "description": "Initialize the foundation piles with empty card stacks.",
            "returns": "This method does not return anything.",
            "reason": "This method is provided to set up the initial state of the foundation piles in the Solitaire game.",
            "howToUse": "Call this method when setting up a new game of Solitaire to initialize the foundation piles.",
            "howItWorks": "Iterates through all the foundation piles and creates a new empty card stack for each pile, storing them in a map.",
            "assertions": {
              "preConditions": [],
              "postConditions": [
                "All foundation piles are initialized with empty card stacks."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING",
          "properties": {
            "sourceText": "private static final int PADDING = 5;",
            "visibility": "private",
            "simpleName": "PADDING",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS",
          "properties": {
            "sourceText": "CLUBS",
            "visibility": "public",
            "simpleName": "CLUBS",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aIndex",
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.model.TableauPile aIndex;",
            "visibility": "private",
            "simpleName": "aIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aIndex",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The foundation pile to check."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.toString()",
          "properties": {
            "visibility": "public",
            "simpleName": "toString()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.toString()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @see java.lang.Object#toString()\r\n */\r\n@java.lang.Override\r\npublic java.lang.String toString() {\r\n    return (aRank + \" of \") + aSuit;\r\n}",
            "docComment": "\r\n@see java.lang.Object#toString()\r\n",
            "metaSrc": "source code",
            "description": "Returns a string representation of the card's rank and suit.",
            "returns": "A string representing the card's rank and suit.",
            "reason": "Provides a human-readable representation of the card for display purposes.",
            "howToUse": "Call this method on a Card object to get a string representation of its rank and suit.",
            "howItWorks": "The method concatenates the card's rank and suit with the text 'of' in between, and returns the resulting string.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "properties": {
            "visibility": "public",
            "simpleName": "isDiscardPileEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True if the discard pile has no card in it.\r\n */\r\nboolean isDiscardPileEmpty();",
            "docComment": "\r\n@return True if the discard pile has no card in it.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the discard pile is empty in the solitaire card game.",
            "returns": "true if the discard pile is empty, false otherwise.",
            "reason": "Provided to allow game logic to determine if the discard pile is available for use.",
            "howToUse": "Call this method to check if the discard pile is empty before making moves that involve the discard pile.",
            "howItWorks": "The method accesses the discard pile data structure and checks if it contains any cards, returning true if it is empty and false if it is not.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "properties": {
            "visibility": "public",
            "simpleName": "isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pIndex\r\n * \t\tThe suit stack to check\r\n * @return True if the suit stack for pSuit is empty\r\n */\r\nboolean isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile pIndex);",
            "docComment": "\r\n@param pIndex\r\n\t\tThe suit stack to check\r\n@return True if the suit stack for pSuit is empty\r\n",
            "metaSrc": "source code",
            "description": "Checks if the specified foundation pile is empty.",
            "returns": "True if the foundation pile is empty, false otherwise.",
            "reason": "To provide a way to determine if a specific foundation pile is empty for game logic purposes.",
            "howToUse": "Call this method with the foundation pile index to check if it is empty before making moves or decisions based on the state of the pile.",
            "howItWorks": "The method accesses the specified foundation pile and checks if it contains any cards. It returns true if the pile is empty, and false if it has at least one card.",
            "assertions": {
              "preConditions": [
                "The foundation pile index must be valid and within the range of available foundation piles."
              ],
              "postConditions": [
                "The method returns true if the specified foundation pile is empty, and false if it is not."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "properties": {
            "docComment": "Component that shows a stack of cards in \r\nthe bottom stacks.\r\n",
            "simpleName": "CardPileView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Handles the visual representation and interaction of card piles in a solitaire game.",
            "roleStereotype": "User Interfacer",
            "layer": "Presentation Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "public",
            "simpleName": "isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check.\r\n * @return True if pCard is a visible king located at the bottom\r\nof the pile.\r\n * @pre pCard != null && contains(pCard);\r\n */\r\npublic boolean isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert (pCard != null) && contains(pCard);\r\n    return (pCard.getRank() == ca.mcgill.cs.stg.solitaire.cards.Rank.KING) && (aPiles.get(getPile(pCard)).peek(0) == pCard);\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check.\r\n@return True if pCard is a visible king located at the bottom\r\nof the pile.\r\n@pre pCard != null && contains(pCard);\r\n",
            "metaSrc": "source code",
            "description": "Checks if the given card is the bottom King in the tableau pile.",
            "returns": "True if the given card is the bottom King in the tableau pile, false otherwise.",
            "reason": "To determine if a specific card is the bottom King in a tableau pile for game logic purposes.",
            "howToUse": "Call this method with a Card object to check if it is the bottom King in the tableau pile.",
            "howItWorks": "The method first asserts that the given card is not null and is contained in the tableau pile. Then, it checks if the rank of the card is King and if the card is at the bottom of its respective pile.",
            "assertions": {
              "preConditions": [
                "pCard must not be null.",
                "pCard must be contained in the tableau pile."
              ],
              "postConditions": [
                "Returns true if the given card is the bottom King in the tableau pile."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "default",
            "simpleName": "setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "void setCard(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    aCard = pCard;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Sets the card object for the CardDragHandler instance.",
            "returns": "This method does not return anything.",
            "reason": "Provided to set the card object that the CardDragHandler instance will interact with during drag operations.",
            "howToUse": "Create an instance of CardDragHandler and call setCard method with a Card object as the parameter to set the card for drag operations.",
            "howItWorks": "The method simply assigns the provided Card object to the 'aCard' attribute of the CardDragHandler instance, allowing it to interact with that card during drag operations.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FIRST",
          "properties": {
            "sourceText": "FIRST",
            "visibility": "public",
            "simpleName": "FIRST",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FIRST",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "properties": {
            "visibility": "public",
            "simpleName": "gameStateChanged()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void gameStateChanged() {\r\n    if (aModel.isDiscardPileEmpty()) {\r\n        getChildren().get(0).setVisible(false);\r\n    } else {\r\n        getChildren().get(0).setVisible(true);\r\n        ca.mcgill.cs.stg.solitaire.cards.Card topCard = aModel.peekDiscardPile();\r\n        javafx.scene.image.ImageView image = ((javafx.scene.image.ImageView) (getChildren().get(0)));\r\n        image.setImage(ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(topCard));\r\n        aDragHandler.setCard(topCard);\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Updates the discard pile view based on the game state changes.",
            "returns": "This method does not return any value.",
            "reason": "This method is provided to update the visual representation of the discard pile in response to game state changes.",
            "howToUse": "Call this method whenever the game state changes to update the discard pile view accordingly.",
            "howItWorks": "If the discard pile is empty, hides the top card image; otherwise, shows the top card image, sets the image to the corresponding card, and updates the drag handler with the top card.",
            "assertions": {
              "preConditions": [
                "The game state has changed."
              ],
              "postConditions": [
                "The discard pile view is updated based on the game state changes."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "properties": {
            "visibility": "public",
            "simpleName": "gameStateChanged()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void gameStateChanged() {\r\n    if (aModel.isFoundationPileEmpty(aIndex)) {\r\n        getChildren().get(0).setVisible(false);\r\n    } else {\r\n        getChildren().get(0).setVisible(true);\r\n        ca.mcgill.cs.stg.solitaire.cards.Card topCard = aModel.peekSuitStack(aIndex);\r\n        javafx.scene.image.ImageView image = ((javafx.scene.image.ImageView) (getChildren().get(0)));\r\n        image.setImage(ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(topCard));\r\n        aDragHandler.setCard(topCard);\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Updates the visibility and image of the top card in the suit stack based on the game state.",
            "returns": "This method does not return any value.",
            "reason": "This method is provided to dynamically update the suit stack UI based on the game state changes.",
            "howToUse": "Call this method whenever the game state changes to update the suit stack UI.",
            "howItWorks": "If the foundation pile at the specified index is empty, the visibility of the top card is set to false; otherwise, the top card image is displayed, and the drag handler is set with the top card.",
            "assertions": {
              "preConditions": [
                "The suit stack index must be valid."
              ],
              "postConditions": [
                "The visibility and image of the top card in the suit stack are updated based on the game state."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The location of the foundation pile to peek."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "properties": {
            "docComment": "Represents the suit of a playing card.\r\n",
            "simpleName": "Suit",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit",
            "kind": "enum",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Specializes the Suit enum with default values and color checking logic.",
            "roleStereotype": "Information Holder",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "properties": {
            "docComment": "The different piles of the tableau.\r\n",
            "simpleName": "TableauPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
            "kind": "enum",
            "metaSrc": "source code",
            "description": "Manages the relationships and constraints among related things.",
            "roleStereotype": "Structurer",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SIXTH",
          "properties": {
            "sourceText": "SIXTH",
            "visibility": "public",
            "simpleName": "SIXTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SIXTH",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "properties": {
            "docComment": "Plays N games and computes the number of wins.\r\n",
            "simpleName": "Driver",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Automates gameplay of Solitaire card game and ensures smooth user experience.",
            "roleStereotype": "Service Provider",
            "layer": "Service Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pLocation\r\n * \t\tThe location of the pile to check.\r\n * @return True if the pile at pLocation is empty\r\n * @pre pLocation != null\r\n */\r\nboolean isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile pLocation) {\r\n    assert pLocation != null;\r\n    return aPiles.get(pLocation).isEmpty();\r\n}",
            "docComment": "\r\n@param pLocation\r\n\t\tThe location of the pile to check.\r\n@return True if the pile at pLocation is empty\r\n@pre pLocation != null\r\n",
            "metaSrc": "source code",
            "description": "Checks if a specific foundation pile is empty in the Solitaire card game implementation.",
            "returns": "True if the foundation pile is empty, false otherwise.",
            "reason": "Provided to determine if a foundation pile is empty for game logic or user interface purposes.",
            "howToUse": "Pass the desired foundation pile location to the method to check if it is empty, then use the returned boolean value as needed.",
            "howItWorks": "The method first asserts that the provided foundation pile location is not null, then retrieves the corresponding pile from the collection and checks if it is empty.",
            "assertions": {
              "preConditions": [
                "The foundation pile location must not be null."
              ],
              "postConditions": [
                "The method returns true if the foundation pile is empty, false otherwise."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "/* If it's possible to move the top of the discard pile to the foundation, do it. */\r\nprivate static ca.mcgill.cs.stg.solitaire.model.Move substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    if (pModel.isDiscardPileEmpty()) {\r\n        return pModel.getNullMove();\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.model.FoundationPile pile : ca.mcgill.cs.stg.solitaire.model.FoundationPile.values()) {\r\n        if (pModel.isLegalMove(pModel.peekDiscardPile(), pile)) {\r\n            return pModel.getCardMove(pModel.peekDiscardPile(), pile);\r\n        }\r\n    }\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Moves a card from the discard pile to a foundation pile if it is a legal move.",
            "returns": "A move object representing the action to be taken.",
            "reason": "Provided to determine a suitable move from the discard pile to a foundation pile based on game rules.",
            "howToUse": "Call this method with the current game model view as the parameter to find a move from the discard pile to a foundation pile.",
            "howItWorks": "Checks if the discard pile is empty, then iterates through foundation piles to find a legal move for the top card in the discard pile.",
            "assertions": {
              "preConditions": [
                "The game model view must be initialized with the current game state."
              ],
              "postConditions": [
                "A move object is returned representing the action to be taken."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The destination location where the card will be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String).0",
          "properties": {
            "simpleName": "pCode",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The code of the card for which the image is to be retrieved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscard",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.cards.CardStack aDiscard = new ca.mcgill.cs.stg.solitaire.cards.CardStack();",
            "visibility": "private",
            "simpleName": "aDiscard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscard",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "properties": {
            "visibility": "private",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
            "kind": "constructor",
            "sourceText": "private Card(ca.mcgill.cs.stg.solitaire.cards.Rank pRank, ca.mcgill.cs.stg.solitaire.cards.Suit pSuit) {\r\n    aRank = pRank;\r\n    aSuit = pSuit;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize a Card object with the given rank and suit.",
            "returns": "A new Card object with the specified rank and suit.",
            "reason": "Provided to set the rank and suit of a card during its creation.",
            "howToUse": "Create a new Card object by passing a Rank and a Suit as arguments to the constructor.",
            "howItWorks": "Assigns the given rank and suit values to the corresponding fields of the Card object.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aModel",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.GameModel aModel;",
            "visibility": "private",
            "simpleName": "aModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aModel",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The destination location on the game board."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck()",
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new deck of 52 cards, shuffled.\r\n */\r\npublic Deck() {\r\n    shuffle();\r\n}",
            "docComment": "Creates a new deck of 52 cards, shuffled.\r\n",
            "metaSrc": "source code",
            "description": "Initialize a new deck of cards by shuffling them.",
            "returns": "A new deck of cards.",
            "reason": "To create a new instance of a deck of cards and ensure that the cards are shuffled for gameplay.",
            "howToUse": "Simply create a new instance of Deck, and the constructor will automatically shuffle the cards for you.",
            "howItWorks": "The constructor calls the shuffle() method to randomize the order of the cards in the deck, ensuring a different starting point for each game.",
            "assertions": {
              "preConditions": [],
              "postConditions": [
                "A new deck of cards is created and shuffled."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING",
          "properties": {
            "sourceText": "private static final int PADDING = 5;",
            "visibility": "private",
            "simpleName": "PADDING",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "properties": {
            "simpleName": "pDestination",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The destination location for the card."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "private",
            "simpleName": "find(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tA card to locate\r\n * @return The game location where this card currently is.\r\n * @pre the card is in a location where it can be found and moved.\r\n */\r\nprivate ca.mcgill.cs.stg.solitaire.model.Location find(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    if ((!aDiscard.isEmpty()) && (aDiscard.peek() == pCard)) {\r\n        return ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE;\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.model.FoundationPile index : ca.mcgill.cs.stg.solitaire.model.FoundationPile.values()) {\r\n        if ((!aFoundations.isEmpty(index)) && (aFoundations.peek(index) == pCard)) {\r\n            return index;\r\n        }\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile index : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        if (aTableau.contains(pCard, index)) {\r\n            return index;\r\n        }\r\n    }\r\n    assert false;// We did not find the card: the precondition was not met.\r\n\r\n    return null;\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tA card to locate\r\n@return The game location where this card currently is.\r\n@pre the card is in a location where it can be found and moved.\r\n",
            "metaSrc": "source code",
            "description": "Find the location of a given card within the game model.",
            "returns": "The location of the card within the game model.",
            "reason": "Provided to determine the location of a specific card within the game model for game logic and user interaction purposes.",
            "howToUse": "Call this method with a Card object to get its location within the game model.",
            "howItWorks": "The method checks if the card is in the discard pile, foundation piles, or tableau piles, and returns the corresponding location.",
            "assertions": {
              "preConditions": [
                "The game model must be initialized with valid data."
              ],
              "postConditions": [
                "The method returns the location of the specified card within the game model."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The tableau pile containing the card."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.JACK",
          "properties": {
            "sourceText": "JACK",
            "visibility": "public",
            "simpleName": "JACK",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.JACK",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile()",
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile()",
            "kind": "constructor",
            "sourceText": "TableauPile() {\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize a TableauPile object.",
            "returns": "a TableauPile object",
            "reason": "To create an instance of TableauPile with default values.",
            "howToUse": "Simply call TableauPile() to create a new TableauPile object.",
            "howItWorks": "The method is a constructor that initializes a TableauPile object with default values such as an empty list of cards.",
            "assertions": {
              "preConditions": [],
              "postConditions": [
                "A TableauPile object is successfully created."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.<clinit>()",
          "properties": {
            "visibility": "default",
            "simpleName": "<clinit>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.<clinit>()",
            "kind": "class initializer",
            "sourceText": "static {\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyDiscardIfDiscardPileIsEmpty);\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyMoveDiscardToFoundation);\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyMoveDiscardToTableau);\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyMoveFromTableauToFoundation);\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyMoveWithinTableau);\r\n    SUBSTRATEGIES.add(GreedyPlayingStrategy::substrategyDiscard);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize the list of sub-strategies for the Greedy Playing Strategy.",
            "returns": "This method does not return anything.",
            "reason": "To provide a set of sub-strategies for the Greedy Playing Strategy to choose from during gameplay.",
            "howToUse": "Simply access the SUBSTRATEGIES list in the GreedyPlayingStrategy class to retrieve the available sub-strategies.",
            "howItWorks": "The method adds different sub-strategies for the Greedy Playing Strategy to the SUBSTRATEGIES list, which will be used during gameplay to make decisions.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Script"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "properties": {
            "visibility": "public",
            "simpleName": "peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Obtain the card on top of the foundation pile pPile\r\n * without removing it.\r\n *\r\n * @param pPile\r\n * \t\tThe pile to check.\r\n * @return The card on top of the pile.\r\n * @pre pPile != null && !isFoundationPileEmpty(pIndex)\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile pPile) {\r\n    assert (pPile != null) && (!isFoundationPileEmpty(pPile));\r\n    return aFoundations.peek(pPile);\r\n}",
            "docComment": "Obtain the card on top of the foundation pile pPile\r\nwithout removing it.\r\n\r\n@param pPile\r\n\t\tThe pile to check.\r\n@return The card on top of the pile.\r\n@pre pPile != null && !isFoundationPileEmpty(pIndex)\r\n",
            "metaSrc": "source code",
            "description": "Returns the top card of a specified foundation pile.",
            "returns": "The top card of the specified foundation pile.",
            "reason": "Provided to allow peeking at the top card of a foundation pile for game logic or display purposes.",
            "howToUse": "Create an instance of GameModel, pass a FoundationPile object to peekSuitStack method to retrieve the top card of the specified foundation pile.",
            "howItWorks": "The method checks if the provided foundation pile is not null and not empty, then retrieves and returns the top card of the specified foundation pile.",
            "assertions": {
              "preConditions": [
                "The provided foundation pile must not be null.",
                "The provided foundation pile must not be empty."
              ],
              "postConditions": [
                "The top card of the specified foundation pile is returned."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank()",
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank()",
            "kind": "constructor",
            "sourceText": "Rank() {\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize a Rank object.",
            "returns": "a Rank object",
            "reason": "To provide a default constructor for the Rank enum.",
            "howToUse": "Simply create a new Rank object by calling Rank() constructor.",
            "howItWorks": "This constructor initializes a Rank object with default values.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "properties": {
            "visibility": "private",
            "simpleName": "createOnDragOverHandler(javafx.scene.image.ImageView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createOnDragOverHandler(final javafx.scene.image.ImageView pView) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            if ((pEvent.getGestureSource() != pView) && pEvent.getDragboard().hasString()) {\r\n                ca.mcgill.cs.stg.solitaire.gui.CardTransfer transfer = new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(pEvent.getDragboard().getString());\r\n                if ((transfer.size() == 1) && aModel.isLegalMove(transfer.getTop(), aIndex)) {\r\n                    pEvent.acceptTransferModes(javafx.scene.input.TransferMode.MOVE);\r\n                }\r\n            }\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles drag over events for a suit stack in the Solitaire game to determine if a card can be legally moved onto the stack.",
            "returns": "An event handler for drag events on the suit stack.",
            "reason": "Provided to handle drag events and determine if a card can be moved onto the suit stack in the Solitaire game.",
            "howToUse": "Pass the image view of the suit stack to the method to create an event handler for drag events on the stack.",
            "howItWorks": "Checks if the drag event is from a different source, has string data, and if the move is legal based on the Solitaire game model. If so, accepts the transfer mode for moving the card.",
            "assertions": {
              "preConditions": [
                "The pView parameter must not be null."
              ],
              "postConditions": [
                "The drag event is consumed after processing."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()",
          "properties": {
            "visibility": "private",
            "simpleName": "createOnDragExitedHandler()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createOnDragExitedHandler() {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            setStyle(ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL);\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Resets the style of the SuitStack to normal border style when a drag event exits the stack.",
            "returns": "The event handler for drag exited events.",
            "reason": "Provided to handle the visual feedback when a drag event exits the SuitStack.",
            "howToUse": "Create an instance of SuitStack and set this event handler to handle drag exited events on the stack.",
            "howItWorks": "When a drag event exits the SuitStack, the method sets the style of the stack to normal border style and consumes the event to prevent further handling.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The GameModel object to associate with the SuitStack."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.FIVE",
          "properties": {
            "sourceText": "FIVE",
            "visibility": "public",
            "simpleName": "FIVE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.FIVE",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "public",
            "simpleName": "isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert (pCard != null) && aTableau.contains(pCard);\r\n    return aTableau.isBottomKing(pCard);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if the given card is the bottom king in the tableau.",
            "returns": "True if the given card is the bottom king in the tableau, false otherwise.",
            "reason": "Provided to determine if a specific card is at the bottom of the tableau, which is a common operation in solitaire games.",
            "howToUse": "Create an instance of GameModel, then call isBottomKing method with a Card object as the argument to check if it is the bottom king in the tableau.",
            "howItWorks": "The method first asserts that the given card is not null and is contained in the tableau. It then delegates the check to the Tableau class to determine if the card is the bottom king.",
            "assertions": {
              "preConditions": [
                "pCard must not be null.",
                "pCard must be in the tableau."
              ],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "properties": {
            "docComment": "Component that shows the state of the discard pile and allows\r\ndragging cards from it.\r\n",
            "simpleName": "DiscardPileView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Responsible for setting up the visual representation of the discard pile in the Solitaire game and handling user interactions related to it.",
            "roleStereotype": "User Interfacer",
            "layer": "Presentation Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "properties": {
            "visibility": "public",
            "simpleName": "pop()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
            "kind": "method",
            "sourceText": "/**\r\n * Removes the card on top of the stack and returns it.\r\n *\r\n * @return The card on top of the stack.\r\n * @pre !isEmpty()\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card pop() {\r\n    assert !isEmpty();\r\n    return aCards.remove(aCards.size() - 1);\r\n}",
            "docComment": "Removes the card on top of the stack and returns it.\r\n\r\n@return The card on top of the stack.\r\n@pre !isEmpty()\r\n",
            "metaSrc": "source code",
            "description": "Removes and returns the top card from the card stack.",
            "returns": "the card removed from the stack",
            "reason": "Provided to remove the top card from the stack and facilitate gameplay.",
            "howToUse": "Create an instance of CardStack, add cards to it, then call pop() to remove the top card.",
            "howItWorks": "The method first checks if the stack is not empty, then removes and returns the card at the top of the stack.",
            "assertions": {
              "preConditions": [
                "The card stack must not be empty."
              ],
              "postConditions": [
                "The top card is removed from the stack."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The GameModelView object from which to get the null move."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model view object."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE",
          "properties": {
            "sourceText": "private static final java.lang.String TITLE = \"Solitaire\";",
            "visibility": "private",
            "simpleName": "TITLE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "properties": {
            "docComment": "Implementation of the Composite object in the composite \r\ndesign pattern.\r\n",
            "simpleName": "CompositeMove",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Manages a series of moves in a solitaire game, allowing for execution and undo functionality.",
            "roleStereotype": "Coordinator",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.CARDS",
          "properties": {
            "sourceText": "// Indexed by suit, then rank\r\nprivate static final ca.mcgill.cs.stg.solitaire.cards.Card[][] CARDS = new ca.mcgill.cs.stg.solitaire.cards.Card[ca.mcgill.cs.stg.solitaire.cards.Suit.values().length][];",
            "visibility": "private",
            "simpleName": "CARDS",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.CARDS",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Location",
          "properties": {
            "docComment": "Represents anywhere a card can be placed in Solitaire.\r\n",
            "simpleName": "Location",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Location",
            "kind": "interface",
            "metaSrc": "source code"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a new game model initialized to a new game.\r\n *\r\n * @param pPlayingStrategy\r\n * \t\tThe strategy to use for auto-play.\r\n * @pre pPlayingStrategy != null\r\n */\r\npublic GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy pPlayingStrategy) {\r\n    assert pPlayingStrategy != null;\r\n    aPlayingStrategy = pPlayingStrategy;\r\n    reset();\r\n}",
            "docComment": "Creates a new game model initialized to a new game.\r\n\r\n@param pPlayingStrategy\r\n\t\tThe strategy to use for auto-play.\r\n@pre pPlayingStrategy != null\r\n",
            "metaSrc": "source code",
            "description": "Initialize a new instance of GameModel with a given playing strategy.",
            "returns": "A new instance of GameModel with the specified playing strategy.",
            "reason": "To set the playing strategy for the game and initialize the game model.",
            "howToUse": "Create a new instance of PlayingStrategy, then pass it as a parameter when creating a new GameModel object.",
            "howItWorks": "The method first asserts that the playing strategy is not null, then sets the playing strategy for the game model and resets the game.",
            "assertions": {
              "preConditions": [
                "pPlayingStrategy must not be null."
              ],
              "postConditions": [
                "The GameModel instance is initialized with the specified playing strategy."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "properties": {
            "visibility": "public",
            "simpleName": "isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination) {\r\n    if (pDestination instanceof ca.mcgill.cs.stg.solitaire.model.FoundationPile) {\r\n        return aFoundations.canMoveTo(pCard, ((ca.mcgill.cs.stg.solitaire.model.FoundationPile) (pDestination)));\r\n    } else if (pDestination instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile) {\r\n        return aTableau.canMoveTo(pCard, ((ca.mcgill.cs.stg.solitaire.model.TableauPile) (pDestination)));\r\n    } else {\r\n        return false;\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if a given card can be legally moved to a specified destination in the solitaire game.",
            "returns": "True if the move is legal, false otherwise.",
            "reason": "To determine the validity of moving a card to a specific location within the solitaire game.",
            "howToUse": "Call this method with the card to be moved and the destination location to check if the move is legal.",
            "howItWorks": "The method checks if the destination is a FoundationPile or TableauPile, then delegates the move validation to the respective canMoveTo method of the Foundations or Tableau objects.",
            "assertions": {
              "preConditions": [
                "The game model and card objects must be properly initialized."
              ],
              "postConditions": [
                "Returns true if the move is legal according to the game rules."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be checked."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "properties": {
            "simpleName": "pSuit",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The suit of the card to be retrieved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
          "properties": {
            "visibility": "public",
            "simpleName": "undo()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void undo() {\r\n    aTableau.hideTop(aIndex);\r\n    aMoves.pop().undo();\r\n    notifyListeners();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Undo the last move by hiding the top card of a tableau, undoing the last move in the stack, and notifying listeners.",
            "returns": "This method does not return anything.",
            "reason": "Provided to allow the user to undo the last move in the solitaire game.",
            "howToUse": "Call this method when the user wants to undo the last move in the game.",
            "howItWorks": "The method hides the top card of a tableau, then calls the undo method of the last move in the stack, and finally notifies listeners of the change.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "public",
            "simpleName": "getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Get the sequence consisting of pCard and all\r\n * the other cards below it, from the tableau.\r\n *\r\n * @param pCard\r\n * \t\tThe top card of the sequence\r\n * @param pPile\r\n * \t\tThe requested pile\r\n * @return A non-empty sequence of cards.\r\n * @pre pCard != null and is in pile pPile\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.CardStack getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pPile) {\r\n    assert ((pCard != null) && (pPile != null)) && (find(pCard) == pPile);\r\n    return aTableau.getSequence(pCard, pPile);\r\n}",
            "docComment": "Get the sequence consisting of pCard and all \r\nthe other cards below it, from the tableau.\r\n\r\n@param pCard\r\n\t\tThe top card of the sequence\r\n@param pPile\r\n\t\tThe requested pile\r\n@return A non-empty sequence of cards.\r\n@pre pCard != null and is in pile pPile\r\n",
            "metaSrc": "source code",
            "description": "Returns a sub-stack of cards starting from a given card in a tableau pile.",
            "returns": "A sub-stack of cards starting from the given card.",
            "reason": "Provided to retrieve a sequence of cards starting from a specific card in a tableau pile.",
            "howToUse": "Call this method with a valid card and tableau pile to get a sub-stack of cards starting from the given card.",
            "howItWorks": "The method first checks if the input parameters are valid, then finds the tableau pile containing the given card and returns the sub-stack starting from that card.",
            "assertions": {
              "preConditions": [
                "pCard and pPile must not be null."
              ],
              "postConditions": [
                "The returned CardStack should contain a sequence of cards starting from pCard."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.aCards",
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.cards.Card[] aCards;",
            "visibility": "private",
            "simpleName": "aCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.aCards",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The location of the foundation pile to check."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Place pCard onto the pile at the desired location.\r\n *\r\n * @param pCard\r\n * \t\tThe card to place.\r\n * @param pLocation\r\n * \t\tThe location where to place the card.\r\n * @pre pCard != null && pLocation != null\r\n */\r\nvoid push(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.FoundationPile pLocation) {\r\n    assert (pCard != null) && (pLocation != null);\r\n    aPiles.get(pLocation).push(pCard);\r\n}",
            "docComment": "Place pCard onto the pile at the desired location.\r\n\r\n@param pCard\r\n\t\tThe card to place.\r\n@param pLocation\r\n\t\tThe location where to place the card.\r\n@pre pCard != null && pLocation != null\r\n",
            "metaSrc": "source code",
            "description": "Pushes a card onto a specific foundation pile.",
            "returns": "This method does not return anything.",
            "reason": "To add a card to a foundation pile in the solitaire game implementation.",
            "howToUse": "Create an instance of the card to be pushed and the foundation pile where it will be pushed, then call this method with the card and pile as parameters.",
            "howItWorks": "The method first checks that the card and location are not null, then it pushes the card onto the specified foundation pile using the FoundationPile's push method.",
            "assertions": {
              "preConditions": [
                "pCard and pLocation must not be null."
              ],
              "postConditions": [
                "The card is successfully added to the specified foundation pile."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "properties": {
            "visibility": "public",
            "simpleName": "isDeckEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isDeckEmpty() {\r\n    return aDeck.isEmpty();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if the deck of cards is empty.",
            "returns": "true if the deck is empty, false otherwise.",
            "reason": "To determine if there are any cards left in the deck during the game.",
            "howToUse": "Call this method to check if the deck is empty before dealing a new set of cards.",
            "howItWorks": "The method simply delegates the check to the 'isEmpty()' method of the 'aDeck' object, which represents the deck of cards.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION",
          "properties": {
            "sourceText": "private static final java.lang.String IMAGE_LOCATION = \"\";",
            "visibility": "private",
            "simpleName": "IMAGE_LOCATION",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The TableauPile object to be assigned to aIndex."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)",
          "properties": {
            "visibility": "public",
            "simpleName": "handle(javafx.scene.input.MouseEvent)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void handle(javafx.scene.input.MouseEvent pMouseEvent) {\r\n    javafx.scene.input.Dragboard db = aImageView.startDragAndDrop(javafx.scene.input.TransferMode.ANY);\r\n    ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.CLIPBOARD_CONTENT.putString(aCard.getIDString());\r\n    db.setContent(ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.CLIPBOARD_CONTENT);\r\n    pMouseEvent.consume();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the drag event of a card in the Solitaire game.",
            "returns": "This method does not return any value.",
            "reason": "Provided to initiate the drag-and-drop functionality for moving cards within the game interface.",
            "howToUse": "Call this method when a mouse event is detected on a card to start the drag-and-drop operation for moving the card.",
            "howItWorks": "Starts a drag-and-drop operation on the image view of the card, sets the card's ID as the content to be dragged, and consumes the mouse event.",
            "assertions": {
              "preConditions": [
                "The card image view must be initialized and visible on the game interface."
              ],
              "postConditions": [
                "The card is ready to be dragged within the game interface."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aTableau",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.Tableau aTableau = new ca.mcgill.cs.stg.solitaire.model.Tableau();",
            "visibility": "private",
            "simpleName": "aTableau",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aTableau",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move",
          "properties": {
            "docComment": "Represents one possible action in the game.\r\n",
            "simpleName": "Move",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Move",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "The interface is responsible for handling moves in the solitaire card game.",
            "roleStereotype": "Service Provider",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card for which the code needs to be generated."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The TableauPile for which the CardStack is to be retrieved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card object associated with the image view."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles",
          "properties": {
            "sourceText": "private final java.util.Map<ca.mcgill.cs.stg.solitaire.model.TableauPile, ca.mcgill.cs.stg.solitaire.cards.CardStack> aPiles = new java.util.HashMap<>();",
            "visibility": "private",
            "simpleName": "aPiles",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "properties": {
            "docComment": "A class to store and manage images of the 52 cards.\r\n",
            "simpleName": "CardImages",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Manages the caching and retrieval of card images for display in the Solitaire game.",
            "roleStereotype": "Service Provider",
            "layer": "Presentation Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aModel",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.GameModel aModel;",
            "visibility": "private",
            "simpleName": "aModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aModel",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "properties": {
            "visibility": "public",
            "simpleName": "get(java.lang.String)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
            "kind": "static method",
            "sourceText": "/**\r\n * Get a flyweight card object based on its serialized form.\r\n *\r\n * @param pId\r\n * \t\tThe id string for the card. This is needs to have\r\n * \t\tbeen produced by Card.getIDString to be considered a\r\n * \t\tvalid input to this method.\r\n * @return The card object with id string pId\r\n */\r\npublic static ca.mcgill.cs.stg.solitaire.cards.Card get(java.lang.String pId) {\r\n    assert pId != null;\r\n    int id = java.lang.Integer.parseInt(pId);\r\n    return ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank.values()[id % ca.mcgill.cs.stg.solitaire.cards.Rank.values().length], ca.mcgill.cs.stg.solitaire.cards.Suit.values()[id / ca.mcgill.cs.stg.solitaire.cards.Rank.values().length]);\r\n}",
            "docComment": "Get a flyweight card object based on its serialized form.\r\n\r\n@param pId\r\n\t\tThe id string for the card. This is needs to have\r\n\t\tbeen produced by Card.getIDString to be considered a\r\n\t\tvalid input to this method.\r\n@return The card object with id string pId\r\n",
            "metaSrc": "source code",
            "description": "Returns a Card object based on the provided id.",
            "returns": "The Card object created based on the id.",
            "reason": "Provides a way to create a Card object based on an id, allowing for easy retrieval and manipulation of card objects.",
            "howToUse": "Call the get method of the Card class with a valid id as a String parameter to retrieve the corresponding Card object.",
            "howItWorks": "The method parses the id String to an integer, calculates the rank and suit of the card based on the id, and returns a new Card object with the determined rank and suit.",
            "assertions": {
              "preConditions": [
                "pId must not be null."
              ],
              "postConditions": [
                "A Card object is returned based on the provided id."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages()",
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages()",
            "kind": "constructor",
            "sourceText": "private CardImages() {\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize the CardImages class.",
            "returns": "an instance of the CardImages class",
            "reason": "Provided to initialize the CardImages class and set up necessary resources.",
            "howToUse": "Simply create an instance of the CardImages class to initialize it.",
            "howItWorks": "The method is a private constructor, so it can only be called from within the CardImages class itself, ensuring that only one instance of the class is created.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.SUBSTRATEGIES",
          "properties": {
            "sourceText": "private static final java.util.List<java.util.function.Function<ca.mcgill.cs.stg.solitaire.model.GameModelView, ca.mcgill.cs.stg.solitaire.model.Move>> SUBSTRATEGIES = new java.util.ArrayList<>();",
            "visibility": "private",
            "simpleName": "SUBSTRATEGIES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.SUBSTRATEGIES",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "properties": {
            "docComment": "The different foundation piles.\r\n",
            "simpleName": "FoundationPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
            "kind": "enum",
            "metaSrc": "source code",
            "description": "Manages the different foundation piles in the solitaire card game implementation.",
            "roleStereotype": "Structurer",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[]).0",
          "properties": {
            "simpleName": "pArgs",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[]).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "Array of command-line arguments passed to the application."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
          "properties": {
            "visibility": "public",
            "simpleName": "isDiscardPileEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isDiscardPileEmpty() {\r\n    return aDiscard.isEmpty();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if the discard pile is empty.",
            "returns": "true if the discard pile is empty, false otherwise.",
            "reason": "To provide information about the state of the game and determine if certain actions can be taken.",
            "howToUse": "Call this method to check if the discard pile is empty before performing certain game actions or making decisions based on the state of the game.",
            "howItWorks": "The method simply checks if the 'aDiscard' pile is empty by calling the 'isEmpty()' method on it and returning the result.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()",
          "properties": {
            "visibility": "public",
            "simpleName": "getDiscardMove()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.model.Move getDiscardMove() {\r\n    return aDiscardMove;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns the discard move in the solitaire card game.",
            "returns": "The discard move to be executed.",
            "reason": "Provided to retrieve the discard move for the game model.",
            "howToUse": "Call this method to get the discard move that needs to be executed in the game.",
            "howItWorks": "The method simply returns the discard move stored in the 'aDiscardMove' variable.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "properties": {
            "visibility": "public",
            "simpleName": "peek(int)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pIndex\r\n * \t\tThe index to peek in the stack.\r\n * @return The card at the position indicated by pIndex\r\n * @pre pIndex >= 0 && pIndex < size();\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card peek(int pIndex) {\r\n    assert (pIndex >= 0) && (pIndex < size());\r\n    return aCards.get(pIndex);\r\n}",
            "docComment": "\r\n@param pIndex\r\n\t\tThe index to peek in the stack.\r\n@return The card at the position indicated by pIndex\r\n@pre pIndex >= 0 && pIndex < size();\r\n",
            "metaSrc": "source code",
            "description": "Returns the card at the specified index in the card stack.",
            "returns": "The card at the specified index.",
            "reason": "Provided to allow external classes to access a specific card in the card stack without modifying the stack itself.",
            "howToUse": "Create an instance of CardStack, then call peek(int) with the desired index to retrieve the card at that position.",
            "howItWorks": "The method first checks if the index is within the valid range of the card stack size, then retrieves and returns the card at the specified index from the internal list of cards.",
            "assertions": {
              "preConditions": [
                "pIndex >= 0",
                "pIndex < size()"
              ],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "properties": {
            "visibility": "public",
            "simpleName": "getNullMove()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return An instance of the Move interface\r\nthat represents no move at all.\r\n */\r\nca.mcgill.cs.stg.solitaire.model.Move getNullMove();",
            "docComment": "\r\n@return An instance of the Move interface\r\nthat represents no move at all.\r\n",
            "metaSrc": "source code",
            "description": "Returns a null move in the solitaire card game.",
            "returns": "A null move in the solitaire game.",
            "reason": "Provided to handle cases where a null move is needed in the game logic.",
            "howToUse": "Call the getNullMove() method on an instance of GameModelView to retrieve a null move.",
            "howItWorks": "The method simply returns a predefined null move object, which can be used in the game logic to represent a lack of valid moves.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns a copy of the entire pile at the specified position in the tableau.\r\n *\r\n * @param pPile\r\n * \t\tThe pile to obtain.\r\n * @return A copy of the at pPile.\r\n * @pre pPile != null\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.CardStack getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile pPile) {\r\n    assert pPile != null;\r\n    return new ca.mcgill.cs.stg.solitaire.cards.CardStack(aPiles.get(pPile));\r\n}",
            "docComment": "Returns a copy of the entire pile at the specified position in the tableau.\r\n\r\n@param pPile\r\n\t\tThe pile to obtain.\r\n@return A copy of the at pPile.\r\n@pre pPile != null\r\n",
            "metaSrc": "source code",
            "description": "Returns a CardStack object representing the cards in the specified TableauPile.",
            "returns": "A CardStack object containing the cards in the specified TableauPile.",
            "reason": "To provide a way to access the cards in a specific TableauPile within the Solitaire game implementation.",
            "howToUse": "Create an instance of Tableau class, then call getPile method with the desired TableauPile as the parameter to get the corresponding CardStack object.",
            "howItWorks": "The method checks if the input TableauPile is not null, then retrieves the cards associated with the TableauPile from the aPiles map and creates a new CardStack object with those cards.",
            "assertions": {
              "preConditions": [
                "The input TableauPile must not be null."
              ],
              "postConditions": [
                "A CardStack object representing the cards in the specified TableauPile is returned."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "properties": {
            "visibility": "private",
            "simpleName": "playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "kind": "static method",
            "sourceText": "private static void playGame(ca.mcgill.cs.stg.solitaire.model.GameModel pModel) {\r\n    pModel.reset();\r\n    boolean advanced = true;\r\n    while (advanced) {\r\n        advanced = pModel.tryToAutoPlay();\r\n    } \r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Plays a game of solitaire by resetting the game model and attempting to autoplay until no more moves can be made.",
            "returns": "This method does not return any value.",
            "reason": "Provided to automate the gameplay of the Solitaire card game and ensure a smooth user experience.",
            "howToUse": "Pass an instance of GameModel representing the current game state to the method to play the game automatically.",
            "howItWorks": "The method first resets the game model to its initial state and then attempts to autoplay moves until no more moves can be made, ensuring the game progresses smoothly.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Service Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "properties": {
            "visibility": "private",
            "simpleName": "notifyListeners()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
            "kind": "method",
            "sourceText": "private void notifyListeners() {\r\n    for (ca.mcgill.cs.stg.solitaire.model.GameModelListener listener : aListeners) {\r\n        listener.gameStateChanged();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Notify all registered listeners that the game state has changed.",
            "returns": "This method does not return anything.",
            "reason": "To inform any registered listeners about changes in the game state.",
            "howToUse": "Register GameModelListeners to the GameModel instance and call notifyListeners() whenever the game state changes.",
            "howItWorks": "Iterates through the list of registered listeners and calls the gameStateChanged() method on each listener to notify them of the state change.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Service Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET",
          "properties": {
            "sourceText": "private static final int Y_OFFSET = 17;",
            "visibility": "private",
            "simpleName": "Y_OFFSET",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "private",
            "simpleName": "createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private javafx.event.EventHandler<javafx.scene.input.DragEvent> createDragDroppedHandler(final javafx.scene.image.ImageView pImageView, final ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return new javafx.event.EventHandler<javafx.scene.input.DragEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.DragEvent pEvent) {\r\n            javafx.scene.input.Dragboard db = pEvent.getDragboard();\r\n            boolean success = false;\r\n            if (db.hasString()) {\r\n                aModel.getCardMove(new ca.mcgill.cs.stg.solitaire.gui.CardTransfer(db.getString()).getTop(), aIndex).perform();\r\n                success = true;\r\n            }\r\n            pEvent.setDropCompleted(success);\r\n            pEvent.consume();\r\n        }\r\n    };\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Handles the drag and drop event for a card in a solitaire game.",
            "returns": "Event handler for drag events.",
            "reason": "To handle the drag and drop functionality of cards in the solitaire game interface.",
            "howToUse": "Pass in the image view and card object to create a drag dropped event handler for the card pile view.",
            "howItWorks": "Gets the dragboard from the drag event, retrieves the card move information from the dragboard string, and performs the card move on the model. Sets the drop completion status and consumes the event.",
            "assertions": {
              "preConditions": [
                "The drag event must contain a string in the dragboard."
              ],
              "postConditions": [
                "The card move is performed on the model based on the drag event."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "double",
          "properties": {
            "simpleName": "double",
            "qualifiedName": "double",
            "metaSrc": "source code"
          },
          "labels": [
            "Primitive"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
          "properties": {
            "visibility": "public",
            "simpleName": "<init>(java.lang.Iterable)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates a CardStack that contains all the cards\r\n * in pCard, in the iteration order, from bottom to top.\r\n *\r\n * @param pCards\r\n * \t\tThe cards to initialize the stack with.\r\n */\r\npublic CardStack(java.lang.Iterable<ca.mcgill.cs.stg.solitaire.cards.Card> pCards) {\r\n    this();\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card card : pCards) {\r\n        aCards.add(card);\r\n    }\r\n}",
            "docComment": "Creates a CardStack that contains all the cards\r\nin pCard, in the iteration order, from bottom to top.\r\n\r\n@param pCards\r\n\t\tThe cards to initialize the stack with.\r\n",
            "metaSrc": "source code",
            "description": "Initialize a CardStack object with a collection of Card objects.",
            "returns": "A new instance of CardStack initialized with the provided Card objects.",
            "reason": "To allow for easy initialization of a CardStack object with a collection of Card objects.",
            "howToUse": "Create a collection of Card objects, then pass it as a parameter when creating a new CardStack object.",
            "howItWorks": "The method first calls the default constructor to initialize the CardStack. It then iterates over the provided collection of Card objects and adds each one to the CardStack's internal list of cards.",
            "assertions": {
              "preConditions": [
                "None"
              ],
              "postConditions": [
                "A new CardStack object is created with the provided Card objects added to it."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.THREE",
          "properties": {
            "sourceText": "THREE",
            "visibility": "public",
            "simpleName": "THREE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.THREE",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[]).0",
          "properties": {
            "simpleName": "pArgs",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[]).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "Array of command-line arguments."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The tableau pile index where the card will be pushed."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "properties": {
            "visibility": "public",
            "simpleName": "getIDString()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
            "kind": "method",
            "sourceText": "/**\r\n * Return the id string for this card.\r\n *\r\n * @return A string uniquely representing this card. The string\r\nformat is not specified except that it is fully compatible\r\nwith the format expected by Card.get(String).\r\n */\r\npublic java.lang.String getIDString() {\r\n    return java.lang.Integer.toString((getSuit().ordinal() * ca.mcgill.cs.stg.solitaire.cards.Rank.values().length) + getRank().ordinal());\r\n}",
            "docComment": "Return the id string for this card.\r\n\r\n@return A string uniquely representing this card. The string\r\nformat is not specified except that it is fully compatible\r\nwith the format expected by Card.get(String).\r\n",
            "metaSrc": "source code",
            "description": "Returns a unique identifier string for a card based on its suit and rank.",
            "returns": "A unique identifier string for the card.",
            "reason": "To provide a way to uniquely identify a card in the solitaire game.",
            "howToUse": "Call this method on a Card object to get a unique identifier string for that card.",
            "howItWorks": "The method calculates a unique identifier for a card by multiplying the ordinal value of the suit with the total number of ranks and adding the ordinal value of the rank.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.THIRD",
          "properties": {
            "sourceText": "THIRD",
            "visibility": "public",
            "simpleName": "THIRD",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.THIRD",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model view object representing the current state of the solitaire game."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "properties": {
            "docComment": "A move that represents the intention to move pCard\r\nto pDestination, possibly including all cards stacked\r\non top of pCard if pCard is in a working stack.\r\n",
            "simpleName": "CardMove",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Responsible for executing legal moves of cards, keeping track of moves for potential undo functionality, and managing the game state.",
            "roleStereotype": "Service Provider",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "private",
            "simpleName": "getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private java.util.Optional<ca.mcgill.cs.stg.solitaire.cards.Card> getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    java.util.Optional<ca.mcgill.cs.stg.solitaire.cards.Card> previous = java.util.Optional.empty();\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card card : aPiles.get(getPile(pCard))) {\r\n        if (card == pCard) {\r\n            return previous;\r\n        }\r\n        previous = java.util.Optional.of(card);\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns the previous card in the tableau pile relative to the given card.",
            "returns": "The optional previous card in the tableau pile.",
            "reason": "Provided to retrieve the card that comes before a given card in the tableau pile.",
            "howToUse": "Call this method with a card from the tableau pile to get the card that precedes it in the same pile.",
            "howItWorks": "Iterates through the cards in the same tableau pile as the given card, returning the card that precedes the given card if found.",
            "assertions": {
              "preConditions": [
                "The tableau pile must contain the given card."
              ],
              "postConditions": [
                "The returned optional will either contain the previous card or be empty if the given card is the first in the pile."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "properties": {
            "visibility": "public",
            "simpleName": "getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns a legal move for the game, or the\r\n * Null move if that is not possible.\r\n *\r\n * @param pModel\r\n * \t\tA game model to query.\r\n * @return The move computed.\r\n */\r\nca.mcgill.cs.stg.solitaire.model.Move getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel);",
            "docComment": "Returns a legal move for the game, or the \r\nNull move if that is not possible.\r\n\r\n@param pModel\r\n\t\tA game model to query.\r\n@return The move computed.\r\n",
            "metaSrc": "source code",
            "description": "Returns a legal move based on the current game state.",
            "returns": "A legal move to be made in the game.",
            "reason": "Provided to determine the next legal move to be made by the AI playing strategy.",
            "howToUse": "Pass the current game model view to the method, and it will return a legal move to be executed in the game.",
            "howItWorks": "The method analyzes the current game state and determines a legal move based on the rules of the solitaire card game.",
            "assertions": {
              "preConditions": [
                "The game model view must be valid and represent the current state of the game."
              ],
              "postConditions": [
                "A legal move is returned based on the current game state."
              ]
            },
            "layer": "Service Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.KING",
          "properties": {
            "sourceText": "KING",
            "visibility": "public",
            "simpleName": "KING",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.KING",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aModel",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.model.GameModel aModel;",
            "visibility": "private",
            "simpleName": "aModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aModel",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.aPlayingStrategy",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy aPlayingStrategy;",
            "visibility": "private",
            "simpleName": "aPlayingStrategy",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.aPlayingStrategy",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener).0",
          "properties": {
            "simpleName": "pListener",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The listener to be added."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The current game model view."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage).0",
          "properties": {
            "simpleName": "pPrimaryStage",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The primary stage of the JavaFX application."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aIndex",
          "properties": {
            "sourceText": "private ca.mcgill.cs.stg.solitaire.model.FoundationPile aIndex;",
            "visibility": "private",
            "simpleName": "aIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aIndex",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SECOND",
          "properties": {
            "sourceText": "SECOND",
            "visibility": "public",
            "simpleName": "SECOND",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SECOND",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.aSuit",
          "properties": {
            "sourceText": "private final ca.mcgill.cs.stg.solitaire.cards.Suit aSuit;",
            "visibility": "private",
            "simpleName": "aSuit",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.aSuit",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "default",
            "simpleName": "isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check.\r\n * @return true if pCard is visible in the piles.\r\n * @pre contains(pCard)\r\n */\r\nboolean isVisible(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert contains(pCard);\r\n    return aVisible.contains(pCard);\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check.\r\n@return true if pCard is visible in the piles.\r\n@pre contains(pCard)\r\n",
            "metaSrc": "source code",
            "description": "Checks if a given card is visible on the tableau.",
            "returns": "True if the card is visible, false otherwise.",
            "reason": "Provided to determine if a card is visible on the tableau for game logic.",
            "howToUse": "Call this method with a card object to check if it is visible on the tableau.",
            "howItWorks": "The method checks if the given card is contained in the visible cards list of the tableau and returns true if it is, false otherwise.",
            "assertions": {
              "preConditions": [
                "The card must be part of the tableau."
              ],
              "postConditions": [
                "Returns true if the card is visible, false otherwise."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card object associated with the image view."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "properties": {
            "visibility": "public",
            "simpleName": "draw()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
            "kind": "method",
            "sourceText": "/**\r\n * Draws a card from the deck and removes the card from the deck.\r\n *\r\n * @return The card drawn.\r\n * @pre !isEmpty()\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card draw() {\r\n    assert !isEmpty();\r\n    return aCards.pop();\r\n}",
            "docComment": "Draws a card from the deck and removes the card from the deck.\r\n\r\n@return The card drawn.\r\n@pre !isEmpty()\r\n",
            "metaSrc": "source code",
            "description": "Draws a card from the deck of cards.",
            "returns": "The card drawn from the deck.",
            "reason": "To provide functionality for drawing a card from the deck during the game.",
            "howToUse": "Create an instance of Deck, populate it with cards, and call draw() to get a card from the deck.",
            "howItWorks": "The method checks if the deck is not empty, then pops and returns the top card from the deck.",
            "assertions": {
              "preConditions": [
                "The deck must not be empty."
              ],
              "postConditions": [
                "A card is successfully drawn from the deck."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "public",
            "simpleName": "isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check.\r\n * @return True if pCard is a visible king located at the bottom of the pile.\r\n * @pre pCard != null && contains(pCard);\r\n */\r\nboolean isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card pCard);",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check.\r\n@return True if pCard is a visible king located at the bottom of the pile.\r\n@pre pCard != null && contains(pCard);\r\n",
            "metaSrc": "source code",
            "description": "Checks if the given card is a King and is at the bottom of the pile.",
            "returns": "True if the card is a King and at the bottom, false otherwise.",
            "reason": "To determine if a specific card is a King and located at the bottom of the pile for game logic purposes.",
            "howToUse": "Call the method with a Card object as the argument to check if it meets the specified conditions.",
            "howItWorks": "The method first checks if the given card is a King, then verifies if it is at the bottom of the pile by comparing its position with other cards in the game model.",
            "assertions": {
              "preConditions": [
                "The game model and card object must be properly initialized."
              ],
              "postConditions": [
                "Returns true if the card is a King at the bottom, false otherwise."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The foundation pile to check."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to find the TableauPile for."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "properties": {
            "visibility": "public",
            "simpleName": "tryToAutoPlay()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
            "kind": "method",
            "sourceText": "/**\r\n * Try to automatically make a move. This may result in nothing happening\r\n * if the auto-play strategy cannot make a decision.\r\n *\r\n * @return Whether a move was performed or not.\r\n */\r\npublic boolean tryToAutoPlay() {\r\n    ca.mcgill.cs.stg.solitaire.model.Move move = aPlayingStrategy.getLegalMove(this);\r\n    move.perform();\r\n    return !move.isNull();\r\n}",
            "docComment": "Try to automatically make a move. This may result in nothing happening\r\nif the auto-play strategy cannot make a decision.\r\n\r\n@return Whether a move was performed or not.\r\n",
            "metaSrc": "source code",
            "description": "Attempts to automatically play a move in the solitaire game.",
            "returns": "True if a legal move was found and performed, false otherwise.",
            "reason": "Provided to automate gameplay for the user and enhance user experience.",
            "howToUse": "Call tryToAutoPlay() method to automatically attempt a move in the solitaire game.",
            "howItWorks": "The method uses a playing strategy to get a legal move for the current game state, performs the move, and returns true if a move was found, false otherwise.",
            "assertions": {
              "preConditions": [
                "The game model must be initialized with a valid playing strategy."
              ],
              "postConditions": [
                "The game state may change if a legal move is found and performed."
              ]
            },
            "layer": "Service Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be checked."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack()",
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates an empty CardStack.\r\n */\r\npublic CardStack() {\r\n    aCards = new java.util.ArrayList<>();\r\n}",
            "docComment": "Creates an empty CardStack.\r\n",
            "metaSrc": "source code",
            "description": "Initialize a new CardStack object with an empty ArrayList of cards.",
            "returns": "A new CardStack object with an empty list of cards.",
            "reason": "To create a new instance of CardStack with an initial empty list of cards.",
            "howToUse": "Create a new instance of CardStack by calling the constructor.",
            "howItWorks": "The constructor initializes the 'aCards' attribute of the CardStack object with a new empty ArrayList.",
            "assertions": {
              "preConditions": [],
              "postConditions": [
                "A new CardStack object is created with an empty list of cards."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE",
          "properties": {
            "sourceText": "DISCARD_PILE",
            "visibility": "public",
            "simpleName": "DISCARD_PILE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
          "properties": {
            "visibility": "private",
            "simpleName": "getCard(java.lang.String)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
            "kind": "static method",
            "sourceText": "private static javafx.scene.image.Image getCard(java.lang.String pCode) {\r\n    javafx.scene.image.Image image = ((javafx.scene.image.Image) (ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards.get(pCode)));\r\n    if (image == null) {\r\n        image = new javafx.scene.image.Image(ca.mcgill.cs.stg.solitaire.cards.CardImages.class.getClassLoader().getResourceAsStream((ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION + pCode) + ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX));\r\n        ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards.put(pCode, image);\r\n    }\r\n    return image;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "This method retrieves the image of a card based on the provided card code.",
            "returns": "The image of the card corresponding to the provided code.",
            "reason": "The method is provided to dynamically load and cache card images for the solitaire card game.",
            "howToUse": "Call this method with the code of the desired card to get its image for display in the game.",
            "howItWorks": "The method first checks if the image for the given card code is already cached; if not, it loads the image from the resource location, caches it, and returns the image.",
            "assertions": {
              "preConditions": [
                "The card code provided should not be null."
              ],
              "postConditions": [
                "The method returns the image of the card corresponding to the provided code."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to find the location of."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau()",
          "properties": {
            "visibility": "default",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates an empty tableau.\r\n */\r\nTableau() {\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile index : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        aPiles.put(index, new ca.mcgill.cs.stg.solitaire.cards.CardStack());\r\n    }\r\n}",
            "docComment": "Creates an empty tableau.\r\n",
            "metaSrc": "source code",
            "description": "Initialize a set of card stacks for each tableau pile in the solitaire game.",
            "returns": "A new instance of Tableau class.",
            "reason": "To set up the initial state of the solitaire game by creating card stacks for each tableau pile.",
            "howToUse": "Create a new instance of Tableau class to set up the solitaire game.",
            "howItWorks": "Iterates over each tableau pile enum value, creates a new CardStack instance, and stores it in aPiles map.",
            "assertions": {
              "preConditions": [],
              "postConditions": [
                "Each tableau pile in the solitaire game has a corresponding card stack initialized."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "properties": {
            "simpleName": "pSuit",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The suit to compare colors with."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "properties": {
            "visibility": "public",
            "simpleName": "getTop()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The top card in the transfer (the one with the highest rank)\r\n */\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card getTop() {\r\n    return aCards[0];\r\n}",
            "docComment": "\r\n@return The top card in the transfer (the one with the highest rank)\r\n",
            "metaSrc": "source code",
            "description": "Returns the top card from the array of cards.",
            "returns": "the top card from the array",
            "reason": "Provided to retrieve the top card from the array of cards in the solitaire game implementation.",
            "howToUse": "Call this method to get the top card from the array of cards in the solitaire game.",
            "howItWorks": "The method simply returns the first element of the 'aCards' array, which represents the top card in the game.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "properties": {
            "docComment": "Stores a string representing the card dragged.\r\n",
            "simpleName": "CardDragHandler",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Handles drag events for card images in a Solitaire game interface.",
            "roleStereotype": "User Interfacer",
            "layer": "Presentation Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "public",
            "simpleName": "getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "static method",
            "sourceText": "/**\r\n * Return the image of a card.\r\n *\r\n * @param pCard\r\n * \t\tthe target card\r\n * @return An icon representing the chosen card.\r\n */\r\npublic static javafx.scene.image.Image getCard(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert pCard != null;\r\n    return ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(pCard));\r\n}",
            "docComment": "Return the image of a card.\r\n\r\n@param pCard\r\n\t\tthe target card\r\n@return An icon representing the chosen card.\r\n",
            "metaSrc": "source code",
            "description": "Returns the image of a card based on the given Card object.",
            "returns": "The image of the card.",
            "reason": "Provided to retrieve the image representation of a card for display purposes.",
            "howToUse": "Call this method with a Card object as the parameter to get the corresponding image of the card.",
            "howItWorks": "The method first ensures that the input Card object is not null, then retrieves the image based on the card's code using another method.",
            "assertions": {
              "preConditions": [
                "The input Card object must not be null."
              ],
              "postConditions": [
                "The method returns the image of the card."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The image view of the card being dragged."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The foundation pile to peek the top card from."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "properties": {
            "simpleName": "pRank",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The rank of the card to be retrieved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE",
          "properties": {
            "sourceText": "private static final ca.mcgill.cs.stg.solitaire.model.Move NULL_MOVE = new ca.mcgill.cs.stg.solitaire.model.Move() {\r\n    @java.lang.Override\r\n    public void perform() {\r\n    }// Does nothing on purpose\r\n\r\n\r\n    @java.lang.Override\r\n    public boolean isNull() {\r\n        return true;\r\n    }\r\n\r\n    @java.lang.Override\r\n    public void undo() {\r\n    }// Does nothing on purpose\r\n\r\n};",
            "visibility": "private",
            "simpleName": "NULL_MOVE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "properties": {
            "visibility": "public",
            "simpleName": "getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "/**\r\n * that represents moving a card (and possibly\r\n * all cards below it if applicable) to pDestination.\r\n *\r\n * @param pCard\r\n * \t\tThe card to move, assumed to be in a\r\n * \t\tlegal position.\r\n * @param pDestination\r\n * \t\tThe required destination of the card.\r\n * @return An instance of the Move interface\r\n */\r\nca.mcgill.cs.stg.solitaire.model.Move getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination);",
            "docComment": "that represents moving a card (and possibly\r\nall cards below it if applicable) to pDestination.\r\n\r\n@param pCard\r\n\t\tThe card to move, assumed to be in a\r\n\t\tlegal position.\r\n@param pDestination\r\n\t\tThe required destination of the card.\r\n@return An instance of the Move interface\r\n",
            "metaSrc": "source code",
            "description": "Returns a move object representing the action of moving a card to a specified location in the solitaire game.",
            "returns": "A move object representing the action of moving the card.",
            "reason": "Provided to handle the logic of moving cards within the solitaire game.",
            "howToUse": "Call this method with the card to be moved and the destination location as parameters to get a move object representing the action.",
            "howItWorks": "The method calculates the valid moves for the given card and destination location, then creates a move object representing the action to be taken.",
            "assertions": {
              "preConditions": [
                "The card and destination location must not be null."
              ],
              "postConditions": [
                "A valid move object is returned based on the input parameters."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
          "properties": {
            "visibility": "public",
            "simpleName": "gameStateChanged()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void gameStateChanged() {\r\n    if (aModel.isDeckEmpty()) {\r\n        ((javafx.scene.control.Button) (getChildren().get(0))).setGraphic(createNewGameImage());\r\n    } else {\r\n        ((javafx.scene.control.Button) (getChildren().get(0))).setGraphic(new javafx.scene.image.ImageView(ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()));\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Update the graphic of the deck view button based on the game state.",
            "returns": "This method does not return any value.",
            "reason": "To dynamically update the appearance of the deck view button based on the game state changes.",
            "howToUse": "Ensure the DeckView instance is properly initialized and linked to the game model, then call gameStateChanged() whenever the game state changes.",
            "howItWorks": "Checks if the deck is empty in the game model, and sets the graphic of the deck view button accordingly by creating a new game image or using the back of a card image.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The index of the tableau pile from which to remove the top card."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The specific foundation pile where the card will be pushed."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()",
          "properties": {
            "visibility": "public",
            "simpleName": "perform()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void perform() {\r\n    for (ca.mcgill.cs.stg.solitaire.model.Move move : aMoves) {\r\n        move.perform();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Performs a series of moves in a solitaire game.",
            "returns": "This method does not return anything.",
            "reason": "To execute a composite move consisting of multiple individual moves in the solitaire game.",
            "howToUse": "Create an instance of CompositeMove with an array of individual moves, then call perform() to execute all the moves in sequence.",
            "howItWorks": "Iterates over the array of moves and calls the perform() method on each move to execute them one by one.",
            "assertions": {
              "preConditions": [
                "The array of moves (aMoves) should not be null."
              ],
              "postConditions": [
                "All moves in the array have been successfully performed."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "properties": {
            "visibility": "public",
            "simpleName": "getBack()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
            "kind": "static method",
            "sourceText": "/**\r\n * Return an image of the back of a card.\r\n *\r\n * @return An icon representing the back of a card.\r\n */\r\npublic static javafx.scene.image.Image getBack() {\r\n    return ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(\"b\");\r\n}",
            "docComment": "Return an image of the back of a card.\r\n\r\n@return An icon representing the back of a card.\r\n",
            "metaSrc": "source code",
            "description": "Returns the image of the back of a card for the Solitaire game.",
            "returns": "The image of the back of a card.",
            "reason": "Provided to retrieve the image of the back of a card for displaying in the Solitaire game.",
            "howToUse": "Simply call the getBack() method to obtain the image of the back of a card for use in the Solitaire game.",
            "howItWorks": "The method calls the getCard() method from the same class, passing 'b' as the parameter to retrieve the image of the back of a card.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
          "properties": {
            "visibility": "public",
            "simpleName": "undoLast()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
            "kind": "method",
            "sourceText": "/**\r\n * Undoes the last move.\r\n */\r\npublic void undoLast() {\r\n    if (!aMoves.isEmpty()) {\r\n        aMoves.pop().undo();\r\n    }\r\n}",
            "docComment": "Undoes the last move.\r\n",
            "metaSrc": "source code",
            "description": "Undo the last move made in the game.",
            "returns": "This method does not return anything.",
            "reason": "Provided to allow the player to undo their last move and revert the game state.",
            "howToUse": "Call this method when the player wants to undo their last move in the game.",
            "howItWorks": "Checks if there are any moves in the stack, pops the last move, and calls the undo method of that move to revert the game state.",
            "assertions": {
              "preConditions": [
                "The game model instance must be initialized."
              ],
              "postConditions": [
                "The last move made in the game is undone."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "properties": {
            "visibility": "public",
            "simpleName": "getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.model.Move getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns a null move from the provided GameModelView object.",
            "returns": "A null move.",
            "reason": "Provided as a placeholder or default move when no legal move is available.",
            "howToUse": "Pass a GameModelView object to the method to retrieve a null move.",
            "howItWorks": "The method simply calls the getNullMove() method on the provided GameModelView object to obtain a null move.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "properties": {
            "simpleName": "pPile",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The tableau pile to search for the sequence."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED",
          "properties": {
            "sourceText": "private static final java.lang.String BUTTON_STYLE_PRESSED = \"-fx-background-color: transparent; -fx-padding: 6 4 4 6;\";",
            "visibility": "private",
            "simpleName": "BUTTON_STYLE_PRESSED",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()",
          "properties": {
            "visibility": "public",
            "simpleName": "undo()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void undo() {\r\n    for (int i = aMoves.size() - 1; i >= 0; i--) {\r\n        aMoves.get(i).undo();\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Undo a composite move by calling undo on each individual move in reverse order.",
            "returns": "This method does not return anything.",
            "reason": "Provided to allow the undo functionality for composite moves in the Solitaire game.",
            "howToUse": "Create an instance of CompositeMove, add individual moves to it, and then call undo() to undo the composite move.",
            "howItWorks": "Iterates through the list of individual moves in reverse order and calls the undo() method on each move to revert the changes made by the composite move.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES",
          "properties": {
            "sourceText": "private static final int NUMBER_OF_GAMES = 10000;",
            "visibility": "private",
            "simpleName": "NUMBER_OF_GAMES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire()",
          "properties": {
            "visibility": "public",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Application head.\r\n */\r\npublic Solitaire() {\r\n}",
            "docComment": "Application head.\r\n",
            "metaSrc": "source code",
            "description": "Initialize a new instance of the Solitaire class.",
            "returns": "a new instance of the Solitaire class",
            "reason": "Provided to create a new instance of the Solitaire game.",
            "howToUse": "Simply create a new instance of the Solitaire class using the constructor.",
            "howItWorks": "The constructor initializes a new instance of the Solitaire class with default values and sets up the game for play.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck).0",
          "properties": {
            "simpleName": "pDeck",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The deck of cards to draw from."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire",
          "properties": {
            "simpleName": "solitaire",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire",
            "kind": "package",
            "metaSrc": "source code"
          },
          "labels": [
            "Container"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Removes the top card from the pile at pIndex.\r\n *\r\n * @param pIndex\r\n * \t\tThe index of the pile to pop.\r\n * @pre !isEmpty(pIndex)\r\n */\r\nvoid pop(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    assert !aPiles.get(pIndex).isEmpty();\r\n    aVisible.remove(aPiles.get(pIndex).pop());\r\n}",
            "docComment": "Removes the top card from the pile at pIndex.\r\n\r\n@param pIndex\r\n\t\tThe index of the pile to pop.\r\n@pre !isEmpty(pIndex)\r\n",
            "metaSrc": "source code",
            "description": "Remove the top card from a specified tableau pile and update the visible cards.",
            "returns": "This method does not return anything.",
            "reason": "To facilitate the gameplay by allowing the player to move cards within the tableau piles.",
            "howToUse": "Call this method with the index of the tableau pile from which you want to remove the top card.",
            "howItWorks": "The method first asserts that the specified tableau pile is not empty, then removes the top card from that pile and updates the visible cards accordingly.",
            "assertions": {
              "preConditions": [
                "The specified tableau pile must not be empty."
              ],
              "postConditions": [
                "The top card is removed from the specified tableau pile."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "properties": {
            "visibility": "public",
            "simpleName": "reset()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
            "kind": "method",
            "sourceText": "/**\r\n * Restores the model to the state corresponding to the start of a new game.\r\n */\r\npublic void reset() {\r\n    aMoves.clear();\r\n    aDeck.shuffle();\r\n    aDiscard.clear();\r\n    aFoundations.initialize();\r\n    aTableau.initialize(aDeck);\r\n    notifyListeners();\r\n}",
            "docComment": "Restores the model to the state corresponding to the start of a new game.\r\n",
            "metaSrc": "source code",
            "description": "Resets the game by clearing moves, shuffling the deck, clearing the discard pile, initializing foundations and tableau, and notifying listeners.",
            "returns": "This method does not return anything.",
            "reason": "Provided to reset the game state and prepare for a new game session.",
            "howToUse": "Call this method when the game needs to be reset, such as at the start of a new game or when restarting the current game.",
            "howItWorks": "The method clears the list of moves, shuffles the deck, clears the discard pile, initializes the foundations and tableau with the deck, and notifies any listeners of the changes.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check for in the tableau pile."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The game model view containing the current state of the game."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.aCards",
          "properties": {
            "sourceText": "private final java.util.List<ca.mcgill.cs.stg.solitaire.cards.Card> aCards;",
            "visibility": "private",
            "simpleName": "aCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.aCards",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH",
          "properties": {
            "sourceText": "private static final int IMAGE_NEW_LINE_WIDTH = 10;",
            "visibility": "private",
            "simpleName": "IMAGE_NEW_LINE_WIDTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "properties": {
            "visibility": "public",
            "simpleName": "peekDiscardPile()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.cards.Card peekDiscardPile() {\r\n    assert aDiscard.size() != 0;\r\n    return aDiscard.peek();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns the top card from the discard pile without removing it.",
            "returns": "The top card from the discard pile.",
            "reason": "Provided to allow peeking at the top card of the discard pile without modifying its contents.",
            "howToUse": "Call peekDiscardPile() method on an instance of GameModel to retrieve the top card from the discard pile.",
            "howItWorks": "The method checks if the discard pile is not empty, asserts this condition, and then returns the top card without removing it.",
            "assertions": {
              "preConditions": [
                "The discard pile must not be empty."
              ],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES",
          "properties": {
            "sourceText": "private static final java.lang.String[] RANK_CODES = new java.lang.String[]{ \"a\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"t\", \"j\", \"q\", \"k\" };",
            "visibility": "private",
            "simpleName": "RANK_CODES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "properties": {
            "docComment": "An immutable description of a playing card. This abstraction\r\nis designed to be independent of game logic, so it does\r\nnot provide any service that relies on the knowledge\r\nof the rules of any particular game.\r\n\r\nThis class implements the Flyweight design pattern: \r\nthere can only ever be one instance of a card that \r\nrepresents a specific real-world playing card (such as ace\r\nof spaces). In the absence of serialization and reflection,\r\nthis ensures that the behavior of the == operator is identical \r\nto that of the equals method when two card arguments are \r\nprovided.\r\n",
            "simpleName": "Card",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Responsible for representing and providing access to individual playing cards in a solitaire game.",
            "roleStereotype": "Information Holder",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "properties": {
            "simpleName": "pSuit",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The suit of the card."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FOURTH",
          "properties": {
            "sourceText": "FOURTH",
            "visibility": "public",
            "simpleName": "FOURTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FOURTH",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The TableauPile to associate with the CardPileView."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pLocation\r\n * \t\tThe location of the pile to peek at\r\n * @return The card on top of the pile at pLocation\r\n * @pre pLocation != null & !aPiles.get(pLocation).isEmpty();\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.Card peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile pLocation) {\r\n    assert (pLocation != null) && (!aPiles.get(pLocation).isEmpty());\r\n    return aPiles.get(pLocation).peek();\r\n}",
            "docComment": "\r\n@param pLocation\r\n\t\tThe location of the pile to peek at\r\n@return The card on top of the pile at pLocation\r\n@pre pLocation != null & !aPiles.get(pLocation).isEmpty();\r\n",
            "metaSrc": "source code",
            "description": "Returns the top card of the specified foundation pile.",
            "returns": "The top card of the specified foundation pile.",
            "reason": "Provided to allow retrieving the top card of a foundation pile for game logic or display purposes.",
            "howToUse": "Call peek method with the desired FoundationPile object to retrieve the top card of that pile.",
            "howItWorks": "The method first asserts that the provided FoundationPile is not null and the pile is not empty, then it returns the top card of the specified pile.",
            "assertions": {
              "preConditions": [
                "pLocation must not be null.",
                "The specified foundation pile must not be empty."
              ],
              "postConditions": [
                "The top card of the specified foundation pile is returned."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.FoundationPile()",
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.FoundationPile()",
            "kind": "constructor",
            "sourceText": "FoundationPile() {\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize a FoundationPile object.",
            "returns": "a new instance of FoundationPile",
            "reason": "Provided to create a new instance of FoundationPile.",
            "howToUse": "Simply call FoundationPile() to create a new FoundationPile object.",
            "howItWorks": "This method is a constructor that initializes a FoundationPile object with default values.",
            "assertions": {
              "preConditions": [],
              "postConditions": [
                "A new FoundationPile object is created."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.Driver()",
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.Driver()",
            "kind": "constructor",
            "sourceText": "private Driver() {\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize a new instance of the Driver class.",
            "returns": "a new instance of the Driver class",
            "reason": "Provided to create a new instance of the Driver class for managing the Solitaire game.",
            "howToUse": "Simply create a new instance of the Driver class using the constructor.",
            "howItWorks": "The private constructor initializes a new instance of the Driver class, which is used to manage the Solitaire game.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "constructor",
            "sourceText": "CardMove(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination) {\r\n    aCard = pCard;\r\n    aDestination = pDestination;\r\n    aOrigin = find(pCard);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize a CardMove object with the given card, destination, and origin location.",
            "returns": "A CardMove object initialized with the provided card, destination, and origin.",
            "reason": "To set up the CardMove object with the necessary information for moving a card in the Solitaire game.",
            "howToUse": "Create a new CardMove object by passing a card and a destination location as parameters.",
            "howItWorks": "The method assigns the provided card to 'aCard', the destination location to 'aDestination', and finds the origin location of the card using the 'find' method.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.SEVEN",
          "properties": {
            "sourceText": "SEVEN",
            "visibility": "public",
            "simpleName": "SEVEN",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.SEVEN",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.TEN",
          "properties": {
            "sourceText": "TEN",
            "visibility": "public",
            "simpleName": "TEN",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.TEN",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION",
          "properties": {
            "sourceText": "private static final java.lang.String VERSION = \"1.0\";",
            "visibility": "private",
            "simpleName": "VERSION",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be checked."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX",
          "properties": {
            "sourceText": "private static final java.lang.String IMAGE_SUFFIX = \".gif\";",
            "visibility": "private",
            "simpleName": "IMAGE_SUFFIX",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.SIX",
          "properties": {
            "sourceText": "SIX",
            "visibility": "public",
            "simpleName": "SIX",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.SIX",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "java.lang.String",
          "properties": {
            "simpleName": "String",
            "qualifiedName": "java.lang.String",
            "metaSrc": "source code"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai",
          "properties": {
            "simpleName": "ai",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai",
            "kind": "package",
            "metaSrc": "source code",
            "description": "Handles the decision-making process and automation of gameplay in a solitaire card game implementation.",
            "layer": "Domain Layer"
          },
          "labels": [
            "Container"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT",
          "properties": {
            "sourceText": "private static final int HEIGHT = 500;",
            "visibility": "private",
            "simpleName": "HEIGHT",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest()",
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest()",
            "kind": "constructor",
            "sourceText": "private CrashTest() {\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize a CrashTest object.",
            "returns": "a new instance of CrashTest class",
            "reason": "Provided to create a new instance of the CrashTest class.",
            "howToUse": "Simply call the constructor to create a new CrashTest object.",
            "howItWorks": "The constructor initializes a new instance of the CrashTest class with default values or settings.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "private static ca.mcgill.cs.stg.solitaire.model.Move substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    if (pModel.isDiscardPileEmpty()) {\r\n        return pModel.getNullMove();\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile pile : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        if (pModel.isLegalMove(pModel.peekDiscardPile(), pile)) {\r\n            return pModel.getCardMove(pModel.peekDiscardPile(), pile);\r\n        }\r\n    }\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Moves a card from the discard pile to a tableau pile if it is a legal move.",
            "returns": "A move object representing the action to be taken.",
            "reason": "Provides a strategy for the AI player to make a move from the discard pile to a tableau pile.",
            "howToUse": "Call this method with the current game model view as the parameter to determine the move to be made by the AI player.",
            "howItWorks": "Iterates through each tableau pile to find a legal move from the discard pile, returning the move if found, otherwise returns a null move.",
            "assertions": {
              "preConditions": [
                "The game model view must be initialized with the current game state."
              ],
              "postConditions": [
                "A move object representing the action to be taken is returned."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Rank.ACE",
          "properties": {
            "sourceText": "ACE",
            "visibility": "public",
            "simpleName": "ACE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Rank.ACE",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH",
          "properties": {
            "sourceText": "private static final int WIDTH = 680;",
            "visibility": "private",
            "simpleName": "WIDTH",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "properties": {
            "visibility": "public",
            "simpleName": "isEmpty()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True if and only if the stack has no cards in it.\r\n */\r\npublic boolean isEmpty() {\r\n    return aCards.size() == 0;\r\n}",
            "docComment": "\r\n@return True if and only if the stack has no cards in it.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the card stack is empty by comparing the size of the stack to zero.",
            "returns": "true if the card stack is empty, false otherwise.",
            "reason": "Provided to allow checking if the card stack is empty for game logic or user interface purposes.",
            "howToUse": "Call this method on an instance of CardStack to determine if it is empty before performing any operations on it.",
            "howItWorks": "The method simply compares the size of the list of cards in the stack to zero and returns true if it is empty.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "public",
            "simpleName": "getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.cards.CardStack getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    return aTableau.getPile(pIndex);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns the card stack of a specified tableau pile in the game model.",
            "returns": "The card stack of the specified tableau pile.",
            "reason": "Provides access to the card stack of a specific tableau pile within the game model.",
            "howToUse": "Call getTableauPile method with the desired tableau pile index to retrieve the corresponding card stack.",
            "howItWorks": "The method delegates the retrieval of the card stack of the specified tableau pile to the aTableau object and returns it.",
            "assertions": {
              "preConditions": [
                "The game model and tableau piles must be properly initialized."
              ],
              "postConditions": [
                "The card stack of the specified tableau pile is returned."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "properties": {
            "docComment": "Represents seven piles of cards that fan downwards, where cards\r\nmust be stacked in alternating suit colors, and where cards can \r\nbe moved from pile to pile.\r\n",
            "simpleName": "Tableau",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Manages the state and behavior of tableau piles in a solitaire card game implementation.",
            "roleStereotype": "Domain Layer",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE",
          "properties": {
            "sourceText": "// CSOFF:\r\nprivate static final java.lang.String BORDER_STYLE = \"-fx-border-color: lightgray;\" + (\"-fx-border-width: 3;\" + \" -fx-border-radius: 10.0\");",
            "visibility": "private",
            "simpleName": "BORDER_STYLE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "properties": {
            "docComment": "Never does anything.\r\n",
            "simpleName": "NullPlayingStrategy",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Responsible for providing a default move when no legal move is available.",
            "roleStereotype": "Service Provider",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be checked."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "properties": {
            "docComment": "Makes the first possible move in this order: \r\n1. Discarding if the discard pile is empty;\r\n2. Moving a card from the discard pile to a foundation pile;\r\n3. Moving a card from the discard pile to the tableau;\r\n4. Moving a card from the tableau to a foundation pile, in order\r\nof piles;\r\n5. Moving from one pile in the tableau to another, if this either reveals\r\na fresh card or frees up a pile for a king.\r\n6. None of the above was possible, discards if possible.\r\n7. If discarding was not possible, return the null move.\r\n",
            "simpleName": "GreedyPlayingStrategy",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Handles the decision-making process for determining the best legal move in a solitaire card game implementation.",
            "roleStereotype": "Service Provider",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES",
          "properties": {
            "sourceText": "private static final java.lang.String[] SUIT_CODES = new java.lang.String[]{ \"c\", \"d\", \"h\", \"s\" };",
            "visibility": "private",
            "simpleName": "SUIT_CODES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
          "properties": {
            "visibility": "public",
            "simpleName": "peekDiscardPile()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return The card on top of the discard pile.\r\n * @pre !emptyDiscardPile()\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.Card peekDiscardPile();",
            "docComment": "\r\n@return The card on top of the discard pile.\r\n@pre !emptyDiscardPile()\r\n",
            "metaSrc": "source code",
            "description": "Returns the top card of the discard pile in the solitaire game.",
            "returns": "the top card of the discard pile",
            "reason": "Provided to allow players to see the top card of the discard pile for strategic decision-making.",
            "howToUse": "Call peekDiscardPile() method on an instance of GameModelView to retrieve the top card of the discard pile.",
            "howItWorks": "The method accesses the discard pile data structure and returns the top card without modifying the pile itself.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "properties": {
            "visibility": "public",
            "simpleName": "start(javafx.stage.Stage)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void start(javafx.stage.Stage pPrimaryStage) {\r\n    pPrimaryStage.setTitle((ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE + \" \") + ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION);\r\n    javafx.scene.layout.GridPane root = new javafx.scene.layout.GridPane();\r\n    root.setStyle(\"-fx-background-color: green;\");\r\n    root.setHgap(ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER);\r\n    root.setVgap(ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER);\r\n    root.setPadding(new javafx.geometry.Insets(ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER));\r\n    final ca.mcgill.cs.stg.solitaire.model.GameModel model = new ca.mcgill.cs.stg.solitaire.model.GameModel(new ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy());\r\n    ca.mcgill.cs.stg.solitaire.gui.DeckView deckView = new ca.mcgill.cs.stg.solitaire.gui.DeckView(model);\r\n    ca.mcgill.cs.stg.solitaire.gui.DiscardPileView discardPileView = new ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(model);\r\n    root.add(deckView, 0, 0);\r\n    root.add(discardPileView, 1, 0);\r\n    for (ca.mcgill.cs.stg.solitaire.model.FoundationPile index : ca.mcgill.cs.stg.solitaire.model.FoundationPile.values()) {\r\n        root.add(new ca.mcgill.cs.stg.solitaire.gui.SuitStack(model, index), 3 + index.ordinal(), 0);\r\n    }\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile index : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        root.add(new ca.mcgill.cs.stg.solitaire.gui.CardPileView(model, index), index.ordinal(), 1);\r\n    }\r\n    root.setOnKeyTyped(new javafx.event.EventHandler<javafx.scene.input.KeyEvent>() {\r\n        @java.lang.Override\r\n        public void handle(final javafx.scene.input.KeyEvent pEvent) {\r\n            if (pEvent.getCharacter().equals(\"\\r\")) {\r\n                model.tryToAutoPlay();\r\n            } else if (pEvent.getCharacter().equals(\"\\b\")) {\r\n                model.undoLast();\r\n            }\r\n            pEvent.consume();\r\n        }\r\n    });\r\n    pPrimaryStage.setResizable(false);\r\n    pPrimaryStage.setScene(new javafx.scene.Scene(root, ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH, ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT));\r\n    pPrimaryStage.show();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Starts the Solitaire card game by setting up the UI components and event handlers.",
            "returns": "This method does not return any value.",
            "reason": "To initialize the Solitaire card game UI and set up event handling for user interactions.",
            "howToUse": "Call this method with the primary stage of the JavaFX application as the parameter to start the Solitaire game.",
            "howItWorks": "The method sets up the UI components such as deck, discard pile, foundation piles, and tableau piles. It also adds event handlers for key presses to trigger game actions like autoplay and undo.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations()",
          "properties": {
            "visibility": "default",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations()",
            "kind": "constructor",
            "sourceText": "/**\r\n * Creates an initialized FoundationPiles object that consists of four empty piles.\r\n */\r\nFoundations() {\r\n    initialize();\r\n}",
            "docComment": "Creates an initialized FoundationPiles object that consists of four empty piles.\r\n",
            "metaSrc": "source code",
            "description": "Initialize the Foundations object.",
            "returns": "The constructed Foundations object.",
            "reason": "To set up the initial state of the Foundations object.",
            "howToUse": "Simply create a new instance of Foundations to initialize it.",
            "howItWorks": "The method calls the initialize() method to set up the initial state of the Foundations object.",
            "assertions": {
              "preConditions": [],
              "postConditions": [
                "Foundations object is initialized."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.aVisible",
          "properties": {
            "sourceText": "private final java.util.Set<ca.mcgill.cs.stg.solitaire.cards.Card> aVisible = new java.util.HashSet<>();",
            "visibility": "private",
            "simpleName": "aVisible",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.aVisible",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "properties": {
            "docComment": "Plays N games and, for each game, undo\r\nall moves and redo them.\r\n",
            "simpleName": "CrashTest",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Automates the gameplay of a solitaire card game without user intervention.",
            "roleStereotype": "Service Provider",
            "layer": "Service Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "properties": {
            "docComment": "Places where a visible card can be located, \r\nexcept for the foundation piles and the tableau.\r\n",
            "simpleName": "OtherLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
            "kind": "enum",
            "metaSrc": "source code",
            "description": "Responsible for managing relationships and constraints among related things.",
            "roleStereotype": "Structurer",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "properties": {
            "docComment": "Observer interface to be implemented by classes whose\r\nobjects are interested in being notified of a change\r\nin the state of the game model.\r\n",
            "simpleName": "GameModelListener",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "hidden",
            "description": "Notify listeners about changes in the game state.",
            "roleStereotype": "Service Provider",
            "layer": "Service Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
          "properties": {
            "visibility": "public",
            "simpleName": "getDiscardMove()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return An instance of the Move interface\r\nthat represents discarding a card from the deck.\r\n */\r\nca.mcgill.cs.stg.solitaire.model.Move getDiscardMove();",
            "docComment": "\r\n@return An instance of the Move interface\r\nthat represents discarding a card from the deck.\r\n",
            "metaSrc": "source code",
            "description": "Returns a move representing the action of discarding a card from the game.",
            "returns": "A move object representing the discard action.",
            "reason": "Provided to allow the game to handle discarding cards and update the game state accordingly.",
            "howToUse": "Call this method when a player chooses to discard a card during the game.",
            "howItWorks": "The method generates a move object that represents the discard action, which can then be executed to update the game state.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to start the sub-stack from."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.iterator()",
          "properties": {
            "visibility": "public",
            "simpleName": "iterator()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.iterator()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic java.util.Iterator<ca.mcgill.cs.stg.solitaire.cards.Card> iterator() {\r\n    return aCards.iterator();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns an iterator over the cards in the card stack.",
            "returns": "An iterator over the cards in the card stack.",
            "reason": "Provided to allow iteration over the cards in the card stack for various operations or display purposes.",
            "howToUse": "Create an instance of CardStack, add cards to it, and then use the iterator() method to iterate over the cards in the stack.",
            "howItWorks": "The method simply returns an iterator provided by the underlying list of cards in the card stack, allowing external code to iterate over the cards.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent).0",
          "properties": {
            "simpleName": "pMouseEvent",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The mouse event triggering the method."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns a sequence of cards starting at pCard and including\r\n * all cards on top of it.\r\n *\r\n * @param pCard\r\n * \t\tThe bottom card in the sequence\r\n * @param pPile\r\n * \t\tThe target pile\r\n * @return A copy of the requested sequence.\r\n * @pre pCard != null && pPile != null\r\n */\r\nca.mcgill.cs.stg.solitaire.cards.CardStack getSequence(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pPile) {\r\n    assert (pCard != null) && (pPile != null);\r\n    ca.mcgill.cs.stg.solitaire.cards.CardStack stack = aPiles.get(pPile);\r\n    java.util.List<ca.mcgill.cs.stg.solitaire.cards.Card> lReturn = new java.util.ArrayList<>();\r\n    boolean aSeen = false;\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card card : stack) {\r\n        if (card == pCard) {\r\n            aSeen = true;\r\n        }\r\n        if (aSeen) {\r\n            lReturn.add(card);\r\n        }\r\n    }\r\n    return new ca.mcgill.cs.stg.solitaire.cards.CardStack(lReturn);\r\n}",
            "docComment": "Returns a sequence of cards starting at pCard and including\r\nall cards on top of it.\r\n\r\n@param pCard\r\n\t\tThe bottom card in the sequence\r\n@param pPile\r\n\t\tThe target pile\r\n@return A copy of the requested sequence.\r\n@pre pCard != null && pPile != null\r\n",
            "metaSrc": "source code",
            "description": "Returns a sequence of cards starting from a given card in a tableau pile.",
            "returns": "A stack of cards representing the sequence.",
            "reason": "To retrieve a sequence of cards starting from a specific card in a tableau pile for game logic purposes.",
            "howToUse": "Call the method with a card and a tableau pile as parameters to get a stack of cards representing the sequence starting from the given card.",
            "howItWorks": "The method iterates through the cards in the tableau pile, adding them to the return list once the given card is found, and then returns a new CardStack with the sequence.",
            "assertions": {
              "preConditions": [
                "pCard and pPile must not be null."
              ],
              "postConditions": [
                "The returned CardStack contains the sequence of cards starting from pCard."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
          "properties": {
            "visibility": "public",
            "simpleName": "isCompleted()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return True if the game is completed.\r\n */\r\npublic boolean isCompleted() {\r\n    return aFoundations.getTotalSize() == (ca.mcgill.cs.stg.solitaire.cards.Rank.values().length * ca.mcgill.cs.stg.solitaire.cards.Suit.values().length);\r\n}",
            "docComment": "\r\n@return True if the game is completed.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the game is completed by comparing the total size of the foundations with the total number of possible cards in a deck.",
            "returns": "true if the game is completed, false otherwise.",
            "reason": "To determine when the game has been successfully completed.",
            "howToUse": "Call this method on an instance of GameModel to check if the solitaire game has been completed.",
            "howItWorks": "The method calculates the total number of cards in a standard deck by multiplying the number of ranks with the number of suits, and then compares it with the total size of the foundations to determine if the game is completed.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be moved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "properties": {
            "docComment": "Represents the four piles that must be completed to win the game, with the ace\r\nat the bottom, face up, and all cards of the same suit on top, in sequence.\r\n",
            "simpleName": "Foundations",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations",
            "kind": "class",
            "metaSrc": "source code",
            "dependencyProfile": "outbound",
            "description": "Manages the foundation piles in a Solitaire card game implementation.",
            "roleStereotype": "Structurer",
            "layer": "Domain Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui",
          "properties": {
            "simpleName": "gui",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui",
            "kind": "package",
            "metaSrc": "source code",
            "description": "Handles the visual representation and interaction of card piles, decks, and suit stacks in a solitaire game.",
            "layer": "Presentation Layer"
          },
          "labels": [
            "Container"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "properties": {
            "simpleName": "pModel",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The GameModel instance to be associated with the DeckView."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "byte",
          "properties": {
            "simpleName": "byte",
            "qualifiedName": "byte",
            "metaSrc": "source code"
          },
          "labels": [
            "Primitive"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "public",
            "simpleName": "isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tA card to test for visibility.\r\n * @return True if the card's value is visible in\r\nthe tableau;\r\n */\r\nboolean isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card pCard);",
            "docComment": "\r\n@param pCard\r\n\t\tA card to test for visibility.\r\n@return True if the card's value is visible in\r\nthe tableau;\r\n",
            "metaSrc": "source code",
            "description": "Checks if a given card is visible in the tableau.",
            "returns": "True if the card is visible in the tableau, false otherwise.",
            "reason": "Provided to determine if a card is visible in the tableau for game logic purposes.",
            "howToUse": "Call this method with a Card object to check if it is visible in the tableau.",
            "howItWorks": "The method checks if the given card is face up and not covered by any other cards in the tableau.",
            "assertions": {
              "preConditions": [
                "The card object pCard must not be null."
              ],
              "postConditions": [
                "The method returns true if the card is visible in the tableau, false otherwise."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()",
          "properties": {
            "visibility": "public",
            "simpleName": "canUndo()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @return If there is a move to undo.\r\n */\r\npublic boolean canUndo() {\r\n    return !aMoves.isEmpty();\r\n}",
            "docComment": "\r\n@return If there is a move to undo.\r\n",
            "metaSrc": "source code",
            "description": "Checks if there are any moves that can be undone in the game.",
            "returns": "true if there are moves to undo, false otherwise.",
            "reason": "Provided to allow the player to undo their moves and backtrack in the game.",
            "howToUse": "Call this method to determine if the player can undo a move before attempting to undo it.",
            "howItWorks": "The method checks if the list of moves (aMoves) is empty, indicating whether there are moves to undo or not.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.reset()",
          "properties": {
            "visibility": "public",
            "simpleName": "reset()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.reset()",
            "kind": "method",
            "sourceText": "public void reset() {\r\n    getChildren().get(0).setVisible(true);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Make the first card in the deck visible when resetting the deck view.",
            "returns": "This method does not return anything.",
            "reason": "To ensure that the deck view starts with the first card visible when resetting the game.",
            "howToUse": "Call this method when resetting the deck view in the Solitaire game.",
            "howItWorks": "The method accesses the children of the deck view, gets the first card, and sets its visibility to true.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check visibility for."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES",
          "properties": {
            "sourceText": "private static final int NUMBER_OF_GAMES = 1000;",
            "visibility": "private",
            "simpleName": "NUMBER_OF_GAMES",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "public",
            "simpleName": "push(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n * Pushes pCard onto the stack.\r\n *\r\n * @param pCard\r\n * \t\tThe card to push.\r\n * @pre pCard != null;\r\n * @pre !aCards.contains(pCard)\r\n */\r\npublic void push(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert (pCard != null) && (!aCards.contains(pCard));\r\n    aCards.add(pCard);\r\n}",
            "docComment": "Pushes pCard onto the stack.\r\n\r\n@param pCard\r\n\t\tThe card to push.\r\n@pre pCard != null;\r\n@pre !aCards.contains(pCard)\r\n",
            "metaSrc": "source code",
            "description": "Adds a card to the card stack if it is not null and does not already exist in the stack.",
            "returns": "This method does not return anything.",
            "reason": "To add a card to the card stack while ensuring uniqueness and non-nullity.",
            "howToUse": "Create an instance of CardStack, then call push() method with a Card object as the argument to add it to the stack.",
            "howItWorks": "The method first checks if the provided card is not null and is not already present in the stack. If both conditions are met, the card is added to the stack.",
            "assertions": {
              "preConditions": [
                "pCard must not be null.",
                "pCard must not already exist in the stack."
              ],
              "postConditions": [
                "The card is added to the stack if it meets the pre-conditions."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "properties": {
            "visibility": "public",
            "simpleName": "serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
            "kind": "static method",
            "sourceText": "/**\r\n * Converts an array of cards into an id string\r\n * that can be deserialized by the constructor.\r\n *\r\n * @param pCards\r\n * \t\tThe array of cards with high-ranking cards first.\r\n * @return The id string.\r\n */\r\npublic static java.lang.String serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack pCards) {\r\n    java.lang.String result = \"\";\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card card : pCards) {\r\n        result += card.getIDString() + ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR;\r\n    }\r\n    if (result.length() > 0) {\r\n        result = result.substring(0, result.length() - 1);\r\n    }\r\n    return result;\r\n}",
            "docComment": "Converts an array of cards into an id string\r\nthat can be deserialized by the constructor.\r\n\r\n@param pCards\r\n\t\tThe array of cards with high-ranking cards first.\r\n@return The id string.\r\n",
            "metaSrc": "source code",
            "description": "Serialize a CardStack object into a string of card IDs separated by a specific separator.",
            "returns": "A string representing the serialized CardStack object.",
            "reason": "Provided to convert a CardStack object into a format that can be easily stored or transferred.",
            "howToUse": "Pass a CardStack object to the method, and it will return a string containing the IDs of the cards in the stack.",
            "howItWorks": "Iterates through each card in the CardStack, retrieves its ID string, and appends it to the result string with a separator. The final string is returned after removing the trailing separator.",
            "assertions": {
              "preConditions": [
                "The CardStack object pCards must not be null."
              ],
              "postConditions": [
                "The returned string will contain the IDs of the cards in the CardStack separated by the defined separator."
              ]
            },
            "layer": "Service Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check visibility for."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The FoundationPile object to associate with the SuitStack."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Move.perform()",
          "properties": {
            "visibility": "public",
            "simpleName": "perform()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Move.perform()",
            "kind": "method",
            "sourceText": "/**\r\n * Performs the move.\r\n *\r\n * @pre The move is legal\r\n */\r\nvoid perform();",
            "docComment": "Performs the move.\r\n\r\n@pre The move is legal\r\n",
            "metaSrc": "source code",
            "description": "Performs a move in the solitaire card game.",
            "returns": "This method does not return any value.",
            "reason": "This method is provided to execute a move in the game and update the game state accordingly.",
            "howToUse": "Simply call perform() on a Move object to execute the move in the game.",
            "howItWorks": "When perform() is called, it carries out the specific move operation such as moving a card from one pile to another, updating the game state as needed.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "properties": {
            "visibility": "public",
            "simpleName": "isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "/**\r\n * Determines if pCard can be moved to pLocation\r\n * according to the rules of the game and given the current\r\n * game state.\r\n *\r\n * @param pCard\r\n * \t\tThe card to move.\r\n * @param pDestination\r\n * \t\tThe destination of the move.\r\n * @return True if the move is a legal move.\r\n */\r\nboolean isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.Location pDestination);",
            "docComment": "Determines if pCard can be moved to pLocation\r\naccording to the rules of the game and given the current\r\ngame state.\r\n\r\n@param pCard\r\n\t\tThe card to move.\r\n@param pDestination\r\n\t\tThe destination of the move.\r\n@return True if the move is a legal move.\r\n",
            "metaSrc": "source code",
            "description": "Checks if moving a card to a specific location on the game board is a legal move.",
            "returns": "True if the move is legal, false otherwise.",
            "reason": "Provided to determine the validity of a move within the solitaire card game implementation.",
            "howToUse": "Call this method with the card to be moved and the destination location to check if the move is legal.",
            "howItWorks": "The method evaluates if moving the specified card to the given location follows the rules of the solitaire game, considering card values and suits.",
            "assertions": {
              "preConditions": [
                "The game model and card objects must be properly initialized."
              ],
              "postConditions": [
                "The legality of the move is determined based on the game rules."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pIndex",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The tableau pile from which to hide the top card."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[])",
          "properties": {
            "visibility": "public",
            "simpleName": "main(java.lang.String[])",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[])",
            "kind": "static method",
            "sourceText": "/**\r\n * Launches the application.\r\n *\r\n * @param pArgs\r\n * \t\tThis program takes no argument.\r\n */\r\npublic static void main(java.lang.String[] pArgs) {\r\n    javafx.application.Application.launch(pArgs);\r\n}",
            "docComment": "Launches the application.\r\n\r\n@param pArgs\r\n\t\tThis program takes no argument.\r\n",
            "metaSrc": "source code",
            "description": "Launches the JavaFX application for the Solitaire card game.",
            "returns": "This method does not return any value.",
            "reason": "Provided to start the JavaFX application for the Solitaire card game.",
            "howToUse": "Call this method with the command-line arguments when starting the Solitaire card game application.",
            "howItWorks": "The method uses the JavaFX Application class to launch the JavaFX application with the specified command-line arguments.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "kind": "constructor",
            "sourceText": "DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel pModel) {\r\n    aModel = pModel;\r\n    final javafx.scene.control.Button button = new javafx.scene.control.Button();\r\n    button.setGraphic(new javafx.scene.image.ImageView(ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()));\r\n    button.setStyle(ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL);\r\n    button.setOnMousePressed(new javafx.event.EventHandler<javafx.scene.input.MouseEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.MouseEvent pEvent) {\r\n            ((javafx.scene.control.Button) (pEvent.getSource())).setStyle(ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED);\r\n        }\r\n    });\r\n    button.setOnMouseReleased(new javafx.event.EventHandler<javafx.scene.input.MouseEvent>() {\r\n        @java.lang.Override\r\n        public void handle(javafx.scene.input.MouseEvent pEvent) {\r\n            ((javafx.scene.control.Button) (pEvent.getSource())).setStyle(ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL);\r\n            if (aModel.isDeckEmpty()) {\r\n                aModel.reset();\r\n            } else {\r\n                aModel.getDiscardMove().perform();\r\n            }\r\n        }\r\n    });\r\n    getChildren().add(button);\r\n    aModel.addListener(this);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initializes the DeckView with a given GameModel, sets up a button for deck actions, and adds it to the view.",
            "returns": "The constructed DeckView instance.",
            "reason": "To provide a visual representation of the deck in the solitaire game and allow players to interact with it.",
            "howToUse": "Create a new DeckView instance by passing a GameModel object as a parameter, then add the DeckView to the desired parent node in the GUI.",
            "howItWorks": "The method creates a button with an image representing the back of a card, sets up mouse event handlers for button press and release actions, and defines the actions to be taken when the button is clicked based on the state of the associated GameModel.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "properties": {
            "visibility": "default",
            "simpleName": "initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
            "kind": "method",
            "sourceText": "/**\r\n * Fills the tableau by drawing cards from the deck.\r\n *\r\n * @param pDeck\r\n * \t\ta deck of card to use to fill the piles initially.\r\n * @pre pDeck != null\r\n */\r\nvoid initialize(ca.mcgill.cs.stg.solitaire.cards.Deck pDeck) {\r\n    assert pDeck != null;\r\n    aVisible.clear();\r\n    for (int i = 0; i < ca.mcgill.cs.stg.solitaire.model.TableauPile.values().length; i++) {\r\n        aPiles.get(ca.mcgill.cs.stg.solitaire.model.TableauPile.values()[i]).clear();\r\n        for (int j = 0; j < (i + 1); j++) {\r\n            ca.mcgill.cs.stg.solitaire.cards.Card card = pDeck.draw();\r\n            aPiles.get(ca.mcgill.cs.stg.solitaire.model.TableauPile.values()[i]).push(card);\r\n            if (j == i) {\r\n                aVisible.add(card);\r\n            }\r\n        }\r\n    }\r\n}",
            "docComment": "Fills the tableau by drawing cards from the deck.\r\n\r\n@param pDeck\r\n\t\ta deck of card to use to fill the piles initially.\r\n@pre pDeck != null\r\n",
            "metaSrc": "source code",
            "description": "Initialize the tableau piles with cards from the deck.",
            "returns": "This method does not return anything.",
            "reason": "To set up the initial state of the solitaire game by populating the tableau piles with cards.",
            "howToUse": "Call this method passing a valid deck of cards as the parameter before starting a new game of solitaire.",
            "howItWorks": "Clears the visible cards list, iterates over each tableau pile, clears the pile, draws cards from the deck based on pile index, pushes cards to the pile, and adds the last drawn card to the visible cards list.",
            "assertions": {
              "preConditions": [
                "The deck parameter must not be null."
              ],
              "postConditions": [
                "The tableau piles are initialized with cards from the deck."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "properties": {
            "visibility": "private",
            "simpleName": "substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "static method",
            "sourceText": "private static ca.mcgill.cs.stg.solitaire.model.Move substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile tableauPile : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        ca.mcgill.cs.stg.solitaire.cards.CardStack stack = pModel.getTableauPile(tableauPile);\r\n        if (!stack.isEmpty()) {\r\n            ca.mcgill.cs.stg.solitaire.cards.Card card = stack.peek();\r\n            for (ca.mcgill.cs.stg.solitaire.model.FoundationPile foundationPile : ca.mcgill.cs.stg.solitaire.model.FoundationPile.values()) {\r\n                if (pModel.isLegalMove(card, foundationPile)) {\r\n                    return pModel.getCardMove(card, foundationPile);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Moves a card from a tableau pile to a foundation pile if it is a legal move.",
            "returns": "The move to be made from tableau to foundation.",
            "reason": "Provided to determine and execute a legal move from a tableau pile to a foundation pile during gameplay.",
            "howToUse": "Call this method with the current game model view as the parameter to find and make a move from tableau to foundation.",
            "howItWorks": "Iterates through each tableau pile, checks the top card, and attempts to move it to a foundation pile if it is a legal move, returning the move if successful.",
            "assertions": {
              "preConditions": [
                "The game model view must be initialized with valid tableau and foundation piles."
              ],
              "postConditions": [
                "A move is returned, either a valid move from tableau to foundation or a null move if no valid move is found."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "properties": {
            "visibility": "private",
            "simpleName": "absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
            "kind": "method",
            "sourceText": "/* Removes the moveable card from pLocation. */\r\nprivate void absorbCard(ca.mcgill.cs.stg.solitaire.model.Location pLocation) {\r\n    if (pLocation == ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE) {\r\n        assert !aDiscard.isEmpty();\r\n        aDiscard.pop();\r\n    } else if (pLocation instanceof ca.mcgill.cs.stg.solitaire.model.FoundationPile) {\r\n        assert !aFoundations.isEmpty(((ca.mcgill.cs.stg.solitaire.model.FoundationPile) (pLocation)));\r\n        aFoundations.pop(((ca.mcgill.cs.stg.solitaire.model.FoundationPile) (pLocation)));\r\n    } else {\r\n        assert pLocation instanceof ca.mcgill.cs.stg.solitaire.model.TableauPile;\r\n        aTableau.pop(((ca.mcgill.cs.stg.solitaire.model.TableauPile) (pLocation)));\r\n    }\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Absorb a card from a specific location in the solitaire game.",
            "returns": "This method does not return any value.",
            "reason": "To handle the movement of cards within the game model based on the specified location.",
            "howToUse": "Call this method with the desired location parameter to absorb a card from that location within the game model.",
            "howItWorks": "The method checks the type of location provided and pops the top card from the corresponding pile (discard pile, foundation pile, or tableau pile).",
            "assertions": {
              "preConditions": [
                "The specified location must not be null."
              ],
              "postConditions": [
                "The top card from the specified location is removed from the corresponding pile."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be pushed onto the tableau pile."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIRST",
          "properties": {
            "sourceText": "FIRST",
            "visibility": "public",
            "simpleName": "FIRST",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIRST",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "private",
            "simpleName": "getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "private ca.mcgill.cs.stg.solitaire.model.TableauPile getPile(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert contains(pCard);\r\n    for (ca.mcgill.cs.stg.solitaire.model.TableauPile pile : ca.mcgill.cs.stg.solitaire.model.TableauPile.values()) {\r\n        if (contains(pCard, pile)) {\r\n            return pile;\r\n        }\r\n    }\r\n    assert false;\r\n    return null;\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns the TableauPile where the given card is located.",
            "returns": "The TableauPile where the card is located.",
            "reason": "Provided to determine the TableauPile of a given card within the solitaire game implementation.",
            "howToUse": "Call this method with a card as the parameter to get the TableauPile where the card is located within the game.",
            "howItWorks": "Iterates through all TableauPiles and checks if the given card is contained in each pile, returning the pile where the card is found.",
            "assertions": {
              "preConditions": [
                "The card must be contained within the Tableau."
              ],
              "postConditions": [
                "The method returns the TableauPile where the card is located."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to check for presence in tableau piles."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL",
          "properties": {
            "sourceText": "private static final java.lang.String BORDER_STYLE_NORMAL = \"-fx-border-color: lightgray;\" + (\"-fx-border-width: 3;\" + \" -fx-border-radius: 10.0\");",
            "visibility": "private",
            "simpleName": "BORDER_STYLE_NORMAL",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card for which the image is to be retrieved."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "properties": {
            "visibility": "public",
            "simpleName": "getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic ca.mcgill.cs.stg.solitaire.model.Move getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView pModel) {\r\n    for (java.util.function.Function<ca.mcgill.cs.stg.solitaire.model.GameModelView, ca.mcgill.cs.stg.solitaire.model.Move> substrategy : ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.SUBSTRATEGIES) {\r\n        ca.mcgill.cs.stg.solitaire.model.Move move = substrategy.apply(pModel);\r\n        if (!move.isNull()) {\r\n            return move;\r\n        }\r\n    }\r\n    return pModel.getNullMove();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Returns a legal move based on a list of sub-strategies in a greedy playing strategy for a solitaire card game implementation.",
            "returns": "The legal move to be made.",
            "reason": "Provided to determine the best legal move to make in a solitaire game based on a greedy playing strategy.",
            "howToUse": "Pass the current game model view as the parameter to get the legal move to make in the game.",
            "howItWorks": "Iterates through a list of sub-strategies, applies each strategy to the game model view to get a move, and returns the first legal move found. If no legal move is found, returns a null move.",
            "assertions": {
              "preConditions": [
                "The game model view must not be null."
              ],
              "postConditions": [
                "The returned move is a legal move in the game."
              ]
            },
            "layer": "Service Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "public",
            "simpleName": "isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to test\r\n * @return True if pCard is in the tableau and is\r\nthe lowest card visible in its pile, including\r\nthe case where it's the only card in the pile.\r\n */\r\nboolean isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card pCard);",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to test\r\n@return True if pCard is in the tableau and is\r\nthe lowest card visible in its pile, including\r\nthe case where it's the only card in the pile.\r\n",
            "metaSrc": "source code",
            "description": "Checks if the given card is the lowest visible card in the tableau.",
            "returns": "True if the given card is the lowest visible card in the tableau, false otherwise.",
            "reason": "To determine if a card is the lowest visible card in the tableau for game logic purposes.",
            "howToUse": "Call the method with a Card object as the argument to check if it is the lowest visible card in the tableau.",
            "howItWorks": "Iterates through the tableau to find the lowest visible card and compares it with the given card to determine if it is the lowest visible.",
            "assertions": {
              "preConditions": [
                "The tableau must be properly set up with cards in the correct order."
              ],
              "postConditions": [
                "The method returns true if the given card is the lowest visible in the tableau, false otherwise."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER",
          "properties": {
            "sourceText": "private static final int MARGIN_OUTER = 10;",
            "visibility": "private",
            "simpleName": "MARGIN_OUTER",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pCard",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The card to be pushed onto the deck."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.aMoves",
          "properties": {
            "sourceText": "private final java.util.List<ca.mcgill.cs.stg.solitaire.model.Move> aMoves = new java.util.ArrayList<>();",
            "visibility": "private",
            "simpleName": "aMoves",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.aMoves",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aDragHandler",
          "properties": {
            "sourceText": "// CSON:\r\nprivate ca.mcgill.cs.stg.solitaire.gui.CardDragHandler aDragHandler;",
            "visibility": "private",
            "simpleName": "aDragHandler",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aDragHandler",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "short",
          "properties": {
            "simpleName": "short",
            "qualifiedName": "short",
            "metaSrc": "source code"
          },
          "labels": [
            "Primitive"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "properties": {
            "visibility": "public",
            "simpleName": "isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile pPile) {\r\n    return aFoundations.isEmpty(pPile);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if the specified foundation pile is empty.",
            "returns": "True if the foundation pile is empty, false otherwise.",
            "reason": "To provide a way to determine if a specific foundation pile is empty for game logic or UI display purposes.",
            "howToUse": "Call this method with the foundation pile object as the parameter to check if it is empty.",
            "howItWorks": "The method delegates the check to the 'aFoundations' object, which is likely a collection of foundation piles, and returns whether the specified pile is empty.",
            "assertions": {
              "preConditions": [
                "The 'aFoundations' object should be initialized with foundation piles."
              ],
              "postConditions": [
                "Returns true if the specified foundation pile is empty, false otherwise."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "properties": {
            "docComment": "Game-playing behavior. Implementations of this interface\r\nare responsible for ensuring that the sequence of Move \r\ninstances returned does not put the game in and endless\r\ncycle.\r\n",
            "simpleName": "PlayingStrategy",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
            "kind": "interface",
            "metaSrc": "source code",
            "dependencyProfile": "inbound",
            "description": "Responsible for determining the next legal move to be made by the AI playing strategy.",
            "roleStereotype": "Service Provider",
            "layer": "Service Layer"
          },
          "labels": [
            "Structure"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "properties": {
            "simpleName": "pImageView",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The image view of the card being dragged."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "properties": {
            "visibility": "default",
            "simpleName": "contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
            "kind": "method",
            "sourceText": "/**\r\n *\r\n * @param pCard\r\n * \t\tThe card to check\r\n * @param pIndex\r\n * \t\tThe index of the pile to check\r\n * @return True if pIndex contains pCard\r\n * @pre pCard != null && pIndex != null\r\n */\r\nboolean contains(ca.mcgill.cs.stg.solitaire.cards.Card pCard, ca.mcgill.cs.stg.solitaire.model.TableauPile pIndex) {\r\n    assert (pCard != null) && (pIndex != null);\r\n    for (ca.mcgill.cs.stg.solitaire.cards.Card card : aPiles.get(pIndex)) {\r\n        if (card == pCard) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
            "docComment": "\r\n@param pCard\r\n\t\tThe card to check\r\n@param pIndex\r\n\t\tThe index of the pile to check\r\n@return True if pIndex contains pCard\r\n@pre pCard != null && pIndex != null\r\n",
            "metaSrc": "source code",
            "description": "Checks if a specific card is present in a tableau pile.",
            "returns": "True if the card is found in the tableau pile, false otherwise.",
            "reason": "Provided to determine if a specific card is present in a tableau pile during gameplay.",
            "howToUse": "Call this method with the card to search for and the tableau pile to search within to check if the card is present.",
            "howItWorks": "Iterates through the cards in the specified tableau pile and compares each card with the given card to determine if it exists in the pile.",
            "assertions": {
              "preConditions": [
                "pCard and pIndex must not be null."
              ],
              "postConditions": [
                "Returns true if the card is found in the tableau pile, false otherwise."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE",
          "properties": {
            "sourceText": "private static final int IMAGE_FONT_SIZE = 15;",
            "visibility": "private",
            "simpleName": "IMAGE_FONT_SIZE",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE",
            "kind": "field",
            "metaSrc": "source code"
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "default",
            "simpleName": "revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "/**\r\n * Returns true if moving pCard away reveals the top of the card.\r\n *\r\n * @param pCard\r\n * \t\tThe card to test\r\n * @return true if the card above pCard is not visible and pCard\r\nis visible.\r\n * @pre pCard != null && contains(pCard)\r\n */\r\nboolean revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    assert (pCard != null) && contains(pCard);\r\n    java.util.Optional<ca.mcgill.cs.stg.solitaire.cards.Card> previous = getPreviousCard(pCard);\r\n    if (!previous.isPresent()) {\r\n        return false;\r\n    }\r\n    return aVisible.contains(pCard) && (!aVisible.contains(previous.get()));\r\n}",
            "docComment": "Returns true if moving pCard away reveals the top of the card.\r\n\r\n@param pCard\r\n\t\tThe card to test\r\n@return true if the card above pCard is not visible and pCard\r\nis visible.\r\n@pre pCard != null && contains(pCard)\r\n",
            "metaSrc": "source code",
            "description": "Checks if the given card reveals the top card in the tableau.",
            "returns": "True if the given card reveals the top card, false otherwise.",
            "reason": "To determine if a card reveals the top card in the tableau for game logic purposes.",
            "howToUse": "Call this method with a card to check if it reveals the top card in the tableau.",
            "howItWorks": "It checks if the given card is visible and the previous card is not visible to determine if it reveals the top card.",
            "assertions": {
              "preConditions": [
                "pCard must not be null",
                "pCard must be contained in the tableau"
              ],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()",
          "properties": {
            "visibility": "public",
            "simpleName": "perform()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic void perform() {\r\n    aTableau.showTop(aIndex);\r\n    aMoves.push(this);\r\n    notifyListeners();\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Reveals the top card of a tableau and notifies listeners.",
            "returns": "This method does not return any value.",
            "reason": "To reveal the top card of a tableau and update the game state.",
            "howToUse": "Call this method when you want to reveal the top card of a tableau in the solitaire game.",
            "howItWorks": "The method calls the showTop() method of the tableau to reveal the top card at the specified index, pushes the current move onto the moves stack, and notifies listeners of the change.",
            "assertions": {
              "preConditions": [
                "The tableau and index must be valid and initialized."
              ],
              "postConditions": [
                "The top card of the tableau at the specified index is revealed."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "properties": {
            "visibility": "public",
            "simpleName": "isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
            "kind": "method",
            "sourceText": "@java.lang.Override\r\npublic boolean isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card pCard) {\r\n    return aTableau.contains(pCard) && aTableau.isLowestVisible(pCard);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Checks if the given card is the lowest visible card in the tableau.",
            "returns": "True if the given card is the lowest visible card in the tableau, false otherwise.",
            "reason": "Provided to determine if a specific card is the lowest visible card in the tableau for game logic purposes.",
            "howToUse": "Call this method with a Card object to check if it is the lowest visible card in the tableau.",
            "howItWorks": "The method first checks if the given card is in the tableau, then delegates to the tableau object to determine if it is the lowest visible card.",
            "assertions": {
              "preConditions": [
                "The tableau must be initialized and contain cards."
              ],
              "postConditions": [
                "Returns true if the given card is the lowest visible card in the tableau."
              ]
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Operation"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.OtherLocation()",
          "properties": {
            "visibility": "private",
            "simpleName": "<init>()",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.OtherLocation()",
            "kind": "constructor",
            "sourceText": "OtherLocation() {\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initialize an instance of OtherLocation enum.",
            "returns": "The constructed instance of OtherLocation enum.",
            "reason": "Provided to allow the creation of instances of the OtherLocation enum.",
            "howToUse": "Simply call the constructor to create a new instance of OtherLocation enum.",
            "howItWorks": "The constructor initializes a new instance of the OtherLocation enum without any specific parameters.",
            "assertions": {
              "preConditions": [],
              "postConditions": []
            },
            "layer": "Domain Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "properties": {
            "simpleName": "pLocation",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "The FoundationPile from which to pop a card."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable).0",
          "properties": {
            "simpleName": "pCards",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable).0",
            "kind": "parameter",
            "metaSrc": "source code",
            "description": "Collection of Card objects to be added to the CardStack."
          },
          "labels": [
            "Variable"
          ]
        }
      },
      {
        "data": {
          "id": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "properties": {
            "visibility": "default",
            "simpleName": "<init>(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "qualifiedName": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
            "kind": "constructor",
            "sourceText": "DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel pModel) {\r\n    aModel = pModel;\r\n    setPadding(new javafx.geometry.Insets(ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING));\r\n    final javafx.scene.image.ImageView image = new javafx.scene.image.ImageView(ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack());\r\n    image.setVisible(false);\r\n    getChildren().add(image);\r\n    aDragHandler = new ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(image);\r\n    image.setOnDragDetected(aDragHandler);\r\n    aModel.addListener(this);\r\n}",
            "docComment": "",
            "metaSrc": "source code",
            "description": "Initializes a DiscardPileView with a given GameModel, setting up padding, adding a back image of a card, attaching a drag handler, and adding itself as a listener to the model.",
            "returns": "A new instance of DiscardPileView.",
            "reason": "To set up the visual representation of the discard pile in the Solitaire game and handle user interactions related to it.",
            "howToUse": "Create an instance of GameModel, then instantiate DiscardPileView by passing the GameModel as a parameter.",
            "howItWorks": "The method initializes the DiscardPileView by setting padding, adding a back image of a card, attaching a drag handler for user interaction, and adding itself as a listener to the model for updates.",
            "assertions": {
              "preConditions": [
                "pModel must not be null."
              ],
              "postConditions": [
                "The DiscardPileView is initialized with the provided GameModel."
              ]
            },
            "layer": "Presentation Layer"
          },
          "labels": [
            "Constructor"
          ]
        }
      }
    ],
    "edges": [
      {
        "data": {
          "id": "af6393de9d8d9d19027783ed045ab234",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIFTH"
        }
      },
      {
        "data": {
          "id": "b4f0dd5c360dcbee7fe0c5c8b63353e6",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.NINE"
        }
      },
      {
        "data": {
          "id": "b5930b73a8ace51fbd9c2febd6fc5489",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.aVisible"
        }
      },
      {
        "data": {
          "id": "3effc9580a1e53522a057f94ab1eee10",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.CLIPBOARD_CONTENT"
        }
      },
      {
        "data": {
          "id": "96c895fe8ebb82a85f2319d721551278",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.aIndex"
        }
      },
      {
        "data": {
          "id": "39b20c2a0abdeea71c033b03052ac628",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aDragHandler"
        }
      },
      {
        "data": {
          "id": "a098301aaaa52494a4ff1ecb1b975c36",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION"
        }
      },
      {
        "data": {
          "id": "782d9846ce389104d5ee796d322c1cdd",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.SUBSTRATEGIES"
        }
      },
      {
        "data": {
          "id": "df74ed90bad1daadd34c6242d38c569d",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aTableau"
        }
      },
      {
        "data": {
          "id": "b5e07f78deffe01f73cfba86062599fb",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.EIGHT"
        }
      },
      {
        "data": {
          "id": "a39e5234cb8f53cdb25a10fdf88d7464",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES"
        }
      },
      {
        "data": {
          "id": "dbfa9a27d3308f54425f5f18d82500a5",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.aMoves"
        }
      },
      {
        "data": {
          "id": "6ff12826478549577d9314e0d98dadda",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS"
        }
      },
      {
        "data": {
          "id": "d8cabbc031bc8d6a17db26f5b3cd607a",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.THIRD"
        }
      },
      {
        "data": {
          "id": "cbb7fe372d286415bb6008cb1162f763",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES"
        }
      },
      {
        "data": {
          "id": "4db2251ca0785706c391a39865df2ae7",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION"
        }
      },
      {
        "data": {
          "id": "7712b7af5e54ad991df8d66e4ebf47ea",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FOURTH"
        }
      },
      {
        "data": {
          "id": "1631c78ab9b5ad54d7ec8b4ee3da45ca",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE"
        }
      },
      {
        "data": {
          "id": "8331e83308075c5b78f581f2ae7ab751",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.CLIPBOARD_CONTENT"
        }
      },
      {
        "data": {
          "id": "f96b5e55fcb7fdd680ab544712225aaa",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.SECOND"
        }
      },
      {
        "data": {
          "id": "9e8466fda05d8d1cb5e5501847a89cfb",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT"
        }
      },
      {
        "data": {
          "id": "c058c54129a880b634b5e161b171e406",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aDragHandler"
        }
      },
      {
        "data": {
          "id": "151112ce45e0f6578f977604a1271c40",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FIRST"
        }
      },
      {
        "data": {
          "id": "308ec9d0dad2708701cc188d2c1eb799",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.aModel"
        }
      },
      {
        "data": {
          "id": "14b8302d43120fcd3bf9f90bcd3ad352",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE"
        }
      },
      {
        "data": {
          "id": "ba085b3cd57e858684a03aa11a9ea609",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.aRank"
        }
      },
      {
        "data": {
          "id": "084e4b0423f8a88519d07661a7c3b345",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles"
        }
      },
      {
        "data": {
          "id": "7e12d90aca5bbb4cab137964556cbf7c",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.aCards"
        }
      },
      {
        "data": {
          "id": "73f2754a387473748f61084d8c7ce408",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aCard"
        }
      },
      {
        "data": {
          "id": "2f36e160b23c70cd8ac991e81dbc7ac2",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.ACE"
        }
      },
      {
        "data": {
          "id": "febf760087c28320ab95c7d076d0b908",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.THIRD"
        }
      },
      {
        "data": {
          "id": "b2ad84f10ef557d4ff4936da04c0a865",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles"
        }
      },
      {
        "data": {
          "id": "2c48f4187cf28e42432b0b0c149151ce",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aMoves"
        }
      },
      {
        "data": {
          "id": "5a978d4269a59f67f7e45732c7cb47b3",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT"
        }
      },
      {
        "data": {
          "id": "b6baec94ceb13af191260459b5b634b8",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FOURTH"
        }
      },
      {
        "data": {
          "id": "e4d14e3a29af4fdca76da14a6f931fd6",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS"
        }
      },
      {
        "data": {
          "id": "3202463bd0b68ba97c4e0efe7b80737f",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS"
        }
      },
      {
        "data": {
          "id": "c61d97ef1eb38b53f89832169c651ecd",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED"
        }
      },
      {
        "data": {
          "id": "10515e1cdcbeeca7b0102ae175a610ee",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.QUEEN"
        }
      },
      {
        "data": {
          "id": "8b9a16e9c06834f2df0fd579017c111f",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aCard"
        }
      },
      {
        "data": {
          "id": "cdaa16dd3cd5386084d112e01084b74c",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES"
        }
      },
      {
        "data": {
          "id": "d2e42ffed29d1600f9b20ef9e198f555",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR"
        }
      },
      {
        "data": {
          "id": "c750b8b5c7c74cda13b4d8f09b4940d8",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDeck"
        }
      },
      {
        "data": {
          "id": "026184e142c8f0b1b37b4ac8fa6cbe71",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET"
        }
      },
      {
        "data": {
          "id": "96f5b65a37af3f7ba566a91be3ab5ad9",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aPlayingStrategy"
        }
      },
      {
        "data": {
          "id": "0da36d2bf6efb3e256f355fb71e46677",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.CARDS"
        }
      },
      {
        "data": {
          "id": "ee243faff22a2f813d31057c227ca022",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aDestination"
        }
      },
      {
        "data": {
          "id": "3852eecd9a4af6ea9751c6f9fa94a9ef",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES"
        }
      },
      {
        "data": {
          "id": "18624473f0687d4522adab8fe54d25e3",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.FIVE"
        }
      },
      {
        "data": {
          "id": "c12e5bb32de61e9c9578b0bb8e890d80",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards"
        }
      },
      {
        "data": {
          "id": "9c71e6958f32d5f99e782081b69117fa",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aListeners"
        }
      },
      {
        "data": {
          "id": "d1919005e9973b795c48e51c853a38c4",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SECOND"
        }
      },
      {
        "data": {
          "id": "aa6523109d6e56e5220349db5aceaa62",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aModel"
        }
      },
      {
        "data": {
          "id": "229d3d75044eb1f761e1ecfd1f875201",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aIndex"
        }
      },
      {
        "data": {
          "id": "73d77ffcfe212ce0c57854eaf5dec9b5",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.TEN"
        }
      },
      {
        "data": {
          "id": "15479a169f79761fcf63b0fcf9d06eb0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED"
        }
      },
      {
        "data": {
          "id": "d93062a0f0be643bcf51209058f53222",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.SIX"
        }
      },
      {
        "data": {
          "id": "9d36024a92efa075d8b479f4800cbf99",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.FOUR"
        }
      },
      {
        "data": {
          "id": "854e5c910263460dae7b3e09fc5ff295",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS"
        }
      },
      {
        "data": {
          "id": "9cf08cde0105cabe9766ccaa2a01272d",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aFoundations"
        }
      },
      {
        "data": {
          "id": "a42696b8bfa462788e3fc097d1d9934a",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE"
        }
      },
      {
        "data": {
          "id": "dc227b89ca984402a7cd00f763fb47fd",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aOrigin"
        }
      },
      {
        "data": {
          "id": "7347192395893cd9fd7953f28b29c888",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SEVENTH"
        }
      },
      {
        "data": {
          "id": "c6b2b8c6e952293327c48874b13e335a",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIRST"
        }
      },
      {
        "data": {
          "id": "5d027f59e3b97b287bf4c8f7bef79e08",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aModel"
        }
      },
      {
        "data": {
          "id": "6d03dc7fa8e11b11178337c627e6f0f9",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE"
        }
      },
      {
        "data": {
          "id": "029f11cd1b3df8064b00d6c9be4276c0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.SEVEN"
        }
      },
      {
        "data": {
          "id": "9682de23fca0e4cf393b6a085316f1d3",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL"
        }
      },
      {
        "data": {
          "id": "e37b199ed112cbc4e4b9de0e96a365ab",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL"
        }
      },
      {
        "data": {
          "id": "f266b10a1fd5c4e88d0bc5ff4c14dc40",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER"
        }
      },
      {
        "data": {
          "id": "f3f4d2f5d9e13e9754b2d1720893a114",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH"
        }
      },
      {
        "data": {
          "id": "c6034ec3b2fc66e845d996770a3d04da",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.TWO"
        }
      },
      {
        "data": {
          "id": "2ba633af71d2e6e39f7a4b891820896c",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.KING"
        }
      },
      {
        "data": {
          "id": "6e477ff48812eb76f97f698fdc7540a7",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.THREE"
        }
      },
      {
        "data": {
          "id": "603628589d65d92839be9ce0fe8a4f8c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.aCards"
        }
      },
      {
        "data": {
          "id": "33d760804d5b6fc234dd750e9c1463a3",
          "source": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE"
        }
      },
      {
        "data": {
          "id": "dbf8626e01099637fdddaafeadd4515b",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.aSuit"
        }
      },
      {
        "data": {
          "id": "3ee7296f60aba6f2bcbf9876049a96cd",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aModel"
        }
      },
      {
        "data": {
          "id": "bf55ebb47da8c04d3f82e9dfbb89df2b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aIndex"
        }
      },
      {
        "data": {
          "id": "a6854f22e75f59ff7b32224f80289c67",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank.JACK"
        }
      },
      {
        "data": {
          "id": "25e58960261d9dde44f33b4a16d4b060",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.aCards"
        }
      },
      {
        "data": {
          "id": "69e95aed87e4f29b56d6c2c8040e39da",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING"
        }
      },
      {
        "data": {
          "id": "73b805c16b2ecec238a028b691894406",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscard"
        }
      },
      {
        "data": {
          "id": "1e4cc54b076b96a1e58826bd7211de2c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING"
        }
      },
      {
        "data": {
          "id": "83a44dfeeac11b0429acde0af57eec6c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aImageView"
        }
      },
      {
        "data": {
          "id": "1f6737fd888971f7f5b3f596b833444f",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING"
        }
      },
      {
        "data": {
          "id": "3a4c94e6d9eb40017f8037fa67c36bae",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscardMove"
        }
      },
      {
        "data": {
          "id": "040eb3efaf556cb3dce34f09da0c044e",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH"
        }
      },
      {
        "data": {
          "id": "f243845f8dc73d173be1fe57f09db5eb",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX"
        }
      },
      {
        "data": {
          "id": "32a28c57db371c268d5f4d1d40590200",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES"
        }
      },
      {
        "data": {
          "id": "48eba900c69f2c1239af8dba58381e18",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "hasVariable",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SIXTH"
        }
      },
      {
        "data": {
          "id": "0d50f2db4b933636a4ff0bc7cf0d82f8",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "0d140e3e159e264d339908ec793d7f54",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.aRank",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "8cd8e9b1b94ab119fe47bd8165ed9a36",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.HEARTS",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit"
        }
      },
      {
        "data": {
          "id": "a68564f128404e558137fa8251528e08",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView"
        }
      },
      {
        "data": {
          "id": "c8e0c7e020032ffc3914216eacdd2968",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit"
        }
      },
      {
        "data": {
          "id": "6193a8def1be4f917946068d51b43615",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "71845584de3a991d2d5779dfd7009f22",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FOURTH",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "df99dfdf337b4f01599d072aa0a88d81",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "f4699d305fe9cb8a347b726f38eb50fe",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_NEW_LINE_WIDTH",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "705c18fd8f3cb193865ead40ecc0d763",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "6d0fd70db58c0dd26c64dd28cbdcc56a",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "5e3247ddcc5e583c94d0a36f0476d838",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "f86876dbabab8e95a54ecf1b797c177a",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "e48049955f0968c18281e1027da3aee5",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.aCard",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "e185558b3d81d7fefb1885dbbcf6fb2d",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "a3b6793287c658973a1d73d1601f2104",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "cacf93e33c2eb3fdf1a35fb5d3cce2cc",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscardMove",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "4ecb76bcc51fffe12234d9c055ae56aa",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIFTH",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "1060b8f2c0060e95490ff1fc6951fd3f",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.aVisible",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "463f99e8123a55522abb02c08d219e27",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "4cbfc51f7fcb5259ed092ae0de12becb",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView"
        }
      },
      {
        "data": {
          "id": "ab91d124c8d550411df6ed61b514fdbf",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aTableau",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau"
        }
      },
      {
        "data": {
          "id": "817002b5dab7003839507a1090e9a0db",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "9e7879d2fb9c6dfb8d7aad1259440d70",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "6f3e65404c9dd8c28ceeb8e5c3ecb016",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.SUIT_CODES",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "9242d96770ca77194e8de58066aec82c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.PADDING",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "dedb322eef4defb603952049f9817a89",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "94f92b03539c938432e9c1893ed40a69",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "89fcc4d1a312f71a692ab83a48d825e2",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.aCards",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "e20311dc81a7e208189afe65c42d29e6",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "85c2c264cb39a1ff0de890a84eed5734",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.TWO",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "257e844e8645d4e4b6a10e2a1edc6582",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "75d79dbaebfe1acd01a933a903e6352c",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SECOND",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "ce3d5722219f20b8e28f1750f4d7bee6",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.FOUR",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "51270ddf5082d40fef54038f6fb8fb75",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aOrigin",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "894b14571dfe5f1499113b83c4c7283c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.TITLE",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "93fc7015602bac873da0be2464eb1c69",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "57a86592e6a354777cc80173d59c9d08",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "acd2d044bf02e6b9f37b177bb07b735b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.PADDING",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "f09277f4b010f94d938e869b0dad003d",
          "source": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView"
        }
      },
      {
        "data": {
          "id": "9d5371bcf8df4d6d195825bd38cbb9dd",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "5cd9e99c576001298caee3c560ffda67",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "4e92dcd6706e7884a5d11988453f8d46",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "6b7623a60352c572f6598bd958e0d015",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.TEN",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "d386df886b967ae8f3fbf60d2f9d0615",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "303e1e99bf564e77c1d0a93ce6349670",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "00d310a15c7f93d99225035296edea1f",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "a42c4b70d125b0b6073efd7bfd38d6ae",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "790bbac4477becd778b1c4c380aaf5ce",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.SIX",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "c61813284b8fdf289fd61aaac48b894f",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "b81878a308ee45333c5f955e470441ce",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.TO_PERCENT",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "831e411569ff42aeea9f56ccb2871d2a",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_NORMAL",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "3407202cb606b90a8ad4014f39f5e77e",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.NUMBER_OF_GAMES",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "90f3258cbff6f5c7cd959e6c5997821c",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.EIGHT",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "3c7421ad6ca86d732a2b2532fba464f8",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aIndex",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "676d54c2b722c581d9b408cef8cb4c2f",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "c74f1c9c7b817df5e213408c07b70acb",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "2f2feb0ae2aadfb5e275225b4fc0068b",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "565c6348de3b15cf2b291459ea1e28e2",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "f1d64850d896c79bb6c670bb6ea8caae",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "a8247bb80bef3b306b188c7944c29a5b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.aModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "8b3c41e37bd1d4265ef6ff0d18f522e1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "289979f84ff1213069eb4be7d1ef7808",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "1048bdabf9a6f0b7c7cab150fb440cdf",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SEVENTH",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "cf3b829923442b08f286dcb525e81402",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "dc6dc9088ea46cab4772fa39b3abd0f6",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "8aeec9a6c0406f28f6ec8b08e20e990b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "8c44c41acaee9718b1d3df59a80e7a7a",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "c40e30188e01b6f58c8ae763121ec059",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "86b89a178a1fd29702572e4edc8a46c8",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.aMoves",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "835e79d47abbabc81d42c8cd12f920d0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "025b70062e7b8c20e867066cd0af096a",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_NORMAL",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "fcf565642260915b525d25dcaf6bdfb0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "c341eae02c03041b186fc0d46d88a477",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.KING",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "81f2f16336b657436c20c3c93296b071",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "016099ceb3af0dfebf7e291ae1ae7583",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.BUTTON_STYLE_PRESSED",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "be7eae3f21e6dbc7b8e1f1becbc26b21",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aMoves",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "fc0cb676bb725f492933faacfab3ac30",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.RANK_CODES",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "9b06ea286227d53a58f31e8c97d11439",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "f77a678dc1a24c5d8aeed3c6edcca268",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "18899a11b818a7ce92d5db870dc929f2",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "6360e215f85bec1bd5c387e73c30901b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "c6e3fdd0f2598b37880169541814b32a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.NULL_MOVE",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "6d0652f0b231510e2b0421fe8ce778f7",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "dafe7f36fa75da462ea3d4093d622041",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.THREE",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "0aa3a6f564cc130c6fd437feff49ee25",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.PADDING",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "8f7dfe2f9f554924b3f0787ec1638b4d",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "92fcbec1235488a11a2ffab5585c60fd",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).2",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "517b76a96a4dbbf4e4a993e132777e38",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "3baa2356f460d7ed0d250b4d0553eb41",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.aPiles",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "d771ba971072f14246defbec5ebb030c",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView"
        }
      },
      {
        "data": {
          "id": "f609b2d80f314008c230dbe3c47c49de",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[]).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "17443cf96012880245082dba7f837125",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "11918fe6e59da43bb0be85275c480cf1",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_SUFFIX",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "c1ad7a8bb3c408a5b2de6429505dc70c",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.NINE",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "a4cdac9884751e9f2e91c0fbdf4c3d47",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[]).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "59d784c39940e447a662a2ac2f14694e",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.CLUBS",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit"
        }
      },
      {
        "data": {
          "id": "65889eba8e72cdc24520bc57a6b1bd6d",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "edeeb8c44c945f76342265b9d52e5bab",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.FIVE",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "3d27ca3725a0fff66e3d804dcc83171e",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.SECOND",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "833ffeeed8789c0c89bc534156dd57a0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck"
        }
      },
      {
        "data": {
          "id": "b2e863c16e625754ecf0c6dbaee86fe2",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "168622a883933226e736ef17c8eb7cfe",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "0d45ea465817ceef381b822b466ca406",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aDragHandler",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler"
        }
      },
      {
        "data": {
          "id": "31f8a11671d40513e6a312ae2eb218da",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "dafcc59886566754e18cfa3d420be930",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.aCards",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "e790452034f305faa875722440895f7c",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[]).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "4271db4a38d147fa5d8c354dd87278ee",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "cbf56f4dbfd59d1dad38e8c927d1b5d0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "2d462fa8a519a6a1833d4a61a0d2a2eb",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aPlayingStrategy",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy"
        }
      },
      {
        "data": {
          "id": "bb4a2c0d7ec360f934967cefcae7083b",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "3c1e36f41ed5f5d8b6114a584547254d",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.SPADES",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit"
        }
      },
      {
        "data": {
          "id": "41af8f23b0e3e595bb8192fd58a508ee",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView"
        }
      },
      {
        "data": {
          "id": "c190ffe57d6e6219380def2b47084249",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "1cce687bb252e017755a07a382d1f91b",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.QUEEN",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "8f6a3723b7280eae22625db95a929577",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "b3c92de3d30796d4263044eed5b4197a",
          "source": "ca.mcgill.cs.stg.solitaire.model.OtherLocation.DISCARD_PILE",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.OtherLocation"
        }
      },
      {
        "data": {
          "id": "ad8f6ec81bbaedf2bc5eee96ddc307b7",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.NUMBER_OF_GAMES",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "1219360101a4b705229854396bb42a58",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "b92a97111c1f168334d96167f298655d",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.DIAMONDS",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit"
        }
      },
      {
        "data": {
          "id": "ca71f7b4061b461c46c9f13bcf2cc34d",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aIndex",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "c83ef0f71066ebef44a4e594d2d13852",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.aModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "bb7031aa4a6add93a56807618f1c2625",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.aIndex",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "c3cf8c179f7ef9fafba47f52af854226",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "2d0f8ca20306895ea8c4b7a2b93df74e",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aCard",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "3a245e288140ece23ccd28f8b0a5c0cb",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDiscard",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "fac3248c1f5dc535f02cd35084f4d622",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "4fde14553710b00465895c657072d666",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "8b0318834f2bccc59eee2c6894f90e2a",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "e6e0575b6d38d96dc366fde2257d4f5b",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "fea5c587e4f993467cc59bc5af8cc7f1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "3da27319656298451d7960bd353dcdc5",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.aSuit",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit"
        }
      },
      {
        "data": {
          "id": "c709d1e768f589768acb8844787b1c1e",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "2ec95a04b0176221d9d3f3933fd48f85",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "ad0974558eadc64c1be1546b65be18b8",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "95a45075a4c7e454f071820892b39efd",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aFoundations",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations"
        }
      },
      {
        "data": {
          "id": "4d08bd80c4f08b4b998145b0123856f8",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener"
        }
      },
      {
        "data": {
          "id": "3cb058dc1f5752ea5da6bd1ef9021449",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "34bc890edbd444f5718fc055804027c9",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "959a8ea3b4f220a81d6337078c239a8c",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy"
        }
      },
      {
        "data": {
          "id": "01cdfe5bc4305eab9eb530c94e43c531",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.SIXTH",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "3abdcaa643019229bbcdd0757bbeb7f8",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView"
        }
      },
      {
        "data": {
          "id": "596bb54e980d074275b38c226b4d23fd",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.WIDTH",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "5233686a1fba5fb17eab9ad282d7dbbb",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "de0507ff060b974801b4f484116d1649",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.IMAGE_FONT_SIZE",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "f986afbaf959256c9b7f0a7a4bd3e82a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aListeners",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener"
        }
      },
      {
        "data": {
          "id": "cd3749018874810dd318011c90f10056",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit"
        }
      },
      {
        "data": {
          "id": "21516892b3dc1f20b19fd1eb73dd4628",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "74b984fce894c231f5553f89dfda70d6",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "bdd950abe597f828b688dfc05d0cba31",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit"
        }
      },
      {
        "data": {
          "id": "50bd0bc343a442c2bdb1f558a90161dd",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.IMAGE_LOCATION",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "0bec6af0124e8ad2d2524dde7fae1382",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.FIRST",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "fd4a9aaabc66ff97e4b5586206a40b66",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "2f70d47ecf115e330497342ff7c1eb25",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile.THIRD",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "5e2a4187de83a4883e87441aed1f53a8",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "16a02b8dd402cf424986e39b9fcac628",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView"
        }
      },
      {
        "data": {
          "id": "6f341b2322e0ddd5d80fb36b1b48b698",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.aDestination",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "4e033fe1627e5189ccd2f2f7ff137a39",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "0dbc1cce4851fcebd85b740d3e82f55c",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.CARDS",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "257f32bf90bec8ca11ac515bdd859dee",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView"
        }
      },
      {
        "data": {
          "id": "a1aae787e485e1bcf46ec55166300f63",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "9ce20dc7438239a9c1b1b96a04751593",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.ACE",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "88e9be7ac586fe6084201fe99a93b1bd",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "9eef2a0eda878b57e66fb60df4f41c3b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "39306d5bd7c1b2d00062313ff1f86ee3",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.MARGIN_OUTER",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "99d2c40bd04725bcb73d60b297eb9cbc",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "ee025a0333ce996b75dbaa4860ec95db",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.SEPARATOR",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "bb3bca07440fcf35aacd488fda16223a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "f2003f1a939bbfad3946d3bf8f739ebb",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.BORDER_STYLE_DRAGGED",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "3f0b8c72b6a4163154470830664c3265",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.aDeck",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck"
        }
      },
      {
        "data": {
          "id": "ba2e7ba5077402585eb67302754f17b7",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.aCards",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "c633d89aec870b23f01bf9e212a9953b",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "f039fba87cc4ed5c70d2b1290fae5eb1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.HEIGHT",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "0c485679dd93f3f63356819792419385",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FIRST",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "16a16dcfb8d51d8f867ed53fffc076c2",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.Y_OFFSET",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "30240e957449b8e905629dc51f25c300",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.ALL_CARDS",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "25396fbe96ec8c05c78aab69d5523a52",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "f79682ea9924dc1360f6ac9ac5b87cf6",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.THIRD",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "dbdc46d54ffee0b62f106089965e28e1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "771b04acad063e2e687920196170ab04",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.SEVEN",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "ecd85d1e399df9a8de2309b7fc3d4eca",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.aDragHandler",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler"
        }
      },
      {
        "data": {
          "id": "7617c231636043ced8ab1abb6ebab80a",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[]).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "array type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "cbc273772ceefd4064e55b18149f875b",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "c5dbe7d2b3e636395ff00c89059cf6a2",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.aCards",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "dee28cc6f1c6d7a64dcd4bf2c246337f",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile.FOURTH",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "238ada6f799a69b859732276fdddef8a",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "e8a2cd021c75303d4ea65c5d098bca17",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "7431ae5aaa86c6a79579721b3561b073",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView"
        }
      },
      {
        "data": {
          "id": "710d5707e49c212571ca69f0bc7b28b8",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.VERSION",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "8b1a3e6e602988286c8ad0d7d0824eb6",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.aModel",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "900606c22acbc4020c971016f7ba5037",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.aPiles",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "00772d2feae48c7aed2125712649e27f",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank.JACK",
          "label": "type",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "cd7321ab405eb9425c3c4a92b7266b3e",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0"
        }
      },
      {
        "data": {
          "id": "05da475e4b46c055c193ef8e7ad36afc",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1"
        }
      },
      {
        "data": {
          "id": "e8284eb996b3032b2eab6305770f57dc",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1"
        }
      },
      {
        "data": {
          "id": "e22706ad120ad85f7fbdc6dfcbce09bd",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "32f445b6787d1f914677d3ad890d08a1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "f0dffb5b90b1fd0c5b88c425ce3d5bc1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "374a2ad28a2f07d5df9945cc346360fa",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "5523a72e23ce0cd7596b47b0ad54f1ba",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener).0"
        }
      },
      {
        "data": {
          "id": "1eebcf684c467732d277c42d33525796",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit).0"
        }
      },
      {
        "data": {
          "id": "3e3da719230fa63273f9b5f59c39956e",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable).0"
        }
      },
      {
        "data": {
          "id": "c6be8aaed8ba7a40e11b0decd52623d7",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "e1ecfc397ba88daccf15c0f34a47286c",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0"
        }
      },
      {
        "data": {
          "id": "233918b3e57de0af6a0ad0a56adb1a9a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1"
        }
      },
      {
        "data": {
          "id": "91baef6af11f0a1715bc5b37c54c1f00",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1"
        }
      },
      {
        "data": {
          "id": "3637d128ff11eca060f9c00aec5c8c15",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0"
        }
      },
      {
        "data": {
          "id": "0621ad5f18592dd96bd5a9fb5f74cb3b",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1"
        }
      },
      {
        "data": {
          "id": "b2e2ace997396dc30780d11a32289a41",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "41f960f60c16d4f4306f78502e7091c0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).2"
        }
      },
      {
        "data": {
          "id": "4b08fcf7194cde81cecba347b4a4184b",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0"
        }
      },
      {
        "data": {
          "id": "9d870baf20a6ceb7444c1099c96a36da",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "424add0e252e61337022cc3e2bc38f22",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0"
        }
      },
      {
        "data": {
          "id": "51f8628e193583dbcb18f6691afff392",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[]).0"
        }
      },
      {
        "data": {
          "id": "f39328bfe0fee9bb4e22e57f84fe94f9",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1"
        }
      },
      {
        "data": {
          "id": "b5b1417cacc1407dbfef7c0e9c0d3ef2",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0"
        }
      },
      {
        "data": {
          "id": "4ac403b15184dfebb0d9a499a2dc29e5",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0"
        }
      },
      {
        "data": {
          "id": "d35f492e6afc7ea5a4b54ebcb2637d0c",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "6e642ed093dc4ce02090a89c31c51d74",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack).0"
        }
      },
      {
        "data": {
          "id": "86f29f7135e36759de3b8d1c7a3f4cc8",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel).0"
        }
      },
      {
        "data": {
          "id": "804c90ed2caee408c1f6e180513e2e34",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView).0"
        }
      },
      {
        "data": {
          "id": "3248432e0b0e2ecc1df467ef314ec648",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0"
        }
      },
      {
        "data": {
          "id": "49e7ea826d02f61e891a935470ce42e6",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "307b66fa2ee780e8fa9d39d95519b882",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView).0"
        }
      },
      {
        "data": {
          "id": "9369ffa1b68875b3b43963cb65dd801e",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "8b4d1f175eb08833f59a51b3c09b8d01",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "45d0a272ff42792682744f5089d56d7c",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[]).0"
        }
      },
      {
        "data": {
          "id": "29ffb09a6d2388c57e3057be0173b735",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0"
        }
      },
      {
        "data": {
          "id": "fec7fe37ee265dad4832b50ec6deb8e3",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location).0"
        }
      },
      {
        "data": {
          "id": "f55cb1a3fb4bd4e4669f386195f0929b",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1"
        }
      },
      {
        "data": {
          "id": "e8550012ec18f47c7d078d2b7421f3f3",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1"
        }
      },
      {
        "data": {
          "id": "48958ab33ebdaf95f15ce89b110a8ae7",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1"
        }
      },
      {
        "data": {
          "id": "1b5ec7304c7f9b1cb85e411d8c6627ac",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "a7e64c5f614f7f9d15bd778f62161fa7",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1"
        }
      },
      {
        "data": {
          "id": "635377c532fe528f209587f4ba5a0222",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "5205cb0dd1995dd10f7921f8bca4ae60",
          "source": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0"
        }
      },
      {
        "data": {
          "id": "136fef0bc3cef5967431d5ce6fed21c1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "dbdf101f9b07f8fa5c61206c49f24d7c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent).0"
        }
      },
      {
        "data": {
          "id": "4be52c088e039245e9782360f783334a",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String).0"
        }
      },
      {
        "data": {
          "id": "7aa768888b3454b1d597640c94313536",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).1"
        }
      },
      {
        "data": {
          "id": "4dadb160883e6d3156e49c5df444afa1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "86d65b543a153b43fdff4258e8a719e8",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0"
        }
      },
      {
        "data": {
          "id": "94b377f183303589254c64256bfed3d4",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "02b5d3baf764ed9483cd9c54fb0e072c",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "afc9b1925dd8f1a81c20125e38f11e8b",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[]).0"
        }
      },
      {
        "data": {
          "id": "11f025cccc3b5cbbf6ff8e8330e9bbd9",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "dab74525c3f8d1ff4c5812bbf39b4a4d",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "1555a85d4a7180bf47bb4a70e16ef422",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "a5d08d2c50d8228cb85cd76c346edca6",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel).0"
        }
      },
      {
        "data": {
          "id": "e8f010797e5235cd4d4ba7e815a7e6dc",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "04d5d9aae34adb9d88938e6d2c8988f7",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "3e76a1e982e51dd9c737d9dae27fcd9a",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "737797e9e2e053d6bbeb681d70a6fb61",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1"
        }
      },
      {
        "data": {
          "id": "061f4645c6df4ad26b44d28971ce958a",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0"
        }
      },
      {
        "data": {
          "id": "baf2dfe63dd3fbeedb9f2a2cbabe2ef8",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "b5585e37dc0a47e403c69ed0c2d2b7fa",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1"
        }
      },
      {
        "data": {
          "id": "99a29d21ed7a03e9180636833ea1892a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0"
        }
      },
      {
        "data": {
          "id": "c9145ab5bd6dfaf18b1c86f22d6999d2",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1"
        }
      },
      {
        "data": {
          "id": "e952cb912238a10017ed6d02d3b27da9",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1"
        }
      },
      {
        "data": {
          "id": "c39f56783f0c100208fde4b0f32112bf",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0"
        }
      },
      {
        "data": {
          "id": "23ed4626c9246573c03ef3a47cc14a91",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1"
        }
      },
      {
        "data": {
          "id": "64fcddb27b20bddafcdd7d5cba20f186",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "1d6f260edd225623558c2e3abd54b380",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "407f71016db023882dfb05fe0fe40cb3",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String).0"
        }
      },
      {
        "data": {
          "id": "f0a942732036ba859ab3fa345a5c945b",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int).0"
        }
      },
      {
        "data": {
          "id": "926c4a1ae484a22780490e99f9ad4ca0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile).1"
        }
      },
      {
        "data": {
          "id": "ef0eacfa096c010c6adff587e86a74a0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1"
        }
      },
      {
        "data": {
          "id": "30ee058b733b48b796e751b07b4237fd",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile).0"
        }
      },
      {
        "data": {
          "id": "26279199b97a21b228eec23a9ba4b979",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0"
        }
      },
      {
        "data": {
          "id": "a0db47a7d3530df5a203f6267ee0ae37",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0"
        }
      },
      {
        "data": {
          "id": "fc5c7ad109acb699fa0a78ccb61561c4",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "4a16ba7323e4f2e299e1703c3326710b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage).0"
        }
      },
      {
        "data": {
          "id": "f7486f4f06e16562d638b6f2ce978b38",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "87017003652c7fbec5f829b837ee0c6d",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile).1"
        }
      },
      {
        "data": {
          "id": "ded1485c0d469db7bdb81078de1af7fe",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView).0"
        }
      },
      {
        "data": {
          "id": "6a01ab34b58fc24ffe9c22fe72baf70c",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "ae7ca390231abe316b465ffaff1f2b3b",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "4a4f0cd91bbb89fb97afd5bbd738f97a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).1"
        }
      },
      {
        "data": {
          "id": "fa743d094223c2de48d2af4b16bd4367",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel).0"
        }
      },
      {
        "data": {
          "id": "e6d7e506d9e5638da847fdf624d53b69",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0"
        }
      },
      {
        "data": {
          "id": "41af77bbbf52bbfda8f6199742576a99",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "e7f26cd08c8bfebb338c7df78a13feb7",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile).0"
        }
      },
      {
        "data": {
          "id": "4f4b7581e74d38a0e1db401dea9cae99",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0"
        }
      },
      {
        "data": {
          "id": "fa782527bcf5f5c9cf8684c139a118c5",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).1"
        }
      },
      {
        "data": {
          "id": "bd5fd9d53e303d6c77b7fc4725a1ea26",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "97e01bcec3ee8c04b2a72c8075bd1145",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "0d57901ca927424896b8209a79f996af",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck).0"
        }
      },
      {
        "data": {
          "id": "5053a35289e7e01d30b066c5cddfef22",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "357ecb0926f3a7a8575f257b95864b94",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy).0"
        }
      },
      {
        "data": {
          "id": "74f7b52730cddf913c470261949bc40e",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String).0"
        }
      },
      {
        "data": {
          "id": "fcbc3d63e72c09b7302176edd66a24de",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView).0"
        }
      },
      {
        "data": {
          "id": "7b9ec89cdb6230dfcf47785fe64075bc",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).0"
        }
      },
      {
        "data": {
          "id": "306d569c09506249455515d1d928f04e",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView).0"
        }
      },
      {
        "data": {
          "id": "6a4a52c21fafd719085c905fbc951731",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit).0"
        }
      },
      {
        "data": {
          "id": "3ec38bae8234504013b00df2ff0645bf",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile).1"
        }
      },
      {
        "data": {
          "id": "df601cedff73e036a27a438637bb6e29",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView).0"
        }
      },
      {
        "data": {
          "id": "7794c76c4db1ca33fa83bd70a9f844ca",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "11324cd77a03365449320b2b7a504f6b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[])",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[]).0"
        }
      },
      {
        "data": {
          "id": "7691c7a27d6ed59388a6cab5d421c929",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile).1"
        }
      },
      {
        "data": {
          "id": "58b9807c0bdf2dc71293b65f7372018f",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView).0"
        }
      },
      {
        "data": {
          "id": "dfceb18073f3968b2922597881eb98be",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location).0"
        }
      },
      {
        "data": {
          "id": "a1359459300864b7b27e8fce250fca1c",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "2bca87a532f3f24382fe377f13520b4b",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "42e48c4f4134f296268fbf0b57d599c2",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "hasParameter",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card).0"
        }
      },
      {
        "data": {
          "id": "1cba8dd76e91f7163f520c5ed383ecde",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "a0536cca4ec471c03d36683d17377d0d",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "9f9e44ec97e6ab1694342669ca464046",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "f7175c5a3a9075aefd54fbe525cf1aa9",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "76ec4afb2918bb35741839c05a406459",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire"
        }
      },
      {
        "data": {
          "id": "0e6a6553bb68743e8cae2fa02ddc97e5",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "e62893cd39aa6b4001627464f625d6b7",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "ec964850583b4808fbe215ebde2a3a09",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove"
        }
      },
      {
        "data": {
          "id": "f488978607c01a84babf13afbc3fa21b",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "ac94f9a99a3943181082846c6b99e646",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "5613ec86602efd4e73d0b5aa840c670e",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy"
        }
      },
      {
        "data": {
          "id": "63a8bb75b67733ffe99e3aea91099753",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "fb9a8833215821168fb0a1f6d3e62a02",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "ae36070f52b73a37c9fddc2477e9a707",
          "source": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "ab085a24f46831bad257d669ee88fa9d",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "b815e2a31deb40610b53ba19a6d84c8b",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "cf4ab66ebd8889a71797f1836153c135",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "6ed2f5c44cdcc346a4f1bce8e4c4f936",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest"
        }
      },
      {
        "data": {
          "id": "5d729575d8a5f328757a75c71c8561e4",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "ef5a7831638ceab4b8deac5f336ef88a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "683884d40f1cc1ebcff2d6ddbd5a9fd0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "0ae98f66e1a266d116c6eda618bf53d9",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getNullMove()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "a1e0b2e95b43dde29e34658fa0599531",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "e1126cc5bbe8b6630c20495b7471ac42",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "264e5120fa51a73c401167e0b128454f",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "ea7558ce80752e3b2db7a0cf8cad31ed",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "d19d79121919bdc3e2b1556cb857adb0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler"
        }
      },
      {
        "data": {
          "id": "1e33c4aeb5a8ef301a590bb47334d19f",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "30b1dde3b305d2731a30199b1181d325",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "d568aa47629ae107d76223cd154ee85d",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit"
        }
      },
      {
        "data": {
          "id": "0d1ec3f5e25f662a4c36cdfb5ec7ddd7",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver"
        }
      },
      {
        "data": {
          "id": "1e4bb0b80ec275922dfa7872b12f0893",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.toString()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "680ca6afa81ebe97623ada31c4c184cc",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "020bad0a8e008216b62fbbfc1d5047d7",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck"
        }
      },
      {
        "data": {
          "id": "671f3e7a1142bc173484a539080f85f9",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "1d3d71272f75263f2be60ed9166c8999",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "21d70921c75d7d98882b75016bdc7aeb",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "04c404b79c34322c50b6b9fce40abf15",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "40993dd841d8b06ebc714bc9d6ccc42a",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "9400271f5a6906dbc296d642ba79c170",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "aab5a86286d64220e8cd8f48c742b387",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "7d6f1ddbb605389fc660951663f75798",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "9d036f98297f876120f33977f892f297",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack"
        }
      },
      {
        "data": {
          "id": "a8cbf0aacf8b249b0824777c1732013e",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "8e3ee48ea25dadc07e7714d1afdfd69d",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "69e1dc1e031c8dcf90e65734d53f4bbb",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "4d23cfa67c51f86c66960274ba8dcd41",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "ab818f27997d7d79ce40ee3f84533dda",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "f7a4b72e94dbf540f497c45d3b19e4d3",
          "source": "ca.mcgill.cs.stg.solitaire.model.OtherLocation()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.OtherLocation"
        }
      },
      {
        "data": {
          "id": "aa045285210c6738d17930ed592da7f9",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "eeb6fc2e96185b9317a2d8af49208fc2",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "ef3f50a8593d4fdaf755fe28bfa5b269",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "780c26e35c874b093b3b6d1c3f20b720",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "ee199d9f793a01af383f5081a041fb87",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "3ab88854f7c6e07e906a9ce7f4181259",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "754818ce9569af530f48d4b1083c7c32",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "a30a3b989aa1161f9ad54c4858233cba",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "ec3d83fa47c0ed3669eb6c4398cea589",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "e1b1497caa510adcd5ea7e981ed49dd8",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "1d1b56c5b048b89cc86dc4af60a05d66",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations"
        }
      },
      {
        "data": {
          "id": "a69afb20998a1b9d7e99ac39ea04dd05",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "c55dae5c958ba21293a4e74ddeb1e9e2",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "228a62d409fc42adb1432cdb723a14a3",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "a696f8cb7ea373c1249a665dc703d0d6",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView"
        }
      },
      {
        "data": {
          "id": "8387dcc7dfe3a62db9e6b982133695ca",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "16b0276d65f7901ad1d5d771da5dc20b",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove"
        }
      },
      {
        "data": {
          "id": "f2c583b66427f2e384f950fa02056897",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "992dd9ab8cd568ba611fd8b1ae12d439",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "c5e9b1d7531c44ff7ab00456dd055fb3",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "834f9ef8ce3c8ed6830bbb8db36a666d",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "9c3daf72aaaa77b0f84157bea40b4901",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "0d128ab2cfa3d607075a90d519dba7f2",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "8c00fc29070b71b4f0549a8dd440737b",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau"
        }
      },
      {
        "data": {
          "id": "61afb5c3057515100d72d07ba70da4a1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "f89aec5d9c00b11cf2fed9b0eed1c4a2",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages"
        }
      },
      {
        "data": {
          "id": "f2fdb21d6a67565a0169fe82a7676b4b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer"
        }
      },
      {
        "data": {
          "id": "1aa3aa34958ec236eb1376685d96bbe5",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView"
        }
      },
      {
        "data": {
          "id": "0202f7daa54e759bdee8f0d143e65903",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "4915c5089425393cfdffe5c0e393e730",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "25a7046e829f6a874b05574f4ca9dde0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "7fab29ca54674ae7a4eb2da8a5918b23",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "c6df4159e9cbc36552ef55c7cf3430af",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "java.lang.String"
        }
      },
      {
        "data": {
          "id": "e808bc4abe57cd4646d97f9bf1f30fcd",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.iterator()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type argument",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "7abb2c939186f41f368a2908c7ee955d",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit"
        }
      },
      {
        "data": {
          "id": "ebf08cb2f94495d5ff62f83e2b775cb3",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "8cf3cfe60518510726aac57a51f3c6f8",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy"
        }
      },
      {
        "data": {
          "id": "2b3057313b71a8c1730bb77f7d538c4b",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "a445021f866b2080b9f4b006eda3b548",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove"
        }
      },
      {
        "data": {
          "id": "089f961751c0f2bd203ebfb066400e2a",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "int"
        }
      },
      {
        "data": {
          "id": "a20627a8fb05bb0b65b8a0dce08def90",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "c7cd54aeeece6efe306f12eaf880a259",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "2c1f57602f4767d03f68a3797ba5061a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "49448216a0165d511e2b2c50d9e45aaa",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "383d62b8dce39e7df3d09228e7075d49",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "2878c889a903bd80fe920a1e6085ad76",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView"
        }
      },
      {
        "data": {
          "id": "42138ba94d81e9d048cf1f9fe45cea33",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "boolean"
        }
      },
      {
        "data": {
          "id": "38b27eb8811abea61dc0a714153601bd",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "fc60bc96f0ab2507dae71d87f42ede80",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "4993d76cf192659c40a6b1bfe4ae7d9a",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack()",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "b614a648235e72e6d5b80e7c7ce7e7c9",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "f3d9eb7c0cddfffee2c106a2c0ac0110",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "84d8cf37e9ded0825483f2251d9af514",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "4748e705769f513cfb9f14fbb557c0af",
          "source": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "returnType",
          "properties": {
            "weight": 1,
            "kind": "type",
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "5659b02c65bd30b3f661744914fe1522",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "9ca28f5c9eaa3499f1fd45dcefef477b",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "ff50c05408988001f2cf526018d45655",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()"
        }
      },
      {
        "data": {
          "id": "585087eaba6ab444909b23b4858e2c27",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)"
        }
      },
      {
        "data": {
          "id": "aaad29da2aa155f6fa097f8af1f2378a",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "9979d5fac938b0219c7f21117e3be754",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()"
        }
      },
      {
        "data": {
          "id": "9e9ff8788d6f4a62ad47328aa77cf3c4",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()"
        }
      },
      {
        "data": {
          "id": "7f895e44e0f8570f9663b4e02d6d9474",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()"
        }
      },
      {
        "data": {
          "id": "196d33e0177a7b15e68e8e91941d1724",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()"
        }
      },
      {
        "data": {
          "id": "e65168f2eb76d2be5752a1683894fb28",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()"
        }
      },
      {
        "data": {
          "id": "3bf51104603cd0c74e9c0503ed62903b",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "5fe7897c93d8cf336df96ed6b08a8cff",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "192da5be63e033364e8cc5fab7ec2902",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()"
        }
      },
      {
        "data": {
          "id": "81b1c676f11d0ce2b0ab4854c9c64734",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)"
        }
      },
      {
        "data": {
          "id": "ff9656d206ec99a8d5e8cce0b4bebe5e",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()"
        }
      },
      {
        "data": {
          "id": "102f59cb4f6da8a1d3efb9d99c513989",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()"
        }
      },
      {
        "data": {
          "id": "6ad724881e0b9e4c72a4bd44a63061be",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "b52c80283ce76f8bdc47b1967cf66a0b",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "a902456543d94f074830fbc149003046",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "32dfcc8ad68130694082716b5956fffc",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)"
        }
      },
      {
        "data": {
          "id": "ffce82698a57b5261a0665a915f885c0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "3f0c638ecdb555ae58485bc55eedb3dd",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "1d8230d5fc383b6c19d5baf36e5cd0d2",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()"
        }
      },
      {
        "data": {
          "id": "48080ec242fe0861e62a8e8061e6c730",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "343732d6a6c4ea419ce332e13714a95f",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()"
        }
      },
      {
        "data": {
          "id": "efc8259415887c0ec06a3735e68aebca",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()"
        }
      },
      {
        "data": {
          "id": "31195306fbbfebafaffb9932aec027f1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()"
        }
      },
      {
        "data": {
          "id": "b750730c7fe20cbba2b3792c009fcf43",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()"
        }
      },
      {
        "data": {
          "id": "0eba58a3aff23546937b71cb7808f709",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "d3e5e18531f9f92fd63fe00084881a57",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "ad26bd44dd417844d8fbb6d5c403100c",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "c60de57fa9806f556f6db374f499b53d",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "0b19b11eaa65dbdf4ef97def4f020378",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()"
        }
      },
      {
        "data": {
          "id": "26fd25376a154d46750e70ad7f285e85",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "3131c807986c42df3d2f701b905083ba",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "81132ab0204519ba85161de56f30b31f",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "7cf931a7a5d689652fe186abce980dc1",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()"
        }
      },
      {
        "data": {
          "id": "6b1fe15771426bb8cded8f5344d04d88",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()"
        }
      },
      {
        "data": {
          "id": "ad28e162c0002fa03d7c8303fc92fa48",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "481f4c6bc731ecdb3fd30233471d0d58",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "98c78125327fe7246aa5555758b87f2c",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "1e7a790fd69ede050c5f49487bdee09d",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack()"
        }
      },
      {
        "data": {
          "id": "cfd39868a958f4e1a8e953563a89cb33",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "6df60bbed26a5132237368fe49157862",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()"
        }
      },
      {
        "data": {
          "id": "c4a2d4e1d417daa96e1ff717133861b1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()"
        }
      },
      {
        "data": {
          "id": "8523b42d73254c4efa1ba1bdd52f43b1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "50c526d47fdc69e553f73fea12728c6f",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "b64fa209b3e8c2fcb2bf86c4ba62a62a",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()"
        }
      },
      {
        "data": {
          "id": "9146cb3df99e03746dff2d4b9ce3f4d1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "a4544094fe94b287fe0e55f414b1e451",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)"
        }
      },
      {
        "data": {
          "id": "e7ef0fd3d6dc1e9721b9df20a3c56020",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()"
        }
      },
      {
        "data": {
          "id": "bdc2853a53589426000d9a3fe67485bd",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()"
        }
      },
      {
        "data": {
          "id": "17f228dc8b8a72f1784fc56795c278e3",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "74f574d770baacf4bb61992592b4b3d3",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()"
        }
      },
      {
        "data": {
          "id": "a648de22bbd895c5cba943a46a0f1cc8",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.undo()"
        }
      },
      {
        "data": {
          "id": "b85c8c12f6585b4aac73b6d6f64eede9",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "927a1683782763e555c82f403fd9709e",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "9f682adfbd3e556697898860746ab497",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "6318c831d28c77eb5fd1b7479715a7f0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()"
        }
      },
      {
        "data": {
          "id": "06cfcc29fc762fb7d40bff719f7816c0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "d2d60396acdcab5ffc3ac111ee05bf3e",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "d3f2e35097615eb1c969d5e11efd4eea",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()"
        }
      },
      {
        "data": {
          "id": "457dbd5165fe1128ec4108de83d6b206",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()"
        }
      },
      {
        "data": {
          "id": "9848a823a49543ed7b2206482af0ae2a",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)"
        }
      },
      {
        "data": {
          "id": "3e3ee1ab9827495056f76121d920ac4b",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "34add2ade9f7f04c560dd0e4ded7050b",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()"
        }
      },
      {
        "data": {
          "id": "3c7767515fd49560910e1f94d7ffccbb",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "c2b8a2eb082a4bc8d6f075182beb33e5",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()"
        }
      },
      {
        "data": {
          "id": "48bf2007697e9250c108f1b388767ace",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)"
        }
      },
      {
        "data": {
          "id": "87b0946b19eebc2612d25cb5b64f1f78",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.undo()"
        }
      },
      {
        "data": {
          "id": "48087eafa04d36ea83ee7a3c15ea4fb5",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()"
        }
      },
      {
        "data": {
          "id": "238b562e7b86e1efdbcc1962a0c35155",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()"
        }
      },
      {
        "data": {
          "id": "2a43f7e2b068d7f0b3bc4200b096599f",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()"
        }
      },
      {
        "data": {
          "id": "87601b44aca48567f7132f39bd23f48d",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()"
        }
      },
      {
        "data": {
          "id": "ac15ae827de64f598c23bd3c7fff97ff",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "f06f286cd5f9bf153650efa02c2ae69d",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()"
        }
      },
      {
        "data": {
          "id": "db6768f79b328424daad6c9a056aa454",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "08b094251c949c8e14269f714ce8e7ac",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()"
        }
      },
      {
        "data": {
          "id": "538414d91b3b19fdda979c7c2571a1c0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "4b85566d74169bd80cecaeaaa624e077",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()"
        }
      },
      {
        "data": {
          "id": "1716fbbbdae43a67b685af73e0e36e78",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()"
        }
      },
      {
        "data": {
          "id": "2df5957fe37e13fa55b025a69108b0d8",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()"
        }
      },
      {
        "data": {
          "id": "d80242833f4fa41bd751e6f364c6b134",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()"
        }
      },
      {
        "data": {
          "id": "8c167be2a61fb74a81998b8cfd02a13b",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()"
        }
      },
      {
        "data": {
          "id": "308f2152cad06fc43d581b387781dd86",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "7db37adcfccfe4fdc585fe2a85f51a7d",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "8779bde20226d9b76a6ae668705915b7",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "49e50ffbea464c1e76972837e3569f8f",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "058df10625a22a558029140cbd58c6d6",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()"
        }
      },
      {
        "data": {
          "id": "456020d1d01a6d9bbe8b5f973309deff",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()"
        }
      },
      {
        "data": {
          "id": "91c0d4d5a8d381aa13b882ca1009a1ea",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()"
        }
      },
      {
        "data": {
          "id": "a42bd42930acf2804afe9b5ca31123eb",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 3,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()"
        }
      },
      {
        "data": {
          "id": "eabee6273bdbd816881a5c06569d50e5",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "d2826f8590e848f777793e20dbeba9a5",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()"
        }
      },
      {
        "data": {
          "id": "3f4009fccede46949687eef9938e17aa",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()"
        }
      },
      {
        "data": {
          "id": "382ffc73efd02f2329fde090c0b23699",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "cd7d56cebe60ea55fbb54a84400d5613",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()"
        }
      },
      {
        "data": {
          "id": "ddd55f76067c5dac1c88605482315446",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "884487104b03e62cee9a409c42a51b86",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "d06649e97f001480a98917777dc590bd",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()"
        }
      },
      {
        "data": {
          "id": "7e6e37247866ca262ea0f0fbb4e13a4f",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()"
        }
      },
      {
        "data": {
          "id": "d7bab341dd390d0206baf2736586e13f",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "0ca5e19146033fbccb9a79f728402b5b",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()"
        }
      },
      {
        "data": {
          "id": "5fff7c19992fc6500ea54655a3d312ad",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()"
        }
      },
      {
        "data": {
          "id": "3b274dd058a01ee12118111b294eb63c",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()"
        }
      },
      {
        "data": {
          "id": "1b24e236b4770ecf7378f078b251dc0f",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()"
        }
      },
      {
        "data": {
          "id": "99972ff44e0fcf6f4c4967c82f7add7f",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()"
        }
      },
      {
        "data": {
          "id": "7fbbbe4778f768d936bc9e04347ee104",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)"
        }
      },
      {
        "data": {
          "id": "d3f3757dd5463bfef8f0e90c19b09da7",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()"
        }
      },
      {
        "data": {
          "id": "ac821f053c991a6be25cda461a3906e4",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "7b613e010297302ed1bcec8b0bc074cf",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "03e6b435e2876c59a00e6aaa35d1caf0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()"
        }
      },
      {
        "data": {
          "id": "5aeb4d9a8f8ac2b6e8cadc477f2e131c",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "c8ce0be64abf8f90dd72b8970b55a7cf",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()"
        }
      },
      {
        "data": {
          "id": "a7c9a3654107cb1ed8fb9b59c9cdf225",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "c0795fa233bd55bdbc0b7dcbc54781d6",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "65f282032f3a7c59614edab87ac7f90e",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "04201f3a077c1506e834b7881256007c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "4e7ec5ed1a3bfeb4d027eba9555a85ee",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "06e726eefa90cb4caed3c36522d1ba2d",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "a2190ff65a18c1adaaa50dede1deaeda",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()"
        }
      },
      {
        "data": {
          "id": "00382f880441065765910a117d9d99a5",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()"
        }
      },
      {
        "data": {
          "id": "6853eb43e7bceb2a208b1e1f408c235f",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()"
        }
      },
      {
        "data": {
          "id": "5516b2046907e037781327b86189834e",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "178c026b80fdaa86729c10f68f28caa0",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "2392dd102902b817e25f9287b3fdea0c",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "85ed2ed94b3ef6e1ea2a987002275e5d",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()"
        }
      },
      {
        "data": {
          "id": "9c63791b3fcc94ada3f23dbb5afa7da0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "f3b788897822be53f7cfdecf2c23622d",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "2a842949a0ef6866ae2273ecc47ce57e",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "b17ee04ecb00b28c27a9a88ca320672b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "8729e7aa4df0e97fce1efeff4aa4c7fe",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()"
        }
      },
      {
        "data": {
          "id": "4dca87d077fe4351128e997739ff5c73",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "0f76500649f8008e17bbfa3e1eb17d91",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()"
        }
      },
      {
        "data": {
          "id": "17bfb32775c1a5b073524c2b570c7b9c",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "d13bc3ae84f48a508cf3b86b9b534305",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "a34a66ced15328dbe90b8b4cf8de694d",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "837e3d16a012c2d9561d88bef2c4ffc7",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "d330aec07461eeac734ad32ddc7002c5",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "92c66fe44ea3df638b011ee3b363c331",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "241499a921346172baee72f2d0d5a724",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()"
        }
      },
      {
        "data": {
          "id": "5dcc7f0d1ce5e879abdaaad41021a6a6",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()"
        }
      },
      {
        "data": {
          "id": "9afe096c6df2cb3e8bb33651a29e974b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()"
        }
      },
      {
        "data": {
          "id": "8949b51d9046f939e5c3dc472cb6d6c9",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)"
        }
      },
      {
        "data": {
          "id": "05091a44da91b272d2c514e551d6a58b",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()"
        }
      },
      {
        "data": {
          "id": "0e038ba90c673fbdde9aff42bfe9e892",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "a0d32fea93d689c18b951071503a5bfa",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()"
        }
      },
      {
        "data": {
          "id": "87677750bac57d76779302abb5633023",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "cd13d3212d9938d4f7d89aefc98ffc6c",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()"
        }
      },
      {
        "data": {
          "id": "4f4ea6e23bc1fef7e06d7f5e81a09699",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "e49d595d45bf823fdbcec2c73d0fc249",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()"
        }
      },
      {
        "data": {
          "id": "9604a5eba1dac58f29c1aec2f5318a53",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()"
        }
      },
      {
        "data": {
          "id": "813b4072c8aae8e6ebe595eddd306e16",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "10bee742898fc7c00424fc096ab29468",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "c65d6e8f34c21201298b95d48de840fb",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "d87b5c8d66bb297f3dfbaa015ba6ed8c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()"
        }
      },
      {
        "data": {
          "id": "1f219853a0902bcaf9752de813f4bdfd",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)"
        }
      },
      {
        "data": {
          "id": "af2a6bd378881bb6a5fb84f54fbffa7a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()"
        }
      },
      {
        "data": {
          "id": "19b2cb52d78018ab927c86e2df2fd735",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "08fdc8629521184b39624fdf4c8a5116",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()"
        }
      },
      {
        "data": {
          "id": "76885165414ac4662ec304ccf95dc5c2",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()"
        }
      },
      {
        "data": {
          "id": "4feb79cb6cb1d80d61748a7157828135",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "03b4eef9f4f8ecf654580e2fa2c3f126",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()"
        }
      },
      {
        "data": {
          "id": "ae1e6a7d7265d939078885f5791ed423",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "5288211256be1997de83e680521506c6",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()"
        }
      },
      {
        "data": {
          "id": "9b3db08cccf5fff260bf31274e7af7d0",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()"
        }
      },
      {
        "data": {
          "id": "f27df4d10c94663c00e4706dba1a1782",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()"
        }
      },
      {
        "data": {
          "id": "aa14ac0f3c485ff274ea879b54d0851b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "5bee0de40025e3e9313eecbe17ba76b4",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()"
        }
      },
      {
        "data": {
          "id": "7363ebfe0b052f2c9453274edf1b1328",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.undo()"
        }
      },
      {
        "data": {
          "id": "12533cbb8c8b86561b26d65b17ea5991",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()"
        }
      },
      {
        "data": {
          "id": "633f7c281c1edc0f7ff3ba30ffdd27b6",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "bfb8b96a71b7681bb9734611364d2cf2",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()"
        }
      },
      {
        "data": {
          "id": "1ceff6396e1e1f9d00a30eca6bc3b21d",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()"
        }
      },
      {
        "data": {
          "id": "aa04d31e3bb8a8ea7c8f6b24be397794",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()"
        }
      },
      {
        "data": {
          "id": "e44fa065a105f052c0613b4f0ee5816d",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "867f8c788a094744ef40795dc48e98e9",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)"
        }
      },
      {
        "data": {
          "id": "818a1b684a30b243773cea22e89177f3",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "738879b402177eb0163e839bef4abb64",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "337aa55f94eda8319cfcf20e9bdd6009",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()"
        }
      },
      {
        "data": {
          "id": "25ac7ebb71a5417f099b5dd0e6ac5e2f",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "8105bfd3c8740007f85f6655c60a7f5a",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "f1a6e7f0740f0df19a4f09239a7a5ac9",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()"
        }
      },
      {
        "data": {
          "id": "b50cedce8ba03a8223aa2f15168632ca",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "3831e770af84459eb64301799f817576",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "4b4b395435ef71fa5a05573676bd02af",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()"
        }
      },
      {
        "data": {
          "id": "7fba3fb0657e11ac88662c67f6c3e821",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 3,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()"
        }
      },
      {
        "data": {
          "id": "3cf0494aa657fde273243b423937d650",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "7f5b3024783bae6eed508624e8cb0ad4",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()"
        }
      },
      {
        "data": {
          "id": "b2b96fc0744b9c85bcbf25587753dac5",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()"
        }
      },
      {
        "data": {
          "id": "ae6bc20c1302ac6c92eb870fd503132a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "2627d8b3eaaa0f2f8bd547bca8513b15",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()"
        }
      },
      {
        "data": {
          "id": "7ee0573507740b5f2f0185b0190a1f9f",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "bc009120c350993c6708795d0414612d",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()"
        }
      },
      {
        "data": {
          "id": "1919ca81a64d83d05b1a7afacd54112a",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()"
        }
      },
      {
        "data": {
          "id": "6bcd6d81d414c92a0ea45e2d650ca20c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)"
        }
      },
      {
        "data": {
          "id": "e7cef75c4a8cb2036d90ee2e07cbbeab",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "ebf435f24f4cf65eca252d5a864245d0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()"
        }
      },
      {
        "data": {
          "id": "1ea403022de1f18ebf6488ebf06223f8",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "ada1255a1b0cd53f0d6fadbd23b2c9b9",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()"
        }
      },
      {
        "data": {
          "id": "c7f7c702d5c30f1d97990c43bdac6c9e",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "fe0fb8f7484b4d9c1bd805609516dd78",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "bcb90087e60066277d936dd7adf16c98",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()"
        }
      },
      {
        "data": {
          "id": "c38fe6b94968973fb6414d92e4d79107",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "08e9a627362e9be063c6049989eaf73f",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)"
        }
      },
      {
        "data": {
          "id": "3c75e6903743da282d7f810a474c6930",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "7357d8e339d5390dc80aca7de64d6b9a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "a4030d48e4eb16f447cee561259906dc",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)"
        }
      },
      {
        "data": {
          "id": "79d60a9cafa714cf4ebb461c42641ea9",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)"
        }
      },
      {
        "data": {
          "id": "4b333144c4de3197ca600e1626dc2d81",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()"
        }
      },
      {
        "data": {
          "id": "e536e9e9c77e506d5447514a6ae6ba0f",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()"
        }
      },
      {
        "data": {
          "id": "9d08a643d3e0b5d08ea4d8362768ad2c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()"
        }
      },
      {
        "data": {
          "id": "4d4ee92ea163f55e2d53052d6689c4e4",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "4b41308c08284c7bf9e9fddc983d057f",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "868c7368d5103ea2fa53d4cc75fc32f9",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "4148af1384a2b6ad7d3565714571d813",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)"
        }
      },
      {
        "data": {
          "id": "9179b7b9fbeae38cae937dd4f80a88b1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "8905e69a82a49d10b31cb3fc41ae1fc8",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()"
        }
      },
      {
        "data": {
          "id": "82e27d9eb0ec450dc52621a925e30e92",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()"
        }
      },
      {
        "data": {
          "id": "9eed513fe9ed3195f7482df1cf11985b",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "f4128e4c2ccd0f6bc877b4dc97f728f5",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()"
        }
      },
      {
        "data": {
          "id": "7850a925027f74109a8a15a38a1e7fc7",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "a0f41a45abc0f566cfc65c4bddd3cff8",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "675835479f70b821a6bb4c4e385ebe7e",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)",
          "label": "invokes",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()"
        }
      },
      {
        "data": {
          "id": "9b972ae5826cfe8d74456eb5f7b4d2e8",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)"
        }
      },
      {
        "data": {
          "id": "e86477a823ab8a663f6c8a1251714c27",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "5cebb00fc46e898aa272c00b10f4a3dd",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations()",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()"
        }
      },
      {
        "data": {
          "id": "1cd0ea6e3d9fe0b9d9efd48de6f98a77",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()"
        }
      },
      {
        "data": {
          "id": "d4ed9caa708987c6b330700394249595",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)"
        }
      },
      {
        "data": {
          "id": "328a9ecfd08f26accc4b4b17cf0f2064",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "7278f3d85b90af648fc992a1be302ec5",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "invokes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "7a468d35daeefa118219bc08c6900fd9",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener"
        }
      },
      {
        "data": {
          "id": "a5f13ff203e34ac8a4f55296e8fe6897",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "52e34acc2a692161c5b869486f976689",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "f354491ed6bc9e3502fba4ffe7651ac2",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "72796b105eb20b798b43c5acd3c52460",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "59cdb6efb8e21058cbaa2fdaf2b31d13",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy"
        }
      },
      {
        "data": {
          "id": "79170aee4a006457225eb7963072939d",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener"
        }
      },
      {
        "data": {
          "id": "5c93d41303021aa161cc7004a7076307",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener"
        }
      },
      {
        "data": {
          "id": "48d7a8dcf1d22374e3b6a6094f099f21",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy"
        }
      },
      {
        "data": {
          "id": "c7f36cf076daecf0b373dcfffe5ba5b3",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "795473756194096bfd6e70ea578c04c8",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener"
        }
      },
      {
        "data": {
          "id": "649cdc53a1ce4fcf98b395292144e781",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView"
        }
      },
      {
        "data": {
          "id": "a7bec4b0db54f4de137695fec982e2dd",
          "source": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "label": "specializes",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "37067fcfbf8788a6d099797ddd8c9c02",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getSubStack(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "02b54a2d38fa1ad1e34359a9dd374e4c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.main(java.lang.String[])"
        }
      },
      {
        "data": {
          "id": "0f2cc6c40b113e27b19ce23ef99e95a3",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getNullMove()"
        }
      },
      {
        "data": {
          "id": "a2c1bd2c53214cb6431e863932cd801a",
          "source": "ca.mcgill.cs.stg.solitaire.model.OtherLocation",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.OtherLocation()"
        }
      },
      {
        "data": {
          "id": "5106c6f8d690ae3faabf7aca2ca35534",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "0cb9d74169b5efbd68e9fa37ddcd01aa",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()"
        }
      },
      {
        "data": {
          "id": "97a1227e6afe3707875b68145482106a",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekSuitStack(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "ba2fd43304e2aafdb7cdecb32bf48bc5",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "6e99dc9f5d580ddb55afd2a865508ce4",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.perform()"
        }
      },
      {
        "data": {
          "id": "a8647553d6794eb36b7b46edddd0b6c0",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscard(ca.mcgill.cs.stg.solitaire.model.GameModelView)"
        }
      },
      {
        "data": {
          "id": "f120cf2e4df48b3152489d66aeb24fd9",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDetectedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "878753d3ae2d02d49808cac3e905a071",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.clear()"
        }
      },
      {
        "data": {
          "id": "783555890d51096b82d3dde9205f79aa",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "28134892589884ea6d22275eda38655c",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit()"
        }
      },
      {
        "data": {
          "id": "c2458b0e4599455b19827286a713fb87",
          "source": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.isNull()"
        }
      },
      {
        "data": {
          "id": "9e09cdca426463ba3345b36f3a7ef258",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel(ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy)"
        }
      },
      {
        "data": {
          "id": "2eca0b770e4dc218e7714f4db27a8274",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLowestVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "01a1e9b78312ea38aed29547828ce0ba",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveWithinTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)"
        }
      },
      {
        "data": {
          "id": "34dc63402b289fc2cb818b1a0a2a7f18",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek(int)"
        }
      },
      {
        "data": {
          "id": "a80c46c851f42b0049e2bec15172d2fe",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDeckEmpty()"
        }
      },
      {
        "data": {
          "id": "185aae911348ae9d757153afc10ed2bf",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.reset()"
        }
      },
      {
        "data": {
          "id": "63159515186d09350b2daf7459c3e068",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages()"
        }
      },
      {
        "data": {
          "id": "b6abe12ca68eda55b1b7f7bfd1282578",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.<clinit>()"
        }
      },
      {
        "data": {
          "id": "655b834a9fda394a314981e73f06165d",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView(ca.mcgill.cs.stg.solitaire.model.GameModel)"
        }
      },
      {
        "data": {
          "id": "c9f63f28df2453365329619164944777",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.moveWithin(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "babf21c259012ee6a571c7d5f643772d",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)"
        }
      },
      {
        "data": {
          "id": "5e3d00b0f2bb0f71460a6bcda046d7c4",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getDiscardMove()"
        }
      },
      {
        "data": {
          "id": "687428359843590dfd3729eedcd9c8ce",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "e2d1d07f903e8e9cd821cfd3bab94fb5",
          "source": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.undo()"
        }
      },
      {
        "data": {
          "id": "a423c6e340826bbfb2931270e1dc96b1",
          "source": "ca.mcgill.cs.stg.solitaire.model.Move",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move.perform()"
        }
      },
      {
        "data": {
          "id": "cf16f0538ced2db40e9f550f24b8be96",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "879043adf73766c6872af5828ad4e92f",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)"
        }
      },
      {
        "data": {
          "id": "2e1eefc69ea6534d5d803d4ba078cc32",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.isEmpty()"
        }
      },
      {
        "data": {
          "id": "aad10036894dcc848568abe715006342",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "8d55fd4dc2b39edc3e93ff04831023c4",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.pop(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "607cb4d9ac4d5a73f97c8c64bd80c3ef",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.tryToAutoPlay()"
        }
      },
      {
        "data": {
          "id": "937b328c914b193e2a169d846cfd6dc1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "df3e549a50dea7aaf2e392d06a9d65e9",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isFoundationPileEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "99c7693c041fb6bbfb94d4be4af1e2d1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.handle(javafx.scene.input.MouseEvent)"
        }
      },
      {
        "data": {
          "id": "6f41ea946f6b37a2b2ce7c1b2233f9f5",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])"
        }
      },
      {
        "data": {
          "id": "098ee0535e76768650f82f95a2b0769d",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck()"
        }
      },
      {
        "data": {
          "id": "ac1acaa222a5b8b8d2f37a59738988eb",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.draw()"
        }
      },
      {
        "data": {
          "id": "5021f4ea622661f9ff845d7afbf94714",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.hideTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "05559027415182e94573825e26a11861",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "af79ce0fc7ebdcc6986c162b63d3aa2d",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Rank",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank()"
        }
      },
      {
        "data": {
          "id": "a1e1f53873438b897c0ffec54c8a4560",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.peekDiscardPile()"
        }
      },
      {
        "data": {
          "id": "e72040702d1c90321f9c7e120eac5823",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCode(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "991ed3b19a9119b63ef25e26aa2ad20e",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "efa93cbcc284eb1e4b49487315499de1",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.buildLayout()"
        }
      },
      {
        "data": {
          "id": "83215b25f63bafa46c74a5857e24751a",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau()"
        }
      },
      {
        "data": {
          "id": "66e0c8c18151d61d8161586cba411ab4",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isVisible(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "5099c60e4ecf9c1805f17f10e21c5607",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelListener",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener.gameStateChanged()"
        }
      },
      {
        "data": {
          "id": "4ac5fd0d52e5b2956f6cd040bf98f210",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations()"
        }
      },
      {
        "data": {
          "id": "9789b8afbf73de0f1b3509fbf155aced",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getBack()"
        }
      },
      {
        "data": {
          "id": "a8101ecf24aff1e10bebcbe2742972fc",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.serialize(ca.mcgill.cs.stg.solitaire.cards.CardStack)"
        }
      },
      {
        "data": {
          "id": "a2b08d378fe59f7f01b91c447edd3196",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getDiscardMove()"
        }
      },
      {
        "data": {
          "id": "b1d82d1fc5413df79c7219110102e588",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.getImage(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "de1402162ac0d2283d32521cf4d1fe75",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getScore()"
        }
      },
      {
        "data": {
          "id": "c83f9f2abd4bf7d1c041d07e5a2e29a4",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest()"
        }
      },
      {
        "data": {
          "id": "0fbe07485b1c5db54faf1ba53a7fece7",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.pop()"
        }
      },
      {
        "data": {
          "id": "7550cdfd9138f8cdfa54490048fb2696",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.isEmpty()"
        }
      },
      {
        "data": {
          "id": "d7e900e71afdc3d2a6df19e3993b1953",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()"
        }
      },
      {
        "data": {
          "id": "45415d94010c5c55033ec64200137179",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isLowestVisible(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "04667da3239dfdedf49e1fbb04103ba4",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "3dcd51f0c5783353123e844dd20910bd",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer(java.lang.String)"
        }
      },
      {
        "data": {
          "id": "25c47de3e29821dc8bcb04e8712aa60b",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getTableauPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "63ff77ab375d380ccf3aeeb74887514e",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getNullMove()"
        }
      },
      {
        "data": {
          "id": "63339add9d082fd7d0b8b2b69ce115e5",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.showTop(ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "db01e3d719558aa26a95a8091272533c",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.gameStateChanged()"
        }
      },
      {
        "data": {
          "id": "8729104c07462a47d6ec1698d35cce65",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "c3a028d5f59419f907960f74fd212991",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove.undo()"
        }
      },
      {
        "data": {
          "id": "750aa2f30a46f5bafd4759c4c5154b30",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)"
        }
      },
      {
        "data": {
          "id": "b5042695c32c09ba34ea110e3e27b5f1",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getSuit()"
        }
      },
      {
        "data": {
          "id": "12e310c8911ac8d344fe9e898b7ea21a",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.canMoveTo(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "d7862b9ea1785d04c3f14c37869f58ec",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "b3d0f0959a1d11b5064e3e930745fa1e",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "1d67a5d0758427702a97aa3091850e89",
          "source": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)"
        }
      },
      {
        "data": {
          "id": "6a3d1344e5dee6c002253e17fc012321",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.toString()"
        }
      },
      {
        "data": {
          "id": "a82ebf32e4a8fe569b4a28b22f0de900",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.peek(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "03cc6d0007393db389eb6d00d75bd1e5",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getRank()"
        }
      },
      {
        "data": {
          "id": "4e078489dc56006f6cf8feff0d5b0c58",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDiscardPileEmpty()"
        }
      },
      {
        "data": {
          "id": "9aeb15019528178a9d5578252c7de714",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.gameStateChanged()"
        }
      },
      {
        "data": {
          "id": "c8005dcf07781aaca48c9148e02f22fe",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView.gameStateChanged()"
        }
      },
      {
        "data": {
          "id": "a6d2bc35bf80b24cb74b237f3182d7e7",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver()"
        }
      },
      {
        "data": {
          "id": "85d02faa584aa900534cbd5a9fd6b210",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.push(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)"
        }
      },
      {
        "data": {
          "id": "20a6e62329ea08a217ceeafb65c6974e",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)"
        }
      },
      {
        "data": {
          "id": "b3a002fd27dacd1b37c4188593a00018",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isDiscardPileEmpty()"
        }
      },
      {
        "data": {
          "id": "f729cee6c9271f3ba5154430a97b9f3d",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.size()"
        }
      },
      {
        "data": {
          "id": "29d7794d959408906020c93aa6b6225b",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.undo()"
        }
      },
      {
        "data": {
          "id": "b688293919093ea8ffe3fe3670947452",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "12c26a0a83eef74cf42d05c775cbe3ce",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.getTotalSize()"
        }
      },
      {
        "data": {
          "id": "d186dba6aa8a49df42fe30ad1e6200a2",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Suit",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit.sameColorAs(ca.mcgill.cs.stg.solitaire.cards.Suit)"
        }
      },
      {
        "data": {
          "id": "1b63383ec34a9153afcdb9105dd100c3",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isDeckEmpty()"
        }
      },
      {
        "data": {
          "id": "85f040371736013d7e987a8c3bfb9d24",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyDiscardIfDiscardPileIsEmpty(ca.mcgill.cs.stg.solitaire.model.GameModelView)"
        }
      },
      {
        "data": {
          "id": "329de1bbcf68e9afd892b731908a2859",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack(java.lang.Iterable)"
        }
      },
      {
        "data": {
          "id": "9b57c58549e0bfbf67fef6e16e24400a",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy()"
        }
      },
      {
        "data": {
          "id": "e8da34d2301f0ac5c905ff3790a022d4",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.perform()"
        }
      },
      {
        "data": {
          "id": "96b96d9d821c2c9ec4e54c8069a5abe3",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)"
        }
      },
      {
        "data": {
          "id": "fe713cbdd690ed720a1473bc83230729",
          "source": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy()"
        }
      },
      {
        "data": {
          "id": "ceb28ad7bf0c57438e5d7a329343de61",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.push(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "de3912b295cac4c22b771827a8d21de6",
          "source": "ca.mcgill.cs.stg.solitaire.model.CompositeMove",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove(ca.mcgill.cs.stg.solitaire.model.Move[])"
        }
      },
      {
        "data": {
          "id": "84d3ad648fbdb879e31a3027c141b7ee",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveDiscardToTableau(ca.mcgill.cs.stg.solitaire.model.GameModelView)"
        }
      },
      {
        "data": {
          "id": "5cc6f1efb0be9fafdfe03295f91b3337",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.initialize(ca.mcgill.cs.stg.solitaire.cards.Deck)"
        }
      },
      {
        "data": {
          "id": "116fd8da7061854dfc07a03d8b53de0e",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.gameStateChanged()"
        }
      },
      {
        "data": {
          "id": "0cb61d87b4531242e44cfab333fffb08",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "f81869e947172b57290e07c155aed03a",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.contains(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "57ff03515b3bc56b3dc62830656c7ab7",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack()"
        }
      },
      {
        "data": {
          "id": "5c50f77a66fa2a068620894c9b499b44",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.size()"
        }
      },
      {
        "data": {
          "id": "4fb2fd49821450dba53c549d5f6c5a6a",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPreviousCard(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "03a340b0a6adce29992b96ac778f2c81",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "f7826a2b561567ca5461394de56d3721",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "8831f4dfa4460a05fa96a97007fd9331",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragExitedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "3b454eb10ee461be6dcf0d4182754729",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isCompleted()"
        }
      },
      {
        "data": {
          "id": "c9a9e9dca4080cdfbd3bf3582c6e8276",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.notifyListeners()"
        }
      },
      {
        "data": {
          "id": "d150c256340827c9e3406664bb0d41c9",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "76415d275136ad2944e015dbbfd83f64",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.getLegalMove(ca.mcgill.cs.stg.solitaire.model.GameModelView)"
        }
      },
      {
        "data": {
          "id": "d4cdcf870bfd35cf9f413143864d91dd",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isLegalMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "429ddeadebeb4ebc675d9f60adeb40fe",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.peekDiscardPile()"
        }
      },
      {
        "data": {
          "id": "dfd0f9a59d321d4a2f0e6c5285bdfe86",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.iterator()"
        }
      },
      {
        "data": {
          "id": "21a4d82fedf85ed4bfb8bc0bcee05bf2",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragExitedHandler()"
        }
      },
      {
        "data": {
          "id": "2e6323b8176b584ba4daa03837cd42e1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.undoLast()"
        }
      },
      {
        "data": {
          "id": "5f93e6c1364bf563fbd0c12cdcd4dcb4",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.move(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "7a145fbc6fa2040a5b67a9aa981ea167",
          "source": "ca.mcgill.cs.stg.solitaire.model.TableauPile",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile()"
        }
      },
      {
        "data": {
          "id": "b0c646e701002768cd56a7aecc9f6f07",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardImages",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages.getCard(java.lang.String)"
        }
      },
      {
        "data": {
          "id": "35bc0cf8721f4b59c5757d0697454ed9",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.isEmpty(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "08b9dc6918357287acaa5287cec2eae4",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModelView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView.isVisibleInTableau(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "51ff0002d19c8adaa7a73a78b473baaa",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)"
        }
      },
      {
        "data": {
          "id": "12dee6df307ca6d6d820961d65951345",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "82efc0a1f3098e8c7aff449c0cfa35be",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.find(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "5aa5bdd4df2f5069ee5e958e797d8be3",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.reset()"
        }
      },
      {
        "data": {
          "id": "ca7d545c9ba7c57f8920f4571470df58",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer.getTop()"
        }
      },
      {
        "data": {
          "id": "d61ee17a2cba279eb0504efbb86cda75",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "33e301185335a4d377b9f0ac6611a662",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove.undo()"
        }
      },
      {
        "data": {
          "id": "7214d8a76c632b95c7da93769588bba9",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "0b999f66a83557cd105207608812fadf",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.addListener(ca.mcgill.cs.stg.solitaire.model.GameModelListener)"
        }
      },
      {
        "data": {
          "id": "1fc0b77d8e8d50bc2e15ecfa5f085a17",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(ca.mcgill.cs.stg.solitaire.cards.Rank,ca.mcgill.cs.stg.solitaire.cards.Suit)"
        }
      },
      {
        "data": {
          "id": "19e483059fafed4897c430c68a718be8",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DeckView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView.createNewGameImage()"
        }
      },
      {
        "data": {
          "id": "6ac9b4e4a4df877e87cbbb41ecfc26df",
          "source": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy.substrategyMoveFromTableauToFoundation(ca.mcgill.cs.stg.solitaire.model.GameModelView)"
        }
      },
      {
        "data": {
          "id": "807825786ae13733943495e1efdf8467",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])"
        }
      },
      {
        "data": {
          "id": "696da1d67fb6b112a33295d1c4314284",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "ed649977b451a263810c5d20a8a1213d",
          "source": "ca.mcgill.cs.stg.solitaire.model.FoundationPile",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile()"
        }
      },
      {
        "data": {
          "id": "d2c0353fcd421930d6baa2353f66b93b",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()"
        }
      },
      {
        "data": {
          "id": "f49b955650060ffc8292e14b64215aa2",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire()"
        }
      },
      {
        "data": {
          "id": "ba83df2a1bfbe59287c143c375b3e0d0",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove.perform()"
        }
      },
      {
        "data": {
          "id": "244a5f893498827c3770903536f559b3",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.<init>1()"
        }
      },
      {
        "data": {
          "id": "1fb891a0cca918e3035885e4ba15e84f",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck.push(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "d8f03a14f1cd99d0ddf3622a52921df0",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.revealsTop(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "17228267be03c6b9174fb0df7a09ad14",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.canUndo()"
        }
      },
      {
        "data": {
          "id": "86ba5987016b968567abc2dbbb7d52b2",
          "source": "ca.mcgill.cs.stg.solitaire.cards.CardStack",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack.peek()"
        }
      },
      {
        "data": {
          "id": "6dd8c0704cd4d0dbdb7a04f74602af43",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)"
        }
      },
      {
        "data": {
          "id": "841962dcb7532a12503e4a0eaee233c6",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.playGame(ca.mcgill.cs.stg.solitaire.model.GameModel)"
        }
      },
      {
        "data": {
          "id": "b87b32bb9d7159db326a7b7b25c9855c",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.pop(ca.mcgill.cs.stg.solitaire.model.FoundationPile)"
        }
      },
      {
        "data": {
          "id": "372bc897adb930d25f8e40d94db19304",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()"
        }
      },
      {
        "data": {
          "id": "a894f43526c0c6c9d49bc0306fdbc855",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler(javafx.scene.image.ImageView)"
        }
      },
      {
        "data": {
          "id": "a4ba2e7f04263120e2772cdb3734d09f",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.get(java.lang.String)"
        }
      },
      {
        "data": {
          "id": "098dae0878fbb4aef4e0f6463c510eae",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler.setCard(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "63421b7a2564898e465ea56fe5e61a7e",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "9ce63fe37de236bd9574fb832fa388f4",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card.getIDString()"
        }
      },
      {
        "data": {
          "id": "9598d10917ab26fd6f32da7600c02084",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau.isBottomKing(ca.mcgill.cs.stg.solitaire.cards.Card)"
        }
      },
      {
        "data": {
          "id": "144d4cb812731af4ed9e7f51f72485a7",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "hasScript",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel.absorbCard(ca.mcgill.cs.stg.solitaire.model.Location)"
        }
      },
      {
        "data": {
          "id": "11dcb834199cdc14f28f7b91febad1b8",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy"
        }
      },
      {
        "data": {
          "id": "db502c91f30b2ef7fbcac2cdff69ef45",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView"
        }
      },
      {
        "data": {
          "id": "692df662858b94a1550330c1fd3e419d",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "instantiates",
          "properties": {
            "weight": 2,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove"
        }
      },
      {
        "data": {
          "id": "7204083c97c04f6242d1731f346ca2d5",
          "source": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView(ca.mcgill.cs.stg.solitaire.model.GameModel)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler"
        }
      },
      {
        "data": {
          "id": "b10d008f1eb63d7223d6d09816416962",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView"
        }
      },
      {
        "data": {
          "id": "1a84cc4f2bbab85983d501892a75ae07",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragDroppedHandler()",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer"
        }
      },
      {
        "data": {
          "id": "8c6c5424744204c0afcb4c433a987cb1",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove"
        }
      },
      {
        "data": {
          "id": "124723e5bd908a24ee523bdeec5db2a4",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getSequence(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "46f90f283bbff8037250c66b1ef63176",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragOverHandler(javafx.scene.image.ImageView)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer"
        }
      },
      {
        "data": {
          "id": "4cd495c549efac28acf990d8b6dddcff",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "3aa052e03af856abe8bb99dcd0daddda",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragEnteredHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer"
        }
      },
      {
        "data": {
          "id": "30adedff7d34afdce187c4603c510cfc",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel.getCardMove(ca.mcgill.cs.stg.solitaire.cards.Card,ca.mcgill.cs.stg.solitaire.model.Location)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove"
        }
      },
      {
        "data": {
          "id": "e16ba2e7d60a7825513ec0833653f402",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragDroppedHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer"
        }
      },
      {
        "data": {
          "id": "0251f54d0e62003ff32ab6e1e8014296",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "37ed231bab39ae2acbf74c8c889dce24",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView"
        }
      },
      {
        "data": {
          "id": "82cf20adccfd44413064bd43ab95ad71",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau.getPile(ca.mcgill.cs.stg.solitaire.model.TableauPile)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "30cae302884fbb26a072321e6f48a7e1",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Card.<init>1()",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "594276d1840a1c402f55e996a4373d69",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack(ca.mcgill.cs.stg.solitaire.model.GameModel,ca.mcgill.cs.stg.solitaire.model.FoundationPile)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler"
        }
      },
      {
        "data": {
          "id": "86ea1d34c2d39f37f76ce49eb78d60eb",
          "source": "ca.mcgill.cs.stg.solitaire.gui.Solitaire.start(javafx.stage.Stage)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack"
        }
      },
      {
        "data": {
          "id": "ccdb653eed92614ebbdb82b8814d91a3",
          "source": "ca.mcgill.cs.stg.solitaire.model.Tableau()",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "1d4394f9799fe94b51e537fd209ebe16",
          "source": "ca.mcgill.cs.stg.solitaire.gui.CardPileView.createDragOverHandler(javafx.scene.image.ImageView,ca.mcgill.cs.stg.solitaire.cards.Card)",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer"
        }
      },
      {
        "data": {
          "id": "134b66cf6e0cd2f3994af3722b20be49",
          "source": "ca.mcgill.cs.stg.solitaire.cards.Deck.shuffle()",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "00a779f8be8e6a64c99f22006e28271d",
          "source": "ca.mcgill.cs.stg.solitaire.ai.Driver.main(java.lang.String[])",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy"
        }
      },
      {
        "data": {
          "id": "6d698695588608ba849e4977d0589eae",
          "source": "ca.mcgill.cs.stg.solitaire.model.Foundations.initialize()",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "ca3636e5ca4009647074d0d1d4a44298",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "d1102230a6bc31e51c8f11b07ce150a4",
          "source": "ca.mcgill.cs.stg.solitaire.ai.CrashTest.main(java.lang.String[])",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy"
        }
      },
      {
        "data": {
          "id": "72783f315b8de7f18eb7011eefc815c9",
          "source": "ca.mcgill.cs.stg.solitaire.gui.SuitStack.createOnDragEnteredHandler()",
          "label": "instantiates",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer"
        }
      },
      {
        "data": {
          "id": "19916564b57eaa46e905c3b974b05365",
          "source": "ca.mcgill.cs",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg"
        }
      },
      {
        "data": {
          "id": "8ec1fa692774b48b5a853480a30aa5a2",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardTransfer"
        }
      },
      {
        "data": {
          "id": "458d784339156f5b246a525267760849",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Card"
        }
      },
      {
        "data": {
          "id": "ed263721e0ebfbdc950272d1db83fc3a",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.OtherLocation"
        }
      },
      {
        "data": {
          "id": "aa4998a09f4b5cd3037069b357a06d69",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardDragHandler"
        }
      },
      {
        "data": {
          "id": "cdc9c8b5d4d42ef90437dd0b56ca8786",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.CompositeMove"
        }
      },
      {
        "data": {
          "id": "db92ecef89b5d7a17d9c87f1962f7b2e",
          "source": "ca.mcgill.cs.stg.solitaire",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards"
        }
      },
      {
        "data": {
          "id": "c0f2d824bc5af87608c1fed7c58dcbb2",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.CrashTest"
        }
      },
      {
        "data": {
          "id": "c4069709311a0420733f618c29a8b6c6",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Rank"
        }
      },
      {
        "data": {
          "id": "051bc5564ca076c5e4e71aa506609ec6",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.NullPlayingStrategy"
        }
      },
      {
        "data": {
          "id": "c2811455b4141ecf90229254622060f4",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove"
        }
      },
      {
        "data": {
          "id": "80c556978a683a12a2a787e7c70da93d",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy"
        }
      },
      {
        "data": {
          "id": "aafb10d5fb0f5b592f05d56f0c4f4945",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardStack"
        }
      },
      {
        "data": {
          "id": "15f2c42da474f9cb496018aa1e117247",
          "source": "ca.mcgill",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs"
        }
      },
      {
        "data": {
          "id": "b62f7d592f5ee493e54a53e0bd09930a",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.CardPileView"
        }
      },
      {
        "data": {
          "id": "81e73e5458936936d7a5791564992488",
          "source": "ca.mcgill.cs.stg",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire"
        }
      },
      {
        "data": {
          "id": "2d1c4a24f113834020c6d1d5d3153e9c",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DeckView"
        }
      },
      {
        "data": {
          "id": "0ed79acbc13d95bb20948364b4acbcf0",
          "source": "ca.mcgill.cs.stg.solitaire",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui"
        }
      },
      {
        "data": {
          "id": "9956c16c4942a0a97df29dce7bca7cd2",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.CardImages"
        }
      },
      {
        "data": {
          "id": "653a6f5922f4c50c5f0bdc2b0db481ec",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.FoundationPile"
        }
      },
      {
        "data": {
          "id": "8b7a0b14e53b5bd5302835480e7fe033",
          "source": "ca.mcgill.cs.stg.solitaire",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model"
        }
      },
      {
        "data": {
          "id": "8ba9c2cd75bf18ee2fee8e13fbdfafb4",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Location"
        }
      },
      {
        "data": {
          "id": "ec909b4b8f42fbebbd1d2ca5e9a2e6b1",
          "source": "ca",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill"
        }
      },
      {
        "data": {
          "id": "2b058fc062d66d856808c23b9965c23b",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.TableauPile"
        }
      },
      {
        "data": {
          "id": "8fa896e7d1dc3031ecc2a55336b9cfea",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.SuitStack"
        }
      },
      {
        "data": {
          "id": "92848739b2a55256c9c017a5bca2a017",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Move"
        }
      },
      {
        "data": {
          "id": "43fe5b3b9068cb088debed7b039dd75d",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy"
        }
      },
      {
        "data": {
          "id": "454e5e0758f4dc2a524d9655ed2b9545",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.Solitaire"
        }
      },
      {
        "data": {
          "id": "500c47cf5eb299dc32532c8e6c80573c",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove"
        }
      },
      {
        "data": {
          "id": "f7e3927e63684d6a74c28ab52a9b4ba0",
          "source": "ca.mcgill.cs.stg.solitaire.ai",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai.Driver"
        }
      },
      {
        "data": {
          "id": "b41d52f12767ac2419afd4f657ce0953",
          "source": "ca.mcgill.cs.stg.solitaire.gui",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.gui.DiscardPileView"
        }
      },
      {
        "data": {
          "id": "95614e02928dff0cd071599fc89d2497",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel"
        }
      },
      {
        "data": {
          "id": "4eea724fd52be8b4fdcf03baa5a417dc",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelView"
        }
      },
      {
        "data": {
          "id": "483d8461ab70f3737f1fdc599d4dc5b2",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Foundations"
        }
      },
      {
        "data": {
          "id": "04e9183242661bba6ab3ad43f34cdfc0",
          "source": "ca.mcgill.cs.stg.solitaire",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.ai"
        }
      },
      {
        "data": {
          "id": "58feb61eaa39a5c70dbb50dff0e3ef76",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModelListener"
        }
      },
      {
        "data": {
          "id": "2862bb301627496bac98474a728d8f09",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Suit"
        }
      },
      {
        "data": {
          "id": "a6abf426b97e4e6dbd357893bd7d0f0d",
          "source": "ca.mcgill.cs.stg.solitaire.model",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.Tableau"
        }
      },
      {
        "data": {
          "id": "057457edd4b84dc6bc4a9ad0cbbcf11a",
          "source": "ca.mcgill.cs.stg.solitaire.cards",
          "label": "contains",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.cards.Deck"
        }
      },
      {
        "data": {
          "id": "50b6a83340dadc9cdb1468d7df783657",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "nests",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$RevealTopMove"
        }
      },
      {
        "data": {
          "id": "a6aa9ec9d2b0551a1f4595482dbd3c30",
          "source": "ca.mcgill.cs.stg.solitaire.model.GameModel",
          "label": "nests",
          "properties": {
            "weight": 1,
            "metaSrc": "source code"
          },
          "target": "ca.mcgill.cs.stg.solitaire.model.GameModel$CardMove"
        }
      }
    ]
  }
}